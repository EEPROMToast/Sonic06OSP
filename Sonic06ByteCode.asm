;
; Exported on Friday 28 April 2023, 20:29
;
; Name: Sonic the Hedgehog.exe
; Type: 64-bit x64 Portable Executable (PE)
; Size: 635.50 KB (650,752 bytes)
; Creation Time: Friday 28 April 2023, 16:25
; Accessed Time: Friday 28 April 2023, 16:25
; Modified Time: Friday 28 April 2023, 14:15
; File MD5: A75EFD98444790A5AC22A7CFBAC02E7B
; File SHA1: EA9D8E3608B0D4AA2CF868DC6DCC7A3B8ED08BCD
; File SHA256: 41DABB2D8D4E584AC8E9F345FE9A1DA1AFF5F04F5C39ADFB5689F4E54C1ACCF2
; Mitigation: Address Space Layout Randomization (ASLR)
; Mitigation: Data Execution Prevention (DEP)
; Mitigation: High Entropy ASLR
; PE Export Name: WindowsPlayer.exe
; Mitigation: Stack Cookies (GS)
; PE Product Version: 2019.2.21.10310285
; PE File Version: 2019.2.21.10310285
; Oldest Time Stamp: Tuesday 4 February 2020, 01:11
; Newest Time Stamp: Tuesday 4 February 2020, 01:11
; IMPHASH: FD60DDDC87379C239E8AC49516966C3E
; Duration: 4 seconds
; Statistics: 1,202 Data Blocks. 2,486 Code Blocks. 10,829 Instructions. 5,612 References. 319 Functions.
;
 .header:0x0000000000000000 data_0x0:
 .header:0x0000000000000000        dw 0x5A4D; e_magic
 .header:0x0000000000000002        dw 0x0090; e_cblp
 .header:0x0000000000000004        dw 0x0003; e_cp
 .header:0x0000000000000006        dw 0x0000; e_crlc
 .header:0x0000000000000008        dw 0x0004; e_cparhdr
 .header:0x000000000000000A        dw 0x0000; e_minalloc
 .header:0x000000000000000C        dw 0xFFFF; e_maxalloc
 .header:0x000000000000000E        dw 0x0000; e_ss
 .header:0x0000000000000010        dw 0x00B8; e_sp
 .header:0x0000000000000012        dw 0x0000; e_csum
 .header:0x0000000000000014        dw 0x0000; e_ip
 .header:0x0000000000000016        dw 0x0000; e_cs
 .header:0x0000000000000018        dw 0x0040; e_lfarlc
 .header:0x000000000000001A        dw 0x0000; e_ovno
 .header:0x000000000000001C        dw [ 0x0000, 0x0000, 0x0000, 0x0000 ]; e_res
 .header:0x0000000000000024        dw 0x0000; e_oemid
 .header:0x0000000000000026        dw 0x0000; e_oeminfo
 .header:0x0000000000000028        dw [ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, ; e_res2
 .header:0x0000000000000038             0x0000, 0x0000 ]
 .header:0x000000000000003C data_0x3C:
 .header:0x000000000000003C        dd file_ptr data_0x110; e_lfanew
 .header:0x0000000000000040        dq 0xCD09B4000EBA1F0E
 .header:0x0000000000000048        dd 0x4C01B821
 .header:0x000000000000004C        db 0xCD
 .header:0x000000000000004D        db "!This program cannot be run in DOS mode.\r\r\n$\x00"
 .header:0x000000000000007A        dq 0xA3F6000000000000
 .header:0x0000000000000082        dq 0xC2B22A1AC2B27974
 .header:0x000000000000008A        dq 0xA6DD2A1AC2B22A1A
 .header:0x0000000000000092        dq 0xA6DD2A1AC2B82B1E
 .header:0x000000000000009A        dq 0xA6DD2A1AC2B72B19
 .header:0x00000000000000A2        dq 0xA6DD2A1AC23F2B1F
 .header:0x00000000000000AA        dq 0xAAE02A1AC2B02B1B
 .header:0x00000000000000B2        dq 0xAAE02A1AC2942B1F
 .header:0x00000000000000BA        dq 0xAAE02A1AC2A22B1E
 .header:0x00000000000000C2        dq 0xAB362A1AC2BA2B19
 .header:0x00000000000000CA        dq 0xC2B22A1AC2B12B1B
 .header:0x00000000000000D2        dq 0xAB362A1AC2E02A1B
 .header:0x00000000000000DA        dq 0xAB362A1AC2B02B1F
 .header:0x00000000000000E2        dq 0xAB362A1AC2B32B1A
 .header:0x00000000000000EA        dq 0xAB362A1AC2B32AE5
 .header:0x00000000000000F2        dq 0x69522A1AC2B32B18
 .header:0x00000000000000FA        dq 0x00002A1AC2B26863
 .header:0x0000000000000102        dq 0x0000000000000000
 .header:0x000000000000010A        dd 0x00000000
 .header:0x000000000000010E        dw 0x0000
 .header:0x0000000000000110 data_0x110:
 .header:0x0000000000000110        dd 0x00004550; Signature
 .header:0x0000000000000114        dw 0x8664; Machine
 .header:0x0000000000000116        dw 0x0006; NumberOfSections
 .header:0x0000000000000118        dd 0x5E38C4C5; TimeDateStamp
 .header:0x000000000000011C        dd file_ptr data_0x0; PointerToSymbolTable
 .header:0x0000000000000120        dd 0x00000000; NumberOfSymbols
 .header:0x0000000000000124        dw 0x00F0; SizeOfOptionalHeader
 .header:0x0000000000000126        dw 0x0022; Characteristics
 .header:0x0000000000000128        dw 0x020B; Magic
 .header:0x000000000000012A        db 0x0E; MajorLinkerVersion
 .header:0x000000000000012B        db 0x10; MinorLinkerVersion
 .header:0x000000000000012C        dd 0x00009E00; SizeOfCode
 .header:0x0000000000000130        dd 0x00095E00; SizeOfInitializedData
 .header:0x0000000000000134        dd 0x00000000; SizeOfUninitializedData
 .header:0x0000000000000138        dd rva_ptr func_0x1260; EntryPoint; int32_t (__cdecl __rva_ptr)( void )
 .header:0x000000000000013C        dd 0x00001000; BaseOfCode
 .header:0x0000000000000140        dq va_ptr data_0x0; ImageBase
 .header:0x0000000000000148        dd 0x00001000; SectionAlignment
 .header:0x000000000000014C        dd 0x00000200; FileAlignment
 .header:0x0000000000000150        dw 0x0006; MajorOperatingSystemVersion
 .header:0x0000000000000152        dw 0x0000; MinorOperatingSystemVersion
 .header:0x0000000000000154        dw 0x0000; MajorImageVersion
 .header:0x0000000000000156        dw 0x0000; MinorImageVersion
 .header:0x0000000000000158        dw 0x0006; MajorSubsystemVersion
 .header:0x000000000000015A        dw 0x0000; MinorSubsystemVersion
 .header:0x000000000000015C        dd 0x00000000; Win32VersionValue
 .header:0x0000000000000160        dd 0x000A3000; SizeOfImage
 .header:0x0000000000000164        dd 0x00000400; SizeOfHeaders
 .header:0x0000000000000168        dd 0x00000000; CheckSum
 .header:0x000000000000016C        dw 0x0002; Subsystem
 .header:0x000000000000016E        dw 0x8160; DllCharacteristics
 .header:0x0000000000000170        dq 0x0000000000100000; SizeOfStackReserve
 .header:0x0000000000000178        dq 0x0000000000001000; SizeOfStackCommit
 .header:0x0000000000000180        dq 0x0000000000100000; SizeOfHeapReserve
 .header:0x0000000000000188        dq 0x0000000000001000; SizeOfHeapCommit
 .header:0x0000000000000190        dd 0x00000000; LoaderFlags
 .header:0x0000000000000194        dd 0x00000010; NumberOfRvaAndSizes
 .header:0x0000000000000198        dd rva_ptr data_0x13110; VirtualAddress
 .header:0x000000000000019C        dd 0x00000088; Size
 .header:0x00000000000001A0        dd rva_ptr data_0x13198; VirtualAddress
 .header:0x00000000000001A4        dd 0x0000003C; Size
 .header:0x00000000000001A8        dd 0x00017000; VirtualAddress
 .header:0x00000000000001AC        dd 0x0008A0E0; Size
 .header:0x00000000000001B0        dd 0x00016000; VirtualAddress
 .header:0x00000000000001B4        dd 0x00000C18; Size
 .header:0x00000000000001B8        dd file_ptr data_0x0; VirtualAddress
 .header:0x00000000000001BC        dd 0x00000000; Size
 .header:0x00000000000001C0        dd 0x000A2000; VirtualAddress
 .header:0x00000000000001C4        dd 0x00000614; Size
 .header:0x00000000000001C8        dd rva_ptr data_0x12270; VirtualAddress
 .header:0x00000000000001CC        dd 0x00000054; Size
 .header:0x00000000000001D0        dd rva_ptr data_0x0; VirtualAddress
 .header:0x00000000000001D4        dd 0x00000000; Size
 .header:0x00000000000001D8        dd rva_ptr data_0x0; VirtualAddress
 .header:0x00000000000001DC        dd 0x00000000; Size
 .header:0x00000000000001E0        dd rva_ptr data_0x0; VirtualAddress
 .header:0x00000000000001E4        dd 0x00000000; Size
 .header:0x00000000000001E8        dd rva_ptr data_0x122D0; VirtualAddress
 .header:0x00000000000001EC        dd 0x00000100; Size
 .header:0x00000000000001F0        dd rva_ptr data_0x0; VirtualAddress
 .header:0x00000000000001F4        dd 0x00000000; Size
 .header:0x00000000000001F8        dd rva_ptr GetModuleHandleExW; VirtualAddress
 .header:0x00000000000001FC        dd 0x00000220; Size
 .header:0x0000000000000200        dd rva_ptr data_0x0; VirtualAddress
 .header:0x0000000000000204        dd 0x00000000; Size
 .header:0x0000000000000208        dd rva_ptr data_0x0; VirtualAddress
 .header:0x000000000000020C        dd 0x00000000; Size
 .header:0x0000000000000210        dd rva_ptr data_0x0; VirtualAddress
 .header:0x0000000000000214        dd 0x00000000; Size
 .header:0x0000000000000218        db ".text\x00\x00\x00"; Name
 .header:0x0000000000000220        dd 0x00009D70; VirtualSize
 .header:0x0000000000000224        dd rva_ptr UnityMain_1; VirtualAddress; int32_t (__cdecl __rva_ptr)( int64_t p1, int32_t p2, int64_t p3, int32_t p4 )
 .header:0x0000000000000228        dd 0x00009E00; SizeOfRawData
 .header:0x000000000000022C        dd file_ptr UnityMain_1; PointerToRawData; int32_t (__cdecl __file_ptr)( int64_t p1, int32_t p2, int64_t p3, int32_t p4 )
 .header:0x0000000000000230        dd file_ptr data_0x0; PointerToRelocations
 .header:0x0000000000000234        dd file_ptr data_0x0; PointerToLinenumbers
 .header:0x0000000000000238        dw 0x0000; NumberOfRelocations
 .header:0x000000000000023A        dw 0x0000; NumberOfLinenumbers
 .header:0x000000000000023C        dd 0x60000020; Characteristics
 .header:0x0000000000000240        db ".rdata\x00\x00"; Name
 .header:0x0000000000000248        dd 0x000088DE; VirtualSize
 .header:0x000000000000024C        dd rva_ptr GetModuleHandleExW; VirtualAddress
 .header:0x0000000000000250        dd 0x00008A00; SizeOfRawData
 .header:0x0000000000000254        dd file_ptr GetModuleHandleExW; PointerToRawData
 .header:0x0000000000000258        dd file_ptr data_0x0; PointerToRelocations
 .header:0x000000000000025C        dd file_ptr data_0x0; PointerToLinenumbers
 .header:0x0000000000000260        dw 0x0000; NumberOfRelocations
 .header:0x0000000000000262        dw 0x0000; NumberOfLinenumbers
 .header:0x0000000000000264        dd 0x40000040; Characteristics
 .header:0x0000000000000268        db ".data\x00\x00\x00"; Name
 .header:0x0000000000000270        dd 0x00001BC8; VirtualSize
 .header:0x0000000000000274        dd rva_ptr NvOptimusEnablement; VirtualAddress
 .header:0x0000000000000278        dd 0x00000A00; SizeOfRawData
 .header:0x000000000000027C        dd file_ptr NvOptimusEnablement; PointerToRawData
 .header:0x0000000000000280        dd file_ptr data_0x0; PointerToRelocations
 .header:0x0000000000000284        dd file_ptr data_0x0; PointerToLinenumbers
 .header:0x0000000000000288        dw 0x0000; NumberOfRelocations
 .header:0x000000000000028A        dw 0x0000; NumberOfLinenumbers
 .header:0x000000000000028C        dd 0xC0000040; Characteristics
 .header:0x0000000000000290        db ".pdata\x00\x00"; Name
 .header:0x0000000000000298        dd 0x00000C18; VirtualSize
 .header:0x000000000000029C        dd 0x00016000; VirtualAddress
 .header:0x00000000000002A0        dd 0x00000E00; SizeOfRawData
 .header:0x00000000000002A4        dd 0x00013600; PointerToRawData
 .header:0x00000000000002A8        dd file_ptr data_0x0; PointerToRelocations
 .header:0x00000000000002AC        dd file_ptr data_0x0; PointerToLinenumbers
 .header:0x00000000000002B0        dw 0x0000; NumberOfRelocations
 .header:0x00000000000002B2        dw 0x0000; NumberOfLinenumbers
 .header:0x00000000000002B4        dd 0x40000040; Characteristics
 .header:0x00000000000002B8        db ".rsrc\x00\x00\x00"; Name
 .header:0x00000000000002C0        dd 0x0008A0E0; VirtualSize
 .header:0x00000000000002C4        dd 0x00017000; VirtualAddress
 .header:0x00000000000002C8        dd 0x0008A200; SizeOfRawData
 .header:0x00000000000002CC        dd 0x00014400; PointerToRawData
 .header:0x00000000000002D0        dd file_ptr data_0x0; PointerToRelocations
 .header:0x00000000000002D4        dd file_ptr data_0x0; PointerToLinenumbers
 .header:0x00000000000002D8        dw 0x0000; NumberOfRelocations
 .header:0x00000000000002DA        dw 0x0000; NumberOfLinenumbers
 .header:0x00000000000002DC        dd 0x40000040; Characteristics
 .header:0x00000000000002E0        db ".reloc\x00\x00"; Name
 .header:0x00000000000002E8        dd 0x00000614; VirtualSize
 .header:0x00000000000002EC        dd 0x000A2000; VirtualAddress
 .header:0x00000000000002F0        dd 0x00000800; SizeOfRawData
 .header:0x00000000000002F4        dd 0x0009E600; PointerToRawData
 .header:0x00000000000002F8        dd file_ptr data_0x0; PointerToRelocations
 .header:0x00000000000002FC        dd file_ptr data_0x0; PointerToLinenumbers
 .header:0x0000000000000300        dw 0x0000; NumberOfRelocations
 .header:0x0000000000000302        dw 0x0000; NumberOfLinenumbers
 .header:0x0000000000000304        dd 0x42000040; Characteristics
 .header:0x0000000000000308        dq 0x0000000000000000
 .header:0x0000000000000310        dq 0x0000000000000000
 .header:0x0000000000000318        dq 0x0000000000000000
 .header:0x0000000000000320        dq 0x0000000000000000
 .header:0x0000000000000328        dq 0x0000000000000000
 .header:0x0000000000000330        dq 0x0000000000000000
 .header:0x0000000000000338        dq 0x0000000000000000
 .header:0x0000000000000340        dq 0x0000000000000000
 .header:0x0000000000000348        dq 0x0000000000000000
 .header:0x0000000000000350        dq 0x0000000000000000
 .header:0x0000000000000358        dq 0x0000000000000000
 .header:0x0000000000000360        dq 0x0000000000000000
 .header:0x0000000000000368        dq 0x0000000000000000
 .header:0x0000000000000370        dq 0x0000000000000000
 .header:0x0000000000000378        dq 0x0000000000000000
 .header:0x0000000000000380        dq 0x0000000000000000
 .header:0x0000000000000388        dq 0x0000000000000000
 .header:0x0000000000000390        dq 0x0000000000000000
 .header:0x0000000000000398        dq 0x0000000000000000
 .header:0x00000000000003A0        dq 0x0000000000000000
 .header:0x00000000000003A8        dq 0x0000000000000000
 .header:0x00000000000003B0        dq 0x0000000000000000
 .header:0x00000000000003B8        dq 0x0000000000000000
 .header:0x00000000000003C0        dq 0x0000000000000000
 .header:0x00000000000003C8        dq 0x0000000000000000
 .header:0x00000000000003D0        dq 0x0000000000000000
 .header:0x00000000000003D8        dq 0x0000000000000000
 .header:0x00000000000003E0        dq 0x0000000000000000
 .header:0x00000000000003E8        dq 0x0000000000000000
 .header:0x00000000000003F0        dq 0x0000000000000000
 .header:0x00000000000003F8        dq 0x0000000000000000
 .header:0x0000000000000400 data_0x400:
 .header:0x0000000000000400        db 3072 dup(??)
   .text:0x0000000000001000 UnityMain_1:
   .text:0x0000000000001000        48FF2509A20000       jmp qword ptr [UnityMain]; int32_t (__cdecl *)( int64_t p1, int32_t p2, int64_t p3, int32_t p4 )
   .text:0x0000000000001007 code_0x1007:
   .text:0x0000000000001007        CC                   int3
   .text:0x0000000000001008 func_0x1008:
   .text:0x0000000000001008        4053                 push rbx
   .text:0x000000000000100A        4883EC20             sub rsp, 0x20
   .text:0x000000000000100E        B902000000           mov ecx, 0x2
   .text:0x0000000000001013        E8201B0000           call __set_stl_sync_api_mode; inline void __cdecl( int32_t p1 )
   .text:0x0000000000001018        E8C3050000           call _get_startup_file_mode; inline int32_t __cdecl( void )
   .text:0x000000000000101D        8BC8                 mov ecx, eax
   .text:0x000000000000101F        E858250000           call _set_fmode; int __cdecl( int _Mode )
   .text:0x0000000000001024        E8DF260000           call func_0x3708; inline int64_t __cdecl( void )
   .text:0x0000000000001029        488BD8               mov rbx, rax
   .text:0x000000000000102C        E8A3050000           call _get_startup_thread_locale_mode; inline int32_t __cdecl( void )
   .text:0x0000000000001031        B901000000           mov ecx, 0x1
   .text:0x0000000000001036        8903                 mov dword ptr [rbx], eax
   .text:0x0000000000001038        E8BF020000           call __scrt_initialize_onexit_tables; int8_t __cdecl( int32_t p1 )
   .text:0x000000000000103D        84C0                 test al, al
   .text:0x000000000000103F        7473                 jz code_0x10B4
   .text:0x0000000000001041 code_0x1041:
   .text:0x0000000000001041        E836080000           call _RTC_Initialize; void __cdecl( void )
   .text:0x0000000000001046        488D0D6B080000       lea rcx, [func_0x18B8]; void __cdecl( void )
   .text:0x000000000000104D        E8BE040000           call atexit; int __cdecl( void (__cdecl * p0)( void ) )
   .text:0x0000000000001052        E881050000           call std::codecvt_base::do_encoding; protected: virtual int __cdecl( void )
   .text:0x0000000000001057        8BC8                 mov ecx, eax
   .text:0x0000000000001059        E8661D0000           call _configure_wide_argv; int32_t __cdecl( int32_t p1 )
   .text:0x000000000000105E        85C0                 test eax, eax
   .text:0x0000000000001060        7552                 jnz code_0x10B4
   .text:0x0000000000001062 code_0x1062:
   .text:0x0000000000001062        E881050000           call func_0x15E8; void __cdecl( void )
   .text:0x0000000000001067        E8C0050000           call __scrt_is_user_matherr_present; inline int32_t __cdecl( void )
   .text:0x000000000000106C        85C0                 test eax, eax
   .text:0x000000000000106E        740C                 jz code_0x107C
   .text:0x0000000000001070 code_0x1070:
   .text:0x0000000000001070        488D0D5D050000       lea rcx, [_get_startup_thread_locale_mode]; inline int32_t __cdecl( void )
   .text:0x0000000000001077        E81C1B0000           call __setusermatherr; inline void __cdecl( int64_t p1 )
   .text:0x000000000000107C code_0x107C:
   .text:0x000000000000107C        E87B050000           call Concurrency::details::_ExceptionHolder::ReportUnhandledError; private: void __cdecl( void )
   .text:0x0000000000001081        E876050000           call Concurrency::details::_ExceptionHolder::ReportUnhandledError; private: void __cdecl( void )
   .text:0x0000000000001086        E849050000           call _get_startup_thread_locale_mode; inline int32_t __cdecl( void )
   .text:0x000000000000108B        8BC8                 mov ecx, eax
   .text:0x000000000000108D        E8D6250000           call _configthreadlocale; int __cdecl( int _Flag )
   .text:0x0000000000001092        E861050000           call std::codecvt<char,char,struct _Mbstatet>::do_always_noconv; protected: virtual bool __cdecl( void )
   .text:0x0000000000001097        84C0                 test al, al
   .text:0x0000000000001099        7405                 jz code_0x10A0
   .text:0x000000000000109B code_0x109B:
   .text:0x000000000000109B        E8D8200000           call common_initialize_environment_nolock<wchar_t>_1; int __cdecl( void )
   .text:0x00000000000010A0 code_0x10A0:
   .text:0x00000000000010A0        E82F050000           call _get_startup_thread_locale_mode; inline int32_t __cdecl( void )
   .text:0x00000000000010A5        E82E070000           call _get_startup_thread_locale_mode_1; int32_t __cdecl( void )
   .text:0x00000000000010AA        85C0                 test eax, eax
   .text:0x00000000000010AC        7506                 jnz code_0x10B4
   .text:0x00000000000010AE code_0x10AE:
   .text:0x00000000000010AE        4883C420             add rsp, 0x20
   .text:0x00000000000010B2        5B                   pop rbx
   .text:0x00000000000010B3        C3                   ret
   .text:0x00000000000010B4 code_0x10B4:
   .text:0x00000000000010B4        B907000000           mov ecx, 0x7
   .text:0x00000000000010B9        E892050000           call __scrt_fastfail; void __cdecl( int32_t p1 )
   .text:0x00000000000010BE        CC                   int3
   .text:0x00000000000010BF code_0x10BF:
   .text:0x00000000000010BF        CC                   int3
   .text:0x00000000000010C0 post_pgo_initialization:
   .text:0x00000000000010C0        4883EC28             sub rsp, 0x28
   .text:0x00000000000010C4        E847050000           call __scrt_initialize_default_local_stdio_options; void __cdecl( void )
   .text:0x00000000000010C9        33C0                 xor eax, eax
   .text:0x00000000000010CB        4883C428             add rsp, 0x28
   .text:0x00000000000010CF        C3                   ret
   .text:0x00000000000010D0 func_0x10D0:
   .text:0x00000000000010D0        4883EC28             sub rsp, 0x28
   .text:0x00000000000010D4        E85B070000           call func_0x1834; void __cdecl( void )
   .text:0x00000000000010D9        E8F6040000           call _get_startup_thread_locale_mode; inline int32_t __cdecl( void )
   .text:0x00000000000010DE        8BC8                 mov ecx, eax
   .text:0x00000000000010E0        4883C428             add rsp, 0x28
   .text:0x00000000000010E4        E9F3250000           jmp code_0x36DC
   .text:0x00000000000010E9 data_0x10E9:
   .text:0x00000000000010E9        db 3 dup(0xCC)
   .text:0x00000000000010EC code_0x10EC:
   .text:0x00000000000010EC        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x00000000000010F1        57                   push rdi
   .text:0x00000000000010F2        4883EC30             sub rsp, 0x30
   .text:0x00000000000010F6        B901000000           mov ecx, 0x1
   .text:0x00000000000010FB        E8B0010000           call __scrt_initialize_crt; int8_t __cdecl( int32_t p1 )
   .text:0x0000000000001100        84C0                 test al, al
   .text:0x0000000000001102        0F8430010000         jz code_0x1238
   .text:0x0000000000001108 code_0x1108:
   .text:0x0000000000001108        4032FF               xor dil, dil
   .text:0x000000000000110B        40887C2420           mov byte ptr [rsp+0x20], dil
   .text:0x0000000000001110 code_0x1110:
   .text:0x0000000000001110        E85F010000           call __scrt_acquire_startup_lock; int8_t __cdecl( void )
   .text:0x0000000000001115        8AD8                 mov bl, al
   .text:0x0000000000001117        8B0DDB370100         mov ecx, dword ptr [data_0x148F8]
   .text:0x000000000000111D        83F901               cmp ecx, 0x1
   .text:0x0000000000001120        0F841D010000         jz code_0x1243
   .text:0x0000000000001126 code_0x1126:
   .text:0x0000000000001126        85C9                 test ecx, ecx
   .text:0x0000000000001128        754A                 jnz code_0x1174
   .text:0x000000000000112A code_0x112A:
   .text:0x000000000000112A        C705C437010001000000 mov dword ptr [data_0x148F8], 0x1
   .text:0x0000000000001134        488D153DA10000       lea rdx, [data_0xB278]
   .text:0x000000000000113B        488D0D06A10000       lea rcx, [data_0xB248]
   .text:0x0000000000001142        E8F1200000           call _initterm_e; int32_t __cdecl( int64_t p1, int64_t p2 )
   .text:0x0000000000001147        85C0                 test eax, eax
   .text:0x0000000000001149        740A                 jz code_0x1155
   .text:0x000000000000114B code_0x114B:
   .text:0x000000000000114B        B8FF000000           mov eax, 0xFF
   .text:0x0000000000001150        E9D8000000           jmp code_0x122D
   .text:0x0000000000001155 code_0x1155:
   .text:0x0000000000001155        488D15E4A00000       lea rdx, [data_0xB240]
   .text:0x000000000000115C        488D0DCDA00000       lea rcx, [data_0xB230]
   .text:0x0000000000001163        E86C200000           call _initterm; void __cdecl( int64_t p1, int64_t p2 )
   .text:0x0000000000001168        C7058637010002000000 mov dword ptr [data_0x148F8], 0x2
   .text:0x0000000000001172        EB08                 jmp code_0x117C
   .text:0x0000000000001174 code_0x1174:
   .text:0x0000000000001174        40B701               mov dil, 0x1
   .text:0x0000000000001177        40887C2420           mov byte ptr [rsp+0x20], dil
   .text:0x000000000000117C code_0x117C:
   .text:0x000000000000117C        8ACB                 mov cl, bl
   .text:0x000000000000117E        E8ED020000           call __scrt_release_startup_lock; void __cdecl( int8_t p1 )
   .text:0x0000000000001183        E8B0040000           call func_0x1638; inline int64_t __cdecl( void )
   .text:0x0000000000001188        488BD8               mov rbx, rax
   .text:0x000000000000118B        48833800             cmp qword ptr [rax], 0x0
   .text:0x000000000000118F        741E                 jz code_0x11AF
   .text:0x0000000000001191 code_0x1191:
   .text:0x0000000000001191        488BC8               mov rcx, rax
   .text:0x0000000000001194        E83B020000           call func_0x13D4; int8_t __cdecl( int64_t p1 )
   .text:0x0000000000001199        84C0                 test al, al
   .text:0x000000000000119B        7412                 jz code_0x11AF
   .text:0x000000000000119D code_0x119D:
   .text:0x000000000000119D        4533C0               xor r8d, r8d
   .text:0x00000000000011A0        418D5002             lea edx, [r8+0x2]
   .text:0x00000000000011A4        33C9                 xor ecx, ecx
   .text:0x00000000000011A6        488B03               mov rax, qword ptr [rbx]
   .text:0x00000000000011A9        FF1579A00000         call qword ptr [GuardCFDispatchFunction]; void (__cdecl *)( int32_t p1, int32_t p2 )
   .text:0x00000000000011AF code_0x11AF:
   .text:0x00000000000011AF        E88C040000           call func_0x1640; inline int64_t __cdecl( void )
   .text:0x00000000000011B4        488BD8               mov rbx, rax
   .text:0x00000000000011B7        48833800             cmp qword ptr [rax], 0x0
   .text:0x00000000000011BB        7414                 jz code_0x11D1
   .text:0x00000000000011BD code_0x11BD:
   .text:0x00000000000011BD        488BC8               mov rcx, rax
   .text:0x00000000000011C0        E80F020000           call func_0x13D4; int8_t __cdecl( int64_t p1 )
   .text:0x00000000000011C5        84C0                 test al, al
   .text:0x00000000000011C7        7408                 jz code_0x11D1
   .text:0x00000000000011C9 code_0x11C9:
   .text:0x00000000000011C9        488B0B               mov rcx, qword ptr [rbx]
   .text:0x00000000000011CC        E85B230000           call _register_thread_local_exe_atexit_callback; void __cdecl( int64_t p1 )
   .text:0x00000000000011D1 code_0x11D1:
   .text:0x00000000000011D1        E8C6050000           call __scrt_get_show_window_mode; int16_t __cdecl( void )
   .text:0x00000000000011D6        0FB7D8               movzx ebx, ax
   .text:0x00000000000011D9        E8A21F0000           call common_wincmdln<wchar_t>; wchar_t * __cdecl( void )
   .text:0x00000000000011DE        4C8BC0               mov r8, rax
   .text:0x00000000000011E1        448BCB               mov r9d, ebx
   .text:0x00000000000011E4        33D2                 xor edx, edx
   .text:0x00000000000011E6        488D0D13EEFFFF       lea rcx, [data_0x0]
   .text:0x00000000000011ED        E80EFEFFFF           call UnityMain_1; int32_t __cdecl( int64_t p1, int32_t p2, int64_t p3, int32_t p4 )
   .text:0x00000000000011F2        8BD8                 mov ebx, eax
   .text:0x00000000000011F4        E8E7050000           call __scrt_is_managed_app; int8_t __cdecl( void )
   .text:0x00000000000011F9        84C0                 test al, al
   .text:0x00000000000011FB        7450                 jz code_0x124D
   .text:0x00000000000011FD code_0x11FD:
   .text:0x00000000000011FD        4084FF               test dil, dil
   .text:0x0000000000001200        7505                 jnz code_0x1207
   .text:0x0000000000001202 code_0x1202:
   .text:0x0000000000001202        E809230000           call func_0x3510; void __cdecl( void )
   .text:0x0000000000001207 code_0x1207:
   .text:0x0000000000001207        33D2                 xor edx, edx
   .text:0x0000000000001209        B101                 mov cl, 0x1
   .text:0x000000000000120B        E884020000           call __scrt_uninitialize_crt; int8_t __cdecl( int8_t p1, int8_t p2 )
   .text:0x0000000000001210        8BC3                 mov eax, ebx
   .text:0x0000000000001212        EB19                 jmp code_0x122D
   .text:0x0000000000001214 code_0x1214:
   .text:0x0000000000001214        8BD8                 mov ebx, eax
   .text:0x0000000000001216        E8C5050000           call __scrt_is_managed_app; int8_t __cdecl( void )
   .text:0x000000000000121B        84C0                 test al, al
   .text:0x000000000000121D        7436                 jz code_0x1255
   .text:0x000000000000121F code_0x121F:
   .text:0x000000000000121F        807C242000           cmp byte ptr [rsp+0x20], 0x0
   .text:0x0000000000001224        7505                 jnz code_0x122B
   .text:0x0000000000001226 code_0x1226:
   .text:0x0000000000001226        E8D5220000           call func_0x3500; void __cdecl( void )
   .text:0x000000000000122B code_0x122B:
   .text:0x000000000000122B        8BC3                 mov eax, ebx
   .text:0x000000000000122D code_0x122D:
   .text:0x000000000000122D        488B5C2440           mov rbx, qword ptr [rsp+0x40]
   .text:0x0000000000001232        4883C430             add rsp, 0x30
   .text:0x0000000000001236        5F                   pop rdi
   .text:0x0000000000001237        C3                   ret
   .text:0x0000000000001238 code_0x1238:
   .text:0x0000000000001238        B907000000           mov ecx, 0x7
   .text:0x000000000000123D        E80E040000           call __scrt_fastfail; void __cdecl( int32_t p1 )
   .text:0x0000000000001242        90                   nop
   .text:0x0000000000001243 code_0x1243:
   .text:0x0000000000001243        B907000000           mov ecx, 0x7
   .text:0x0000000000001248        E803040000           call __scrt_fastfail; void __cdecl( int32_t p1 )
   .text:0x000000000000124D code_0x124D:
   .text:0x000000000000124D        8BCB                 mov ecx, ebx
   .text:0x000000000000124F        E81C230000           call func_0x3570; void __cdecl( int32_t p1 )
   .text:0x0000000000001254        90                   nop
   .text:0x0000000000001255 code_0x1255:
   .text:0x0000000000001255        8BCB                 mov ecx, ebx
   .text:0x0000000000001257        E8C4220000           call func_0x3520; void __cdecl( int32_t p1 )
   .text:0x000000000000125C        90                   nop
   .text:0x000000000000125D        CC                   int3
   .text:0x000000000000125E data_0x125E:
   .text:0x000000000000125E        db 2 dup(0xCC)
   .text:0x0000000000001260 func_0x1260:
   .text:0x0000000000001260        4883EC28             sub rsp, 0x28
   .text:0x0000000000001264        E8BF020000           call __security_init_cookie; void __cdecl( void )
   .text:0x0000000000001269        4883C428             add rsp, 0x28
   .text:0x000000000000126D        E97AFEFFFF           jmp code_0x10EC
   .text:0x0000000000001272 data_0x1272:
   .text:0x0000000000001272        db 2 dup(0xCC)
   .text:0x0000000000001274 __scrt_acquire_startup_lock:
   .text:0x0000000000001274        4883EC28             sub rsp, 0x28
   .text:0x0000000000001278        E833080000           call __scrt_is_ucrt_dll_in_use; inline int32_t __cdecl( void )
   .text:0x000000000000127D        85C0                 test eax, eax
   .text:0x000000000000127F        7421                 jz code_0x12A2
   .text:0x0000000000001281 code_0x1281:
   .text:0x0000000000001281        65488B042530000000   mov rax, qword ptr gs:[0x30]
   .text:0x000000000000128A        488B4808             mov rcx, qword ptr [rax+0x8]
   .text:0x000000000000128E        EB05                 jmp code_0x1295
   .text:0x0000000000001290 code_0x1290:
   .text:0x0000000000001290        483BC8               cmp rcx, rax
   .text:0x0000000000001293        7414                 jz code_0x12A9
   .text:0x0000000000001295 code_0x1295:
   .text:0x0000000000001295        33C0                 xor eax, eax
   .text:0x0000000000001297        F0480FB10D60360100   lock cmpxchg qword ptr [data_0x14900], rcx
   .text:0x00000000000012A0        75EE                 jnz code_0x1290
   .text:0x00000000000012A2 code_0x12A2:
   .text:0x00000000000012A2        32C0                 xor al, al
   .text:0x00000000000012A4 code_0x12A4:
   .text:0x00000000000012A4        4883C428             add rsp, 0x28
   .text:0x00000000000012A8        C3                   ret
   .text:0x00000000000012A9 code_0x12A9:
   .text:0x00000000000012A9        B001                 mov al, 0x1
   .text:0x00000000000012AB        EBF7                 jmp code_0x12A4
   .text:0x00000000000012AD data_0x12AD:
   .text:0x00000000000012AD        db 3 dup(0xCC)
   .text:0x00000000000012B0 __scrt_initialize_crt:
   .text:0x00000000000012B0        4053                 push rbx
   .text:0x00000000000012B2        4883EC20             sub rsp, 0x20
   .text:0x00000000000012B6        0FB6054B360100       movzx eax, byte ptr [data_0x14908]
   .text:0x00000000000012BD        85C9                 test ecx, ecx
   .text:0x00000000000012BF        BB01000000           mov ebx, 0x1
   .text:0x00000000000012C4        0F44C3               cmove eax, ebx
   .text:0x00000000000012C7        88053B360100         mov byte ptr [data_0x14908], al
   .text:0x00000000000012CD        E822060000           call func_0x18F4; int32_t __cdecl( void )
   .text:0x00000000000012D2        E8FD090000           call __vcrt_initialize; int8_t __cdecl( int64_t p1 )
   .text:0x00000000000012D7        84C0                 test al, al
   .text:0x00000000000012D9        7504                 jnz code_0x12DF
   .text:0x00000000000012DB code_0x12DB:
   .text:0x00000000000012DB        32C0                 xor al, al
   .text:0x00000000000012DD        EB14                 jmp code_0x12F3
   .text:0x00000000000012DF code_0x12DF:
   .text:0x00000000000012DF        E8C8290000           call func_0x3CAC; int8_t __cdecl( void )
   .text:0x00000000000012E4        84C0                 test al, al
   .text:0x00000000000012E6        7509                 jnz code_0x12F1
   .text:0x00000000000012E8 code_0x12E8:
   .text:0x00000000000012E8        33C9                 xor ecx, ecx
   .text:0x00000000000012EA        E8190A0000           call __vcrt_uninitialize; int8_t __cdecl( int8_t p1 )
   .text:0x00000000000012EF        EBEA                 jmp code_0x12DB
   .text:0x00000000000012F1 code_0x12F1:
   .text:0x00000000000012F1        8AC3                 mov al, bl
   .text:0x00000000000012F3 code_0x12F3:
   .text:0x00000000000012F3        4883C420             add rsp, 0x20
   .text:0x00000000000012F7        5B                   pop rbx
   .text:0x00000000000012F8        C3                   ret
   .text:0x00000000000012F9 data_0x12F9:
   .text:0x00000000000012F9        db 3 dup(0xCC)
   .text:0x00000000000012FC __scrt_initialize_onexit_tables:
   .text:0x00000000000012FC        4053                 push rbx
   .text:0x00000000000012FE        4883EC40             sub rsp, 0x40
   .text:0x0000000000001302        803D0036010000       cmp byte ptr [data_0x14909], 0x0
   .text:0x0000000000001309        8BD9                 mov ebx, ecx
   .text:0x000000000000130B        0F85B0000000         jnz code_0x13C1
   .text:0x0000000000001311 code_0x1311:
   .text:0x0000000000001311        83F901               cmp ecx, 0x1
   .text:0x0000000000001314        0F87AF000000         ja code_0x13C9
   .text:0x000000000000131A code_0x131A:
   .text:0x000000000000131A        E891070000           call __scrt_is_ucrt_dll_in_use; inline int32_t __cdecl( void )
   .text:0x000000000000131F        85C0                 test eax, eax
   .text:0x0000000000001321        7428                 jz code_0x134B
   .text:0x0000000000001323 code_0x1323:
   .text:0x0000000000001323        85DB                 test ebx, ebx
   .text:0x0000000000001325        7524                 jnz code_0x134B
   .text:0x0000000000001327 code_0x1327:
   .text:0x0000000000001327        488D0DE2350100       lea rcx, [data_0x14910]
   .text:0x000000000000132E        E8B1270000           call _initialize_onexit_table; int32_t __cdecl( int64_t p1 )
   .text:0x0000000000001333        85C0                 test eax, eax
   .text:0x0000000000001335        7510                 jnz code_0x1347
   .text:0x0000000000001337 code_0x1337:
   .text:0x0000000000001337        488D0DEA350100       lea rcx, [data_0x14928]
   .text:0x000000000000133E        E8A1270000           call _initialize_onexit_table; int32_t __cdecl( int64_t p1 )
   .text:0x0000000000001343        85C0                 test eax, eax
   .text:0x0000000000001345        7473                 jz code_0x13BA
   .text:0x0000000000001347 code_0x1347:
   .text:0x0000000000001347        32C0                 xor al, al
   .text:0x0000000000001349        EB78                 jmp code_0x13C3
   .text:0x000000000000134B code_0x134B:
   .text:0x000000000000134B        488B15D62C0100       mov rdx, qword ptr [__security_cookie]
   .text:0x0000000000001352        B940000000           mov ecx, 0x40
   .text:0x0000000000001357        8BC2                 mov eax, edx
   .text:0x0000000000001359        83E03F               and eax, 0x3F
   .text:0x000000000000135C        2BC8                 sub ecx, eax
   .text:0x000000000000135E        4883C8FF             or rax, 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000001362        48D3C8               ror rax, cl
   .text:0x0000000000001365        4833C2               xor rax, rdx
   .text:0x0000000000001368        4889442420           mov qword ptr [rsp+0x20], rax
   .text:0x000000000000136D        4889442428           mov qword ptr [rsp+0x28], rax
   .text:0x0000000000001372        0F10442420           movups xmm0, xmmword ptr [rsp+0x20]
   .text:0x0000000000001377        4889442430           mov qword ptr [rsp+0x30], rax
   .text:0x000000000000137C        F20F104C2430         movsd xmm1, qword ptr [rsp+0x30]
   .text:0x0000000000001382        0F110587350100       movups xmmword ptr [data_0x14910], xmm0
   .text:0x0000000000001389        4889442420           mov qword ptr [rsp+0x20], rax
   .text:0x000000000000138E        4889442428           mov qword ptr [rsp+0x28], rax
   .text:0x0000000000001393        0F10442420           movups xmm0, xmmword ptr [rsp+0x20]
   .text:0x0000000000001398        4889442430           mov qword ptr [rsp+0x30], rax
   .text:0x000000000000139D        F20F110D7B350100     movsd qword ptr [data_0x14920], xmm1
   .text:0x00000000000013A5        F20F104C2430         movsd xmm1, qword ptr [rsp+0x30]
   .text:0x00000000000013AB        0F110576350100       movups xmmword ptr [data_0x14928], xmm0
   .text:0x00000000000013B2        F20F110D7E350100     movsd qword ptr [data_0x14938], xmm1
   .text:0x00000000000013BA code_0x13BA:
   .text:0x00000000000013BA        C6054835010001       mov byte ptr [data_0x14909], 0x1
   .text:0x00000000000013C1 code_0x13C1:
   .text:0x00000000000013C1        B001                 mov al, 0x1
   .text:0x00000000000013C3 code_0x13C3:
   .text:0x00000000000013C3        4883C440             add rsp, 0x40
   .text:0x00000000000013C7        5B                   pop rbx
   .text:0x00000000000013C8        C3                   ret
   .text:0x00000000000013C9 code_0x13C9:
   .text:0x00000000000013C9        B905000000           mov ecx, 0x5
   .text:0x00000000000013CE        E87D020000           call __scrt_fastfail; void __cdecl( int32_t p1 )
   .text:0x00000000000013D3        CC                   int3
   .text:0x00000000000013D4 func_0x13D4:
   .text:0x00000000000013D4        4883EC18             sub rsp, 0x18
   .text:0x00000000000013D8        4C8BC1               mov r8, rcx
   .text:0x00000000000013DB code_0x13DB:
   .text:0x00000000000013DB        B84D5A0000           mov eax, 0x5A4D
   .text:0x00000000000013E0        66390519ECFFFF       cmp word ptr [data_0x0], ax
   .text:0x00000000000013E7        7579                 jnz code_0x1462
   .text:0x00000000000013E9 code_0x13E9:
   .text:0x00000000000013E9        4863054CECFFFF       movsxd rax, dword ptr [data_0x3C]
   .text:0x00000000000013F0        488D1509ECFFFF       lea rdx, [data_0x0]
   .text:0x00000000000013F7        488D0C10             lea rcx, [rax+rdx]
   .text:0x00000000000013FB        813950450000         cmp dword ptr [rcx], 0x4550
   .text:0x0000000000001401        755F                 jnz code_0x1462
   .text:0x0000000000001403 code_0x1403:
   .text:0x0000000000001403        B80B020000           mov eax, 0x20B
   .text:0x0000000000001408        66394118             cmp word ptr [rcx+0x18], ax
   .text:0x000000000000140C        7554                 jnz code_0x1462
   .text:0x000000000000140E code_0x140E:
   .text:0x000000000000140E        4C2BC2               sub r8, rdx
   .text:0x0000000000001411        0FB74114             movzx eax, word ptr [rcx+0x14]
   .text:0x0000000000001415        488D5118             lea rdx, [rcx+0x18]
   .text:0x0000000000001419        4803D0               add rdx, rax
   .text:0x000000000000141C        0FB74106             movzx eax, word ptr [rcx+0x6]
   .text:0x0000000000001420        488D0C80             lea rcx, [rax+rax*4]
   .text:0x0000000000001424        4C8D0CCA             lea r9, [rdx+rcx*8]
   .text:0x0000000000001428 code_0x1428:
   .text:0x0000000000001428        48891424             mov qword ptr [rsp], rdx
   .text:0x000000000000142C        493BD1               cmp rdx, r9
   .text:0x000000000000142F        7418                 jz code_0x1449
   .text:0x0000000000001431 code_0x1431:
   .text:0x0000000000001431        8B4A0C               mov ecx, dword ptr [rdx+0xC]
   .text:0x0000000000001434        4C3BC1               cmp r8, rcx
   .text:0x0000000000001437        720A                 jb code_0x1443
   .text:0x0000000000001439 code_0x1439:
   .text:0x0000000000001439        8B4208               mov eax, dword ptr [rdx+0x8]
   .text:0x000000000000143C        03C1                 add eax, ecx
   .text:0x000000000000143E        4C3BC0               cmp r8, rax
   .text:0x0000000000001441        7208                 jb code_0x144B
   .text:0x0000000000001443 code_0x1443:
   .text:0x0000000000001443        4883C228             add rdx, 0x28
   .text:0x0000000000001447        EBDF                 jmp code_0x1428
   .text:0x0000000000001449 code_0x1449:
   .text:0x0000000000001449        33D2                 xor edx, edx
   .text:0x000000000000144B code_0x144B:
   .text:0x000000000000144B        4885D2               test rdx, rdx
   .text:0x000000000000144E        7504                 jnz code_0x1454
   .text:0x0000000000001450 code_0x1450:
   .text:0x0000000000001450        32C0                 xor al, al
   .text:0x0000000000001452        EB14                 jmp code_0x1468
   .text:0x0000000000001454 code_0x1454:
   .text:0x0000000000001454        837A2400             cmp dword ptr [rdx+0x24], 0x0
   .text:0x0000000000001458        7D04                 jge code_0x145E
   .text:0x000000000000145A code_0x145A:
   .text:0x000000000000145A        32C0                 xor al, al
   .text:0x000000000000145C        EB0A                 jmp code_0x1468
   .text:0x000000000000145E code_0x145E:
   .text:0x000000000000145E        B001                 mov al, 0x1
   .text:0x0000000000001460        EB06                 jmp code_0x1468
   .text:0x0000000000001462 code_0x1462:
   .text:0x0000000000001462        32C0                 xor al, al
   .text:0x0000000000001464        EB02                 jmp code_0x1468
   .text:0x0000000000001466 code_0x1466:
   .text:0x0000000000001466        32C0                 xor al, al
   .text:0x0000000000001468 code_0x1468:
   .text:0x0000000000001468        4883C418             add rsp, 0x18
   .text:0x000000000000146C        C3                   ret
   .text:0x000000000000146D data_0x146D:
   .text:0x000000000000146D        db 3 dup(0xCC)
   .text:0x0000000000001470 __scrt_release_startup_lock:
   .text:0x0000000000001470        4053                 push rbx
   .text:0x0000000000001472        4883EC20             sub rsp, 0x20
   .text:0x0000000000001476        8AD9                 mov bl, cl
   .text:0x0000000000001478        E833060000           call __scrt_is_ucrt_dll_in_use; inline int32_t __cdecl( void )
   .text:0x000000000000147D        33D2                 xor edx, edx
   .text:0x000000000000147F        85C0                 test eax, eax
   .text:0x0000000000001481        740B                 jz code_0x148E
   .text:0x0000000000001483 code_0x1483:
   .text:0x0000000000001483        84DB                 test bl, bl
   .text:0x0000000000001485        7507                 jnz code_0x148E
   .text:0x0000000000001487 code_0x1487:
   .text:0x0000000000001487        48871572340100       xchg qword ptr [data_0x14900], rdx
   .text:0x000000000000148E code_0x148E:
   .text:0x000000000000148E        4883C420             add rsp, 0x20
   .text:0x0000000000001492        5B                   pop rbx
   .text:0x0000000000001493        C3                   ret
   .text:0x0000000000001494 __scrt_uninitialize_crt:
   .text:0x0000000000001494        4053                 push rbx
   .text:0x0000000000001496        4883EC20             sub rsp, 0x20
   .text:0x000000000000149A        803D6734010000       cmp byte ptr [data_0x14908], 0x0
   .text:0x00000000000014A1        8AD9                 mov bl, cl
   .text:0x00000000000014A3        7404                 jz code_0x14A9
   .text:0x00000000000014A5 code_0x14A5:
   .text:0x00000000000014A5        84D2                 test dl, dl
   .text:0x00000000000014A7        750E                 jnz code_0x14B7
   .text:0x00000000000014A9 code_0x14A9:
   .text:0x00000000000014A9        8ACB                 mov cl, bl
   .text:0x00000000000014AB        E810280000           call func_0x3CC0; int8_t __cdecl( int8_t p1 )
   .text:0x00000000000014B0        8ACB                 mov cl, bl
   .text:0x00000000000014B2        E851080000           call __vcrt_uninitialize; int8_t __cdecl( int8_t p1 )
   .text:0x00000000000014B7 code_0x14B7:
   .text:0x00000000000014B7        B001                 mov al, 0x1
   .text:0x00000000000014B9        4883C420             add rsp, 0x20
   .text:0x00000000000014BD        5B                   pop rbx
   .text:0x00000000000014BE        C3                   ret
   .text:0x00000000000014BF code_0x14BF:
   .text:0x00000000000014BF        CC                   int3
   .text:0x00000000000014C0 _onexit:
   .text:0x00000000000014C0        4053                 push rbx
   .text:0x00000000000014C2        4883EC20             sub rsp, 0x20
   .text:0x00000000000014C6        488B155B2B0100       mov rdx, qword ptr [__security_cookie]
   .text:0x00000000000014CD        488BD9               mov rbx, rcx
   .text:0x00000000000014D0        8BCA                 mov ecx, edx
   .text:0x00000000000014D2        48331537340100       xor rdx, qword ptr [data_0x14910]
   .text:0x00000000000014D9        83E13F               and ecx, 0x3F
   .text:0x00000000000014DC        48D3CA               ror rdx, cl
   .text:0x00000000000014DF        4883FAFF             cmp rdx, 0xFFFFFFFFFFFFFFFF
   .text:0x00000000000014E3        750A                 jnz code_0x14EF
   .text:0x00000000000014E5 code_0x14E5:
   .text:0x00000000000014E5        488BCB               mov rcx, rbx
   .text:0x00000000000014E8        E8AB250000           call operator new; void * __cdecl( unsigned __int64 p1, class _HeapManager & p2, int p3 )
   .text:0x00000000000014ED        EB0F                 jmp code_0x14FE
   .text:0x00000000000014EF code_0x14EF:
   .text:0x00000000000014EF        488BD3               mov rdx, rbx
   .text:0x00000000000014F2        488D0D17340100       lea rcx, [data_0x14910]
   .text:0x00000000000014F9        E826260000           call func_0x3B24; void __cdecl( int64_t p1, int64_t p2 )
   .text:0x00000000000014FE code_0x14FE:
   .text:0x00000000000014FE        33C9                 xor ecx, ecx
   .text:0x0000000000001500        85C0                 test eax, eax
   .text:0x0000000000001502        480F44CB             cmove rcx, rbx
   .text:0x0000000000001506        488BC1               mov rax, rcx
   .text:0x0000000000001509        4883C420             add rsp, 0x20
   .text:0x000000000000150D        5B                   pop rbx
   .text:0x000000000000150E        C3                   ret
   .text:0x000000000000150F code_0x150F:
   .text:0x000000000000150F        CC                   int3
   .text:0x0000000000001510 atexit:
   .text:0x0000000000001510        4883EC28             sub rsp, 0x28
   .text:0x0000000000001514        E8A7FFFFFF           call _onexit; int (__cdecl *)( void ) __cdecl( int (__cdecl * _Func)( void ) )
   .text:0x0000000000001519        48F7D8               neg rax
   .text:0x000000000000151C        1BC0                 sbb eax, eax
   .text:0x000000000000151E        F7D8                 neg eax
   .text:0x0000000000001520        FFC8                 dec eax
   .text:0x0000000000001522        4883C428             add rsp, 0x28
   .text:0x0000000000001526        C3                   ret
   .text:0x0000000000001527 code_0x1527:
   .text:0x0000000000001527        CC                   int3
   .text:0x0000000000001528 __security_init_cookie:
   .text:0x0000000000001528        48895C2420           mov qword ptr [rsp+0x20], rbx
   .text:0x000000000000152D        55                   push rbp
   .text:0x000000000000152E        488BEC               mov rbp, rsp
   .text:0x0000000000001531        4883EC20             sub rsp, 0x20
   .text:0x0000000000001535        488B05EC2A0100       mov rax, qword ptr [__security_cookie]
   .text:0x000000000000153C        48BB32A2DF2D992B0000 mov rbx, 0x2B992DDFA232
   .text:0x0000000000001546        483BC3               cmp rax, rbx
   .text:0x0000000000001549        7574                 jnz code_0x15BF
   .text:0x000000000000154B code_0x154B:
   .text:0x000000000000154B        4883651800           and qword ptr [rbp+0x18], 0x0
   .text:0x0000000000001550        488D4D18             lea rcx, [rbp+0x18]
   .text:0x0000000000001554        FF15CE9A0000         call qword ptr [GetSystemTimeAsFileTime]; void (__cdecl *)( struct _FILETIME * lpSystemTimeAsFileTime )
   .text:0x000000000000155A        488B4518             mov rax, qword ptr [rbp+0x18]
   .text:0x000000000000155E        48894510             mov qword ptr [rbp+0x10], rax
   .text:0x0000000000001562        FF15B89A0000         call qword ptr [GetCurrentThreadId]; unsigned long (__cdecl *)( void )
   .text:0x0000000000001568        8BC0                 mov eax, eax
   .text:0x000000000000156A        48314510             xor qword ptr [rbp+0x10], rax
   .text:0x000000000000156E        FF15A49A0000         call qword ptr [GetCurrentProcessId]; unsigned long (__cdecl *)( void )
   .text:0x0000000000001574        8BC0                 mov eax, eax
   .text:0x0000000000001576        488D4D20             lea rcx, [rbp+0x20]
   .text:0x000000000000157A        48314510             xor qword ptr [rbp+0x10], rax
   .text:0x000000000000157E        FF158C9A0000         call qword ptr [QueryPerformanceCounter]; int (__cdecl *)( union _LARGE_INTEGER * lpPerformanceCount )
   .text:0x0000000000001584        8B4520               mov eax, dword ptr [rbp+0x20]
   .text:0x0000000000001587        488D4D10             lea rcx, [rbp+0x10]
   .text:0x000000000000158B        48C1E020             shl rax, 0x20
   .text:0x000000000000158F        48334520             xor rax, qword ptr [rbp+0x20]
   .text:0x0000000000001593        48334510             xor rax, qword ptr [rbp+0x10]
   .text:0x0000000000001597        4833C1               xor rax, rcx
   .text:0x000000000000159A        48B9FFFFFFFFFFFF0000 mov rcx, 0xFFFFFFFFFFFF
   .text:0x00000000000015A4        4823C1               and rax, rcx
   .text:0x00000000000015A7        48B933A2DF2D992B0000 mov rcx, 0x2B992DDFA233
   .text:0x00000000000015B1        483BC3               cmp rax, rbx
   .text:0x00000000000015B4        480F44C1             cmove rax, rcx
   .text:0x00000000000015B8        488905692A0100       mov qword ptr [__security_cookie], rax
   .text:0x00000000000015BF code_0x15BF:
   .text:0x00000000000015BF        488B5C2448           mov rbx, qword ptr [rsp+0x48]
   .text:0x00000000000015C4        48F7D0               not rax
   .text:0x00000000000015C7        488905522A0100       mov qword ptr [__security_cookie_complement], rax
   .text:0x00000000000015CE        4883C420             add rsp, 0x20
   .text:0x00000000000015D2        5D                   pop rbp
   .text:0x00000000000015D3        C3                   ret
   .text:0x00000000000015D4 _get_startup_thread_locale_mode:
   .text:0x00000000000015D4        33C0                 xor eax, eax
   .text:0x00000000000015D6        C3                   ret
   .text:0x00000000000015D7 code_0x15D7:
   .text:0x00000000000015D7        CC                   int3
   .text:0x00000000000015D8 std::codecvt_base::do_encoding:
   .text:0x00000000000015D8        B801000000           mov eax, 0x1
   .text:0x00000000000015DD        C3                   ret
   .text:0x00000000000015DE data_0x15DE:
   .text:0x00000000000015DE        db 2 dup(0xCC)
   .text:0x00000000000015E0 _get_startup_file_mode:
   .text:0x00000000000015E0        B800400000           mov eax, 0x4000
   .text:0x00000000000015E5        C3                   ret
   .text:0x00000000000015E6 data_0x15E6:
   .text:0x00000000000015E6        db 2 dup(0xCC)
   .text:0x00000000000015E8 func_0x15E8:
   .text:0x00000000000015E8        488D0D51330100       lea rcx, [data_0x14940]
   .text:0x00000000000015EF        48FF253A9A0000       jmp qword ptr [InitializeSListHead]; void (__cdecl *)( union _SLIST_HEADER * ListHead )
   .text:0x00000000000015F6 data_0x15F6:
   .text:0x00000000000015F6        db 2 dup(0xCC)
   .text:0x00000000000015F8 std::codecvt<char,char,struct _Mbstatet>::do_always_noconv:
   .text:0x00000000000015F8        B001                 mov al, 0x1
   .text:0x00000000000015FA        C3                   ret
   .text:0x00000000000015FB code_0x15FB:
   .text:0x00000000000015FB        CC                   int3
   .text:0x00000000000015FC Concurrency::details::_ExceptionHolder::ReportUnhandledError:
   .text:0x00000000000015FC        C20000               ret 0x0
   .text:0x00000000000015FF code_0x15FF:
   .text:0x00000000000015FF        CC                   int3
   .text:0x0000000000001600 func_0x1600:
   .text:0x0000000000001600        488D0549330100       lea rax, [data_0x14950]
   .text:0x0000000000001607        C3                   ret
   .text:0x0000000000001608 func_0x1608:
   .text:0x0000000000001608        488D0549330100       lea rax, [data_0x14958]
   .text:0x000000000000160F        C3                   ret
   .text:0x0000000000001610 __scrt_initialize_default_local_stdio_options:
   .text:0x0000000000001610        4883EC28             sub rsp, 0x28
   .text:0x0000000000001614        E8E7FFFFFF           call func_0x1600; inline int64_t __cdecl( void )
   .text:0x0000000000001619        48830804             or qword ptr [rax], 0x4
   .text:0x000000000000161D        E8E6FFFFFF           call func_0x1608; inline int64_t __cdecl( void )
   .text:0x0000000000001622        48830802             or qword ptr [rax], 0x2
   .text:0x0000000000001626        4883C428             add rsp, 0x28
   .text:0x000000000000162A        C3                   ret
   .text:0x000000000000162B code_0x162B:
   .text:0x000000000000162B        CC                   int3
   .text:0x000000000000162C __scrt_is_user_matherr_present:
   .text:0x000000000000162C        33C0                 xor eax, eax
   .text:0x000000000000162E        3905D8290100         cmp dword ptr [data_0x1400C], eax
   .text:0x0000000000001634        0F94C0               sete al
   .text:0x0000000000001637        C3                   ret
   .text:0x0000000000001638 func_0x1638:
   .text:0x0000000000001638        488D0581450100       lea rax, [data_0x15BC0]
   .text:0x000000000000163F        C3                   ret
   .text:0x0000000000001640 func_0x1640:
   .text:0x0000000000001640        488D0571450100       lea rax, [data_0x15BB8]
   .text:0x0000000000001647        C3                   ret
   .text:0x0000000000001648 __crt_debugger_hook:
   .text:0x0000000000001648        83251133010000       and dword ptr [data_0x14960], 0x0
   .text:0x000000000000164F        C3                   ret
   .text:0x0000000000001650 __scrt_fastfail:
   .text:0x0000000000001650        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000001655        55                   push rbp
   .text:0x0000000000001656        488DAC2440FBFFFF     lea rbp, [rsp-0x4C0]
   .text:0x000000000000165E        4881ECC0050000       sub rsp, 0x5C0
   .text:0x0000000000001665        8BD9                 mov ebx, ecx
   .text:0x0000000000001667        B917000000           mov ecx, 0x17
   .text:0x000000000000166C        E84F040000           call IsProcessorFeaturePresent_1; int __cdecl( unsigned long ProcessorFeature )
   .text:0x0000000000001671        85C0                 test eax, eax
   .text:0x0000000000001673        7404                 jz code_0x1679
   .text:0x0000000000001675 code_0x1675:
   .text:0x0000000000001675        8BCB                 mov ecx, ebx
   .text:0x0000000000001677        CD29                 int 0x29
   .text:0x0000000000001679 code_0x1679:
   .text:0x0000000000001679        B903000000           mov ecx, 0x3
   .text:0x000000000000167E        E8C5FFFFFF           call __crt_debugger_hook; inline void __cdecl( void )
   .text:0x0000000000001683        33D2                 xor edx, edx
   .text:0x0000000000001685        488D4DF0             lea rcx, [rbp-0x10]
   .text:0x0000000000001689        41B8D0040000         mov r8d, 0x4D0
   .text:0x000000000000168F        E8CC060000           call func_0x1D60; int64_t __cdecl( int64_t p1, int8_t p2, int64_t p3 )
   .text:0x0000000000001694        488D4DF0             lea rcx, [rbp-0x10]
   .text:0x0000000000001698        FF159A990000         call qword ptr [RtlCaptureContext]; void (__cdecl *)( struct _CONTEXT * ContextRecord )
   .text:0x000000000000169E        488B9DE8000000       mov rbx, qword ptr [rbp+0xE8]
   .text:0x00000000000016A5        488D95D8040000       lea rdx, [rbp+0x4D8]
   .text:0x00000000000016AC        488BCB               mov rcx, rbx
   .text:0x00000000000016AF        4533C0               xor r8d, r8d
   .text:0x00000000000016B2        FF1588990000         call qword ptr [RtlLookupFunctionEntry]; struct _IMAGE_RUNTIME_FUNCTION_ENTRY * (__cdecl *)( unsigned long long ControlPc, unsigned long long * ImageBase, struct _UNWIND_HISTORY_TABLE * HistoryTable )
   .text:0x00000000000016B8        4885C0               test rax, rax
   .text:0x00000000000016BB        743C                 jz code_0x16F9
   .text:0x00000000000016BD code_0x16BD:
   .text:0x00000000000016BD        488364243800         and qword ptr [rsp+0x38], 0x0
   .text:0x00000000000016C3        488D8DE0040000       lea rcx, [rbp+0x4E0]
   .text:0x00000000000016CA        488B95D8040000       mov rdx, qword ptr [rbp+0x4D8]
   .text:0x00000000000016D1        4C8BC8               mov r9, rax
   .text:0x00000000000016D4        48894C2430           mov qword ptr [rsp+0x30], rcx
   .text:0x00000000000016D9        4C8BC3               mov r8, rbx
   .text:0x00000000000016DC        488D8DE8040000       lea rcx, [rbp+0x4E8]
   .text:0x00000000000016E3        48894C2428           mov qword ptr [rsp+0x28], rcx
   .text:0x00000000000016E8        488D4DF0             lea rcx, [rbp-0x10]
   .text:0x00000000000016EC        48894C2420           mov qword ptr [rsp+0x20], rcx
   .text:0x00000000000016F1        33C9                 xor ecx, ecx
   .text:0x00000000000016F3        FF154F990000         call qword ptr [RtlVirtualUnwind]; enum _EXCEPTION_DISPOSITION (__cdecl *)( struct _EXCEPTION_RECORD * p1, void * p2, struct _CONTEXT * p3, void * p4 ) (__cdecl *)( unsigned long HandlerType, unsigned long long ImageBase, unsigned long long ControlPc, struct _IMAGE_RUNTIME_FUNCTION_ENTRY * FunctionEntry, struct _CONTEXT * ContextRecord, void ** HandlerData, unsigned long long * EstablisherFrame, struct _KNONVOLATILE_CONTEXT_POINTERS * ContextPointers )
   .text:0x00000000000016F9 code_0x16F9:
   .text:0x00000000000016F9        488B85C8040000       mov rax, qword ptr [rbp+0x4C8]
   .text:0x0000000000001700        488D4C2450           lea rcx, [rsp+0x50]
   .text:0x0000000000001705        488985E8000000       mov qword ptr [rbp+0xE8], rax
   .text:0x000000000000170C        33D2                 xor edx, edx
   .text:0x000000000000170E        488D85C8040000       lea rax, [rbp+0x4C8]
   .text:0x0000000000001715        41B898000000         mov r8d, 0x98
   .text:0x000000000000171B        4883C008             add rax, 0x8
   .text:0x000000000000171F        48898588000000       mov qword ptr [rbp+0x88], rax
   .text:0x0000000000001726        E835060000           call func_0x1D60; int64_t __cdecl( int64_t p1, int8_t p2, int64_t p3 )
   .text:0x000000000000172B        488B85C8040000       mov rax, qword ptr [rbp+0x4C8]
   .text:0x0000000000001732        4889442460           mov qword ptr [rsp+0x60], rax
   .text:0x0000000000001737        C744245015000040     mov dword ptr [rsp+0x50], 0x40000015
   .text:0x000000000000173F        C744245401000000     mov dword ptr [rsp+0x54], 0x1
   .text:0x0000000000001747        FF1503990000         call qword ptr [IsDebuggerPresent]; int (__cdecl *)( void )
   .text:0x000000000000174D        83F801               cmp eax, 0x1
   .text:0x0000000000001750        488D442450           lea rax, [rsp+0x50]
   .text:0x0000000000001755        4889442440           mov qword ptr [rsp+0x40], rax
   .text:0x000000000000175A        488D45F0             lea rax, [rbp-0x10]
   .text:0x000000000000175E        0F94C3               sete bl
   .text:0x0000000000001761        4889442448           mov qword ptr [rsp+0x48], rax
   .text:0x0000000000001766        33C9                 xor ecx, ecx
   .text:0x0000000000001768        FF15F2980000         call qword ptr [SetUnhandledExceptionFilter]; long (__cdecl *)( struct _EXCEPTION_POINTERS * p1 ) (__cdecl *)( long (__cdecl * lpTopLevelExceptionFilter)( struct _EXCEPTION_POINTERS * p1 ) )
   .text:0x000000000000176E        488D4C2440           lea rcx, [rsp+0x40]
   .text:0x0000000000001773        FF15DF980000         call qword ptr [UnhandledExceptionFilter]; long (__cdecl *)( struct _EXCEPTION_POINTERS * ExceptionInfo )
   .text:0x0000000000001779        85C0                 test eax, eax
   .text:0x000000000000177B        750C                 jnz code_0x1789
   .text:0x000000000000177D code_0x177D:
   .text:0x000000000000177D        84DB                 test bl, bl
   .text:0x000000000000177F        7508                 jnz code_0x1789
   .text:0x0000000000001781 code_0x1781:
   .text:0x0000000000001781        8D4803               lea ecx, [rax+0x3]
   .text:0x0000000000001784        E8BFFEFFFF           call __crt_debugger_hook; inline void __cdecl( void )
   .text:0x0000000000001789 code_0x1789:
   .text:0x0000000000001789        488B9C24D0050000     mov rbx, qword ptr [rsp+0x5D0]
   .text:0x0000000000001791        4881C4C0050000       add rsp, 0x5C0
   .text:0x0000000000001798        5D                   pop rbp
   .text:0x0000000000001799        C3                   ret
   .text:0x000000000000179A data_0x179A:
   .text:0x000000000000179A        db 2 dup(0xCC)
   .text:0x000000000000179C __scrt_get_show_window_mode:
   .text:0x000000000000179C        4881EC98000000       sub rsp, 0x98
   .text:0x00000000000017A3        33D2                 xor edx, edx
   .text:0x00000000000017A5        488D4C2420           lea rcx, [rsp+0x20]
   .text:0x00000000000017AA        448D4268             lea r8d, [rdx+0x68]
   .text:0x00000000000017AE        E8AD050000           call func_0x1D60; int64_t __cdecl( int64_t p1, int8_t p2, int64_t p3 )
   .text:0x00000000000017B3        488D4C2420           lea rcx, [rsp+0x20]
   .text:0x00000000000017B8        FF15AA980000         call qword ptr [GetStartupInfoW]; void (__cdecl *)( struct _STARTUPINFOW * lpStartupInfo )
   .text:0x00000000000017BE        F644245C01           test byte ptr [rsp+0x5C], 0x1
   .text:0x00000000000017C3        B80A000000           mov eax, 0xA
   .text:0x00000000000017C8        660F45442460         cmovne ax, word ptr [rsp+0x60]
   .text:0x00000000000017CE        4881C498000000       add rsp, 0x98
   .text:0x00000000000017D5        C3                   ret
   .text:0x00000000000017D6 data_0x17D6:
   .text:0x00000000000017D6        db 2 dup(0xCC)
   .text:0x00000000000017D8 _get_startup_thread_locale_mode_1:
   .text:0x00000000000017D8        E9F7FDFFFF           jmp _get_startup_thread_locale_mode; inline int32_t __cdecl( void )
   .text:0x00000000000017DD data_0x17DD:
   .text:0x00000000000017DD        db 3 dup(0xCC)
   .text:0x00000000000017E0 __scrt_is_managed_app:
   .text:0x00000000000017E0        4883EC28             sub rsp, 0x28
   .text:0x00000000000017E4        33C9                 xor ecx, ecx
   .text:0x00000000000017E6        FF158C980000         call qword ptr [GetModuleHandleW]; struct HINSTANCE__ * (__cdecl *)( unsigned short * lpModuleName )
   .text:0x00000000000017EC        4885C0               test rax, rax
   .text:0x00000000000017EF        743A                 jz code_0x182B
   .text:0x00000000000017F1 code_0x17F1:
   .text:0x00000000000017F1        B94D5A0000           mov ecx, 0x5A4D
   .text:0x00000000000017F6        663908               cmp word ptr [rax], cx
   .text:0x00000000000017F9        7530                 jnz code_0x182B
   .text:0x00000000000017FB code_0x17FB:
   .text:0x00000000000017FB        4863483C             movsxd rcx, dword ptr [rax+0x3C]
   .text:0x00000000000017FF        4803C8               add rcx, rax
   .text:0x0000000000001802        813950450000         cmp dword ptr [rcx], 0x4550
   .text:0x0000000000001808        7521                 jnz code_0x182B
   .text:0x000000000000180A code_0x180A:
   .text:0x000000000000180A        B80B020000           mov eax, 0x20B
   .text:0x000000000000180F        66394118             cmp word ptr [rcx+0x18], ax
   .text:0x0000000000001813        7516                 jnz code_0x182B
   .text:0x0000000000001815 code_0x1815:
   .text:0x0000000000001815        83B9840000000E       cmp dword ptr [rcx+0x84], 0xE
   .text:0x000000000000181C        760D                 jbe code_0x182B
   .text:0x000000000000181E code_0x181E:
   .text:0x000000000000181E        83B9F800000000       cmp dword ptr [rcx+0xF8], 0x0
   .text:0x0000000000001825        7404                 jz code_0x182B
   .text:0x0000000000001827 code_0x1827:
   .text:0x0000000000001827        B001                 mov al, 0x1
   .text:0x0000000000001829        EB02                 jmp code_0x182D
   .text:0x000000000000182B code_0x182B:
   .text:0x000000000000182B        32C0                 xor al, al
   .text:0x000000000000182D code_0x182D:
   .text:0x000000000000182D        4883C428             add rsp, 0x28
   .text:0x0000000000001831        C3                   ret
   .text:0x0000000000001832 data_0x1832:
   .text:0x0000000000001832        db 2 dup(0xCC)
   .text:0x0000000000001834 func_0x1834:
   .text:0x0000000000001834        488D0D09000000       lea rcx, [func_0x1844]; int32_t __cdecl( int64_t p1 )
   .text:0x000000000000183B        48FF251E980000       jmp qword ptr [SetUnhandledExceptionFilter]; long (__cdecl *)( struct _EXCEPTION_POINTERS * p1 ) (__cdecl *)( long (__cdecl * lpTopLevelExceptionFilter)( struct _EXCEPTION_POINTERS * p1 ) )
   .text:0x0000000000001842 data_0x1842:
   .text:0x0000000000001842        db 2 dup(0xCC)
   .text:0x0000000000001844 func_0x1844:
   .text:0x0000000000001844        4883EC28             sub rsp, 0x28
   .text:0x0000000000001848        488B01               mov rax, qword ptr [rcx]
   .text:0x000000000000184B        813863736DE0         cmp dword ptr [rax], 0xE06D7363
   .text:0x0000000000001851        751C                 jnz code_0x186F
   .text:0x0000000000001853 code_0x1853:
   .text:0x0000000000001853        83781804             cmp dword ptr [rax+0x18], 0x4
   .text:0x0000000000001857        7516                 jnz code_0x186F
   .text:0x0000000000001859 code_0x1859:
   .text:0x0000000000001859        8B4820               mov ecx, dword ptr [rax+0x20]
   .text:0x000000000000185C        8D81E0FA6CE6         lea eax, [rcx-0x19930520]
   .text:0x0000000000001862        83F802               cmp eax, 0x2
   .text:0x0000000000001865        760F                 jbe code_0x1876
   .text:0x0000000000001867 code_0x1867:
   .text:0x0000000000001867        81F900409901         cmp ecx, 0x1994000
   .text:0x000000000000186D        7407                 jz code_0x1876
   .text:0x000000000000186F code_0x186F:
   .text:0x000000000000186F        33C0                 xor eax, eax
   .text:0x0000000000001871        4883C428             add rsp, 0x28
   .text:0x0000000000001875        C3                   ret
   .text:0x0000000000001876 code_0x1876:
   .text:0x0000000000001876        E87D240000           call func_0x3CF8; int32_t __cdecl( void )
   .text:0x000000000000187B        CC                   int3
   .text:0x000000000000187C _RTC_Initialize:
   .text:0x000000000000187C        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000001881        57                   push rdi
   .text:0x0000000000001882        4883EC20             sub rsp, 0x20
   .text:0x0000000000001886        488D1D9B0E0100       lea rbx, [data_0x12728]
   .text:0x000000000000188D        488D3D940E0100       lea rdi, [data_0x12728]
   .text:0x0000000000001894        EB12                 jmp code_0x18A8
   .text:0x0000000000001896 code_0x1896:
   .text:0x0000000000001896        488B03               mov rax, qword ptr [rbx]
   .text:0x0000000000001899        4885C0               test rax, rax
   .text:0x000000000000189C        7406                 jz code_0x18A4
   .text:0x000000000000189E code_0x189E:
   .text:0x000000000000189E        FF1584990000         call qword ptr [GuardCFDispatchFunction]; void (__cdecl *)( void )
   .text:0x00000000000018A4 code_0x18A4:
   .text:0x00000000000018A4        4883C308             add rbx, 0x8
   .text:0x00000000000018A8 code_0x18A8:
   .text:0x00000000000018A8        483BDF               cmp rbx, rdi
   .text:0x00000000000018AB        72E9                 jb code_0x1896
   .text:0x00000000000018AD code_0x18AD:
   .text:0x00000000000018AD        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x00000000000018B2        4883C420             add rsp, 0x20
   .text:0x00000000000018B6        5F                   pop rdi
   .text:0x00000000000018B7        C3                   ret
   .text:0x00000000000018B8 func_0x18B8:
   .text:0x00000000000018B8        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x00000000000018BD        57                   push rdi
   .text:0x00000000000018BE        4883EC20             sub rsp, 0x20
   .text:0x00000000000018C2        488D1D6F0E0100       lea rbx, [data_0x12738]
   .text:0x00000000000018C9        488D3D680E0100       lea rdi, [data_0x12738]
   .text:0x00000000000018D0        EB12                 jmp code_0x18E4
   .text:0x00000000000018D2 code_0x18D2:
   .text:0x00000000000018D2        488B03               mov rax, qword ptr [rbx]
   .text:0x00000000000018D5        4885C0               test rax, rax
   .text:0x00000000000018D8        7406                 jz code_0x18E0
   .text:0x00000000000018DA code_0x18DA:
   .text:0x00000000000018DA        FF1548990000         call qword ptr [GuardCFDispatchFunction]; void (__cdecl *)( void )
   .text:0x00000000000018E0 code_0x18E0:
   .text:0x00000000000018E0        4883C308             add rbx, 0x8
   .text:0x00000000000018E4 code_0x18E4:
   .text:0x00000000000018E4        483BDF               cmp rbx, rdi
   .text:0x00000000000018E7        72E9                 jb code_0x18D2
   .text:0x00000000000018E9 code_0x18E9:
   .text:0x00000000000018E9        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x00000000000018EE        4883C420             add rsp, 0x20
   .text:0x00000000000018F2        5F                   pop rdi
   .text:0x00000000000018F3        C3                   ret
   .text:0x00000000000018F4 func_0x18F4:
   .text:0x00000000000018F4        48895C2410           mov qword ptr [rsp+0x10], rbx
   .text:0x00000000000018F9        48896C2418           mov qword ptr [rsp+0x18], rbp
   .text:0x00000000000018FE        56                   push rsi
   .text:0x00000000000018FF        57                   push rdi
   .text:0x0000000000001900        4156                 push r14
   .text:0x0000000000001902        4883EC10             sub rsp, 0x10
   .text:0x0000000000001906        33C9                 xor ecx, ecx
   .text:0x0000000000001908        C7050227010002000000 mov dword ptr [data_0x14014], 0x2
   .text:0x0000000000001912        33C0                 xor eax, eax
   .text:0x0000000000001914        C705F226010001000000 mov dword ptr [data_0x14010], 0x1
   .text:0x000000000000191E        0FA2                 cpuid
   .text:0x0000000000001920        448BD1               mov r10d, ecx
   .text:0x0000000000001923        448BCA               mov r9d, edx
   .text:0x0000000000001926        81F163414D44         xor ecx, 0x444D4163
   .text:0x000000000000192C        81F2656E7469         xor edx, 0x69746E65
   .text:0x0000000000001932        8BEB                 mov ebp, ebx
   .text:0x0000000000001934        4533DB               xor r11d, r11d
   .text:0x0000000000001937        81F541757468         xor ebp, 0x68747541
   .text:0x000000000000193D        448BC3               mov r8d, ebx
   .text:0x0000000000001940        0BEA                 or ebp, edx
   .text:0x0000000000001942        448BF0               mov r14d, eax
   .text:0x0000000000001945        0BE9                 or ebp, ecx
   .text:0x0000000000001947        4181F1696E6549       xor r9d, 0x49656E69
   .text:0x000000000000194E        4181F047656E75       xor r8d, 0x756E6547
   .text:0x0000000000001955        418D4301             lea eax, [r11+0x1]
   .text:0x0000000000001959        33C9                 xor ecx, ecx
   .text:0x000000000000195B        4181F26E74656C       xor r10d, 0x6C65746E
   .text:0x0000000000001962        0FA2                 cpuid
   .text:0x0000000000001964        450BC1               or r8d, r9d
   .text:0x0000000000001967        890424               mov dword ptr [rsp], eax
   .text:0x000000000000196A        450BC2               or r8d, r10d
   .text:0x000000000000196D        895C2404             mov dword ptr [rsp+0x4], ebx
   .text:0x0000000000001971        8BF1                 mov esi, ecx
   .text:0x0000000000001973        894C2408             mov dword ptr [rsp+0x8], ecx
   .text:0x0000000000001977        8BF8                 mov edi, eax
   .text:0x0000000000001979        8954240C             mov dword ptr [rsp+0xC], edx
   .text:0x000000000000197D        7550                 jnz code_0x19CF
   .text:0x000000000000197F code_0x197F:
   .text:0x000000000000197F        48830D91260100FF     or qword ptr [data_0x14018], 0xFFFFFFFFFFFFFFFF; "/ "
   .text:0x0000000000001987        25F03FFF0F           and eax, 0xFFF3FF0
   .text:0x000000000000198C        3DC0060100           cmp eax, 0x106C0
   .text:0x0000000000001991        7428                 jz code_0x19BB
   .text:0x0000000000001993 code_0x1993:
   .text:0x0000000000001993        3D60060200           cmp eax, 0x20660
   .text:0x0000000000001998        7421                 jz code_0x19BB
   .text:0x000000000000199A code_0x199A:
   .text:0x000000000000199A        3D70060200           cmp eax, 0x20670
   .text:0x000000000000199F        741A                 jz code_0x19BB
   .text:0x00000000000019A1 code_0x19A1:
   .text:0x00000000000019A1        05B0F9FCFF           add eax, 0xFFFCF9B0
   .text:0x00000000000019A6        83F820               cmp eax, 0x20
   .text:0x00000000000019A9        7724                 ja code_0x19CF
   .text:0x00000000000019AB code_0x19AB:
   .text:0x00000000000019AB        48B90100010001000000 mov rcx, 0x100010001
   .text:0x00000000000019B5        480FA3C1             bt rcx, rax
   .text:0x00000000000019B9        7314                 jae code_0x19CF
   .text:0x00000000000019BB code_0x19BB:
   .text:0x00000000000019BB        448B05A22F0100       mov r8d, dword ptr [data_0x14964]
   .text:0x00000000000019C2        4183C801             or r8d, 0x1
   .text:0x00000000000019C6        448905972F0100       mov dword ptr [data_0x14964], r8d
   .text:0x00000000000019CD        EB07                 jmp code_0x19D6
   .text:0x00000000000019CF code_0x19CF:
   .text:0x00000000000019CF        448B058E2F0100       mov r8d, dword ptr [data_0x14964]
   .text:0x00000000000019D6 code_0x19D6:
   .text:0x00000000000019D6        85ED                 test ebp, ebp
   .text:0x00000000000019D8        7519                 jnz code_0x19F3
   .text:0x00000000000019DA code_0x19DA:
   .text:0x00000000000019DA        81E7000FF00F         and edi, 0xFF00F00
   .text:0x00000000000019E0        81FF00116000         cmp edi, 0x601100
   .text:0x00000000000019E6        720B                 jb code_0x19F3
   .text:0x00000000000019E8 code_0x19E8:
   .text:0x00000000000019E8        4183C804             or r8d, 0x4
   .text:0x00000000000019EC        448905712F0100       mov dword ptr [data_0x14964], r8d
   .text:0x00000000000019F3 code_0x19F3:
   .text:0x00000000000019F3        B807000000           mov eax, 0x7
   .text:0x00000000000019F8        443BF0               cmp r14d, eax
   .text:0x00000000000019FB        7C27                 jl code_0x1A24
   .text:0x00000000000019FD code_0x19FD:
   .text:0x00000000000019FD        33C9                 xor ecx, ecx
   .text:0x00000000000019FF        0FA2                 cpuid
   .text:0x0000000000001A01        890424               mov dword ptr [rsp], eax
   .text:0x0000000000001A04        448BDB               mov r11d, ebx
   .text:0x0000000000001A07        895C2404             mov dword ptr [rsp+0x4], ebx
   .text:0x0000000000001A0B        894C2408             mov dword ptr [rsp+0x8], ecx
   .text:0x0000000000001A0F        8954240C             mov dword ptr [rsp+0xC], edx
   .text:0x0000000000001A13        0FBAE309             bt ebx, 0x9
   .text:0x0000000000001A17        730B                 jae code_0x1A24
   .text:0x0000000000001A19 code_0x1A19:
   .text:0x0000000000001A19        4183C802             or r8d, 0x2
   .text:0x0000000000001A1D        448905402F0100       mov dword ptr [data_0x14964], r8d
   .text:0x0000000000001A24 code_0x1A24:
   .text:0x0000000000001A24        0FBAE614             bt esi, 0x14
   .text:0x0000000000001A28        736E                 jae code_0x1A98
   .text:0x0000000000001A2A code_0x1A2A:
   .text:0x0000000000001A2A        C705DC25010002000000 mov dword ptr [data_0x14010], 0x2
   .text:0x0000000000001A34        C705D625010006000000 mov dword ptr [data_0x14014], 0x6
   .text:0x0000000000001A3E        0FBAE61B             bt esi, 0x1B
   .text:0x0000000000001A42        7354                 jae code_0x1A98
   .text:0x0000000000001A44 code_0x1A44:
   .text:0x0000000000001A44        0FBAE61C             bt esi, 0x1C
   .text:0x0000000000001A48        734E                 jae code_0x1A98
   .text:0x0000000000001A4A code_0x1A4A:
   .text:0x0000000000001A4A        33C9                 xor ecx, ecx
   .text:0x0000000000001A4C        0F01D0               xgetbv
   .text:0x0000000000001A4F        48C1E220             shl rdx, 0x20
   .text:0x0000000000001A53        480BD0               or rdx, rax
   .text:0x0000000000001A56        4889542430           mov qword ptr [rsp+0x30], rdx
   .text:0x0000000000001A5B        488B442430           mov rax, qword ptr [rsp+0x30]
   .text:0x0000000000001A60        2406                 and al, 0x6
   .text:0x0000000000001A62        3C06                 cmp al, 0x6
   .text:0x0000000000001A64        7532                 jnz code_0x1A98
   .text:0x0000000000001A66 code_0x1A66:
   .text:0x0000000000001A66        8B05A8250100         mov eax, dword ptr [data_0x14014]
   .text:0x0000000000001A6C        83C808               or eax, 0x8
   .text:0x0000000000001A6F        C7059725010003000000 mov dword ptr [data_0x14010], 0x3
   .text:0x0000000000001A79        890595250100         mov dword ptr [data_0x14014], eax
   .text:0x0000000000001A7F        41F6C320             test r11b, 0x20
   .text:0x0000000000001A83        7413                 jz code_0x1A98
   .text:0x0000000000001A85 code_0x1A85:
   .text:0x0000000000001A85        83C820               or eax, 0x20
   .text:0x0000000000001A88        C7057E25010005000000 mov dword ptr [data_0x14010], 0x5
   .text:0x0000000000001A92        89057C250100         mov dword ptr [data_0x14014], eax
   .text:0x0000000000001A98 code_0x1A98:
   .text:0x0000000000001A98        488B5C2438           mov rbx, qword ptr [rsp+0x38]
   .text:0x0000000000001A9D        33C0                 xor eax, eax
   .text:0x0000000000001A9F        488B6C2440           mov rbp, qword ptr [rsp+0x40]
   .text:0x0000000000001AA4        4883C410             add rsp, 0x10
   .text:0x0000000000001AA8        415E                 pop r14
   .text:0x0000000000001AAA        5F                   pop rdi
   .text:0x0000000000001AAB        5E                   pop rsi
   .text:0x0000000000001AAC        C3                   ret
   .text:0x0000000000001AAD data_0x1AAD:
   .text:0x0000000000001AAD        db 3 dup(0xCC)
   .text:0x0000000000001AB0 __scrt_is_ucrt_dll_in_use:
   .text:0x0000000000001AB0        33C0                 xor eax, eax
   .text:0x0000000000001AB2        3905F8400100         cmp dword ptr [data_0x15BB0], eax
   .text:0x0000000000001AB8        0F95C0               setne al
   .text:0x0000000000001ABB        C3                   ret
   .text:0x0000000000001ABC data_0x1ABC:
   .text:0x0000000000001ABC        db 4 dup(0xCC)
   .text:0x0000000000001AC0 IsProcessorFeaturePresent_1:
   .text:0x0000000000001AC0        FF25AA950000         jmp qword ptr [IsProcessorFeaturePresent]; int (__cdecl *)( unsigned long ProcessorFeature )
   .text:0x0000000000001AC6 data_0x1AC6:
   .text:0x0000000000001AC6        db 2 dup(0xCC)
   .text:0x0000000000001AC8 __C_specific_handler:
   .text:0x0000000000001AC8        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000001ACD        48896C2410           mov qword ptr [rsp+0x10], rbp
   .text:0x0000000000001AD2        4889742418           mov qword ptr [rsp+0x18], rsi
   .text:0x0000000000001AD7        57                   push rdi
   .text:0x0000000000001AD8        4154                 push r12
   .text:0x0000000000001ADA        4155                 push r13
   .text:0x0000000000001ADC        4156                 push r14
   .text:0x0000000000001ADE        4157                 push r15
   .text:0x0000000000001AE0        4883EC40             sub rsp, 0x40
   .text:0x0000000000001AE4        488BE9               mov rbp, rcx
   .text:0x0000000000001AE7        4D8BF9               mov r15, r9
   .text:0x0000000000001AEA        498BC8               mov rcx, r8
   .text:0x0000000000001AED        498BF8               mov rdi, r8
   .text:0x0000000000001AF0        4C8BEA               mov r13, rdx
   .text:0x0000000000001AF3        E83C040000           call __except_validate_context_record; void __cdecl( int64_t p1 )
   .text:0x0000000000001AF8        4D8B6708             mov r12, qword ptr [r15+0x8]
   .text:0x0000000000001AFC        4D8B37               mov r14, qword ptr [r15]
   .text:0x0000000000001AFF        498B5F38             mov rbx, qword ptr [r15+0x38]
   .text:0x0000000000001B03        4D2BF4               sub r14, r12
   .text:0x0000000000001B06        F6450466             test byte ptr [rbp+0x4], 0x66
   .text:0x0000000000001B0A        418B7748             mov esi, dword ptr [r15+0x48]
   .text:0x0000000000001B0E        0F85DC000000         jnz code_0x1BF0
   .text:0x0000000000001B14 code_0x1B14:
   .text:0x0000000000001B14        48896C2430           mov qword ptr [rsp+0x30], rbp
   .text:0x0000000000001B19        48897C2438           mov qword ptr [rsp+0x38], rdi
   .text:0x0000000000001B1E code_0x1B1E:
   .text:0x0000000000001B1E        3B33                 cmp esi, dword ptr [rbx]
   .text:0x0000000000001B20        0F838A010000         jae code_0x1CB0
   .text:0x0000000000001B26 code_0x1B26:
   .text:0x0000000000001B26        8BFE                 mov edi, esi
   .text:0x0000000000001B28        4803FF               add rdi, rdi
   .text:0x0000000000001B2B        8B44FB04             mov eax, dword ptr [rbx+rdi*8+0x4]
   .text:0x0000000000001B2F        4C3BF0               cmp r14, rax
   .text:0x0000000000001B32        0F82AA000000         jb code_0x1BE2
   .text:0x0000000000001B38 code_0x1B38:
   .text:0x0000000000001B38        8B44FB08             mov eax, dword ptr [rbx+rdi*8+0x8]
   .text:0x0000000000001B3C        4C3BF0               cmp r14, rax
   .text:0x0000000000001B3F        0F839D000000         jae code_0x1BE2
   .text:0x0000000000001B45 code_0x1B45:
   .text:0x0000000000001B45        837CFB1000           cmp dword ptr [rbx+rdi*8+0x10], 0x0
   .text:0x0000000000001B4A        0F8492000000         jz code_0x1BE2
   .text:0x0000000000001B50 code_0x1B50:
   .text:0x0000000000001B50        837CFB0C01           cmp dword ptr [rbx+rdi*8+0xC], 0x1
   .text:0x0000000000001B55        7417                 jz code_0x1B6E
   .text:0x0000000000001B57 code_0x1B57:
   .text:0x0000000000001B57        8B44FB0C             mov eax, dword ptr [rbx+rdi*8+0xC]
   .text:0x0000000000001B5B        488D4C2430           lea rcx, [rsp+0x30]
   .text:0x0000000000001B60        4903C4               add rax, r12
   .text:0x0000000000001B63        498BD5               mov rdx, r13
   .text:0x0000000000001B66        FFD0                 call rax; int32_t (__cdecl *)( int64_t p1, int64_t p2 )
   .text:0x0000000000001B68        85C0                 test eax, eax
   .text:0x0000000000001B6A        787D                 js code_0x1BE9
   .text:0x0000000000001B6C code_0x1B6C:
   .text:0x0000000000001B6C        7E74                 jle code_0x1BE2
   .text:0x0000000000001B6E code_0x1B6E:
   .text:0x0000000000001B6E        817D0063736DE0       cmp dword ptr [rbp+0x0], 0xE06D7363
   .text:0x0000000000001B75        7528                 jnz code_0x1B9F
   .text:0x0000000000001B77 code_0x1B77:
   .text:0x0000000000001B77        48833D4197000000     cmp qword ptr [data_0xB2C0], 0x0
   .text:0x0000000000001B7F        741E                 jz code_0x1B9F
   .text:0x0000000000001B81 code_0x1B81:
   .text:0x0000000000001B81        488D0D38970000       lea rcx, [data_0xB2C0]
   .text:0x0000000000001B88        E8B38B0000           call func_0xA740; int32_t __cdecl( int64_t p1 )
   .text:0x0000000000001B8D        85C0                 test eax, eax
   .text:0x0000000000001B8F        740E                 jz code_0x1B9F
   .text:0x0000000000001B91 code_0x1B91:
   .text:0x0000000000001B91        BA01000000           mov edx, 0x1
   .text:0x0000000000001B96        488BCD               mov rcx, rbp
   .text:0x0000000000001B99        FF1521970000         call qword ptr [data_0xB2C0]; void (__cdecl *)( int64_t p1, int32_t p2 ); 1 indirect reference.
   .text:0x0000000000001B9F code_0x1B9F:
   .text:0x0000000000001B9F        8B4CFB10             mov ecx, dword ptr [rbx+rdi*8+0x10]
   .text:0x0000000000001BA3        41B801000000         mov r8d, 0x1
   .text:0x0000000000001BA9        4903CC               add rcx, r12
   .text:0x0000000000001BAC        498BD5               mov rdx, r13
   .text:0x0000000000001BAF        E84C030000           call _NLG_Notify; inline void __cdecl( int64_t p1, int64_t p2, int32_t p3 )
   .text:0x0000000000001BB4        498B4740             mov rax, qword ptr [r15+0x40]
   .text:0x0000000000001BB8        4C8BC5               mov r8, rbp
   .text:0x0000000000001BBB        8B54FB10             mov edx, dword ptr [rbx+rdi*8+0x10]
   .text:0x0000000000001BBF        498BCD               mov rcx, r13
   .text:0x0000000000001BC2        448B4D00             mov r9d, dword ptr [rbp+0x0]
   .text:0x0000000000001BC6        4903D4               add rdx, r12
   .text:0x0000000000001BC9        4889442428           mov qword ptr [rsp+0x28], rax
   .text:0x0000000000001BCE        498B4728             mov rax, qword ptr [r15+0x28]
   .text:0x0000000000001BD2        4889442420           mov qword ptr [rsp+0x20], rax
   .text:0x0000000000001BD7        FF15AB940000         call qword ptr [RtlUnwindEx]; void (__cdecl *)( void * TargetFrame, void * TargetIp, struct _EXCEPTION_RECORD * ExceptionRecord, void * ReturnValue, struct _CONTEXT * ContextRecord, struct _UNWIND_HISTORY_TABLE * HistoryTable )
   .text:0x0000000000001BDD        E84E030000           call __NLG_Return2; inline int64_t __cdecl( void )
   .text:0x0000000000001BE2 code_0x1BE2:
   .text:0x0000000000001BE2        FFC6                 inc esi
   .text:0x0000000000001BE4        E935FFFFFF           jmp code_0x1B1E
   .text:0x0000000000001BE9 code_0x1BE9:
   .text:0x0000000000001BE9        33C0                 xor eax, eax
   .text:0x0000000000001BEB        E9C5000000           jmp code_0x1CB5
   .text:0x0000000000001BF0 code_0x1BF0:
   .text:0x0000000000001BF0        498B7F20             mov rdi, qword ptr [r15+0x20]
   .text:0x0000000000001BF4        448B0B               mov r9d, dword ptr [rbx]
   .text:0x0000000000001BF7        492BFC               sub rdi, r12
   .text:0x0000000000001BFA        413BF1               cmp esi, r9d
   .text:0x0000000000001BFD        0F83AD000000         jae code_0x1CB0
   .text:0x0000000000001C03 code_0x1C03:
   .text:0x0000000000001C03        458BC1               mov r8d, r9d
   .text:0x0000000000001C06 code_0x1C06:
   .text:0x0000000000001C06        8BD6                 mov edx, esi
   .text:0x0000000000001C08        418BC8               mov ecx, r8d
   .text:0x0000000000001C0B        4803D2               add rdx, rdx
   .text:0x0000000000001C0E        8B44D304             mov eax, dword ptr [rbx+rdx*8+0x4]
   .text:0x0000000000001C12        4C3BF0               cmp r14, rax
   .text:0x0000000000001C15        0F8288000000         jb code_0x1CA3
   .text:0x0000000000001C1B code_0x1C1B:
   .text:0x0000000000001C1B        8B44D308             mov eax, dword ptr [rbx+rdx*8+0x8]
   .text:0x0000000000001C1F        4C3BF0               cmp r14, rax
   .text:0x0000000000001C22        737F                 jae code_0x1CA3
   .text:0x0000000000001C24 code_0x1C24:
   .text:0x0000000000001C24        448B5D04             mov r11d, dword ptr [rbp+0x4]
   .text:0x0000000000001C28        4183E320             and r11d, 0x20
   .text:0x0000000000001C2C        7444                 jz code_0x1C72
   .text:0x0000000000001C2E code_0x1C2E:
   .text:0x0000000000001C2E        4533D2               xor r10d, r10d
   .text:0x0000000000001C31        4585C0               test r8d, r8d
   .text:0x0000000000001C34        7434                 jz code_0x1C6A
   .text:0x0000000000001C36 code_0x1C36:
   .text:0x0000000000001C36        418BCA               mov ecx, r10d
   .text:0x0000000000001C39        4803C9               add rcx, rcx
   .text:0x0000000000001C3C        8B44CB04             mov eax, dword ptr [rbx+rcx*8+0x4]
   .text:0x0000000000001C40        483BF8               cmp rdi, rax
   .text:0x0000000000001C43        721D                 jb code_0x1C62
   .text:0x0000000000001C45 code_0x1C45:
   .text:0x0000000000001C45        8B44CB08             mov eax, dword ptr [rbx+rcx*8+0x8]
   .text:0x0000000000001C49        483BF8               cmp rdi, rax
   .text:0x0000000000001C4C        7314                 jae code_0x1C62
   .text:0x0000000000001C4E code_0x1C4E:
   .text:0x0000000000001C4E        8B44D310             mov eax, dword ptr [rbx+rdx*8+0x10]
   .text:0x0000000000001C52        3944CB10             cmp dword ptr [rbx+rcx*8+0x10], eax
   .text:0x0000000000001C56        750A                 jnz code_0x1C62
   .text:0x0000000000001C58 code_0x1C58:
   .text:0x0000000000001C58        8B44D30C             mov eax, dword ptr [rbx+rdx*8+0xC]
   .text:0x0000000000001C5C        3944CB0C             cmp dword ptr [rbx+rcx*8+0xC], eax
   .text:0x0000000000001C60        7408                 jz code_0x1C6A
   .text:0x0000000000001C62 code_0x1C62:
   .text:0x0000000000001C62        41FFC2               inc r10d
   .text:0x0000000000001C65        453BD0               cmp r10d, r8d
   .text:0x0000000000001C68        72CC                 jb code_0x1C36
   .text:0x0000000000001C6A code_0x1C6A:
   .text:0x0000000000001C6A        418BC9               mov ecx, r9d
   .text:0x0000000000001C6D        453BD1               cmp r10d, r9d
   .text:0x0000000000001C70        753E                 jnz code_0x1CB0
   .text:0x0000000000001C72 code_0x1C72:
   .text:0x0000000000001C72        8B44D310             mov eax, dword ptr [rbx+rdx*8+0x10]
   .text:0x0000000000001C76        85C0                 test eax, eax
   .text:0x0000000000001C78        740C                 jz code_0x1C86
   .text:0x0000000000001C7A code_0x1C7A:
   .text:0x0000000000001C7A        483BF8               cmp rdi, rax
   .text:0x0000000000001C7D        7524                 jnz code_0x1CA3
   .text:0x0000000000001C7F code_0x1C7F:
   .text:0x0000000000001C7F        4585DB               test r11d, r11d
   .text:0x0000000000001C82        752C                 jnz code_0x1CB0
   .text:0x0000000000001C84 code_0x1C84:
   .text:0x0000000000001C84        EB1D                 jmp code_0x1CA3
   .text:0x0000000000001C86 code_0x1C86:
   .text:0x0000000000001C86        8D4601               lea eax, [rsi+0x1]
   .text:0x0000000000001C89        B101                 mov cl, 0x1
   .text:0x0000000000001C8B        41894748             mov dword ptr [r15+0x48], eax
   .text:0x0000000000001C8F        448B44D30C           mov r8d, dword ptr [rbx+rdx*8+0xC]
   .text:0x0000000000001C94        498BD5               mov rdx, r13
   .text:0x0000000000001C97        4D03C4               add r8, r12
   .text:0x0000000000001C9A        41FFD0               call r8; void (__cdecl *)( int64_t p1, int64_t p2 )
   .text:0x0000000000001C9D        448B0B               mov r9d, dword ptr [rbx]
   .text:0x0000000000001CA0        418BC9               mov ecx, r9d
   .text:0x0000000000001CA3 code_0x1CA3:
   .text:0x0000000000001CA3        FFC6                 inc esi
   .text:0x0000000000001CA5        448BC1               mov r8d, ecx
   .text:0x0000000000001CA8        3BF1                 cmp esi, ecx
   .text:0x0000000000001CAA        0F8256FFFFFF         jb code_0x1C06
   .text:0x0000000000001CB0 code_0x1CB0:
   .text:0x0000000000001CB0        B801000000           mov eax, 0x1
   .text:0x0000000000001CB5 code_0x1CB5:
   .text:0x0000000000001CB5        4C8D5C2440           lea r11, [rsp+0x40]
   .text:0x0000000000001CBA        498B5B30             mov rbx, qword ptr [r11+0x30]
   .text:0x0000000000001CBE        498B6B38             mov rbp, qword ptr [r11+0x38]
   .text:0x0000000000001CC2        498B7340             mov rsi, qword ptr [r11+0x40]
   .text:0x0000000000001CC6        498BE3               mov rsp, r11
   .text:0x0000000000001CC9        415F                 pop r15
   .text:0x0000000000001CCB        415E                 pop r14
   .text:0x0000000000001CCD        415D                 pop r13
   .text:0x0000000000001CCF        415C                 pop r12
   .text:0x0000000000001CD1        5F                   pop rdi
   .text:0x0000000000001CD2        C3                   ret
   .text:0x0000000000001CD3 code_0x1CD3:
   .text:0x0000000000001CD3        CC                   int3
   .text:0x0000000000001CD4 __vcrt_initialize:
   .text:0x0000000000001CD4        4883EC28             sub rsp, 0x28
   .text:0x0000000000001CD8        E8AF070000           call __vcrt_initialize_pure_virtual_call_handler; inline void __cdecl( void )
   .text:0x0000000000001CDD        E83A070000           call __vcrt_initialize_winapi_thunks; inline int64_t __cdecl( int64_t p1 )
   .text:0x0000000000001CE2        E895030000           call __vcrt_initialize_locks; int8_t __cdecl( void )
   .text:0x0000000000001CE7        84C0                 test al, al
   .text:0x0000000000001CE9        7504                 jnz code_0x1CEF
   .text:0x0000000000001CEB code_0x1CEB:
   .text:0x0000000000001CEB        32C0                 xor al, al
   .text:0x0000000000001CED        EB12                 jmp code_0x1D01
   .text:0x0000000000001CEF code_0x1CEF:
   .text:0x0000000000001CEF        E810030000           call __vcrt_initialize_ptd; int8_t __cdecl( void )
   .text:0x0000000000001CF4        84C0                 test al, al
   .text:0x0000000000001CF6        7507                 jnz code_0x1CFF
   .text:0x0000000000001CF8 code_0x1CF8:
   .text:0x0000000000001CF8        E8C7030000           call __vcrt_uninitialize_locks; int8_t __cdecl( void )
   .text:0x0000000000001CFD        EBEC                 jmp code_0x1CEB
   .text:0x0000000000001CFF code_0x1CFF:
   .text:0x0000000000001CFF        B001                 mov al, 0x1
   .text:0x0000000000001D01 code_0x1D01:
   .text:0x0000000000001D01        4883C428             add rsp, 0x28
   .text:0x0000000000001D05        C3                   ret
   .text:0x0000000000001D06 data_0x1D06:
   .text:0x0000000000001D06        db 2 dup(0xCC)
   .text:0x0000000000001D08 __vcrt_uninitialize:
   .text:0x0000000000001D08        4883EC28             sub rsp, 0x28
   .text:0x0000000000001D0C        84C9                 test cl, cl
   .text:0x0000000000001D0E        7511                 jnz code_0x1D21
   .text:0x0000000000001D10 code_0x1D10:
   .text:0x0000000000001D10        E843030000           call __vcrt_uninitialize_ptd; int8_t __cdecl( void )
   .text:0x0000000000001D15        E8AA030000           call __vcrt_uninitialize_locks; int8_t __cdecl( void )
   .text:0x0000000000001D1A        33C9                 xor ecx, ecx
   .text:0x0000000000001D1C        E82B070000           call __vcrt_uninitialize_winapi_thunks; void __cdecl( int8_t p1 )
   .text:0x0000000000001D21 code_0x1D21:
   .text:0x0000000000001D21        B001                 mov al, 0x1
   .text:0x0000000000001D23        4883C428             add rsp, 0x28
   .text:0x0000000000001D27        C3                   ret
   .text:0x0000000000001D28 data_0x1D28:
   .text:0x0000000000001D28        db 14 dup(0xCC)
   .text:0x0000000000001D36 data_0x1D36:
   .text:0x0000000000001D36        dq 0x000000841F0F6666
   .text:0x0000000000001D3E        dw 0x0000
   .text:0x0000000000001D40 code_0x1D40:
   .text:0x0000000000001D40        57                   push rdi
   .text:0x0000000000001D41        8BC2                 mov eax, edx
   .text:0x0000000000001D43        488BF9               mov rdi, rcx
   .text:0x0000000000001D46        498BC8               mov rcx, r8
   .text:0x0000000000001D49        F3AA                 rep stosb
   .text:0x0000000000001D4B        498BC3               mov rax, r11
   .text:0x0000000000001D4E        5F                   pop rdi
   .text:0x0000000000001D4F        C3                   ret
   .text:0x0000000000001D50 data_0x1D50:
   .text:0x0000000000001D50        db 6 dup(0xCC)
   .text:0x0000000000001D56 data_0x1D56:
   .text:0x0000000000001D56        dq 0x000000841F0F6666
   .text:0x0000000000001D5E        dw 0x0000
   .text:0x0000000000001D60 func_0x1D60:
   .text:0x0000000000001D60        4C8BD9               mov r11, rcx
   .text:0x0000000000001D63        0FB6D2               movzx edx, dl
   .text:0x0000000000001D66        49B90101010101010101 mov r9, 0x101010101010101
   .text:0x0000000000001D70        4C0FAFCA             imul r9, rdx
   .text:0x0000000000001D74        4983F810             cmp r8, 0x10
   .text:0x0000000000001D78        0F86F2000000         jbe code_0x1E70
   .text:0x0000000000001D7E code_0x1D7E:
   .text:0x0000000000001D7E        66490F6EC1           movq xmm0, r9
   .text:0x0000000000001D83        660F60C0             punpcklbw xmm0, xmm0
   .text:0x0000000000001D87        4981F880000000       cmp r8, 0x80
   .text:0x0000000000001D8E        7710                 ja code_0x1DA0
   .text:0x0000000000001D90 code_0x1D90:
   .text:0x0000000000001D90        0FBA25CC2B010002     bt dword ptr [data_0x14964], 0x2
   .text:0x0000000000001D98        0F8362000000         jae code_0x1E00
   .text:0x0000000000001D9E code_0x1D9E:
   .text:0x0000000000001D9E        EBA0                 jmp code_0x1D40
   .text:0x0000000000001DA0 code_0x1DA0:
   .text:0x0000000000001DA0        0FBA25BC2B010001     bt dword ptr [data_0x14964], 0x1
   .text:0x0000000000001DA8        7296                 jb code_0x1D40
   .text:0x0000000000001DAA code_0x1DAA:
   .text:0x0000000000001DAA        0F1101               movups xmmword ptr [rcx], xmm0
   .text:0x0000000000001DAD        4C03C1               add r8, rcx
   .text:0x0000000000001DB0        4883C110             add rcx, 0x10
   .text:0x0000000000001DB4        4883E1F0             and rcx, 0xFFFFFFFFFFFFFFF0
   .text:0x0000000000001DB8        4C2BC1               sub r8, rcx
   .text:0x0000000000001DBB        4D8BC8               mov r9, r8
   .text:0x0000000000001DBE        49C1E907             shr r9, 0x7
   .text:0x0000000000001DC2        743C                 jz code_0x1E00
   .text:0x0000000000001DC4 code_0x1DC4:
   .text:0x0000000000001DC4        666666660F1F840000000000 o16 nop [rax+rax+0x0]
   .text:0x0000000000001DD0 code_0x1DD0:
   .text:0x0000000000001DD0        0F2901               movaps xmmword ptr [rcx], xmm0
   .text:0x0000000000001DD3        0F294110             movaps xmmword ptr [rcx+0x10], xmm0
   .text:0x0000000000001DD7        4881C180000000       add rcx, 0x80
   .text:0x0000000000001DDE        0F2941A0             movaps xmmword ptr [rcx-0x60], xmm0
   .text:0x0000000000001DE2        0F2941B0             movaps xmmword ptr [rcx-0x50], xmm0
   .text:0x0000000000001DE6        49FFC9               dec r9
   .text:0x0000000000001DE9        0F2941C0             movaps xmmword ptr [rcx-0x40], xmm0
   .text:0x0000000000001DED        0F2941D0             movaps xmmword ptr [rcx-0x30], xmm0
   .text:0x0000000000001DF1        0F2941E0             movaps xmmword ptr [rcx-0x20], xmm0
   .text:0x0000000000001DF5        660F2941F0           movapd xmmword ptr [rcx-0x10], xmm0
   .text:0x0000000000001DFA        75D4                 jnz code_0x1DD0
   .text:0x0000000000001DFC code_0x1DFC:
   .text:0x0000000000001DFC        4983E07F             and r8, 0x7F
   .text:0x0000000000001E00 code_0x1E00:
   .text:0x0000000000001E00        4D8BC8               mov r9, r8
   .text:0x0000000000001E03        49C1E904             shr r9, 0x4
   .text:0x0000000000001E07        7413                 jz code_0x1E1C
   .text:0x0000000000001E09 code_0x1E09:
   .text:0x0000000000001E09        0F1F8000000000       nop [rax+0x0]
   .text:0x0000000000001E10 code_0x1E10:
   .text:0x0000000000001E10        0F1101               movups xmmword ptr [rcx], xmm0
   .text:0x0000000000001E13        4883C110             add rcx, 0x10
   .text:0x0000000000001E17        49FFC9               dec r9
   .text:0x0000000000001E1A        75F4                 jnz code_0x1E10
   .text:0x0000000000001E1C code_0x1E1C:
   .text:0x0000000000001E1C        4983E00F             and r8, 0xF
   .text:0x0000000000001E20        7406                 jz code_0x1E28
   .text:0x0000000000001E22 code_0x1E22:
   .text:0x0000000000001E22        420F114401F0         movups xmmword ptr [rcx+r8-0x10], xmm0
   .text:0x0000000000001E28 code_0x1E28:
   .text:0x0000000000001E28        498BC3               mov rax, r11
   .text:0x0000000000001E2B        C3                   ret
   .text:0x0000000000001E2C data_0x1E2C:
   .text:0x0000000000001E2C        dq 0x00001E9B00001E9E
   .text:0x0000000000001E34        dq 0x00001E9700001EC7
   .text:0x0000000000001E3C        dq 0x00001EB400001EA4
   .text:0x0000000000001E44        dq 0x00001E9400001EC4
   .text:0x0000000000001E4C        dq 0x00001EA800001ECC
   .text:0x0000000000001E54        dq 0x00001ED000001EE0
   .text:0x0000000000001E5C        dq 0x00001EB000001EA0
   .text:0x0000000000001E64        dq 0x00001E9000001EC0
   .text:0x0000000000001E6C        dd 0x00001EE8
   .text:0x0000000000001E70 code_0x1E70:
   .text:0x0000000000001E70        498BD1               mov rdx, r9
   .text:0x0000000000001E73        4C8D0D86E1FFFF       lea r9, [data_0x0]
   .text:0x0000000000001E7A        438B84812C1E0000     mov eax, dword ptr [r9+r8*4+0x1E2C]
   .text:0x0000000000001E82        4C03C8               add r9, rax
   .text:0x0000000000001E85        4903C8               add rcx, r8
   .text:0x0000000000001E88        498BC3               mov rax, r11
   .text:0x0000000000001E8B        41FFE1               jmp r9
   .text:0x0000000000001E8E func_0x1E8E:
   .text:0x0000000000001E8E        6690                 nop
   .text:0x0000000000001E90        488951F1             mov qword ptr [rcx-0xF], rdx
   .text:0x0000000000001E94        8951F9               mov dword ptr [rcx-0x7], edx
   .text:0x0000000000001E97        668951FD             mov word ptr [rcx-0x3], dx
   .text:0x0000000000001E9B        8851FF               mov byte ptr [rcx-0x1], dl
   .text:0x0000000000001E9E        C3                   ret
   .text:0x0000000000001E9F func_0x1E9F:
   .text:0x0000000000001E9F        90                   nop
   .text:0x0000000000001EA0        488951F4             mov qword ptr [rcx-0xC], rdx
   .text:0x0000000000001EA4        8951FC               mov dword ptr [rcx-0x4], edx
   .text:0x0000000000001EA7        C3                   ret
   .text:0x0000000000001EA8 func_0x1EA8:
   .text:0x0000000000001EA8        488951F7             mov qword ptr [rcx-0x9], rdx
   .text:0x0000000000001EAC        8851FF               mov byte ptr [rcx-0x1], dl
   .text:0x0000000000001EAF        C3                   ret
   .text:0x0000000000001EB0 func_0x1EB0:
   .text:0x0000000000001EB0        488951F3             mov qword ptr [rcx-0xD], rdx
   .text:0x0000000000001EB4        8951FB               mov dword ptr [rcx-0x5], edx
   .text:0x0000000000001EB7        8851FF               mov byte ptr [rcx-0x1], dl
   .text:0x0000000000001EBA        C3                   ret
   .text:0x0000000000001EBB func_0x1EBB:
   .text:0x0000000000001EBB        0F1F440000           nop [rax+rax+0x0]
   .text:0x0000000000001EC0        488951F2             mov qword ptr [rcx-0xE], rdx
   .text:0x0000000000001EC4        8951FA               mov dword ptr [rcx-0x6], edx
   .text:0x0000000000001EC7        668951FE             mov word ptr [rcx-0x2], dx
   .text:0x0000000000001ECB        C3                   ret
   .text:0x0000000000001ECC func_0x1ECC:
   .text:0x0000000000001ECC        488910               mov qword ptr [rax], rdx
   .text:0x0000000000001ECF        C3                   ret
   .text:0x0000000000001ED0 func_0x1ED0:
   .text:0x0000000000001ED0        488910               mov qword ptr [rax], rdx
   .text:0x0000000000001ED3        66895008             mov word ptr [rax+0x8], dx
   .text:0x0000000000001ED7        88500A               mov byte ptr [rax+0xA], dl
   .text:0x0000000000001EDA        C3                   ret
   .text:0x0000000000001EDB func_0x1EDB:
   .text:0x0000000000001EDB        0F1F440000           nop [rax+rax+0x0]
   .text:0x0000000000001EE0        488910               mov qword ptr [rax], rdx
   .text:0x0000000000001EE3        66895008             mov word ptr [rax+0x8], dx
   .text:0x0000000000001EE7        C3                   ret
   .text:0x0000000000001EE8 func_0x1EE8:
   .text:0x0000000000001EE8        488910               mov qword ptr [rax], rdx
   .text:0x0000000000001EEB        48895008             mov qword ptr [rax+0x8], rdx
   .text:0x0000000000001EEF        C3                   ret
   .text:0x0000000000001EF0 data_0x1EF0:
   .text:0x0000000000001EF0        db 6 dup(0xCC)
   .text:0x0000000000001EF6 data_0x1EF6:
   .text:0x0000000000001EF6        dq 0x000000841F0F6666
   .text:0x0000000000001EFE        dw 0x0000
   .text:0x0000000000001F00 _NLG_Notify:
   .text:0x0000000000001F00        48894C2408           mov qword ptr [rsp+0x8], rcx
   .text:0x0000000000001F05        4889542418           mov qword ptr [rsp+0x18], rdx
   .text:0x0000000000001F0A        4489442410           mov dword ptr [rsp+0x10], r8d
   .text:0x0000000000001F0F        49C7C120059319       mov r9, 0x19930520
   .text:0x0000000000001F16        EB08                 jmp code_0x1F20
   .text:0x0000000000001F18 data_0x1F18:
   .text:0x0000000000001F18        db 6 dup(0xCC)
   .text:0x0000000000001F1E data_0x1F1E:
   .text:0x0000000000001F1E        dw 0x9066
   .text:0x0000000000001F20 code_0x1F20:
   .text:0x0000000000001F20        C3                   ret
   .text:0x0000000000001F21 data_0x1F21:
   .text:0x0000000000001F21        db 6 dup(0xCC)
   .text:0x0000000000001F27 data_0x1F27:
   .text:0x0000000000001F27        dq 0x00000000841F0F66
   .text:0x0000000000001F2F        db 0x00
   .text:0x0000000000001F30 __NLG_Return2:
   .text:0x0000000000001F30        C3                   ret
   .text:0x0000000000001F31 data_0x1F31:
   .text:0x0000000000001F31        db 3 dup(0xCC)
   .text:0x0000000000001F34 __except_validate_context_record:
   .text:0x0000000000001F34        488B05E5920000       mov rax, qword ptr [GuardCFCheckFunction]; private: void (__cdecl *)( void * this )
   .text:0x0000000000001F3B        488D15BAF6FFFF       lea rdx, [Concurrency::details::_ExceptionHolder::ReportUnhandledError]; private: void __cdecl( void )
   .text:0x0000000000001F42        483BC2               cmp rax, rdx
   .text:0x0000000000001F45        7423                 jz code_0x1F6A
   .text:0x0000000000001F47 code_0x1F47:
   .text:0x0000000000001F47        65488B042530000000   mov rax, qword ptr gs:[0x30]
   .text:0x0000000000001F50        488B8998000000       mov rcx, qword ptr [rcx+0x98]
   .text:0x0000000000001F57        483B4810             cmp rcx, qword ptr [rax+0x10]
   .text:0x0000000000001F5B        7206                 jb code_0x1F63
   .text:0x0000000000001F5D code_0x1F5D:
   .text:0x0000000000001F5D        483B4808             cmp rcx, qword ptr [rax+0x8]
   .text:0x0000000000001F61        7607                 jbe code_0x1F6A
   .text:0x0000000000001F63 code_0x1F63:
   .text:0x0000000000001F63        B90D000000           mov ecx, 0xD
   .text:0x0000000000001F68        CD29                 int 0x29
   .text:0x0000000000001F6A code_0x1F6A:
   .text:0x0000000000001F6A        C3                   ret
   .text:0x0000000000001F6B code_0x1F6B:
   .text:0x0000000000001F6B        CC                   int3
   .text:0x0000000000001F6C func_0x1F6C:
   .text:0x0000000000001F6C        4885C9               test rcx, rcx
   .text:0x0000000000001F6F        7465                 jz code_0x1FD6
   .text:0x0000000000001F71 code_0x1F71:
   .text:0x0000000000001F71        88542410             mov byte ptr [rsp+0x10], dl
   .text:0x0000000000001F75        4883EC28             sub rsp, 0x28
   .text:0x0000000000001F79        813963736DE0         cmp dword ptr [rcx], 0xE06D7363
   .text:0x0000000000001F7F        7551                 jnz code_0x1FD2
   .text:0x0000000000001F81 code_0x1F81:
   .text:0x0000000000001F81        83791804             cmp dword ptr [rcx+0x18], 0x4
   .text:0x0000000000001F85        754B                 jnz code_0x1FD2
   .text:0x0000000000001F87 code_0x1F87:
   .text:0x0000000000001F87        8B4120               mov eax, dword ptr [rcx+0x20]
   .text:0x0000000000001F8A        2D20059319           sub eax, 0x19930520
   .text:0x0000000000001F8F        83F802               cmp eax, 0x2
   .text:0x0000000000001F92        773E                 ja code_0x1FD2
   .text:0x0000000000001F94 code_0x1F94:
   .text:0x0000000000001F94        488B4130             mov rax, qword ptr [rcx+0x30]
   .text:0x0000000000001F98        4885C0               test rax, rax
   .text:0x0000000000001F9B        7435                 jz code_0x1FD2
   .text:0x0000000000001F9D code_0x1F9D:
   .text:0x0000000000001F9D        48635004             movsxd rdx, dword ptr [rax+0x4]
   .text:0x0000000000001FA1        85D2                 test edx, edx
   .text:0x0000000000001FA3        740F                 jz code_0x1FB4
   .text:0x0000000000001FA5 code_0x1FA5:
   .text:0x0000000000001FA5        48035138             add rdx, qword ptr [rcx+0x38]
   .text:0x0000000000001FA9        488B4928             mov rcx, qword ptr [rcx+0x28]
   .text:0x0000000000001FAD        E82E000000           call code_0x1FE0
   .text:0x0000000000001FB2        EB1E                 jmp code_0x1FD2
   .text:0x0000000000001FB4 code_0x1FB4:
   .text:0x0000000000001FB4        F60010               test byte ptr [rax], 0x10
   .text:0x0000000000001FB7        7419                 jz code_0x1FD2
   .text:0x0000000000001FB9 code_0x1FB9:
   .text:0x0000000000001FB9        488B4128             mov rax, qword ptr [rcx+0x28]
   .text:0x0000000000001FBD        488B08               mov rcx, qword ptr [rax]
   .text:0x0000000000001FC0        4885C9               test rcx, rcx
   .text:0x0000000000001FC3        740D                 jz code_0x1FD2
   .text:0x0000000000001FC5 code_0x1FC5:
   .text:0x0000000000001FC5        488B01               mov rax, qword ptr [rcx]
   .text:0x0000000000001FC8        488B4010             mov rax, qword ptr [rax+0x10]
   .text:0x0000000000001FCC        FF1556920000         call qword ptr [GuardCFDispatchFunction]; void (__cdecl *)( void )
   .text:0x0000000000001FD2 code_0x1FD2:
   .text:0x0000000000001FD2        4883C428             add rsp, 0x28
   .text:0x0000000000001FD6 code_0x1FD6:
   .text:0x0000000000001FD6        C3                   ret
   .text:0x0000000000001FD7 code_0x1FD7:
   .text:0x0000000000001FD7        E81C1D0000           call func_0x3CF8; int32_t __cdecl( void )
   .text:0x0000000000001FDC        90                   nop
   .text:0x0000000000001FDD        CC                   int3
   .text:0x0000000000001FDE data_0x1FDE:
   .text:0x0000000000001FDE        db 2 dup(0xCC)
   .text:0x0000000000001FE0 code_0x1FE0:
   .text:0x0000000000001FE0        48FFE2               jmp rdx
   .text:0x0000000000001FE3 code_0x1FE3:
   .text:0x0000000000001FE3        CC                   int3
   .text:0x0000000000001FE4 func_0x1FE4:
   .text:0x0000000000001FE4        4883EC28             sub rsp, 0x28
   .text:0x0000000000001FE8        4885C9               test rcx, rcx
   .text:0x0000000000001FEB        7411                 jz code_0x1FFE
   .text:0x0000000000001FED code_0x1FED:
   .text:0x0000000000001FED        488D057C290100       lea rax, [data_0x14970]
   .text:0x0000000000001FF4        483BC8               cmp rcx, rax
   .text:0x0000000000001FF7        7405                 jz code_0x1FFE
   .text:0x0000000000001FF9 code_0x1FF9:
   .text:0x0000000000001FF9        E81A1D0000           call free; void __cdecl( void * _Block )
   .text:0x0000000000001FFE code_0x1FFE:
   .text:0x0000000000001FFE        4883C428             add rsp, 0x28
   .text:0x0000000000002002        C3                   ret
   .text:0x0000000000002003 code_0x2003:
   .text:0x0000000000002003        CC                   int3
   .text:0x0000000000002004 __vcrt_initialize_ptd:
   .text:0x0000000000002004        4883EC28             sub rsp, 0x28
   .text:0x0000000000002008        488D0DD5FFFFFF       lea rcx, [func_0x1FE4]; void __cdecl( int64_t p1 )
   .text:0x000000000000200F        E8C0020000           call __vcrt_FlsAlloc; int32_t __cdecl( int64_t p1 )
   .text:0x0000000000002014        890516200100         mov dword ptr [data_0x14030], eax
   .text:0x000000000000201A        83F8FF               cmp eax, 0xFFFFFFFF
   .text:0x000000000000201D        742F                 jz code_0x204E
   .text:0x000000000000201F code_0x201F:
   .text:0x000000000000201F        488D154A290100       lea rdx, [data_0x14970]
   .text:0x0000000000002026        8BC8                 mov ecx, eax
   .text:0x0000000000002028        E837030000           call __vcrt_FlsSetValue; int32_t __cdecl( int32_t p1, int64_t p2 )
   .text:0x000000000000202D        85C0                 test eax, eax
   .text:0x000000000000202F        7418                 jz code_0x2049
   .text:0x0000000000002031 code_0x2031:
   .text:0x0000000000002031        48C7C0FEFFFFFF       mov rax, 0xFFFFFFFFFFFFFFFE
   .text:0x0000000000002038        8905AA290100         mov dword ptr [data_0x149E8], eax
   .text:0x000000000000203E        488905AB290100       mov qword ptr [data_0x149F0], rax
   .text:0x0000000000002045        B001                 mov al, 0x1
   .text:0x0000000000002047        EB07                 jmp code_0x2050
   .text:0x0000000000002049 code_0x2049:
   .text:0x0000000000002049        E80A000000           call __vcrt_uninitialize_ptd; int8_t __cdecl( void )
   .text:0x000000000000204E code_0x204E:
   .text:0x000000000000204E        32C0                 xor al, al
   .text:0x0000000000002050 code_0x2050:
   .text:0x0000000000002050        4883C428             add rsp, 0x28
   .text:0x0000000000002054        C3                   ret
   .text:0x0000000000002055 data_0x2055:
   .text:0x0000000000002055        db 3 dup(0xCC)
   .text:0x0000000000002058 __vcrt_uninitialize_ptd:
   .text:0x0000000000002058        4883EC28             sub rsp, 0x28
   .text:0x000000000000205C        8B0DCE1F0100         mov ecx, dword ptr [data_0x14030]
   .text:0x0000000000002062        83F9FF               cmp ecx, 0xFFFFFFFF
   .text:0x0000000000002065        740C                 jz code_0x2073
   .text:0x0000000000002067 code_0x2067:
   .text:0x0000000000002067        E8B0020000           call __vcrt_FlsFree; void __cdecl( int32_t p1 )
   .text:0x000000000000206C        830DBD1F0100FF       or dword ptr [data_0x14030], 0xFFFFFFFF
   .text:0x0000000000002073 code_0x2073:
   .text:0x0000000000002073        B001                 mov al, 0x1
   .text:0x0000000000002075        4883C428             add rsp, 0x28
   .text:0x0000000000002079        C3                   ret
   .text:0x000000000000207A data_0x207A:
   .text:0x000000000000207A        db 2 dup(0xCC)
   .text:0x000000000000207C __vcrt_initialize_locks:
   .text:0x000000000000207C        4053                 push rbx
   .text:0x000000000000207E        4883EC20             sub rsp, 0x20
   .text:0x0000000000002082        33DB                 xor ebx, ebx
   .text:0x0000000000002084 code_0x2084:
   .text:0x0000000000002084        488D1575290100       lea rdx, [data_0x14A00]
   .text:0x000000000000208B        4533C0               xor r8d, r8d
   .text:0x000000000000208E        488D0C9B             lea rcx, [rbx+rbx*4]
   .text:0x0000000000002092        488D0CCA             lea rcx, [rdx+rcx*8]
   .text:0x0000000000002096        BAA00F0000           mov edx, 0xFA0
   .text:0x000000000000209B        E818030000           call __vcrt_InitializeCriticalSectionEx; int32_t __cdecl( int64_t p1, int32_t p2, int32_t p3 )
   .text:0x00000000000020A0        85C0                 test eax, eax
   .text:0x00000000000020A2        7411                 jz code_0x20B5
   .text:0x00000000000020A4 code_0x20A4:
   .text:0x00000000000020A4        FF057E290100         inc dword ptr [data_0x14A28]
   .text:0x00000000000020AA        FFC3                 inc ebx
   .text:0x00000000000020AC        83FB01               cmp ebx, 0x1
   .text:0x00000000000020AF        72D3                 jb code_0x2084
   .text:0x00000000000020B1 code_0x20B1:
   .text:0x00000000000020B1        B001                 mov al, 0x1
   .text:0x00000000000020B3        EB07                 jmp code_0x20BC
   .text:0x00000000000020B5 code_0x20B5:
   .text:0x00000000000020B5        E80A000000           call __vcrt_uninitialize_locks; int8_t __cdecl( void )
   .text:0x00000000000020BA        32C0                 xor al, al
   .text:0x00000000000020BC code_0x20BC:
   .text:0x00000000000020BC        4883C420             add rsp, 0x20
   .text:0x00000000000020C0        5B                   pop rbx
   .text:0x00000000000020C1        C3                   ret
   .text:0x00000000000020C2 data_0x20C2:
   .text:0x00000000000020C2        db 2 dup(0xCC)
   .text:0x00000000000020C4 __vcrt_uninitialize_locks:
   .text:0x00000000000020C4        4053                 push rbx
   .text:0x00000000000020C6        4883EC20             sub rsp, 0x20
   .text:0x00000000000020CA        8B1D58290100         mov ebx, dword ptr [data_0x14A28]
   .text:0x00000000000020D0        EB1D                 jmp code_0x20EF
   .text:0x00000000000020D2 code_0x20D2:
   .text:0x00000000000020D2        488D0527290100       lea rax, [data_0x14A00]
   .text:0x00000000000020D9        FFCB                 dec ebx
   .text:0x00000000000020DB        488D0C9B             lea rcx, [rbx+rbx*4]
   .text:0x00000000000020DF        488D0CC8             lea rcx, [rax+rcx*8]
   .text:0x00000000000020E3        FF15C78F0000         call qword ptr [DeleteCriticalSection]; void (__cdecl *)( struct _RTL_CRITICAL_SECTION * lpCriticalSection )
   .text:0x00000000000020E9        FF0D39290100         dec dword ptr [data_0x14A28]
   .text:0x00000000000020EF code_0x20EF:
   .text:0x00000000000020EF        85DB                 test ebx, ebx
   .text:0x00000000000020F1        75DF                 jnz code_0x20D2
   .text:0x00000000000020F3 code_0x20F3:
   .text:0x00000000000020F3        B001                 mov al, 0x1
   .text:0x00000000000020F5        4883C420             add rsp, 0x20
   .text:0x00000000000020F9        5B                   pop rbx
   .text:0x00000000000020FA        C3                   ret
   .text:0x00000000000020FB code_0x20FB:
   .text:0x00000000000020FB        CC                   int3
   .text:0x00000000000020FC func_0x20FC:
   .text:0x00000000000020FC        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000002101        48896C2410           mov qword ptr [rsp+0x10], rbp
   .text:0x0000000000002106        4889742418           mov qword ptr [rsp+0x18], rsi
   .text:0x000000000000210B        57                   push rdi
   .text:0x000000000000210C        4154                 push r12
   .text:0x000000000000210E        4155                 push r13
   .text:0x0000000000002110        4156                 push r14
   .text:0x0000000000002112        4157                 push r15
   .text:0x0000000000002114        4883EC20             sub rsp, 0x20
   .text:0x0000000000002118        448BF9               mov r15d, ecx
   .text:0x000000000000211B        4C8D35DEDEFFFF       lea r14, [data_0x0]
   .text:0x0000000000002122        4D8BE1               mov r12, r9
   .text:0x0000000000002125        498BE8               mov rbp, r8
   .text:0x0000000000002128        4C8BEA               mov r13, rdx
   .text:0x000000000000212B        4B8B8CFE484A0100     mov rcx, qword ptr [r14+r15*8+0x14A48]
   .text:0x0000000000002133        4C8B15EE1E0100       mov r10, qword ptr [__security_cookie]
   .text:0x000000000000213A        4883CFFF             or rdi, 0xFFFFFFFFFFFFFFFF
   .text:0x000000000000213E        418BC2               mov eax, r10d
   .text:0x0000000000002141        498BD2               mov rdx, r10
   .text:0x0000000000002144        4833D1               xor rdx, rcx
   .text:0x0000000000002147        83E03F               and eax, 0x3F
   .text:0x000000000000214A        8AC8                 mov cl, al
   .text:0x000000000000214C        48D3CA               ror rdx, cl
   .text:0x000000000000214F        483BD7               cmp rdx, rdi
   .text:0x0000000000002152        0F845B010000         jz code_0x22B3
   .text:0x0000000000002158 code_0x2158:
   .text:0x0000000000002158        4885D2               test rdx, rdx
   .text:0x000000000000215B        7408                 jz code_0x2165
   .text:0x000000000000215D code_0x215D:
   .text:0x000000000000215D        488BC2               mov rax, rdx
   .text:0x0000000000002160        E950010000           jmp code_0x22B5
   .text:0x0000000000002165 code_0x2165:
   .text:0x0000000000002165        4D3BC4               cmp r8, r12
   .text:0x0000000000002168        0F84D9000000         jz code_0x2247
   .text:0x000000000000216E code_0x216E:
   .text:0x000000000000216E        8B7500               mov esi, dword ptr [rbp+0x0]
   .text:0x0000000000002171        498B9CF6304A0100     mov rbx, qword ptr [r14+rsi*8+0x14A30]
   .text:0x0000000000002179        4885DB               test rbx, rbx
   .text:0x000000000000217C        740E                 jz code_0x218C
   .text:0x000000000000217E code_0x217E:
   .text:0x000000000000217E        483BDF               cmp rbx, rdi
   .text:0x0000000000002181        0F84AC000000         jz code_0x2233
   .text:0x0000000000002187 code_0x2187:
   .text:0x0000000000002187        E9A2000000           jmp code_0x222E
   .text:0x000000000000218C code_0x218C:
   .text:0x000000000000218C        4D8BB4F6C8B20000     mov r14, qword ptr [r14+rsi*8+0xB2C8]
   .text:0x0000000000002194        33D2                 xor edx, edx
   .text:0x0000000000002196        498BCE               mov rcx, r14
   .text:0x0000000000002199        41B800080000         mov r8d, 0x800
   .text:0x000000000000219F        FF154B8F0000         call qword ptr [LoadLibraryExW]; struct HINSTANCE__ * (__cdecl *)( unsigned short * lpLibFileName, void * hFile, unsigned long dwFlags )
   .text:0x00000000000021A5        488BD8               mov rbx, rax
   .text:0x00000000000021A8        4885C0               test rax, rax
   .text:0x00000000000021AB        754F                 jnz code_0x21FC
   .text:0x00000000000021AD code_0x21AD:
   .text:0x00000000000021AD        FF15DD8E0000         call qword ptr [GetLastError]; unsigned long (__cdecl *)( void )
   .text:0x00000000000021B3        83F857               cmp eax, 0x57
   .text:0x00000000000021B6        7542                 jnz code_0x21FA
   .text:0x00000000000021B8 code_0x21B8:
   .text:0x00000000000021B8        8D58B0               lea ebx, [rax-0x50]
   .text:0x00000000000021BB        498BCE               mov rcx, r14
   .text:0x00000000000021BE        448BC3               mov r8d, ebx
   .text:0x00000000000021C1        488D15B0910000       lea rdx, [string_apims]; "api-ms-"
   .text:0x00000000000021C8        E8B71B0000           call wcsncmp; int __cdecl( unsigned short * _String1, unsigned short * _String2, unsigned long long _MaxCount )
   .text:0x00000000000021CD        85C0                 test eax, eax
   .text:0x00000000000021CF        7429                 jz code_0x21FA
   .text:0x00000000000021D1 code_0x21D1:
   .text:0x00000000000021D1        448BC3               mov r8d, ebx
   .text:0x00000000000021D4        488D15AD910000       lea rdx, [string_extms]; "ext-ms-"
   .text:0x00000000000021DB        498BCE               mov rcx, r14
   .text:0x00000000000021DE        E8A11B0000           call wcsncmp; int __cdecl( unsigned short * _String1, unsigned short * _String2, unsigned long long _MaxCount )
   .text:0x00000000000021E3        85C0                 test eax, eax
   .text:0x00000000000021E5        7413                 jz code_0x21FA
   .text:0x00000000000021E7 code_0x21E7:
   .text:0x00000000000021E7        4533C0               xor r8d, r8d
   .text:0x00000000000021EA        33D2                 xor edx, edx
   .text:0x00000000000021EC        498BCE               mov rcx, r14
   .text:0x00000000000021EF        FF15FB8E0000         call qword ptr [LoadLibraryExW]; struct HINSTANCE__ * (__cdecl *)( unsigned short * lpLibFileName, void * hFile, unsigned long dwFlags )
   .text:0x00000000000021F5        488BD8               mov rbx, rax
   .text:0x00000000000021F8        EB02                 jmp code_0x21FC
   .text:0x00000000000021FA code_0x21FA:
   .text:0x00000000000021FA        33DB                 xor ebx, ebx
   .text:0x00000000000021FC code_0x21FC:
   .text:0x00000000000021FC        4C8D35FDDDFFFF       lea r14, [data_0x0]
   .text:0x0000000000002203        4885DB               test rbx, rbx
   .text:0x0000000000002206        750D                 jnz code_0x2215
   .text:0x0000000000002208 code_0x2208:
   .text:0x0000000000002208        488BC7               mov rax, rdi
   .text:0x000000000000220B        498784F6304A0100     xchg qword ptr [r14+rsi*8+0x14A30], rax
   .text:0x0000000000002213        EB1E                 jmp code_0x2233
   .text:0x0000000000002215 code_0x2215:
   .text:0x0000000000002215        488BC3               mov rax, rbx
   .text:0x0000000000002218        498784F6304A0100     xchg qword ptr [r14+rsi*8+0x14A30], rax
   .text:0x0000000000002220        4885C0               test rax, rax
   .text:0x0000000000002223        7409                 jz code_0x222E
   .text:0x0000000000002225 code_0x2225:
   .text:0x0000000000002225        488BCB               mov rcx, rbx
   .text:0x0000000000002228        FF15B28E0000         call qword ptr [FreeLibrary]; int (__cdecl *)( struct HINSTANCE__ * hLibModule )
   .text:0x000000000000222E code_0x222E:
   .text:0x000000000000222E        4885DB               test rbx, rbx
   .text:0x0000000000002231        7555                 jnz code_0x2288
   .text:0x0000000000002233 code_0x2233:
   .text:0x0000000000002233        4883C504             add rbp, 0x4
   .text:0x0000000000002237        493BEC               cmp rbp, r12
   .text:0x000000000000223A        0F852EFFFFFF         jnz code_0x216E
   .text:0x0000000000002240 code_0x2240:
   .text:0x0000000000002240        4C8B15E11D0100       mov r10, qword ptr [__security_cookie]
   .text:0x0000000000002247 code_0x2247:
   .text:0x0000000000002247        33DB                 xor ebx, ebx
   .text:0x0000000000002249 code_0x2249:
   .text:0x0000000000002249        4885DB               test rbx, rbx
   .text:0x000000000000224C        744A                 jz code_0x2298
   .text:0x000000000000224E code_0x224E:
   .text:0x000000000000224E        498BD5               mov rdx, r13
   .text:0x0000000000002251        488BCB               mov rcx, rbx
   .text:0x0000000000002254        FF158E8E0000         call qword ptr [GetProcAddress]; long long (__cdecl *)( ... ) (__cdecl *)( struct HINSTANCE__ * hModule, char * lpProcName )
   .text:0x000000000000225A        4885C0               test rax, rax
   .text:0x000000000000225D        7432                 jz code_0x2291
   .text:0x000000000000225F code_0x225F:
   .text:0x000000000000225F        4C8B05C21D0100       mov r8, qword ptr [__security_cookie]
   .text:0x0000000000002266        BA40000000           mov edx, 0x40
   .text:0x000000000000226B        418BC8               mov ecx, r8d
   .text:0x000000000000226E        83E13F               and ecx, 0x3F
   .text:0x0000000000002271        2BD1                 sub edx, ecx
   .text:0x0000000000002273        8ACA                 mov cl, dl
   .text:0x0000000000002275        488BD0               mov rdx, rax
   .text:0x0000000000002278        48D3CA               ror rdx, cl
   .text:0x000000000000227B        4933D0               xor rdx, r8
   .text:0x000000000000227E        4B8794FE484A0100     xchg qword ptr [r14+r15*8+0x14A48], rdx
   .text:0x0000000000002286        EB2D                 jmp code_0x22B5
   .text:0x0000000000002288 code_0x2288:
   .text:0x0000000000002288        4C8B15991D0100       mov r10, qword ptr [__security_cookie]
   .text:0x000000000000228F        EBB8                 jmp code_0x2249
   .text:0x0000000000002291 code_0x2291:
   .text:0x0000000000002291        4C8B15901D0100       mov r10, qword ptr [__security_cookie]
   .text:0x0000000000002298 code_0x2298:
   .text:0x0000000000002298        418BC2               mov eax, r10d
   .text:0x000000000000229B        B940000000           mov ecx, 0x40
   .text:0x00000000000022A0        83E03F               and eax, 0x3F
   .text:0x00000000000022A3        2BC8                 sub ecx, eax
   .text:0x00000000000022A5        48D3CF               ror rdi, cl
   .text:0x00000000000022A8        4933FA               xor rdi, r10
   .text:0x00000000000022AB        4B87BCFE484A0100     xchg qword ptr [r14+r15*8+0x14A48], rdi
   .text:0x00000000000022B3 code_0x22B3:
   .text:0x00000000000022B3        33C0                 xor eax, eax
   .text:0x00000000000022B5 code_0x22B5:
   .text:0x00000000000022B5        488B5C2450           mov rbx, qword ptr [rsp+0x50]
   .text:0x00000000000022BA        488B6C2458           mov rbp, qword ptr [rsp+0x58]
   .text:0x00000000000022BF        488B742460           mov rsi, qword ptr [rsp+0x60]
   .text:0x00000000000022C4        4883C420             add rsp, 0x20
   .text:0x00000000000022C8        415F                 pop r15
   .text:0x00000000000022CA        415E                 pop r14
   .text:0x00000000000022CC        415D                 pop r13
   .text:0x00000000000022CE        415C                 pop r12
   .text:0x00000000000022D0        5F                   pop rdi
   .text:0x00000000000022D1        C3                   ret
   .text:0x00000000000022D2 data_0x22D2:
   .text:0x00000000000022D2        db 2 dup(0xCC)
   .text:0x00000000000022D4 __vcrt_FlsAlloc:
   .text:0x00000000000022D4        4053                 push rbx
   .text:0x00000000000022D6        4883EC20             sub rsp, 0x20
   .text:0x00000000000022DA        488BD9               mov rbx, rcx
   .text:0x00000000000022DD        4C8D0DBC900000       lea r9, [string_FlsAlloc]; "FlsAlloc"
   .text:0x00000000000022E4        33C9                 xor ecx, ecx
   .text:0x00000000000022E6        4C8D05AB900000       lea r8, [data_0xB398]
   .text:0x00000000000022ED        488D15AC900000       lea rdx, [string_FlsAlloc]; "FlsAlloc"
   .text:0x00000000000022F4        E803FEFFFF           call func_0x20FC; int32_t __cdecl( int32_t p1, int64_t p2, int64_t p3, int64_t p4 )
   .text:0x00000000000022F9        4885C0               test rax, rax
   .text:0x00000000000022FC        740F                 jz code_0x230D
   .text:0x00000000000022FE code_0x22FE:
   .text:0x00000000000022FE        488BCB               mov rcx, rbx
   .text:0x0000000000002301        4883C420             add rsp, 0x20
   .text:0x0000000000002305        5B                   pop rbx
   .text:0x0000000000002306        48FF251B8F0000       jmp qword ptr [GuardCFDispatchFunction]
   .text:0x000000000000230D code_0x230D:
   .text:0x000000000000230D        4883C420             add rsp, 0x20
   .text:0x0000000000002311        5B                   pop rbx
   .text:0x0000000000002312        48FF25A78D0000       jmp qword ptr [TlsAlloc]; unsigned long (__cdecl *)( void )
   .text:0x0000000000002319 data_0x2319:
   .text:0x0000000000002319        db 3 dup(0xCC)
   .text:0x000000000000231C __vcrt_FlsFree:
   .text:0x000000000000231C        4053                 push rbx
   .text:0x000000000000231E        4883EC20             sub rsp, 0x20
   .text:0x0000000000002322        8BD9                 mov ebx, ecx
   .text:0x0000000000002324        4C8D0D8D900000       lea r9, [string_FlsFree]; "FlsFree"
   .text:0x000000000000232B        B901000000           mov ecx, 0x1
   .text:0x0000000000002330        4C8D0579900000       lea r8, [data_0xB3B0]
   .text:0x0000000000002337        488D157A900000       lea rdx, [string_FlsFree]; "FlsFree"
   .text:0x000000000000233E        E8B9FDFFFF           call func_0x20FC; int32_t __cdecl( int32_t p1, int64_t p2, int64_t p3, int64_t p4 )
   .text:0x0000000000002343        8BCB                 mov ecx, ebx
   .text:0x0000000000002345        4885C0               test rax, rax
   .text:0x0000000000002348        740C                 jz code_0x2356
   .text:0x000000000000234A code_0x234A:
   .text:0x000000000000234A        4883C420             add rsp, 0x20
   .text:0x000000000000234E        5B                   pop rbx
   .text:0x000000000000234F        48FF25D28E0000       jmp qword ptr [GuardCFDispatchFunction]
   .text:0x0000000000002356 code_0x2356:
   .text:0x0000000000002356        4883C420             add rsp, 0x20
   .text:0x000000000000235A        5B                   pop rbx
   .text:0x000000000000235B        48FF25768D0000       jmp qword ptr [TlsFree]; int (__cdecl *)( unsigned long dwTlsIndex )
   .text:0x0000000000002362 data_0x2362:
   .text:0x0000000000002362        db 2 dup(0xCC)
   .text:0x0000000000002364 __vcrt_FlsSetValue:
   .text:0x0000000000002364        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000002369        57                   push rdi
   .text:0x000000000000236A        4883EC20             sub rsp, 0x20
   .text:0x000000000000236E        488BDA               mov rbx, rdx
   .text:0x0000000000002371        4C8D0D50900000       lea r9, [string_FlsSetValu]; "FlsSetValue"
   .text:0x0000000000002378        8BF9                 mov edi, ecx
   .text:0x000000000000237A        488D1547900000       lea rdx, [string_FlsSetValu]; "FlsSetValue"
   .text:0x0000000000002381        B903000000           mov ecx, 0x3
   .text:0x0000000000002386        4C8D0533900000       lea r8, [data_0xB3C0]
   .text:0x000000000000238D        E86AFDFFFF           call func_0x20FC; int32_t __cdecl( int32_t p1, int64_t p2, int64_t p3, int64_t p4 )
   .text:0x0000000000002392        488BD3               mov rdx, rbx
   .text:0x0000000000002395        8BCF                 mov ecx, edi
   .text:0x0000000000002397        4885C0               test rax, rax
   .text:0x000000000000239A        7408                 jz code_0x23A4
   .text:0x000000000000239C code_0x239C:
   .text:0x000000000000239C        FF15868E0000         call qword ptr [GuardCFDispatchFunction]; void (__cdecl *)( int32_t p1, int64_t p2 )
   .text:0x00000000000023A2        EB06                 jmp code_0x23AA
   .text:0x00000000000023A4 code_0x23A4:
   .text:0x00000000000023A4        FF15268D0000         call qword ptr [TlsSetValue]; int (__cdecl *)( unsigned long dwTlsIndex, void * lpTlsValue )
   .text:0x00000000000023AA code_0x23AA:
   .text:0x00000000000023AA        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x00000000000023AF        4883C420             add rsp, 0x20
   .text:0x00000000000023B3        5F                   pop rdi
   .text:0x00000000000023B4        C3                   ret
   .text:0x00000000000023B5 data_0x23B5:
   .text:0x00000000000023B5        db 3 dup(0xCC)
   .text:0x00000000000023B8 __vcrt_InitializeCriticalSectionEx:
   .text:0x00000000000023B8        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x00000000000023BD        4889742410           mov qword ptr [rsp+0x10], rsi
   .text:0x00000000000023C2        57                   push rdi
   .text:0x00000000000023C3        4883EC20             sub rsp, 0x20
   .text:0x00000000000023C7        418BF0               mov esi, r8d
   .text:0x00000000000023CA        4C8D0D0F900000       lea r9, [string_Initialize]; "InitializeCriticalSectionEx"
   .text:0x00000000000023D1        8BDA                 mov ebx, edx
   .text:0x00000000000023D3        4C8D05FE8F0000       lea r8, [data_0xB3D8]
   .text:0x00000000000023DA        488BF9               mov rdi, rcx
   .text:0x00000000000023DD        488D15FC8F0000       lea rdx, [string_Initialize]; "InitializeCriticalSectionEx"
   .text:0x00000000000023E4        B904000000           mov ecx, 0x4
   .text:0x00000000000023E9        E80EFDFFFF           call func_0x20FC; int32_t __cdecl( int32_t p1, int64_t p2, int64_t p3, int64_t p4 )
   .text:0x00000000000023EE        8BD3                 mov edx, ebx
   .text:0x00000000000023F0        488BCF               mov rcx, rdi
   .text:0x00000000000023F3        4885C0               test rax, rax
   .text:0x00000000000023F6        740B                 jz code_0x2403
   .text:0x00000000000023F8 code_0x23F8:
   .text:0x00000000000023F8        448BC6               mov r8d, esi
   .text:0x00000000000023FB        FF15278E0000         call qword ptr [GuardCFDispatchFunction]; void (__cdecl *)( int64_t p1, int32_t p2, int32_t p3 )
   .text:0x0000000000002401        EB06                 jmp code_0x2409
   .text:0x0000000000002403 code_0x2403:
   .text:0x0000000000002403        FF15AF8C0000         call qword ptr [InitializeCriticalSectionAndSpinCount]; int (__cdecl *)( struct _RTL_CRITICAL_SECTION * lpCriticalSection, unsigned long dwSpinCount )
   .text:0x0000000000002409 code_0x2409:
   .text:0x0000000000002409        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x000000000000240E        488B742438           mov rsi, qword ptr [rsp+0x38]
   .text:0x0000000000002413        4883C420             add rsp, 0x20
   .text:0x0000000000002417        5F                   pop rdi
   .text:0x0000000000002418        C3                   ret
   .text:0x0000000000002419 data_0x2419:
   .text:0x0000000000002419        db 3 dup(0xCC)
   .text:0x000000000000241C __vcrt_initialize_winapi_thunks:
   .text:0x000000000000241C        48897C2408           mov qword ptr [rsp+0x8], rdi
   .text:0x0000000000002421        488D3D20260100       lea rdi, [data_0x14A48]
   .text:0x0000000000002428        488D0541260100       lea rax, [data_0x14A70]
   .text:0x000000000000242F        483BC7               cmp rax, rdi
   .text:0x0000000000002432        488B05EF1B0100       mov rax, qword ptr [__security_cookie]
   .text:0x0000000000002439        481BC9               sbb rcx, rcx
   .text:0x000000000000243C        48F7D1               not rcx
   .text:0x000000000000243F        83E105               and ecx, 0x5
   .text:0x0000000000002442        F348AB               rep stosq
   .text:0x0000000000002445        488B7C2408           mov rdi, qword ptr [rsp+0x8]
   .text:0x000000000000244A        C3                   ret
   .text:0x000000000000244B code_0x244B:
   .text:0x000000000000244B        CC                   int3
   .text:0x000000000000244C __vcrt_uninitialize_winapi_thunks:
   .text:0x000000000000244C        84C9                 test cl, cl
   .text:0x000000000000244E        7539                 jnz code_0x2489
   .text:0x0000000000002450 code_0x2450:
   .text:0x0000000000002450        53                   push rbx
   .text:0x0000000000002451        4883EC20             sub rsp, 0x20
   .text:0x0000000000002455        488D1DD4250100       lea rbx, [data_0x14A30]
   .text:0x000000000000245C code_0x245C:
   .text:0x000000000000245C        488B0B               mov rcx, qword ptr [rbx]
   .text:0x000000000000245F        4885C9               test rcx, rcx
   .text:0x0000000000002462        7410                 jz code_0x2474
   .text:0x0000000000002464 code_0x2464:
   .text:0x0000000000002464        4883F9FF             cmp rcx, 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000002468        7406                 jz code_0x2470
   .text:0x000000000000246A code_0x246A:
   .text:0x000000000000246A        FF15708C0000         call qword ptr [FreeLibrary]; int (__cdecl *)( struct HINSTANCE__ * hLibModule )
   .text:0x0000000000002470 code_0x2470:
   .text:0x0000000000002470        48832300             and qword ptr [rbx], 0x0
   .text:0x0000000000002474 code_0x2474:
   .text:0x0000000000002474        4883C308             add rbx, 0x8
   .text:0x0000000000002478        488D05C9250100       lea rax, [data_0x14A48]
   .text:0x000000000000247F        483BD8               cmp rbx, rax
   .text:0x0000000000002482        75D8                 jnz code_0x245C
   .text:0x0000000000002484 code_0x2484:
   .text:0x0000000000002484        4883C420             add rsp, 0x20
   .text:0x0000000000002488        5B                   pop rbx
   .text:0x0000000000002489 code_0x2489:
   .text:0x0000000000002489        C3                   ret
   .text:0x000000000000248A data_0x248A:
   .text:0x000000000000248A        db 2 dup(0xCC)
   .text:0x000000000000248C __vcrt_initialize_pure_virtual_call_handler:
   .text:0x000000000000248C        488B05951B0100       mov rax, qword ptr [__security_cookie]
   .text:0x0000000000002493        488905D6250100       mov qword ptr [data_0x14A70], rax
   .text:0x000000000000249A        C3                   ret
   .text:0x000000000000249B data_0x249B:
   .text:0x000000000000249B        db 11 dup(0xCC)
   .text:0x00000000000024A6 data_0x24A6:
   .text:0x00000000000024A6        dq 0x000000841F0F6666
   .text:0x00000000000024AE        dw 0x0000
   .text:0x00000000000024B0 code_0x24B0:
   .text:0x00000000000024B0        57                   push rdi
   .text:0x00000000000024B1        56                   push rsi
   .text:0x00000000000024B2        498BC3               mov rax, r11
   .text:0x00000000000024B5        488BF9               mov rdi, rcx
   .text:0x00000000000024B8        498BC8               mov rcx, r8
   .text:0x00000000000024BB        498BF2               mov rsi, r10
   .text:0x00000000000024BE        F3A4                 rep movsb
   .text:0x00000000000024C0        5E                   pop rsi
   .text:0x00000000000024C1        5F                   pop rdi
   .text:0x00000000000024C2        C3                   ret
   .text:0x00000000000024C3 data_0x24C3:
   .text:0x00000000000024C3        db 6 dup(0xCC)
   .text:0x00000000000024C9 data_0x24C9:
   .text:0x00000000000024C9        dd 0x00801F0F
   .text:0x00000000000024CD        dw 0x0000
   .text:0x00000000000024CF        db 0x00
   .text:0x00000000000024D0 func_0x24D0:
   .text:0x00000000000024D0        4C8BD9               mov r11, rcx
   .text:0x00000000000024D3        4C8BD2               mov r10, rdx
   .text:0x00000000000024D6        4983F810             cmp r8, 0x10
   .text:0x00000000000024DA        7664                 jbe code_0x2540
   .text:0x00000000000024DC code_0x24DC:
   .text:0x00000000000024DC        4983F820             cmp r8, 0x20
   .text:0x00000000000024E0        763E                 jbe code_0x2520
   .text:0x00000000000024E2 code_0x24E2:
   .text:0x00000000000024E2        482BD1               sub rdx, rcx
   .text:0x00000000000024E5        730D                 jae code_0x24F4
   .text:0x00000000000024E7 code_0x24E7:
   .text:0x00000000000024E7        4B8D0410             lea rax, [r8+r10]
   .text:0x00000000000024EB        483BC8               cmp rcx, rax
   .text:0x00000000000024EE        0F823C030000         jb code_0x2830
   .text:0x00000000000024F4 code_0x24F4:
   .text:0x00000000000024F4        4981F880000000       cmp r8, 0x80
   .text:0x00000000000024FB        0F865F020000         jbe code_0x2760
   .text:0x0000000000002501 code_0x2501:
   .text:0x0000000000002501        0FBA255B24010001     bt dword ptr [data_0x14964], 0x1
   .text:0x0000000000002509        0F83A1010000         jae code_0x26B0
   .text:0x000000000000250F code_0x250F:
   .text:0x000000000000250F        EB9F                 jmp code_0x24B0
   .text:0x0000000000002511 data_0x2511:
   .text:0x0000000000002511        dq 0x0F66666666666666
   .text:0x0000000000002519        dd 0x0000841F
   .text:0x000000000000251D        dw 0x0000
   .text:0x000000000000251F        db 0x00
   .text:0x0000000000002520 code_0x2520:
   .text:0x0000000000002520        0F1002               movups xmm0, xmmword ptr [rdx]
   .text:0x0000000000002523        420F104C02F0         movups xmm1, xmmword ptr [rdx+r8-0x10]
   .text:0x0000000000002529        0F1101               movups xmmword ptr [rcx], xmm0
   .text:0x000000000000252C        420F114C01F0         movups xmmword ptr [rcx+r8-0x10], xmm1
   .text:0x0000000000002532        488BC1               mov rax, rcx
   .text:0x0000000000002535        C3                   ret
   .text:0x0000000000002536 data_0x2536:
   .text:0x0000000000002536        dq 0x000000841F0F6666
   .text:0x000000000000253E        dw 0x0000
   .text:0x0000000000002540 code_0x2540:
   .text:0x0000000000002540        488BC1               mov rax, rcx
   .text:0x0000000000002543        4C8D0DB6DAFFFF       lea r9, [data_0x0]
   .text:0x000000000000254A        438B8C8157250000     mov ecx, dword ptr [r9+r8*4+0x2557]
   .text:0x0000000000002552        4903C9               add rcx, r9
   .text:0x0000000000002555        FFE1                 jmp rcx; 17 indirect references.
   .text:0x0000000000002557 jump_table:
   .text:0x0000000000002557        dd rva_ptr code_0x25A0
   .text:0x000000000000255B        dd rva_ptr code_0x25BF
   .text:0x000000000000255F        dd rva_ptr code_0x25A1
   .text:0x0000000000002563        dd rva_ptr code_0x25AF
   .text:0x0000000000002567        dd rva_ptr code_0x25E8
   .text:0x000000000000256B        dd rva_ptr code_0x25F0
   .text:0x000000000000256F        dd rva_ptr code_0x2600
   .text:0x0000000000002573        dd rva_ptr code_0x2610
   .text:0x0000000000002577        dd rva_ptr code_0x25A8
   .text:0x000000000000257B        dd rva_ptr code_0x2640
   .text:0x000000000000257F        dd rva_ptr code_0x2650
   .text:0x0000000000002583        dd rva_ptr code_0x25D0
   .text:0x0000000000002587        dd rva_ptr code_0x2660
   .text:0x000000000000258B        dd rva_ptr code_0x2628
   .text:0x000000000000258F        dd rva_ptr code_0x2670
   .text:0x0000000000002593        dd rva_ptr code_0x2690
   .text:0x0000000000002597        dd rva_ptr code_0x25C5
   .text:0x000000000000259B data_0x259B:
   .text:0x000000000000259B        db 2 dup(0x0F)
   .text:0x000000000000259D        db 3 dup(0x44)
   .text:0x00000000000025A0 code_0x25A0:
   .text:0x00000000000025A0        C3                   ret
   .text:0x00000000000025A1 code_0x25A1:
   .text:0x00000000000025A1        0FB70A               movzx ecx, word ptr [rdx]
   .text:0x00000000000025A4        668908               mov word ptr [rax], cx
   .text:0x00000000000025A7        C3                   ret
   .text:0x00000000000025A8 code_0x25A8:
   .text:0x00000000000025A8        488B0A               mov rcx, qword ptr [rdx]
   .text:0x00000000000025AB        488908               mov qword ptr [rax], rcx
   .text:0x00000000000025AE        C3                   ret
   .text:0x00000000000025AF code_0x25AF:
   .text:0x00000000000025AF        0FB70A               movzx ecx, word ptr [rdx]
   .text:0x00000000000025B2        440FB64202           movzx r8d, byte ptr [rdx+0x2]
   .text:0x00000000000025B7        668908               mov word ptr [rax], cx
   .text:0x00000000000025BA        44884002             mov byte ptr [rax+0x2], r8b
   .text:0x00000000000025BE        C3                   ret
   .text:0x00000000000025BF code_0x25BF:
   .text:0x00000000000025BF        0FB60A               movzx ecx, byte ptr [rdx]
   .text:0x00000000000025C2        8808                 mov byte ptr [rax], cl
   .text:0x00000000000025C4        C3                   ret
   .text:0x00000000000025C5 code_0x25C5:
   .text:0x00000000000025C5        F30F6F02             movdqu xmm0, xmmword ptr [rdx]
   .text:0x00000000000025C9        F30F7F00             movdqu xmmword ptr [rax], xmm0
   .text:0x00000000000025CD        C3                   ret
   .text:0x00000000000025CE data_0x25CE:
   .text:0x00000000000025CE        dw 0x9066
   .text:0x00000000000025D0 code_0x25D0:
   .text:0x00000000000025D0        4C8B02               mov r8, qword ptr [rdx]
   .text:0x00000000000025D3        0FB74A08             movzx ecx, word ptr [rdx+0x8]
   .text:0x00000000000025D7        440FB64A0A           movzx r9d, byte ptr [rdx+0xA]
   .text:0x00000000000025DC        4C8900               mov qword ptr [rax], r8
   .text:0x00000000000025DF        66894808             mov word ptr [rax+0x8], cx
   .text:0x00000000000025E3        4488480A             mov byte ptr [rax+0xA], r9b
   .text:0x00000000000025E7        C3                   ret
   .text:0x00000000000025E8 code_0x25E8:
   .text:0x00000000000025E8        8B0A                 mov ecx, dword ptr [rdx]
   .text:0x00000000000025EA        8908                 mov dword ptr [rax], ecx
   .text:0x00000000000025EC        C3                   ret
   .text:0x00000000000025ED data_0x25ED:
   .text:0x00000000000025ED        dw 0x1F0F
   .text:0x00000000000025EF        db 0x00
   .text:0x00000000000025F0 code_0x25F0:
   .text:0x00000000000025F0        8B0A                 mov ecx, dword ptr [rdx]
   .text:0x00000000000025F2        440FB64204           movzx r8d, byte ptr [rdx+0x4]
   .text:0x00000000000025F7        8908                 mov dword ptr [rax], ecx
   .text:0x00000000000025F9        44884004             mov byte ptr [rax+0x4], r8b
   .text:0x00000000000025FD        C3                   ret
   .text:0x00000000000025FE data_0x25FE:
   .text:0x00000000000025FE        dw 0x9066
   .text:0x0000000000002600 code_0x2600:
   .text:0x0000000000002600        8B0A                 mov ecx, dword ptr [rdx]
   .text:0x0000000000002602        440FB74204           movzx r8d, word ptr [rdx+0x4]
   .text:0x0000000000002607        8908                 mov dword ptr [rax], ecx
   .text:0x0000000000002609        6644894004           mov word ptr [rax+0x4], r8w
   .text:0x000000000000260E        C3                   ret
   .text:0x000000000000260F data_0x260F:
   .text:0x000000000000260F        db 0x90
   .text:0x0000000000002610 code_0x2610:
   .text:0x0000000000002610        8B0A                 mov ecx, dword ptr [rdx]
   .text:0x0000000000002612        440FB74204           movzx r8d, word ptr [rdx+0x4]
   .text:0x0000000000002617        440FB64A06           movzx r9d, byte ptr [rdx+0x6]
   .text:0x000000000000261C        8908                 mov dword ptr [rax], ecx
   .text:0x000000000000261E        6644894004           mov word ptr [rax+0x4], r8w
   .text:0x0000000000002623        44884806             mov byte ptr [rax+0x6], r9b
   .text:0x0000000000002627        C3                   ret
   .text:0x0000000000002628 code_0x2628:
   .text:0x0000000000002628        4C8B02               mov r8, qword ptr [rdx]
   .text:0x000000000000262B        8B4A08               mov ecx, dword ptr [rdx+0x8]
   .text:0x000000000000262E        440FB64A0C           movzx r9d, byte ptr [rdx+0xC]
   .text:0x0000000000002633        4C8900               mov qword ptr [rax], r8
   .text:0x0000000000002636        894808               mov dword ptr [rax+0x8], ecx
   .text:0x0000000000002639        4488480C             mov byte ptr [rax+0xC], r9b
   .text:0x000000000000263D        C3                   ret
   .text:0x000000000000263E data_0x263E:
   .text:0x000000000000263E        dw 0x9066
   .text:0x0000000000002640 code_0x2640:
   .text:0x0000000000002640        4C8B02               mov r8, qword ptr [rdx]
   .text:0x0000000000002643        0FB64A08             movzx ecx, byte ptr [rdx+0x8]
   .text:0x0000000000002647        4C8900               mov qword ptr [rax], r8
   .text:0x000000000000264A        884808               mov byte ptr [rax+0x8], cl
   .text:0x000000000000264D        C3                   ret
   .text:0x000000000000264E data_0x264E:
   .text:0x000000000000264E        dw 0x9066
   .text:0x0000000000002650 code_0x2650:
   .text:0x0000000000002650        4C8B02               mov r8, qword ptr [rdx]
   .text:0x0000000000002653        0FB74A08             movzx ecx, word ptr [rdx+0x8]
   .text:0x0000000000002657        4C8900               mov qword ptr [rax], r8
   .text:0x000000000000265A        66894808             mov word ptr [rax+0x8], cx
   .text:0x000000000000265E        C3                   ret
   .text:0x000000000000265F data_0x265F:
   .text:0x000000000000265F        db 0x90
   .text:0x0000000000002660 code_0x2660:
   .text:0x0000000000002660        4C8B02               mov r8, qword ptr [rdx]
   .text:0x0000000000002663        8B4A08               mov ecx, dword ptr [rdx+0x8]
   .text:0x0000000000002666        4C8900               mov qword ptr [rax], r8
   .text:0x0000000000002669        894808               mov dword ptr [rax+0x8], ecx
   .text:0x000000000000266C        C3                   ret
   .text:0x000000000000266D data_0x266D:
   .text:0x000000000000266D        dw 0x1F0F
   .text:0x000000000000266F        db 0x00
   .text:0x0000000000002670 code_0x2670:
   .text:0x0000000000002670        4C8B02               mov r8, qword ptr [rdx]
   .text:0x0000000000002673        8B4A08               mov ecx, dword ptr [rdx+0x8]
   .text:0x0000000000002676        440FB74A0C           movzx r9d, word ptr [rdx+0xC]
   .text:0x000000000000267B        4C8900               mov qword ptr [rax], r8
   .text:0x000000000000267E        894808               mov dword ptr [rax+0x8], ecx
   .text:0x0000000000002681        664489480C           mov word ptr [rax+0xC], r9w
   .text:0x0000000000002686        C3                   ret
   .text:0x0000000000002687 data_0x2687:
   .text:0x0000000000002687        dq 0x00000000841F0F66
   .text:0x000000000000268F        db 0x00
   .text:0x0000000000002690 code_0x2690:
   .text:0x0000000000002690        4C8B02               mov r8, qword ptr [rdx]
   .text:0x0000000000002693        8B4A08               mov ecx, dword ptr [rdx+0x8]
   .text:0x0000000000002696        440FB74A0C           movzx r9d, word ptr [rdx+0xC]
   .text:0x000000000000269B        440FB6520E           movzx r10d, byte ptr [rdx+0xE]
   .text:0x00000000000026A0        4C8900               mov qword ptr [rax], r8
   .text:0x00000000000026A3        894808               mov dword ptr [rax+0x8], ecx
   .text:0x00000000000026A6        664489480C           mov word ptr [rax+0xC], r9w
   .text:0x00000000000026AB        4488500E             mov byte ptr [rax+0xE], r10b
   .text:0x00000000000026AF        C3                   ret
   .text:0x00000000000026B0 code_0x26B0:
   .text:0x00000000000026B0        0F100411             movups xmm0, xmmword ptr [rcx+rdx]
   .text:0x00000000000026B4        4C03C1               add r8, rcx
   .text:0x00000000000026B7        4883C110             add rcx, 0x10
   .text:0x00000000000026BB        41F6C30F             test r11b, 0xF
   .text:0x00000000000026BF        7413                 jz code_0x26D4
   .text:0x00000000000026C1 code_0x26C1:
   .text:0x00000000000026C1        0F28C8               movaps xmm1, xmm0
   .text:0x00000000000026C4        4883E1F0             and rcx, 0xFFFFFFFFFFFFFFF0
   .text:0x00000000000026C8        0F100411             movups xmm0, xmmword ptr [rcx+rdx]
   .text:0x00000000000026CC        4883C110             add rcx, 0x10
   .text:0x00000000000026D0        410F110B             movups xmmword ptr [r11], xmm1
   .text:0x00000000000026D4 code_0x26D4:
   .text:0x00000000000026D4        4C2BC1               sub r8, rcx
   .text:0x00000000000026D7        4D8BC8               mov r9, r8
   .text:0x00000000000026DA        49C1E907             shr r9, 0x7
   .text:0x00000000000026DE        0F8496000000         jz code_0x277A
   .text:0x00000000000026E4 code_0x26E4:
   .text:0x00000000000026E4        0F2941F0             movaps xmmword ptr [rcx-0x10], xmm0
   .text:0x00000000000026E8        4C3B0D29190100       cmp r9, qword ptr [data_0x14018]; "/ "
   .text:0x00000000000026EF        7617                 jbe code_0x2708
   .text:0x00000000000026F1 code_0x26F1:
   .text:0x00000000000026F1        E9D2000000           jmp code_0x27C8
   .text:0x00000000000026F6 data_0x26F6:
   .text:0x00000000000026F6        dq 0x000000841F0F6666
   .text:0x00000000000026FE        dw 0x0000
   .text:0x0000000000002700 code_0x2700:
   .text:0x0000000000002700        0F2941E0             movaps xmmword ptr [rcx-0x20], xmm0
   .text:0x0000000000002704        0F2949F0             movaps xmmword ptr [rcx-0x10], xmm1
   .text:0x0000000000002708 code_0x2708:
   .text:0x0000000000002708        0F100411             movups xmm0, xmmword ptr [rcx+rdx]
   .text:0x000000000000270C        0F104C1110           movups xmm1, xmmword ptr [rcx+rdx+0x10]
   .text:0x0000000000002711        4881C180000000       add rcx, 0x80
   .text:0x0000000000002718        0F294180             movaps xmmword ptr [rcx-0x80], xmm0
   .text:0x000000000000271C        0F294990             movaps xmmword ptr [rcx-0x70], xmm1
   .text:0x0000000000002720        0F104411A0           movups xmm0, xmmword ptr [rcx+rdx-0x60]
   .text:0x0000000000002725        0F104C11B0           movups xmm1, xmmword ptr [rcx+rdx-0x50]
   .text:0x000000000000272A        49FFC9               dec r9
   .text:0x000000000000272D        0F2941A0             movaps xmmword ptr [rcx-0x60], xmm0
   .text:0x0000000000002731        0F2949B0             movaps xmmword ptr [rcx-0x50], xmm1
   .text:0x0000000000002735        0F104411C0           movups xmm0, xmmword ptr [rcx+rdx-0x40]
   .text:0x000000000000273A        0F104C11D0           movups xmm1, xmmword ptr [rcx+rdx-0x30]
   .text:0x000000000000273F        0F2941C0             movaps xmmword ptr [rcx-0x40], xmm0
   .text:0x0000000000002743        0F2949D0             movaps xmmword ptr [rcx-0x30], xmm1
   .text:0x0000000000002747        0F104411E0           movups xmm0, xmmword ptr [rcx+rdx-0x20]
   .text:0x000000000000274C        0F104C11F0           movups xmm1, xmmword ptr [rcx+rdx-0x10]
   .text:0x0000000000002751        75AD                 jnz code_0x2700
   .text:0x0000000000002753 code_0x2753:
   .text:0x0000000000002753        0F2941E0             movaps xmmword ptr [rcx-0x20], xmm0
   .text:0x0000000000002757        4983E07F             and r8, 0x7F
   .text:0x000000000000275B        0F28C1               movaps xmm0, xmm1
   .text:0x000000000000275E        EB1A                 jmp code_0x277A
   .text:0x0000000000002760 code_0x2760:
   .text:0x0000000000002760        0FBA25FC21010002     bt dword ptr [data_0x14964], 0x2
   .text:0x0000000000002768        0F8242FDFFFF         jb code_0x24B0
   .text:0x000000000000276E code_0x276E:
   .text:0x000000000000276E        0F100411             movups xmm0, xmmword ptr [rcx+rdx]
   .text:0x0000000000002772        4883C110             add rcx, 0x10
   .text:0x0000000000002776        4983E810             sub r8, 0x10
   .text:0x000000000000277A code_0x277A:
   .text:0x000000000000277A        4D8BC8               mov r9, r8
   .text:0x000000000000277D        49C1E904             shr r9, 0x4
   .text:0x0000000000002781        741E                 jz code_0x27A1
   .text:0x0000000000002783 code_0x2783:
   .text:0x0000000000002783        66666666660F1F840000000000 o16 nop [rax+rax+0x0]
   .text:0x0000000000002790 code_0x2790:
   .text:0x0000000000002790        0F1141F0             movups xmmword ptr [rcx-0x10], xmm0
   .text:0x0000000000002794        0F100411             movups xmm0, xmmword ptr [rcx+rdx]
   .text:0x0000000000002798        4883C110             add rcx, 0x10
   .text:0x000000000000279C        49FFC9               dec r9
   .text:0x000000000000279F        75EF                 jnz code_0x2790
   .text:0x00000000000027A1 code_0x27A1:
   .text:0x00000000000027A1        4983E00F             and r8, 0xF
   .text:0x00000000000027A5        740D                 jz code_0x27B4
   .text:0x00000000000027A7 code_0x27A7:
   .text:0x00000000000027A7        4A8D0401             lea rax, [rcx+r8]
   .text:0x00000000000027AB        0F104C10F0           movups xmm1, xmmword ptr [rax+rdx-0x10]
   .text:0x00000000000027B0        0F1148F0             movups xmmword ptr [rax-0x10], xmm1
   .text:0x00000000000027B4 code_0x27B4:
   .text:0x00000000000027B4        0F1141F0             movups xmmword ptr [rcx-0x10], xmm0
   .text:0x00000000000027B8        498BC3               mov rax, r11
   .text:0x00000000000027BB        C3                   ret
   .text:0x00000000000027BC data_0x27BC:
   .text:0x00000000000027BC        dd 0x00401F0F
   .text:0x00000000000027C0 code_0x27C0:
   .text:0x00000000000027C0        0F2B41E0             movntps [rcx-0x20], xmm0
   .text:0x00000000000027C4        0F2B49F0             movntps [rcx-0x10], xmm1
   .text:0x00000000000027C8 code_0x27C8:
   .text:0x00000000000027C8        0F18841100020000     prefetchnta byte ptr [rcx+rdx+0x200]
   .text:0x00000000000027D0        0F100411             movups xmm0, xmmword ptr [rcx+rdx]
   .text:0x00000000000027D4        0F104C1110           movups xmm1, xmmword ptr [rcx+rdx+0x10]
   .text:0x00000000000027D9        4881C180000000       add rcx, 0x80
   .text:0x00000000000027E0        0F2B4180             movntps [rcx-0x80], xmm0
   .text:0x00000000000027E4        0F2B4990             movntps [rcx-0x70], xmm1
   .text:0x00000000000027E8        0F104411A0           movups xmm0, xmmword ptr [rcx+rdx-0x60]
   .text:0x00000000000027ED        0F104C11B0           movups xmm1, xmmword ptr [rcx+rdx-0x50]
   .text:0x00000000000027F2        49FFC9               dec r9
   .text:0x00000000000027F5        0F2B41A0             movntps [rcx-0x60], xmm0
   .text:0x00000000000027F9        0F2B49B0             movntps [rcx-0x50], xmm1
   .text:0x00000000000027FD        0F104411C0           movups xmm0, xmmword ptr [rcx+rdx-0x40]
   .text:0x0000000000002802        0F104C11D0           movups xmm1, xmmword ptr [rcx+rdx-0x30]
   .text:0x0000000000002807        0F18841140020000     prefetchnta byte ptr [rcx+rdx+0x240]
   .text:0x000000000000280F        0F2B41C0             movntps [rcx-0x40], xmm0
   .text:0x0000000000002813        0F2B49D0             movntps [rcx-0x30], xmm1
   .text:0x0000000000002817        0F104411E0           movups xmm0, xmmword ptr [rcx+rdx-0x20]
   .text:0x000000000000281C        0F104C11F0           movups xmm1, xmmword ptr [rcx+rdx-0x10]
   .text:0x0000000000002821        759D                 jnz code_0x27C0
   .text:0x0000000000002823 code_0x2823:
   .text:0x0000000000002823        0FAEF8               sfence
   .text:0x0000000000002826        E928FFFFFF           jmp code_0x2753
   .text:0x000000000000282B data_0x282B:
   .text:0x000000000000282B        dw 0x1F0F
   .text:0x000000000000282D        db "D\x00"
   .text:0x000000000000282F        db 0x00
   .text:0x0000000000002830 code_0x2830:
   .text:0x0000000000002830        4903C8               add rcx, r8
   .text:0x0000000000002833        0F104411F0           movups xmm0, xmmword ptr [rcx+rdx-0x10]
   .text:0x0000000000002838        4883E910             sub rcx, 0x10
   .text:0x000000000000283C        4983E810             sub r8, 0x10
   .text:0x0000000000002840        F6C10F               test cl, 0xF
   .text:0x0000000000002843        7417                 jz code_0x285C
   .text:0x0000000000002845 code_0x2845:
   .text:0x0000000000002845        488BC1               mov rax, rcx
   .text:0x0000000000002848        4883E1F0             and rcx, 0xFFFFFFFFFFFFFFF0
   .text:0x000000000000284C        0F10C8               movups xmm1, xmm0
   .text:0x000000000000284F        0F100411             movups xmm0, xmmword ptr [rcx+rdx]
   .text:0x0000000000002853        0F1108               movups xmmword ptr [rax], xmm1
   .text:0x0000000000002856        4C8BC1               mov r8, rcx
   .text:0x0000000000002859        4D2BC3               sub r8, r11
   .text:0x000000000000285C code_0x285C:
   .text:0x000000000000285C        4D8BC8               mov r9, r8
   .text:0x000000000000285F        49C1E907             shr r9, 0x7
   .text:0x0000000000002863        7468                 jz code_0x28CD
   .text:0x0000000000002865 code_0x2865:
   .text:0x0000000000002865        0F2901               movaps xmmword ptr [rcx], xmm0
   .text:0x0000000000002868        EB0D                 jmp code_0x2877
   .text:0x000000000000286A data_0x286A:
   .text:0x000000000000286A        dw 0x0F66
   .text:0x000000000000286C        db 0x1F
   .text:0x000000000000286D        db "D\x00"
   .text:0x000000000000286F        db 0x00
   .text:0x0000000000002870 code_0x2870:
   .text:0x0000000000002870        0F294110             movaps xmmword ptr [rcx+0x10], xmm0
   .text:0x0000000000002874        0F2909               movaps xmmword ptr [rcx], xmm1
   .text:0x0000000000002877 code_0x2877:
   .text:0x0000000000002877        0F104411F0           movups xmm0, xmmword ptr [rcx+rdx-0x10]
   .text:0x000000000000287C        0F104C11E0           movups xmm1, xmmword ptr [rcx+rdx-0x20]
   .text:0x0000000000002881        4881E980000000       sub rcx, 0x80
   .text:0x0000000000002888        0F294170             movaps xmmword ptr [rcx+0x70], xmm0
   .text:0x000000000000288C        0F294960             movaps xmmword ptr [rcx+0x60], xmm1
   .text:0x0000000000002890        0F10441150           movups xmm0, xmmword ptr [rcx+rdx+0x50]
   .text:0x0000000000002895        0F104C1140           movups xmm1, xmmword ptr [rcx+rdx+0x40]
   .text:0x000000000000289A        49FFC9               dec r9
   .text:0x000000000000289D        0F294150             movaps xmmword ptr [rcx+0x50], xmm0
   .text:0x00000000000028A1        0F294940             movaps xmmword ptr [rcx+0x40], xmm1
   .text:0x00000000000028A5        0F10441130           movups xmm0, xmmword ptr [rcx+rdx+0x30]
   .text:0x00000000000028AA        0F104C1120           movups xmm1, xmmword ptr [rcx+rdx+0x20]
   .text:0x00000000000028AF        0F294130             movaps xmmword ptr [rcx+0x30], xmm0
   .text:0x00000000000028B3        0F294920             movaps xmmword ptr [rcx+0x20], xmm1
   .text:0x00000000000028B7        0F10441110           movups xmm0, xmmword ptr [rcx+rdx+0x10]
   .text:0x00000000000028BC        0F100C11             movups xmm1, xmmword ptr [rcx+rdx]
   .text:0x00000000000028C0        75AE                 jnz code_0x2870
   .text:0x00000000000028C2 code_0x28C2:
   .text:0x00000000000028C2        0F294110             movaps xmmword ptr [rcx+0x10], xmm0
   .text:0x00000000000028C6        4983E07F             and r8, 0x7F
   .text:0x00000000000028CA        0F28C1               movaps xmm0, xmm1
   .text:0x00000000000028CD code_0x28CD:
   .text:0x00000000000028CD        4D8BC8               mov r9, r8
   .text:0x00000000000028D0        49C1E904             shr r9, 0x4
   .text:0x00000000000028D4        741A                 jz code_0x28F0
   .text:0x00000000000028D6 code_0x28D6:
   .text:0x00000000000028D6        66660F1F840000000000 o16 nop [rax+rax+0x0]
   .text:0x00000000000028E0 code_0x28E0:
   .text:0x00000000000028E0        0F1101               movups xmmword ptr [rcx], xmm0
   .text:0x00000000000028E3        4883E910             sub rcx, 0x10
   .text:0x00000000000028E7        0F100411             movups xmm0, xmmword ptr [rcx+rdx]
   .text:0x00000000000028EB        49FFC9               dec r9
   .text:0x00000000000028EE        75F0                 jnz code_0x28E0
   .text:0x00000000000028F0 code_0x28F0:
   .text:0x00000000000028F0        4983E00F             and r8, 0xF
   .text:0x00000000000028F4        7408                 jz code_0x28FE
   .text:0x00000000000028F6 code_0x28F6:
   .text:0x00000000000028F6        410F100A             movups xmm1, xmmword ptr [r10]
   .text:0x00000000000028FA        410F110B             movups xmmword ptr [r11], xmm1
   .text:0x00000000000028FE code_0x28FE:
   .text:0x00000000000028FE        0F1101               movups xmmword ptr [rcx], xmm0
   .text:0x0000000000002901        498BC3               mov rax, r11
   .text:0x0000000000002904        C3                   ret
   .text:0x0000000000002905 data_0x2905:
   .text:0x0000000000002905        db 17 dup(0xCC)
   .text:0x0000000000002916 data_0x2916:
   .text:0x0000000000002916        dq 0x000000841F0F6666
   .text:0x000000000000291E        dw 0x0000
   .text:0x0000000000002920 _CallSettingFrame:
   .text:0x0000000000002920        4883EC28             sub rsp, 0x28
   .text:0x0000000000002924        48894C2430           mov qword ptr [rsp+0x30], rcx
   .text:0x0000000000002929        4889542438           mov qword ptr [rsp+0x38], rdx
   .text:0x000000000000292E        4489442440           mov dword ptr [rsp+0x40], r8d
   .text:0x0000000000002933        488B12               mov rdx, qword ptr [rdx]
   .text:0x0000000000002936        488BC1               mov rax, rcx
   .text:0x0000000000002939        E8C2F5FFFF           call _NLG_Notify; inline void __cdecl( int64_t p1, int64_t p2, int32_t p3 )
   .text:0x000000000000293E        FFD0                 call rax; void (__cdecl *)( void )
   .text:0x0000000000002940        E8EBF5FFFF           call __NLG_Return2; inline int64_t __cdecl( void )
   .text:0x0000000000002945        488BC8               mov rcx, rax
   .text:0x0000000000002948        488B542438           mov rdx, qword ptr [rsp+0x38]
   .text:0x000000000000294D        488B12               mov rdx, qword ptr [rdx]
   .text:0x0000000000002950        41B802000000         mov r8d, 0x2
   .text:0x0000000000002956        E8A5F5FFFF           call _NLG_Notify; inline void __cdecl( int64_t p1, int64_t p2, int32_t p3 )
   .text:0x000000000000295B        4883C428             add rsp, 0x28
   .text:0x000000000000295F        C3                   ret
   .text:0x0000000000002960 data_0x2960:
   .text:0x0000000000002960        db 6 dup(0xCC)
   .text:0x0000000000002966 data_0x2966:
   .text:0x0000000000002966        dq 0x000000841F0F6666
   .text:0x000000000000296E        dw 0x0000
   .text:0x0000000000002970 _CallSettingFrameEncoded:
   .text:0x0000000000002970        4883EC28             sub rsp, 0x28
   .text:0x0000000000002974        48894C2430           mov qword ptr [rsp+0x30], rcx
   .text:0x0000000000002979        4889542438           mov qword ptr [rsp+0x38], rdx
   .text:0x000000000000297E        4C89442440           mov qword ptr [rsp+0x40], r8
   .text:0x0000000000002983        44894C2448           mov dword ptr [rsp+0x48], r9d
   .text:0x0000000000002988        458BC1               mov r8d, r9d
   .text:0x000000000000298B        488BC1               mov rax, rcx
   .text:0x000000000000298E        E86DF5FFFF           call _NLG_Notify; inline void __cdecl( int64_t p1, int64_t p2, int32_t p3 )
   .text:0x0000000000002993        488B4C2440           mov rcx, qword ptr [rsp+0x40]
   .text:0x0000000000002998        FFD0                 call rax; void (__cdecl *)( int64_t p1 )
   .text:0x000000000000299A        E891F5FFFF           call __NLG_Return2; inline int64_t __cdecl( void )
   .text:0x000000000000299F        488BC8               mov rcx, rax
   .text:0x00000000000029A2        488B542438           mov rdx, qword ptr [rsp+0x38]
   .text:0x00000000000029A7        41B802000000         mov r8d, 0x2
   .text:0x00000000000029AD        E84EF5FFFF           call _NLG_Notify; inline void __cdecl( int64_t p1, int64_t p2, int32_t p3 )
   .text:0x00000000000029B2        4883C428             add rsp, 0x28
   .text:0x00000000000029B6        C3                   ret
   .text:0x00000000000029B7 code_0x29B7:
   .text:0x00000000000029B7        CC                   int3
   .text:0x00000000000029B8 func_0x29B8:
   .text:0x00000000000029B8        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x00000000000029BD        48896C2410           mov qword ptr [rsp+0x10], rbp
   .text:0x00000000000029C2        4889742418           mov qword ptr [rsp+0x18], rsi
   .text:0x00000000000029C7        57                   push rdi
   .text:0x00000000000029C8        4883EC20             sub rsp, 0x20
   .text:0x00000000000029CC        488BF2               mov rsi, rdx
   .text:0x00000000000029CF        8BF9                 mov edi, ecx
   .text:0x00000000000029D1        E8EE190000           call __acrt_getptd_noexit; int64_t __cdecl( void )
   .text:0x00000000000029D6        4533C9               xor r9d, r9d
   .text:0x00000000000029D9        488BD8               mov rbx, rax
   .text:0x00000000000029DC        4885C0               test rax, rax
   .text:0x00000000000029DF        7507                 jnz code_0x29E8
   .text:0x00000000000029E1 code_0x29E1:
   .text:0x00000000000029E1        33C0                 xor eax, eax
   .text:0x00000000000029E3        E930010000           jmp code_0x2B18
   .text:0x00000000000029E8 code_0x29E8:
   .text:0x00000000000029E8        488B08               mov rcx, qword ptr [rax]
   .text:0x00000000000029EB        488BC1               mov rax, rcx
   .text:0x00000000000029EE        488D91C0000000       lea rdx, [rcx+0xC0]
   .text:0x00000000000029F5        483BCA               cmp rcx, rdx
   .text:0x00000000000029F8        740D                 jz code_0x2A07
   .text:0x00000000000029FA code_0x29FA:
   .text:0x00000000000029FA        3938                 cmp dword ptr [rax], edi
   .text:0x00000000000029FC        740C                 jz code_0x2A0A
   .text:0x00000000000029FE code_0x29FE:
   .text:0x00000000000029FE        4883C010             add rax, 0x10
   .text:0x0000000000002A02        483BC2               cmp rax, rdx
   .text:0x0000000000002A05        75F3                 jnz code_0x29FA
   .text:0x0000000000002A07 code_0x2A07:
   .text:0x0000000000002A07        498BC1               mov rax, r9
   .text:0x0000000000002A0A code_0x2A0A:
   .text:0x0000000000002A0A        4885C0               test rax, rax
   .text:0x0000000000002A0D        74D2                 jz code_0x29E1
   .text:0x0000000000002A0F code_0x2A0F:
   .text:0x0000000000002A0F        4C8B4008             mov r8, qword ptr [rax+0x8]
   .text:0x0000000000002A13        4D85C0               test r8, r8
   .text:0x0000000000002A16        74C9                 jz code_0x29E1
   .text:0x0000000000002A18 code_0x2A18:
   .text:0x0000000000002A18        4983F805             cmp r8, 0x5
   .text:0x0000000000002A1C        750D                 jnz code_0x2A2B
   .text:0x0000000000002A1E code_0x2A1E:
   .text:0x0000000000002A1E        4C894808             mov qword ptr [rax+0x8], r9
   .text:0x0000000000002A22        418D40FC             lea eax, [r8-0x4]
   .text:0x0000000000002A26        E9ED000000           jmp code_0x2B18
   .text:0x0000000000002A2B code_0x2A2B:
   .text:0x0000000000002A2B        4983F801             cmp r8, 0x1
   .text:0x0000000000002A2F        0F84E0000000         jz code_0x2B15
   .text:0x0000000000002A35 code_0x2A35:
   .text:0x0000000000002A35        488B6B08             mov rbp, qword ptr [rbx+0x8]
   .text:0x0000000000002A39        48897308             mov qword ptr [rbx+0x8], rsi
   .text:0x0000000000002A3D        83780408             cmp dword ptr [rax+0x4], 0x8
   .text:0x0000000000002A41        0F85BA000000         jnz code_0x2B01
   .text:0x0000000000002A47 code_0x2A47:
   .text:0x0000000000002A47        4883C130             add rcx, 0x30
   .text:0x0000000000002A4B        488D9190000000       lea rdx, [rcx+0x90]
   .text:0x0000000000002A52        EB08                 jmp code_0x2A5C
   .text:0x0000000000002A54 code_0x2A54:
   .text:0x0000000000002A54        4C894908             mov qword ptr [rcx+0x8], r9
   .text:0x0000000000002A58        4883C110             add rcx, 0x10
   .text:0x0000000000002A5C code_0x2A5C:
   .text:0x0000000000002A5C        483BCA               cmp rcx, rdx
   .text:0x0000000000002A5F        75F3                 jnz code_0x2A54
   .text:0x0000000000002A61 code_0x2A61:
   .text:0x0000000000002A61        81388D0000C0         cmp dword ptr [rax], 0xC000008D
   .text:0x0000000000002A67        8B7B10               mov edi, dword ptr [rbx+0x10]
   .text:0x0000000000002A6A        747A                 jz code_0x2AE6
   .text:0x0000000000002A6C code_0x2A6C:
   .text:0x0000000000002A6C        81388E0000C0         cmp dword ptr [rax], 0xC000008E
   .text:0x0000000000002A72        746B                 jz code_0x2ADF
   .text:0x0000000000002A74 code_0x2A74:
   .text:0x0000000000002A74        81388F0000C0         cmp dword ptr [rax], 0xC000008F
   .text:0x0000000000002A7A        745C                 jz code_0x2AD8
   .text:0x0000000000002A7C code_0x2A7C:
   .text:0x0000000000002A7C        8138900000C0         cmp dword ptr [rax], 0xC0000090
   .text:0x0000000000002A82        744D                 jz code_0x2AD1
   .text:0x0000000000002A84 code_0x2A84:
   .text:0x0000000000002A84        8138910000C0         cmp dword ptr [rax], 0xC0000091
   .text:0x0000000000002A8A        743E                 jz code_0x2ACA
   .text:0x0000000000002A8C code_0x2A8C:
   .text:0x0000000000002A8C        8138920000C0         cmp dword ptr [rax], 0xC0000092
   .text:0x0000000000002A92        742F                 jz code_0x2AC3
   .text:0x0000000000002A94 code_0x2A94:
   .text:0x0000000000002A94        8138930000C0         cmp dword ptr [rax], 0xC0000093
   .text:0x0000000000002A9A        7420                 jz code_0x2ABC
   .text:0x0000000000002A9C code_0x2A9C:
   .text:0x0000000000002A9C        8138B40200C0         cmp dword ptr [rax], 0xC00002B4
   .text:0x0000000000002AA2        7411                 jz code_0x2AB5
   .text:0x0000000000002AA4 code_0x2AA4:
   .text:0x0000000000002AA4        8138B50200C0         cmp dword ptr [rax], 0xC00002B5
   .text:0x0000000000002AAA        8BD7                 mov edx, edi
   .text:0x0000000000002AAC        7540                 jnz code_0x2AEE
   .text:0x0000000000002AAE code_0x2AAE:
   .text:0x0000000000002AAE        BA8D000000           mov edx, 0x8D
   .text:0x0000000000002AB3        EB36                 jmp code_0x2AEB
   .text:0x0000000000002AB5 code_0x2AB5:
   .text:0x0000000000002AB5        BA8E000000           mov edx, 0x8E
   .text:0x0000000000002ABA        EB2F                 jmp code_0x2AEB
   .text:0x0000000000002ABC code_0x2ABC:
   .text:0x0000000000002ABC        BA85000000           mov edx, 0x85
   .text:0x0000000000002AC1        EB28                 jmp code_0x2AEB
   .text:0x0000000000002AC3 code_0x2AC3:
   .text:0x0000000000002AC3        BA8A000000           mov edx, 0x8A
   .text:0x0000000000002AC8        EB21                 jmp code_0x2AEB
   .text:0x0000000000002ACA code_0x2ACA:
   .text:0x0000000000002ACA        BA84000000           mov edx, 0x84
   .text:0x0000000000002ACF        EB1A                 jmp code_0x2AEB
   .text:0x0000000000002AD1 code_0x2AD1:
   .text:0x0000000000002AD1        BA81000000           mov edx, 0x81
   .text:0x0000000000002AD6        EB13                 jmp code_0x2AEB
   .text:0x0000000000002AD8 code_0x2AD8:
   .text:0x0000000000002AD8        BA86000000           mov edx, 0x86
   .text:0x0000000000002ADD        EB0C                 jmp code_0x2AEB
   .text:0x0000000000002ADF code_0x2ADF:
   .text:0x0000000000002ADF        BA83000000           mov edx, 0x83
   .text:0x0000000000002AE4        EB05                 jmp code_0x2AEB
   .text:0x0000000000002AE6 code_0x2AE6:
   .text:0x0000000000002AE6        BA82000000           mov edx, 0x82
   .text:0x0000000000002AEB code_0x2AEB:
   .text:0x0000000000002AEB        895310               mov dword ptr [rbx+0x10], edx
   .text:0x0000000000002AEE code_0x2AEE:
   .text:0x0000000000002AEE        B908000000           mov ecx, 0x8
   .text:0x0000000000002AF3        498BC0               mov rax, r8
   .text:0x0000000000002AF6        FF152C870000         call qword ptr [GuardCFDispatchFunction]; void (__cdecl *)( int32_t p1 )
   .text:0x0000000000002AFC        897B10               mov dword ptr [rbx+0x10], edi
   .text:0x0000000000002AFF        EB10                 jmp code_0x2B11
   .text:0x0000000000002B01 code_0x2B01:
   .text:0x0000000000002B01        8B4804               mov ecx, dword ptr [rax+0x4]
   .text:0x0000000000002B04        4C894808             mov qword ptr [rax+0x8], r9
   .text:0x0000000000002B08        498BC0               mov rax, r8
   .text:0x0000000000002B0B        FF1517870000         call qword ptr [GuardCFDispatchFunction]; void (__cdecl *)( int32_t p1 )
   .text:0x0000000000002B11 code_0x2B11:
   .text:0x0000000000002B11        48896B08             mov qword ptr [rbx+0x8], rbp
   .text:0x0000000000002B15 code_0x2B15:
   .text:0x0000000000002B15        83C8FF               or eax, 0xFFFFFFFF
   .text:0x0000000000002B18 code_0x2B18:
   .text:0x0000000000002B18        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000002B1D        488B6C2438           mov rbp, qword ptr [rsp+0x38]
   .text:0x0000000000002B22        488B742440           mov rsi, qword ptr [rsp+0x40]
   .text:0x0000000000002B27        4883C420             add rsp, 0x20
   .text:0x0000000000002B2B        5F                   pop rdi
   .text:0x0000000000002B2C        C3                   ret
   .text:0x0000000000002B2D data_0x2B2D:
   .text:0x0000000000002B2D        db 3 dup(0xCC)
   .text:0x0000000000002B30 func_0x2B30:
   .text:0x0000000000002B30        8B05AA1F0100         mov eax, dword ptr [data_0x14AE0]
   .text:0x0000000000002B36        C3                   ret
   .text:0x0000000000002B37 code_0x2B37:
   .text:0x0000000000002B37        CC                   int3
   .text:0x0000000000002B38 __set_stl_sync_api_mode:
   .text:0x0000000000002B38        890DA21F0100         mov dword ptr [data_0x14AE0], ecx
   .text:0x0000000000002B3E        C3                   ret
   .text:0x0000000000002B3F code_0x2B3F:
   .text:0x0000000000002B3F        CC                   int3
   .text:0x0000000000002B40 __acrt_has_user_matherr:
   .text:0x0000000000002B40        488B15E1140100       mov rdx, qword ptr [__security_cookie]
   .text:0x0000000000002B47        8BCA                 mov ecx, edx
   .text:0x0000000000002B49        483315981F0100       xor rdx, qword ptr [data_0x14AE8]
   .text:0x0000000000002B50        83E13F               and ecx, 0x3F
   .text:0x0000000000002B53        48D3CA               ror rdx, cl
   .text:0x0000000000002B56        4885D2               test rdx, rdx
   .text:0x0000000000002B59        0F95C0               setne al
   .text:0x0000000000002B5C        C3                   ret
   .text:0x0000000000002B5D data_0x2B5D:
   .text:0x0000000000002B5D        db 3 dup(0xCC)
   .text:0x0000000000002B60 func_0x2B60:
   .text:0x0000000000002B60        48890D811F0100       mov qword ptr [data_0x14AE8], rcx
   .text:0x0000000000002B67        C3                   ret
   .text:0x0000000000002B68 __acrt_invoke_user_matherr:
   .text:0x0000000000002B68        488B15B9140100       mov rdx, qword ptr [__security_cookie]
   .text:0x0000000000002B6F        4C8BC1               mov r8, rcx
   .text:0x0000000000002B72        8BCA                 mov ecx, edx
   .text:0x0000000000002B74        4833156D1F0100       xor rdx, qword ptr [data_0x14AE8]
   .text:0x0000000000002B7B        83E13F               and ecx, 0x3F
   .text:0x0000000000002B7E        48D3CA               ror rdx, cl
   .text:0x0000000000002B81        4885D2               test rdx, rdx
   .text:0x0000000000002B84        7503                 jnz code_0x2B89
   .text:0x0000000000002B86 code_0x2B86:
   .text:0x0000000000002B86        33C0                 xor eax, eax
   .text:0x0000000000002B88        C3                   ret
   .text:0x0000000000002B89 code_0x2B89:
   .text:0x0000000000002B89        498BC8               mov rcx, r8
   .text:0x0000000000002B8C        488BC2               mov rax, rdx
   .text:0x0000000000002B8F        48FF2592860000       jmp qword ptr [GuardCFDispatchFunction]
   .text:0x0000000000002B96 data_0x2B96:
   .text:0x0000000000002B96        db 2 dup(0xCC)
   .text:0x0000000000002B98 __setusermatherr:
   .text:0x0000000000002B98        4C8B0589140100       mov r8, qword ptr [__security_cookie]
   .text:0x0000000000002B9F        4C8BC9               mov r9, rcx
   .text:0x0000000000002BA2        418BD0               mov edx, r8d
   .text:0x0000000000002BA5        B940000000           mov ecx, 0x40
   .text:0x0000000000002BAA        83E23F               and edx, 0x3F
   .text:0x0000000000002BAD        2BCA                 sub ecx, edx
   .text:0x0000000000002BAF        49D3C9               ror r9, cl
   .text:0x0000000000002BB2        4D33C8               xor r9, r8
   .text:0x0000000000002BB5        4C890D2C1F0100       mov qword ptr [data_0x14AE8], r9
   .text:0x0000000000002BBC        C3                   ret
   .text:0x0000000000002BBD data_0x2BBD:
   .text:0x0000000000002BBD        db 3 dup(0xCC)
   .text:0x0000000000002BC0 parse_command_line<wchar_t>:
   .text:0x0000000000002BC0        488BC4               mov rax, rsp
   .text:0x0000000000002BC3        48895808             mov qword ptr [rax+0x8], rbx
   .text:0x0000000000002BC7        48897010             mov qword ptr [rax+0x10], rsi
   .text:0x0000000000002BCB        48897818             mov qword ptr [rax+0x18], rdi
   .text:0x0000000000002BCF        4C896020             mov qword ptr [rax+0x20], r12
   .text:0x0000000000002BD3        4157                 push r15
   .text:0x0000000000002BD5        4C8B542430           mov r10, qword ptr [rsp+0x30]
   .text:0x0000000000002BDA        33F6                 xor esi, esi
   .text:0x0000000000002BDC        498BD9               mov rbx, r9
   .text:0x0000000000002BDF        498932               mov qword ptr [r10], rsi
   .text:0x0000000000002BE2        49C70101000000       mov qword ptr [r9], 0x1
   .text:0x0000000000002BE9        4885D2               test rdx, rdx
   .text:0x0000000000002BEC        7407                 jz code_0x2BF5
   .text:0x0000000000002BEE code_0x2BEE:
   .text:0x0000000000002BEE        4C8902               mov qword ptr [rdx], r8
   .text:0x0000000000002BF1        4883C208             add rdx, 0x8
   .text:0x0000000000002BF5 code_0x2BF5:
   .text:0x0000000000002BF5        448ACE               mov r9b, sil
   .text:0x0000000000002BF8        41BC22000000         mov r12d, 0x22
   .text:0x0000000000002BFE code_0x2BFE:
   .text:0x0000000000002BFE        66443921             cmp word ptr [rcx], r12w
   .text:0x0000000000002C02        7511                 jnz code_0x2C15
   .text:0x0000000000002C04 code_0x2C04:
   .text:0x0000000000002C04        4584C9               test r9b, r9b
   .text:0x0000000000002C07        410FB7C4             movzx eax, r12w
   .text:0x0000000000002C0B        410F94C1             sete r9b
   .text:0x0000000000002C0F        4883C102             add rcx, 0x2
   .text:0x0000000000002C13        EB1F                 jmp code_0x2C34
   .text:0x0000000000002C15 code_0x2C15:
   .text:0x0000000000002C15        49FF02               inc qword ptr [r10]
   .text:0x0000000000002C18        4D85C0               test r8, r8
   .text:0x0000000000002C1B        740B                 jz code_0x2C28
   .text:0x0000000000002C1D code_0x2C1D:
   .text:0x0000000000002C1D        0FB701               movzx eax, word ptr [rcx]
   .text:0x0000000000002C20        66418900             mov word ptr [r8], ax
   .text:0x0000000000002C24        4983C002             add r8, 0x2
   .text:0x0000000000002C28 code_0x2C28:
   .text:0x0000000000002C28        0FB701               movzx eax, word ptr [rcx]
   .text:0x0000000000002C2B        4883C102             add rcx, 0x2
   .text:0x0000000000002C2F        6685C0               test ax, ax
   .text:0x0000000000002C32        741D                 jz code_0x2C51
   .text:0x0000000000002C34 code_0x2C34:
   .text:0x0000000000002C34        4584C9               test r9b, r9b
   .text:0x0000000000002C37        75C5                 jnz code_0x2BFE
   .text:0x0000000000002C39 code_0x2C39:
   .text:0x0000000000002C39        6683F820             cmp ax, 0x20
   .text:0x0000000000002C3D        7406                 jz code_0x2C45
   .text:0x0000000000002C3F code_0x2C3F:
   .text:0x0000000000002C3F        6683F809             cmp ax, 0x9
   .text:0x0000000000002C43        75B9                 jnz code_0x2BFE
   .text:0x0000000000002C45 code_0x2C45:
   .text:0x0000000000002C45        4D85C0               test r8, r8
   .text:0x0000000000002C48        740B                 jz code_0x2C55
   .text:0x0000000000002C4A code_0x2C4A:
   .text:0x0000000000002C4A        66418970FE           mov word ptr [r8-0x2], si
   .text:0x0000000000002C4F        EB04                 jmp code_0x2C55
   .text:0x0000000000002C51 code_0x2C51:
   .text:0x0000000000002C51        4883E902             sub rcx, 0x2
   .text:0x0000000000002C55 code_0x2C55:
   .text:0x0000000000002C55        408AFE               mov dil, sil
   .text:0x0000000000002C58        41BF5C000000         mov r15d, 0x5C
   .text:0x0000000000002C5E code_0x2C5E:
   .text:0x0000000000002C5E        0FB701               movzx eax, word ptr [rcx]
   .text:0x0000000000002C61        6685C0               test ax, ax
   .text:0x0000000000002C64        0F84D6000000         jz code_0x2D40
   .text:0x0000000000002C6A code_0x2C6A:
   .text:0x0000000000002C6A        6683F820             cmp ax, 0x20
   .text:0x0000000000002C6E        7406                 jz code_0x2C76
   .text:0x0000000000002C70 code_0x2C70:
   .text:0x0000000000002C70        6683F809             cmp ax, 0x9
   .text:0x0000000000002C74        7509                 jnz code_0x2C7F
   .text:0x0000000000002C76 code_0x2C76:
   .text:0x0000000000002C76        4883C102             add rcx, 0x2
   .text:0x0000000000002C7A        0FB701               movzx eax, word ptr [rcx]
   .text:0x0000000000002C7D        EBEB                 jmp code_0x2C6A
   .text:0x0000000000002C7F code_0x2C7F:
   .text:0x0000000000002C7F        6685C0               test ax, ax
   .text:0x0000000000002C82        0F84B8000000         jz code_0x2D40
   .text:0x0000000000002C88 code_0x2C88:
   .text:0x0000000000002C88        4885D2               test rdx, rdx
   .text:0x0000000000002C8B        7407                 jz code_0x2C94
   .text:0x0000000000002C8D code_0x2C8D:
   .text:0x0000000000002C8D        4C8902               mov qword ptr [rdx], r8
   .text:0x0000000000002C90        4883C208             add rdx, 0x8
   .text:0x0000000000002C94 code_0x2C94:
   .text:0x0000000000002C94        48FF03               inc qword ptr [rbx]
   .text:0x0000000000002C97 code_0x2C97:
   .text:0x0000000000002C97        41BB01000000         mov r11d, 0x1
   .text:0x0000000000002C9D        8BC6                 mov eax, esi
   .text:0x0000000000002C9F        EB06                 jmp code_0x2CA7
   .text:0x0000000000002CA1 code_0x2CA1:
   .text:0x0000000000002CA1        4883C102             add rcx, 0x2
   .text:0x0000000000002CA5        FFC0                 inc eax
   .text:0x0000000000002CA7 code_0x2CA7:
   .text:0x0000000000002CA7        440FB709             movzx r9d, word ptr [rcx]
   .text:0x0000000000002CAB        66453BCF             cmp r9w, r15w
   .text:0x0000000000002CAF        74F0                 jz code_0x2CA1
   .text:0x0000000000002CB1 code_0x2CB1:
   .text:0x0000000000002CB1        66453BCC             cmp r9w, r12w
   .text:0x0000000000002CB5        7539                 jnz code_0x2CF0
   .text:0x0000000000002CB7 code_0x2CB7:
   .text:0x0000000000002CB7        4184C3               test r11b, al
   .text:0x0000000000002CBA        751E                 jnz code_0x2CDA
   .text:0x0000000000002CBC code_0x2CBC:
   .text:0x0000000000002CBC        4084FF               test dil, dil
   .text:0x0000000000002CBF        740F                 jz code_0x2CD0
   .text:0x0000000000002CC1 code_0x2CC1:
   .text:0x0000000000002CC1        4C8D4902             lea r9, [rcx+0x2]
   .text:0x0000000000002CC5        66453921             cmp word ptr [r9], r12w
   .text:0x0000000000002CC9        7505                 jnz code_0x2CD0
   .text:0x0000000000002CCB code_0x2CCB:
   .text:0x0000000000002CCB        498BC9               mov rcx, r9
   .text:0x0000000000002CCE        EB0A                 jmp code_0x2CDA
   .text:0x0000000000002CD0 code_0x2CD0:
   .text:0x0000000000002CD0        4084FF               test dil, dil
   .text:0x0000000000002CD3        448BDE               mov r11d, esi
   .text:0x0000000000002CD6        400F94C7             sete dil
   .text:0x0000000000002CDA code_0x2CDA:
   .text:0x0000000000002CDA        D1E8                 shr eax, 1
   .text:0x0000000000002CDC        EB12                 jmp code_0x2CF0
   .text:0x0000000000002CDE code_0x2CDE:
   .text:0x0000000000002CDE        FFC8                 dec eax
   .text:0x0000000000002CE0        4D85C0               test r8, r8
   .text:0x0000000000002CE3        7408                 jz code_0x2CED
   .text:0x0000000000002CE5 code_0x2CE5:
   .text:0x0000000000002CE5        66458938             mov word ptr [r8], r15w
   .text:0x0000000000002CE9        4983C002             add r8, 0x2
   .text:0x0000000000002CED code_0x2CED:
   .text:0x0000000000002CED        49FF02               inc qword ptr [r10]
   .text:0x0000000000002CF0 code_0x2CF0:
   .text:0x0000000000002CF0        85C0                 test eax, eax
   .text:0x0000000000002CF2        75EA                 jnz code_0x2CDE
   .text:0x0000000000002CF4 code_0x2CF4:
   .text:0x0000000000002CF4        0FB701               movzx eax, word ptr [rcx]
   .text:0x0000000000002CF7        6685C0               test ax, ax
   .text:0x0000000000002CFA        742F                 jz code_0x2D2B
   .text:0x0000000000002CFC code_0x2CFC:
   .text:0x0000000000002CFC        4084FF               test dil, dil
   .text:0x0000000000002CFF        750C                 jnz code_0x2D0D
   .text:0x0000000000002D01 code_0x2D01:
   .text:0x0000000000002D01        6683F820             cmp ax, 0x20
   .text:0x0000000000002D05        7424                 jz code_0x2D2B
   .text:0x0000000000002D07 code_0x2D07:
   .text:0x0000000000002D07        6683F809             cmp ax, 0x9
   .text:0x0000000000002D0B        741E                 jz code_0x2D2B
   .text:0x0000000000002D0D code_0x2D0D:
   .text:0x0000000000002D0D        4585DB               test r11d, r11d
   .text:0x0000000000002D10        7410                 jz code_0x2D22
   .text:0x0000000000002D12 code_0x2D12:
   .text:0x0000000000002D12        4D85C0               test r8, r8
   .text:0x0000000000002D15        7408                 jz code_0x2D1F
   .text:0x0000000000002D17 code_0x2D17:
   .text:0x0000000000002D17        66418900             mov word ptr [r8], ax
   .text:0x0000000000002D1B        4983C002             add r8, 0x2
   .text:0x0000000000002D1F code_0x2D1F:
   .text:0x0000000000002D1F        49FF02               inc qword ptr [r10]
   .text:0x0000000000002D22 code_0x2D22:
   .text:0x0000000000002D22        4883C102             add rcx, 0x2
   .text:0x0000000000002D26        E96CFFFFFF           jmp code_0x2C97
   .text:0x0000000000002D2B code_0x2D2B:
   .text:0x0000000000002D2B        4D85C0               test r8, r8
   .text:0x0000000000002D2E        7408                 jz code_0x2D38
   .text:0x0000000000002D30 code_0x2D30:
   .text:0x0000000000002D30        66418930             mov word ptr [r8], si
   .text:0x0000000000002D34        4983C002             add r8, 0x2
   .text:0x0000000000002D38 code_0x2D38:
   .text:0x0000000000002D38        49FF02               inc qword ptr [r10]
   .text:0x0000000000002D3B        E91EFFFFFF           jmp code_0x2C5E
   .text:0x0000000000002D40 code_0x2D40:
   .text:0x0000000000002D40        4885D2               test rdx, rdx
   .text:0x0000000000002D43        7403                 jz code_0x2D48
   .text:0x0000000000002D45 code_0x2D45:
   .text:0x0000000000002D45        488932               mov qword ptr [rdx], rsi
   .text:0x0000000000002D48 code_0x2D48:
   .text:0x0000000000002D48        48FF03               inc qword ptr [rbx]
   .text:0x0000000000002D4B        488B5C2410           mov rbx, qword ptr [rsp+0x10]
   .text:0x0000000000002D50        488B742418           mov rsi, qword ptr [rsp+0x18]
   .text:0x0000000000002D55        488B7C2420           mov rdi, qword ptr [rsp+0x20]
   .text:0x0000000000002D5A        4C8B642428           mov r12, qword ptr [rsp+0x28]
   .text:0x0000000000002D5F        415F                 pop r15
   .text:0x0000000000002D61        C3                   ret
   .text:0x0000000000002D62 data_0x2D62:
   .text:0x0000000000002D62        db 2 dup(0xCC)
   .text:0x0000000000002D64 __acrt_allocate_buffer_for_argv:
   .text:0x0000000000002D64        4053                 push rbx
   .text:0x0000000000002D66        4883EC20             sub rsp, 0x20
   .text:0x0000000000002D6A        48B8FFFFFFFFFFFFFF1F mov rax, 0x1FFFFFFFFFFFFFFF
   .text:0x0000000000002D74        4C8BCA               mov r9, rdx
   .text:0x0000000000002D77        483BC8               cmp rcx, rax
   .text:0x0000000000002D7A        7204                 jb code_0x2D80
   .text:0x0000000000002D7C code_0x2D7C:
   .text:0x0000000000002D7C        33C0                 xor eax, eax
   .text:0x0000000000002D7E        EB3B                 jmp code_0x2DBB
   .text:0x0000000000002D80 code_0x2D80:
   .text:0x0000000000002D80        33D2                 xor edx, edx
   .text:0x0000000000002D82        4883C8FF             or rax, 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000002D86        49F7F0               div r8
   .text:0x0000000000002D89        4C3BC8               cmp r9, rax
   .text:0x0000000000002D8C        73EE                 jae code_0x2D7C
   .text:0x0000000000002D8E code_0x2D8E:
   .text:0x0000000000002D8E        48C1E103             shl rcx, 0x3
   .text:0x0000000000002D92        4D0FAFC8             imul r9, r8
   .text:0x0000000000002D96        488BC1               mov rax, rcx
   .text:0x0000000000002D99        48F7D0               not rax
   .text:0x0000000000002D9C        493BC1               cmp rax, r9
   .text:0x0000000000002D9F        76DB                 jbe code_0x2D7C
   .text:0x0000000000002DA1 code_0x2DA1:
   .text:0x0000000000002DA1        4903C9               add rcx, r9
   .text:0x0000000000002DA4        BA01000000           mov edx, 0x1
   .text:0x0000000000002DA9        E8EE1B0000           call _calloc_base; void * __cdecl( unsigned long long _Count, unsigned long long _Size )
   .text:0x0000000000002DAE        33C9                 xor ecx, ecx
   .text:0x0000000000002DB0        488BD8               mov rbx, rax
   .text:0x0000000000002DB3        E85C1C0000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000002DB8        488BC3               mov rax, rbx
   .text:0x0000000000002DBB code_0x2DBB:
   .text:0x0000000000002DBB        4883C420             add rsp, 0x20
   .text:0x0000000000002DBF        5B                   pop rbx
   .text:0x0000000000002DC0        C3                   ret
   .text:0x0000000000002DC1 data_0x2DC1:
   .text:0x0000000000002DC1        db 3 dup(0xCC)
   .text:0x0000000000002DC4 _configure_wide_argv:
   .text:0x0000000000002DC4        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000002DC9        55                   push rbp
   .text:0x0000000000002DCA        56                   push rsi
   .text:0x0000000000002DCB        57                   push rdi
   .text:0x0000000000002DCC        4156                 push r14
   .text:0x0000000000002DCE        4157                 push r15
   .text:0x0000000000002DD0        488BEC               mov rbp, rsp
   .text:0x0000000000002DD3        4883EC30             sub rsp, 0x30
   .text:0x0000000000002DD7        33FF                 xor edi, edi
   .text:0x0000000000002DD9        448BF1               mov r14d, ecx
   .text:0x0000000000002DDC        85C9                 test ecx, ecx
   .text:0x0000000000002DDE        0F844F010000         jz code_0x2F33
   .text:0x0000000000002DE4 code_0x2DE4:
   .text:0x0000000000002DE4        8D41FF               lea eax, [rcx-0x1]
   .text:0x0000000000002DE7        83F801               cmp eax, 0x1
   .text:0x0000000000002DEA        7616                 jbe code_0x2E02
   .text:0x0000000000002DEC code_0x2DEC:
   .text:0x0000000000002DEC        E88B1B0000           call _errno; int * __cdecl( void )
   .text:0x0000000000002DF1        8D5F16               lea ebx, [rdi+0x16]
   .text:0x0000000000002DF4        8918                 mov dword ptr [rax], ebx
   .text:0x0000000000002DF6        E8F5180000           call _invalid_parameter_noinfo; void __cdecl( void )
   .text:0x0000000000002DFB code_0x2DFB:
   .text:0x0000000000002DFB        8BFB                 mov edi, ebx
   .text:0x0000000000002DFD        E931010000           jmp code_0x2F33
   .text:0x0000000000002E02 code_0x2E02:
   .text:0x0000000000002E02        488D1DE71C0100       lea rbx, [data_0x14AF0]
   .text:0x0000000000002E09        41B804010000         mov r8d, 0x104
   .text:0x0000000000002E0F        488BD3               mov rdx, rbx
   .text:0x0000000000002E12        33C9                 xor ecx, ecx
   .text:0x0000000000002E14        FF15F6820000         call qword ptr [GetModuleFileNameW]; unsigned long (__cdecl *)( struct HINSTANCE__ * hModule, unsigned short * lpFilename, unsigned long nSize )
   .text:0x0000000000002E1A        488B35971F0100       mov rsi, qword ptr [data_0x14DB8]
   .text:0x0000000000002E21        48891D981F0100       mov qword ptr [data_0x14DC0], rbx
   .text:0x0000000000002E28        4885F6               test rsi, rsi
   .text:0x0000000000002E2B        7405                 jz code_0x2E32
   .text:0x0000000000002E2D code_0x2E2D:
   .text:0x0000000000002E2D        66393E               cmp word ptr [rsi], di
   .text:0x0000000000002E30        7503                 jnz code_0x2E35
   .text:0x0000000000002E32 code_0x2E32:
   .text:0x0000000000002E32        488BF3               mov rsi, rbx
   .text:0x0000000000002E35 code_0x2E35:
   .text:0x0000000000002E35        488D4548             lea rax, [rbp+0x48]
   .text:0x0000000000002E39        48897D40             mov qword ptr [rbp+0x40], rdi
   .text:0x0000000000002E3D        4C8D4D40             lea r9, [rbp+0x40]
   .text:0x0000000000002E41        4889442420           mov qword ptr [rsp+0x20], rax
   .text:0x0000000000002E46        4533C0               xor r8d, r8d
   .text:0x0000000000002E49        48897D48             mov qword ptr [rbp+0x48], rdi
   .text:0x0000000000002E4D        33D2                 xor edx, edx
   .text:0x0000000000002E4F        488BCE               mov rcx, rsi
   .text:0x0000000000002E52        E869FDFFFF           call parse_command_line<wchar_t>; void __cdecl( wchar_t * p1, wchar_t ** p2, wchar_t * p3, unsigned __int64 * p4, unsigned __int64 * p5 )
   .text:0x0000000000002E57        4C8B7D40             mov r15, qword ptr [rbp+0x40]
   .text:0x0000000000002E5B        41B802000000         mov r8d, 0x2
   .text:0x0000000000002E61        488B5548             mov rdx, qword ptr [rbp+0x48]
   .text:0x0000000000002E65        498BCF               mov rcx, r15
   .text:0x0000000000002E68        E8F7FEFFFF           call __acrt_allocate_buffer_for_argv; int32_t __cdecl( int64_t p1, int64_t p2, int64_t p3 )
   .text:0x0000000000002E6D        488BD8               mov rbx, rax
   .text:0x0000000000002E70        4885C0               test rax, rax
   .text:0x0000000000002E73        7518                 jnz code_0x2E8D
   .text:0x0000000000002E75 code_0x2E75:
   .text:0x0000000000002E75        E8021B0000           call _errno; int * __cdecl( void )
   .text:0x0000000000002E7A        BB0C000000           mov ebx, 0xC
   .text:0x0000000000002E7F        33C9                 xor ecx, ecx
   .text:0x0000000000002E81        8918                 mov dword ptr [rax], ebx
   .text:0x0000000000002E83        E88C1B0000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000002E88        E96EFFFFFF           jmp code_0x2DFB
   .text:0x0000000000002E8D code_0x2E8D:
   .text:0x0000000000002E8D        4E8D04F8             lea r8, [rax+r15*8]
   .text:0x0000000000002E91        488BD3               mov rdx, rbx
   .text:0x0000000000002E94        488D4548             lea rax, [rbp+0x48]
   .text:0x0000000000002E98        488BCE               mov rcx, rsi
   .text:0x0000000000002E9B        4C8D4D40             lea r9, [rbp+0x40]
   .text:0x0000000000002E9F        4889442420           mov qword ptr [rsp+0x20], rax
   .text:0x0000000000002EA4        E817FDFFFF           call parse_command_line<wchar_t>; void __cdecl( wchar_t * p1, wchar_t ** p2, wchar_t * p3, unsigned __int64 * p4, unsigned __int64 * p5 )
   .text:0x0000000000002EA9        4183FE01             cmp r14d, 0x1
   .text:0x0000000000002EAD        7516                 jnz code_0x2EC5
   .text:0x0000000000002EAF code_0x2EAF:
   .text:0x0000000000002EAF        8B4540               mov eax, dword ptr [rbp+0x40]
   .text:0x0000000000002EB2        FFC8                 dec eax
   .text:0x0000000000002EB4        48891DED1E0100       mov qword ptr [data_0x14DA8], rbx
   .text:0x0000000000002EBB        8905D71E0100         mov dword ptr [data_0x14D98], eax
   .text:0x0000000000002EC1        33C9                 xor ecx, ecx
   .text:0x0000000000002EC3        EB69                 jmp code_0x2F2E
   .text:0x0000000000002EC5 code_0x2EC5:
   .text:0x0000000000002EC5        488D5538             lea rdx, [rbp+0x38]
   .text:0x0000000000002EC9        48897D38             mov qword ptr [rbp+0x38], rdi
   .text:0x0000000000002ECD        488BCB               mov rcx, rbx
   .text:0x0000000000002ED0        E817210000           call func_0x4FEC; int32_t __cdecl( int64_t p1, int64_t p2 )
   .text:0x0000000000002ED5        8BF0                 mov esi, eax
   .text:0x0000000000002ED7        85C0                 test eax, eax
   .text:0x0000000000002ED9        7419                 jz code_0x2EF4
   .text:0x0000000000002EDB code_0x2EDB:
   .text:0x0000000000002EDB        488B4D38             mov rcx, qword ptr [rbp+0x38]
   .text:0x0000000000002EDF        E8301B0000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000002EE4        488BCB               mov rcx, rbx
   .text:0x0000000000002EE7        48897D38             mov qword ptr [rbp+0x38], rdi
   .text:0x0000000000002EEB        E8241B0000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000002EF0        8BFE                 mov edi, esi
   .text:0x0000000000002EF2        EB3F                 jmp code_0x2F33
   .text:0x0000000000002EF4 code_0x2EF4:
   .text:0x0000000000002EF4        488B5538             mov rdx, qword ptr [rbp+0x38]
   .text:0x0000000000002EF8        488BCF               mov rcx, rdi
   .text:0x0000000000002EFB        488BC2               mov rax, rdx
   .text:0x0000000000002EFE        48393A               cmp qword ptr [rdx], rdi
   .text:0x0000000000002F01        740C                 jz code_0x2F0F
   .text:0x0000000000002F03 code_0x2F03:
   .text:0x0000000000002F03        488D4008             lea rax, [rax+0x8]
   .text:0x0000000000002F07        48FFC1               inc rcx
   .text:0x0000000000002F0A        483938               cmp qword ptr [rax], rdi
   .text:0x0000000000002F0D        75F4                 jnz code_0x2F03
   .text:0x0000000000002F0F code_0x2F0F:
   .text:0x0000000000002F0F        890D831E0100         mov dword ptr [data_0x14D98], ecx
   .text:0x0000000000002F15        33C9                 xor ecx, ecx
   .text:0x0000000000002F17        48897D38             mov qword ptr [rbp+0x38], rdi
   .text:0x0000000000002F1B        488915861E0100       mov qword ptr [data_0x14DA8], rdx
   .text:0x0000000000002F22        E8ED1A0000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000002F27        488BCB               mov rcx, rbx
   .text:0x0000000000002F2A        48897D38             mov qword ptr [rbp+0x38], rdi
   .text:0x0000000000002F2E code_0x2F2E:
   .text:0x0000000000002F2E        E8E11A0000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000002F33 code_0x2F33:
   .text:0x0000000000002F33        8BC7                 mov eax, edi
   .text:0x0000000000002F35        488B5C2460           mov rbx, qword ptr [rsp+0x60]
   .text:0x0000000000002F3A        4883C430             add rsp, 0x30
   .text:0x0000000000002F3E        415F                 pop r15
   .text:0x0000000000002F40        415E                 pop r14
   .text:0x0000000000002F42        5F                   pop rdi
   .text:0x0000000000002F43        5E                   pop rsi
   .text:0x0000000000002F44        5D                   pop rbp
   .text:0x0000000000002F45        C3                   ret
   .text:0x0000000000002F46 data_0x2F46:
   .text:0x0000000000002F46        db 2 dup(0xCC)
   .text:0x0000000000002F48 common_initialize_environment_nolock<wchar_t>:
   .text:0x0000000000002F48        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000002F4D        57                   push rdi
   .text:0x0000000000002F4E        4883EC20             sub rsp, 0x20
   .text:0x0000000000002F52        33FF                 xor edi, edi
   .text:0x0000000000002F54        48393DAD1D0100       cmp qword ptr [data_0x14D08], rdi
   .text:0x0000000000002F5B        7404                 jz code_0x2F61
   .text:0x0000000000002F5D code_0x2F5D:
   .text:0x0000000000002F5D        33C0                 xor eax, eax
   .text:0x0000000000002F5F        EB43                 jmp code_0x2FA4
   .text:0x0000000000002F61 code_0x2F61:
   .text:0x0000000000002F61        E80A2C0000           call __dcrt_get_wide_environment_from_os; int64_t __cdecl( void )
   .text:0x0000000000002F66        488BD8               mov rbx, rax
   .text:0x0000000000002F69        4885C0               test rax, rax
   .text:0x0000000000002F6C        7505                 jnz code_0x2F73
   .text:0x0000000000002F6E code_0x2F6E:
   .text:0x0000000000002F6E        83CFFF               or edi, 0xFFFFFFFF
   .text:0x0000000000002F71        EB27                 jmp code_0x2F9A
   .text:0x0000000000002F73 code_0x2F73:
   .text:0x0000000000002F73        488BCB               mov rcx, rbx
   .text:0x0000000000002F76        E835000000           call func_0x2FB0; int64_t __cdecl( int64_t p1 )
   .text:0x0000000000002F7B        4885C0               test rax, rax
   .text:0x0000000000002F7E        7505                 jnz code_0x2F85
   .text:0x0000000000002F80 code_0x2F80:
   .text:0x0000000000002F80        83CFFF               or edi, 0xFFFFFFFF
   .text:0x0000000000002F83        EB0E                 jmp code_0x2F93
   .text:0x0000000000002F85 code_0x2F85:
   .text:0x0000000000002F85        488905841D0100       mov qword ptr [data_0x14D10], rax
   .text:0x0000000000002F8C        488905751D0100       mov qword ptr [data_0x14D08], rax
   .text:0x0000000000002F93 code_0x2F93:
   .text:0x0000000000002F93        33C9                 xor ecx, ecx
   .text:0x0000000000002F95        E87A1A0000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000002F9A code_0x2F9A:
   .text:0x0000000000002F9A        488BCB               mov rcx, rbx
   .text:0x0000000000002F9D        E8721A0000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000002FA2        8BC7                 mov eax, edi
   .text:0x0000000000002FA4 code_0x2FA4:
   .text:0x0000000000002FA4        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000002FA9        4883C420             add rsp, 0x20
   .text:0x0000000000002FAD        5F                   pop rdi
   .text:0x0000000000002FAE        C3                   ret
   .text:0x0000000000002FAF code_0x2FAF:
   .text:0x0000000000002FAF        CC                   int3
   .text:0x0000000000002FB0 func_0x2FB0:
   .text:0x0000000000002FB0        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000002FB5        48896C2410           mov qword ptr [rsp+0x10], rbp
   .text:0x0000000000002FBA        4889742418           mov qword ptr [rsp+0x18], rsi
   .text:0x0000000000002FBF        57                   push rdi
   .text:0x0000000000002FC0        4156                 push r14
   .text:0x0000000000002FC2        4157                 push r15
   .text:0x0000000000002FC4        4883EC30             sub rsp, 0x30
   .text:0x0000000000002FC8        4C8BF1               mov r14, rcx
   .text:0x0000000000002FCB        33F6                 xor esi, esi
   .text:0x0000000000002FCD        8BCE                 mov ecx, esi
   .text:0x0000000000002FCF        4D8BC6               mov r8, r14
   .text:0x0000000000002FD2        410FB716             movzx edx, word ptr [r14]
   .text:0x0000000000002FD6        EB29                 jmp code_0x3001
   .text:0x0000000000002FD8 code_0x2FD8:
   .text:0x0000000000002FD8        6683FA3D             cmp dx, 0x3D
   .text:0x0000000000002FDC        488D4101             lea rax, [rcx+0x1]
   .text:0x0000000000002FE0        480F44C1             cmove rax, rcx
   .text:0x0000000000002FE4        488BC8               mov rcx, rax
   .text:0x0000000000002FE7        4883C8FF             or rax, 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000002FEB code_0x2FEB:
   .text:0x0000000000002FEB        48FFC0               inc rax
   .text:0x0000000000002FEE        6641393440           cmp word ptr [r8+rax*2], si
   .text:0x0000000000002FF3        75F6                 jnz code_0x2FEB
   .text:0x0000000000002FF5 code_0x2FF5:
   .text:0x0000000000002FF5        4D8D0440             lea r8, [r8+rax*2]
   .text:0x0000000000002FF9        4983C002             add r8, 0x2
   .text:0x0000000000002FFD        410FB710             movzx edx, word ptr [r8]
   .text:0x0000000000003001 code_0x3001:
   .text:0x0000000000003001        6685D2               test dx, dx
   .text:0x0000000000003004        75D2                 jnz code_0x2FD8
   .text:0x0000000000003006 code_0x3006:
   .text:0x0000000000003006        48FFC1               inc rcx
   .text:0x0000000000003009        BA08000000           mov edx, 0x8
   .text:0x000000000000300E        E889190000           call _calloc_base; void * __cdecl( unsigned long long _Count, unsigned long long _Size )
   .text:0x0000000000003013        488BD8               mov rbx, rax
   .text:0x0000000000003016        4885C0               test rax, rax
   .text:0x0000000000003019        7472                 jz code_0x308D
   .text:0x000000000000301B code_0x301B:
   .text:0x000000000000301B        4C8BF8               mov r15, rax
   .text:0x000000000000301E code_0x301E:
   .text:0x000000000000301E        410FB706             movzx eax, word ptr [r14]
   .text:0x0000000000003022        6685C0               test ax, ax
   .text:0x0000000000003025        7463                 jz code_0x308A
   .text:0x0000000000003027 code_0x3027:
   .text:0x0000000000003027        4883CDFF             or rbp, 0xFFFFFFFFFFFFFFFF
   .text:0x000000000000302B code_0x302B:
   .text:0x000000000000302B        48FFC5               inc rbp
   .text:0x000000000000302E        664139346E           cmp word ptr [r14+rbp*2], si
   .text:0x0000000000003033        75F6                 jnz code_0x302B
   .text:0x0000000000003035 code_0x3035:
   .text:0x0000000000003035        48FFC5               inc rbp
   .text:0x0000000000003038        6683F83D             cmp ax, 0x3D
   .text:0x000000000000303C        7435                 jz code_0x3073
   .text:0x000000000000303E code_0x303E:
   .text:0x000000000000303E        BA02000000           mov edx, 0x2
   .text:0x0000000000003043        488BCD               mov rcx, rbp
   .text:0x0000000000003046        E851190000           call _calloc_base; void * __cdecl( unsigned long long _Count, unsigned long long _Size )
   .text:0x000000000000304B        488BF8               mov rdi, rax
   .text:0x000000000000304E        4885C0               test rax, rax
   .text:0x0000000000003051        7426                 jz code_0x3079
   .text:0x0000000000003053 code_0x3053:
   .text:0x0000000000003053        4D8BC6               mov r8, r14
   .text:0x0000000000003056        488BD5               mov rdx, rbp
   .text:0x0000000000003059        488BC8               mov rcx, rax
   .text:0x000000000000305C        E8F7160000           call wcscpy_s; int __cdecl( unsigned short * _Destination, unsigned long long _SizeInWords, unsigned short * _Source )
   .text:0x0000000000003061        33C9                 xor ecx, ecx
   .text:0x0000000000003063        85C0                 test eax, eax
   .text:0x0000000000003065        7549                 jnz code_0x30B0
   .text:0x0000000000003067 code_0x3067:
   .text:0x0000000000003067        49893F               mov qword ptr [r15], rdi
   .text:0x000000000000306A        4983C708             add r15, 0x8
   .text:0x000000000000306E        E8A1190000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000003073 code_0x3073:
   .text:0x0000000000003073        4D8D346E             lea r14, [r14+rbp*2]
   .text:0x0000000000003077        EBA5                 jmp code_0x301E
   .text:0x0000000000003079 code_0x3079:
   .text:0x0000000000003079        488BCB               mov rcx, rbx
   .text:0x000000000000307C        E843000000           call free_environment<char>; void __cdecl( const char ** p1 )
   .text:0x0000000000003081        33C9                 xor ecx, ecx
   .text:0x0000000000003083        E88C190000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000003088        EB03                 jmp code_0x308D
   .text:0x000000000000308A code_0x308A:
   .text:0x000000000000308A        488BF3               mov rsi, rbx
   .text:0x000000000000308D code_0x308D:
   .text:0x000000000000308D        33C9                 xor ecx, ecx
   .text:0x000000000000308F        E880190000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000003094        488B5C2450           mov rbx, qword ptr [rsp+0x50]
   .text:0x0000000000003099        488BC6               mov rax, rsi
   .text:0x000000000000309C        488B742460           mov rsi, qword ptr [rsp+0x60]
   .text:0x00000000000030A1        488B6C2458           mov rbp, qword ptr [rsp+0x58]
   .text:0x00000000000030A6        4883C430             add rsp, 0x30
   .text:0x00000000000030AA        415F                 pop r15
   .text:0x00000000000030AC        415E                 pop r14
   .text:0x00000000000030AE        5F                   pop rdi
   .text:0x00000000000030AF        C3                   ret
   .text:0x00000000000030B0 code_0x30B0:
   .text:0x00000000000030B0        4533C9               xor r9d, r9d
   .text:0x00000000000030B3        4889742420           mov qword ptr [rsp+0x20], rsi
   .text:0x00000000000030B8        4533C0               xor r8d, r8d
   .text:0x00000000000030BB        33D2                 xor edx, edx
   .text:0x00000000000030BD        E84E160000           call _invoke_watson; noreturn void __cdecl( unsigned short * _Expression, unsigned short * _FunctionName, unsigned short * _FileName, unsigned int _LineNo, unsigned long long _Reserved )
   .text:0x00000000000030C2 data_0x30C2:
   .text:0x00000000000030C2        db 2 dup(0xCC)
   .text:0x00000000000030C4 free_environment<char>:
   .text:0x00000000000030C4        4885C9               test rcx, rcx
   .text:0x00000000000030C7        743B                 jz code_0x3104
   .text:0x00000000000030C9 code_0x30C9:
   .text:0x00000000000030C9        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x00000000000030CE        57                   push rdi
   .text:0x00000000000030CF        4883EC20             sub rsp, 0x20
   .text:0x00000000000030D3        488B01               mov rax, qword ptr [rcx]
   .text:0x00000000000030D6        488BD9               mov rbx, rcx
   .text:0x00000000000030D9        488BF9               mov rdi, rcx
   .text:0x00000000000030DC        EB0F                 jmp code_0x30ED
   .text:0x00000000000030DE code_0x30DE:
   .text:0x00000000000030DE        488BC8               mov rcx, rax
   .text:0x00000000000030E1        E82E190000           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000030E6        488D7F08             lea rdi, [rdi+0x8]
   .text:0x00000000000030EA        488B07               mov rax, qword ptr [rdi]
   .text:0x00000000000030ED code_0x30ED:
   .text:0x00000000000030ED        4885C0               test rax, rax
   .text:0x00000000000030F0        75EC                 jnz code_0x30DE
   .text:0x00000000000030F2 code_0x30F2:
   .text:0x00000000000030F2        488BCB               mov rcx, rbx
   .text:0x00000000000030F5        E81A190000           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000030FA        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x00000000000030FF        4883C420             add rsp, 0x20
   .text:0x0000000000003103        5F                   pop rdi
   .text:0x0000000000003104 code_0x3104:
   .text:0x0000000000003104        C3                   ret
   .text:0x0000000000003105 data_0x3105:
   .text:0x0000000000003105        db 3 dup(0xCC)
   .text:0x0000000000003108 func_0x3108:
   .text:0x0000000000003108        4883EC28             sub rsp, 0x28
   .text:0x000000000000310C        488B09               mov rcx, qword ptr [rcx]
   .text:0x000000000000310F        483B0D021C0100       cmp rcx, qword ptr [data_0x14D18]
   .text:0x0000000000003116        7405                 jz code_0x311D
   .text:0x0000000000003118 code_0x3118:
   .text:0x0000000000003118        E8A7FFFFFF           call free_environment<char>; void __cdecl( const char ** p1 )
   .text:0x000000000000311D code_0x311D:
   .text:0x000000000000311D        4883C428             add rsp, 0x28
   .text:0x0000000000003121        C3                   ret
   .text:0x0000000000003122 data_0x3122:
   .text:0x0000000000003122        db 2 dup(0xCC)
   .text:0x0000000000003124 func_0x3124:
   .text:0x0000000000003124        4883EC28             sub rsp, 0x28
   .text:0x0000000000003128        488B09               mov rcx, qword ptr [rcx]
   .text:0x000000000000312B        483B0DDE1B0100       cmp rcx, qword ptr [data_0x14D10]
   .text:0x0000000000003132        7405                 jz code_0x3139
   .text:0x0000000000003134 code_0x3134:
   .text:0x0000000000003134        E88BFFFFFF           call free_environment<char>; void __cdecl( const char ** p1 )
   .text:0x0000000000003139 code_0x3139:
   .text:0x0000000000003139        4883C428             add rsp, 0x28
   .text:0x000000000000313D        C3                   ret
   .text:0x000000000000313E data_0x313E:
   .text:0x000000000000313E        db 2 dup(0xCC)
   .text:0x0000000000003140 __dcrt_uninitialize_environments_nolock:
   .text:0x0000000000003140        4883EC28             sub rsp, 0x28
   .text:0x0000000000003144        488D0DB51B0100       lea rcx, [data_0x14D00]
   .text:0x000000000000314B        E8B8FFFFFF           call func_0x3108; void __cdecl( int64_t p1 )
   .text:0x0000000000003150        488D0DB11B0100       lea rcx, [data_0x14D08]
   .text:0x0000000000003157        E8C8FFFFFF           call func_0x3124; void __cdecl( int64_t p1 )
   .text:0x000000000000315C        488B0DB51B0100       mov rcx, qword ptr [data_0x14D18]
   .text:0x0000000000003163        E85CFFFFFF           call free_environment<char>; void __cdecl( const char ** p1 )
   .text:0x0000000000003168        488B0DA11B0100       mov rcx, qword ptr [data_0x14D10]
   .text:0x000000000000316F        4883C428             add rsp, 0x28
   .text:0x0000000000003173        E94CFFFFFF           jmp free_environment<char>; void __cdecl( const char ** p1 )
   .text:0x0000000000003178 common_initialize_environment_nolock<wchar_t>_1:
   .text:0x0000000000003178        E9CBFDFFFF           jmp common_initialize_environment_nolock<wchar_t>; int __cdecl( void )
   .text:0x000000000000317D data_0x317D:
   .text:0x000000000000317D        db 3 dup(0xCC)
   .text:0x0000000000003180 common_wincmdln<wchar_t>:
   .text:0x0000000000003180        488B05311C0100       mov rax, qword ptr [data_0x14DB8]
   .text:0x0000000000003187        488D0D921B0100       lea rcx, [data_0x14D20]
   .text:0x000000000000318E        4533C0               xor r8d, r8d
   .text:0x0000000000003191        4885C0               test rax, rax
   .text:0x0000000000003194        418AD0               mov dl, r8b
   .text:0x0000000000003197        480F45C8             cmovne rcx, rax
   .text:0x000000000000319B code_0x319B:
   .text:0x000000000000319B        0FB701               movzx eax, word ptr [rcx]
   .text:0x000000000000319E        6683F820             cmp ax, 0x20
   .text:0x00000000000031A2        7709                 ja code_0x31AD
   .text:0x00000000000031A4 code_0x31A4:
   .text:0x00000000000031A4        6685C0               test ax, ax
   .text:0x00000000000031A7        7427                 jz code_0x31D0
   .text:0x00000000000031A9 code_0x31A9:
   .text:0x00000000000031A9        84D2                 test dl, dl
   .text:0x00000000000031AB        7411                 jz code_0x31BE
   .text:0x00000000000031AD code_0x31AD:
   .text:0x00000000000031AD        6683F822             cmp ax, 0x22
   .text:0x00000000000031B1        7505                 jnz code_0x31B8
   .text:0x00000000000031B3 code_0x31B3:
   .text:0x00000000000031B3        84D2                 test dl, dl
   .text:0x00000000000031B5        0F94C2               sete dl
   .text:0x00000000000031B8 code_0x31B8:
   .text:0x00000000000031B8        4883C102             add rcx, 0x2
   .text:0x00000000000031BC        EBDD                 jmp code_0x319B
   .text:0x00000000000031BE code_0x31BE:
   .text:0x00000000000031BE        6683F820             cmp ax, 0x20
   .text:0x00000000000031C2        770C                 ja code_0x31D0
   .text:0x00000000000031C4 code_0x31C4:
   .text:0x00000000000031C4        4883C102             add rcx, 0x2
   .text:0x00000000000031C8        0FB701               movzx eax, word ptr [rcx]
   .text:0x00000000000031CB        6685C0               test ax, ax
   .text:0x00000000000031CE        75EE                 jnz code_0x31BE
   .text:0x00000000000031D0 code_0x31D0:
   .text:0x00000000000031D0        488BC1               mov rax, rcx
   .text:0x00000000000031D3        C3                   ret
   .text:0x00000000000031D4 _initterm:
   .text:0x00000000000031D4        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x00000000000031D9        48896C2410           mov qword ptr [rsp+0x10], rbp
   .text:0x00000000000031DE        4889742418           mov qword ptr [rsp+0x18], rsi
   .text:0x00000000000031E3        57                   push rdi
   .text:0x00000000000031E4        4883EC20             sub rsp, 0x20
   .text:0x00000000000031E8        33ED                 xor ebp, ebp
   .text:0x00000000000031EA        488BFA               mov rdi, rdx
   .text:0x00000000000031ED        482BF9               sub rdi, rcx
   .text:0x00000000000031F0        488BD9               mov rbx, rcx
   .text:0x00000000000031F3        4883C707             add rdi, 0x7
   .text:0x00000000000031F7        8BF5                 mov esi, ebp
   .text:0x00000000000031F9        48C1EF03             shr rdi, 0x3
   .text:0x00000000000031FD        483BCA               cmp rcx, rdx
   .text:0x0000000000003200        480F47FD             cmova rdi, rbp
   .text:0x0000000000003204        4885FF               test rdi, rdi
   .text:0x0000000000003207        741A                 jz code_0x3223
   .text:0x0000000000003209 code_0x3209:
   .text:0x0000000000003209        488B03               mov rax, qword ptr [rbx]
   .text:0x000000000000320C        4885C0               test rax, rax
   .text:0x000000000000320F        7406                 jz code_0x3217
   .text:0x0000000000003211 code_0x3211:
   .text:0x0000000000003211        FF1511800000         call qword ptr [GuardCFDispatchFunction]; void (__cdecl *)( void )
   .text:0x0000000000003217 code_0x3217:
   .text:0x0000000000003217        4883C308             add rbx, 0x8
   .text:0x000000000000321B        48FFC6               inc rsi
   .text:0x000000000000321E        483BF7               cmp rsi, rdi
   .text:0x0000000000003221        75E6                 jnz code_0x3209
   .text:0x0000000000003223 code_0x3223:
   .text:0x0000000000003223        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000003228        488B6C2438           mov rbp, qword ptr [rsp+0x38]
   .text:0x000000000000322D        488B742440           mov rsi, qword ptr [rsp+0x40]
   .text:0x0000000000003232        4883C420             add rsp, 0x20
   .text:0x0000000000003236        5F                   pop rdi
   .text:0x0000000000003237        C3                   ret
   .text:0x0000000000003238 _initterm_e:
   .text:0x0000000000003238        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x000000000000323D        57                   push rdi
   .text:0x000000000000323E        4883EC20             sub rsp, 0x20
   .text:0x0000000000003242        488BFA               mov rdi, rdx
   .text:0x0000000000003245        488BD9               mov rbx, rcx
   .text:0x0000000000003248        483BCA               cmp rcx, rdx
   .text:0x000000000000324B code_0x324B:
   .text:0x000000000000324B        741B                 jz code_0x3268
   .text:0x000000000000324D code_0x324D:
   .text:0x000000000000324D        488B03               mov rax, qword ptr [rbx]
   .text:0x0000000000003250        4885C0               test rax, rax
   .text:0x0000000000003253        740A                 jz code_0x325F
   .text:0x0000000000003255 code_0x3255:
   .text:0x0000000000003255        FF15CD7F0000         call qword ptr [GuardCFDispatchFunction]; int32_t (__cdecl *)( void )
   .text:0x000000000000325B        85C0                 test eax, eax
   .text:0x000000000000325D        750B                 jnz code_0x326A
   .text:0x000000000000325F code_0x325F:
   .text:0x000000000000325F        4883C308             add rbx, 0x8
   .text:0x0000000000003263        483BDF               cmp rbx, rdi
   .text:0x0000000000003266        EBE3                 jmp code_0x324B
   .text:0x0000000000003268 code_0x3268:
   .text:0x0000000000003268        33C0                 xor eax, eax
   .text:0x000000000000326A code_0x326A:
   .text:0x000000000000326A        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x000000000000326F        4883C420             add rsp, 0x20
   .text:0x0000000000003273        5F                   pop rdi
   .text:0x0000000000003274        C3                   ret
   .text:0x0000000000003275 data_0x3275:
   .text:0x0000000000003275        db 3 dup(0xCC)
   .text:0x0000000000003278 __crt_seh_guarded_call<void>::operator()<class <lambda_d80eeec6fff315bfe5c115232f3240e3>,class <lambda_6e4b09c48022b2350581041d5f6b0c4c> & __ptr64,class <lambda_2358e3775559c9db80273638284d5e45> >:
   .text:0x0000000000003278        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x000000000000327D        4C894C2420           mov qword ptr [rsp+0x20], r9
   .text:0x0000000000003282        57                   push rdi
   .text:0x0000000000003283        4883EC20             sub rsp, 0x20
   .text:0x0000000000003287        498BD9               mov rbx, r9
   .text:0x000000000000328A        498BF8               mov rdi, r8
   .text:0x000000000000328D        8B0A                 mov ecx, dword ptr [rdx]
   .text:0x000000000000328F        E8C4290000           call __acrt_lock; void __cdecl( int32_t p1 )
   .text:0x0000000000003294        90                   nop
   .text:0x0000000000003295        488BCF               mov rcx, rdi
   .text:0x0000000000003298        E813000000           call func_0x32B0; void __cdecl( int64_t p1 )
   .text:0x000000000000329D        90                   nop
   .text:0x000000000000329E        8B0B                 mov ecx, dword ptr [rbx]
   .text:0x00000000000032A0        E8072A0000           call func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x00000000000032A5        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x00000000000032AA        4883C420             add rsp, 0x20
   .text:0x00000000000032AE        5F                   pop rdi
   .text:0x00000000000032AF        C3                   ret
   .text:0x00000000000032B0 func_0x32B0:
   .text:0x00000000000032B0        4053                 push rbx
   .text:0x00000000000032B2        4883EC20             sub rsp, 0x20
   .text:0x00000000000032B6        488BD9               mov rbx, rcx
   .text:0x00000000000032B9        803D701A010000       cmp byte ptr [data_0x14D30], 0x0
   .text:0x00000000000032C0        0F85B4000000         jnz code_0x337A
   .text:0x00000000000032C6 code_0x32C6:
   .text:0x00000000000032C6        B801000000           mov eax, 0x1
   .text:0x00000000000032CB        8705531A0100         xchg dword ptr [data_0x14D24], eax
   .text:0x00000000000032D1 code_0x32D1:
   .text:0x00000000000032D1        488B01               mov rax, qword ptr [rcx]
   .text:0x00000000000032D4        8B08                 mov ecx, dword ptr [rax]
   .text:0x00000000000032D6        85C9                 test ecx, ecx
   .text:0x00000000000032D8        7549                 jnz code_0x3323
   .text:0x00000000000032DA code_0x32DA:
   .text:0x00000000000032DA        488B05470D0100       mov rax, qword ptr [__security_cookie]
   .text:0x00000000000032E1        448BC0               mov r8d, eax
   .text:0x00000000000032E4        4183E03F             and r8d, 0x3F
   .text:0x00000000000032E8        B940000000           mov ecx, 0x40
   .text:0x00000000000032ED        412BC8               sub ecx, r8d
   .text:0x00000000000032F0        33D2                 xor edx, edx
   .text:0x00000000000032F2        48D3CA               ror rdx, cl
   .text:0x00000000000032F5        4833D0               xor rdx, rax
   .text:0x00000000000032F8        488B0D291A0100       mov rcx, qword ptr [data_0x14D28]
   .text:0x00000000000032FF        483BCA               cmp rcx, rdx
   .text:0x0000000000003302        7416                 jz code_0x331A
   .text:0x0000000000003304 code_0x3304:
   .text:0x0000000000003304        4833C1               xor rax, rcx
   .text:0x0000000000003307        418BC8               mov ecx, r8d
   .text:0x000000000000330A        48D3C8               ror rax, cl
   .text:0x000000000000330D        4533C0               xor r8d, r8d
   .text:0x0000000000003310        33D2                 xor edx, edx
   .text:0x0000000000003312        33C9                 xor ecx, ecx
   .text:0x0000000000003314        FF150E7F0000         call qword ptr [GuardCFDispatchFunction]; void (__cdecl *)( int32_t p1, int32_t p2, int32_t p3, int64_t p4, int64_t p5 )
   .text:0x000000000000331A code_0x331A:
   .text:0x000000000000331A        488D0D1F1A0100       lea rcx, [data_0x14D40]
   .text:0x0000000000003321        EB0C                 jmp code_0x332F
   .text:0x0000000000003323 code_0x3323:
   .text:0x0000000000003323        83F901               cmp ecx, 0x1
   .text:0x0000000000003326        750D                 jnz code_0x3335
   .text:0x0000000000003328 code_0x3328:
   .text:0x0000000000003328        488D0D291A0100       lea rcx, [data_0x14D58]
   .text:0x000000000000332F code_0x332F:
   .text:0x000000000000332F        E874070000           call _execute_onexit_table; void __cdecl( int64_t p1 )
   .text:0x0000000000003334        90                   nop
   .text:0x0000000000003335 code_0x3335:
   .text:0x0000000000003335        488B03               mov rax, qword ptr [rbx]
   .text:0x0000000000003338        833800               cmp dword ptr [rax], 0x0
   .text:0x000000000000333B        7513                 jnz code_0x3350
   .text:0x000000000000333D code_0x333D:
   .text:0x000000000000333D        488D155C7F0000       lea rdx, [data_0xB2A0]
   .text:0x0000000000003344        488D0D357F0000       lea rcx, [data_0xB280]
   .text:0x000000000000334B        E884FEFFFF           call _initterm; void __cdecl( int64_t p1, int64_t p2 )
   .text:0x0000000000003350 code_0x3350:
   .text:0x0000000000003350        488D15597F0000       lea rdx, [data_0xB2B0]
   .text:0x0000000000003357        488D0D4A7F0000       lea rcx, [data_0xB2A8]
   .text:0x000000000000335E        E871FEFFFF           call _initterm; void __cdecl( int64_t p1, int64_t p2 )
   .text:0x0000000000003363        488B4308             mov rax, qword ptr [rbx+0x8]
   .text:0x0000000000003367        833800               cmp dword ptr [rax], 0x0
   .text:0x000000000000336A        750E                 jnz code_0x337A
   .text:0x000000000000336C code_0x336C:
   .text:0x000000000000336C        C605BD19010001       mov byte ptr [data_0x14D30], 0x1
   .text:0x0000000000003373        488B4310             mov rax, qword ptr [rbx+0x10]
   .text:0x0000000000003377        C60001               mov byte ptr [rax], 0x1
   .text:0x000000000000337A code_0x337A:
   .text:0x000000000000337A        4883C420             add rsp, 0x20
   .text:0x000000000000337E        5B                   pop rbx
   .text:0x000000000000337F        C3                   ret
   .text:0x0000000000003380 code_0x3380:
   .text:0x0000000000003380        E873090000           call func_0x3CF8; int32_t __cdecl( void )
   .text:0x0000000000003385        90                   nop
   .text:0x0000000000003386        CC                   int3
   .text:0x0000000000003387 code_0x3387:
   .text:0x0000000000003387        CC                   int3
   .text:0x0000000000003388 dyntls_init_exception_filter:
   .text:0x0000000000003388        33C0                 xor eax, eax
   .text:0x000000000000338A        81F963736DE0         cmp ecx, 0xE06D7363
   .text:0x0000000000003390        0F94C0               sete al
   .text:0x0000000000003393        C3                   ret
   .text:0x0000000000003394 code_0x3394:
   .text:0x0000000000003394        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000003399        4489442418           mov dword ptr [rsp+0x18], r8d
   .text:0x000000000000339E        89542410             mov dword ptr [rsp+0x10], edx
   .text:0x00000000000033A2        55                   push rbp
   .text:0x00000000000033A3        488BEC               mov rbp, rsp
   .text:0x00000000000033A6        4883EC50             sub rsp, 0x50
   .text:0x00000000000033AA        8BD9                 mov ebx, ecx
   .text:0x00000000000033AC        4585C0               test r8d, r8d
   .text:0x00000000000033AF        754A                 jnz code_0x33FB
   .text:0x00000000000033B1 code_0x33B1:
   .text:0x00000000000033B1        33C9                 xor ecx, ecx
   .text:0x00000000000033B3        FF15BF7C0000         call qword ptr [GetModuleHandleW]; struct HINSTANCE__ * (__cdecl *)( unsigned short * lpModuleName )
   .text:0x00000000000033B9        4885C0               test rax, rax
   .text:0x00000000000033BC        743D                 jz code_0x33FB
   .text:0x00000000000033BE code_0x33BE:
   .text:0x00000000000033BE        B94D5A0000           mov ecx, 0x5A4D
   .text:0x00000000000033C3        663908               cmp word ptr [rax], cx
   .text:0x00000000000033C6        7533                 jnz code_0x33FB
   .text:0x00000000000033C8 code_0x33C8:
   .text:0x00000000000033C8        4863483C             movsxd rcx, dword ptr [rax+0x3C]
   .text:0x00000000000033CC        4803C8               add rcx, rax
   .text:0x00000000000033CF        813950450000         cmp dword ptr [rcx], 0x4550
   .text:0x00000000000033D5        7524                 jnz code_0x33FB
   .text:0x00000000000033D7 code_0x33D7:
   .text:0x00000000000033D7        B80B020000           mov eax, 0x20B
   .text:0x00000000000033DC        66394118             cmp word ptr [rcx+0x18], ax
   .text:0x00000000000033E0        7519                 jnz code_0x33FB
   .text:0x00000000000033E2 code_0x33E2:
   .text:0x00000000000033E2        83B9840000000E       cmp dword ptr [rcx+0x84], 0xE
   .text:0x00000000000033E9        7610                 jbe code_0x33FB
   .text:0x00000000000033EB code_0x33EB:
   .text:0x00000000000033EB        83B9F800000000       cmp dword ptr [rcx+0xF8], 0x0
   .text:0x00000000000033F2        7407                 jz code_0x33FB
   .text:0x00000000000033F4 code_0x33F4:
   .text:0x00000000000033F4        8BCB                 mov ecx, ebx
   .text:0x00000000000033F6        E8A1000000           call try_cor_exit_process; void __cdecl( unsigned int p1 )
   .text:0x00000000000033FB code_0x33FB:
   .text:0x00000000000033FB        488D4518             lea rax, [rbp+0x18]
   .text:0x00000000000033FF        C6452800             mov byte ptr [rbp+0x28], 0x0
   .text:0x0000000000003403        488945E0             mov qword ptr [rbp-0x20], rax
   .text:0x0000000000003407        4C8D4DD4             lea r9, [rbp-0x2C]
   .text:0x000000000000340B        488D4520             lea rax, [rbp+0x20]
   .text:0x000000000000340F        488945E8             mov qword ptr [rbp-0x18], rax
   .text:0x0000000000003413        4C8D45E0             lea r8, [rbp-0x20]
   .text:0x0000000000003417        488D4528             lea rax, [rbp+0x28]
   .text:0x000000000000341B        488945F0             mov qword ptr [rbp-0x10], rax
   .text:0x000000000000341F        488D55D8             lea rdx, [rbp-0x28]
   .text:0x0000000000003423        B802000000           mov eax, 0x2
   .text:0x0000000000003428        488D4DD0             lea rcx, [rbp-0x30]
   .text:0x000000000000342C        8945D4               mov dword ptr [rbp-0x2C], eax
   .text:0x000000000000342F        8945D8               mov dword ptr [rbp-0x28], eax
   .text:0x0000000000003432        E841FEFFFF           call __crt_seh_guarded_call<void>::operator()<class <lambda_d80eeec6fff315bfe5c115232f3240e3>,class <lambda_6e4b09c48022b2350581041d5f6b0c4c> & __ptr64,class <lambda_2358e3775559c9db80273638284d5e45> >; public: void __cdecl( class <lambda_d80eeec6fff315bfe5c115232f3240e3> && p1, class <lambda_6e4b09c48022b2350581041d5f6b0c4c> & p2, class <lambda_2358e3775559c9db80273638284d5e45> && p3 )
   .text:0x0000000000003437        837D2000             cmp dword ptr [rbp+0x20], 0x0
   .text:0x000000000000343B        740B                 jz code_0x3448
   .text:0x000000000000343D code_0x343D:
   .text:0x000000000000343D        488B5C2460           mov rbx, qword ptr [rsp+0x60]
   .text:0x0000000000003442        4883C450             add rsp, 0x50
   .text:0x0000000000003446        5D                   pop rbp
   .text:0x0000000000003447        C3                   ret
   .text:0x0000000000003448 code_0x3448:
   .text:0x0000000000003448        8BCB                 mov ecx, ebx
   .text:0x000000000000344A        E801000000           call func_0x3450; void __cdecl( int32_t p1 )
   .text:0x000000000000344F        CC                   int3
   .text:0x0000000000003450 func_0x3450:
   .text:0x0000000000003450        4053                 push rbx
   .text:0x0000000000003452        4883EC20             sub rsp, 0x20
   .text:0x0000000000003456        8BD9                 mov ebx, ecx
   .text:0x0000000000003458        E86B280000           call __acrt_get_process_end_policy; int32_t __cdecl( void )
   .text:0x000000000000345D        83F801               cmp eax, 0x1
   .text:0x0000000000003460        7428                 jz code_0x348A
   .text:0x0000000000003462 code_0x3462:
   .text:0x0000000000003462        65488B042560000000   mov rax, qword ptr gs:[0x60]
   .text:0x000000000000346B        8B90BC000000         mov edx, dword ptr [rax+0xBC]
   .text:0x0000000000003471        C1EA08               shr edx, 0x8
   .text:0x0000000000003474        F6C201               test dl, 0x1
   .text:0x0000000000003477        7511                 jnz code_0x348A
   .text:0x0000000000003479 code_0x3479:
   .text:0x0000000000003479        FF15997C0000         call qword ptr [GetCurrentProcess]; void * (__cdecl *)( void )
   .text:0x000000000000347F        488BC8               mov rcx, rax
   .text:0x0000000000003482        8BD3                 mov edx, ebx
   .text:0x0000000000003484        FF159E7C0000         call qword ptr [TerminateProcess]; int (__cdecl *)( void * hProcess, unsigned int uExitCode )
   .text:0x000000000000348A code_0x348A:
   .text:0x000000000000348A        8BCB                 mov ecx, ebx
   .text:0x000000000000348C        E80B000000           call try_cor_exit_process; void __cdecl( unsigned int p1 )
   .text:0x0000000000003491        8BCB                 mov ecx, ebx
   .text:0x0000000000003493        FF15877C0000         call qword ptr [ExitProcess]; void (__cdecl *)( int32_t p1 )
   .text:0x0000000000003499 data_0x3499:
   .text:0x0000000000003499        db 3 dup(0xCC)
   .text:0x000000000000349C try_cor_exit_process:
   .text:0x000000000000349C        4053                 push rbx
   .text:0x000000000000349E        4883EC20             sub rsp, 0x20
   .text:0x00000000000034A2        488364243800         and qword ptr [rsp+0x38], 0x0
   .text:0x00000000000034A8        4C8D442438           lea r8, [rsp+0x38]
   .text:0x00000000000034AD        8BD9                 mov ebx, ecx
   .text:0x00000000000034AF        488D15F2890000       lea rdx, [string_mscoreedll]; "mscoree.dll"
   .text:0x00000000000034B6        33C9                 xor ecx, ecx
   .text:0x00000000000034B8        FF15427B0000         call qword ptr [GetModuleHandleExW]; int (__cdecl *)( unsigned long dwFlags, unsigned short * lpModuleName, struct HINSTANCE__ ** phModule )
   .text:0x00000000000034BE        85C0                 test eax, eax
   .text:0x00000000000034C0        741F                 jz code_0x34E1
   .text:0x00000000000034C2 code_0x34C2:
   .text:0x00000000000034C2        488B4C2438           mov rcx, qword ptr [rsp+0x38]
   .text:0x00000000000034C7        488D15F2890000       lea rdx, [string_CorExitPro]; "CorExitProcess"
   .text:0x00000000000034CE        FF15147C0000         call qword ptr [GetProcAddress]; long long (__cdecl *)( ... ) (__cdecl *)( struct HINSTANCE__ * hModule, char * lpProcName )
   .text:0x00000000000034D4        4885C0               test rax, rax
   .text:0x00000000000034D7        7408                 jz code_0x34E1
   .text:0x00000000000034D9 code_0x34D9:
   .text:0x00000000000034D9        8BCB                 mov ecx, ebx
   .text:0x00000000000034DB        FF15477D0000         call qword ptr [GuardCFDispatchFunction]; void (__cdecl *)( int32_t p1 )
   .text:0x00000000000034E1 code_0x34E1:
   .text:0x00000000000034E1        488B4C2438           mov rcx, qword ptr [rsp+0x38]
   .text:0x00000000000034E6        4885C9               test rcx, rcx
   .text:0x00000000000034E9        7406                 jz code_0x34F1
   .text:0x00000000000034EB code_0x34EB:
   .text:0x00000000000034EB        FF15EF7B0000         call qword ptr [FreeLibrary]; int (__cdecl *)( struct HINSTANCE__ * hLibModule )
   .text:0x00000000000034F1 code_0x34F1:
   .text:0x00000000000034F1        4883C420             add rsp, 0x20
   .text:0x00000000000034F5        5B                   pop rbx
   .text:0x00000000000034F6        C3                   ret
   .text:0x00000000000034F7 code_0x34F7:
   .text:0x00000000000034F7        CC                   int3
   .text:0x00000000000034F8 func_0x34F8:
   .text:0x00000000000034F8        48890D29180100       mov qword ptr [data_0x14D28], rcx
   .text:0x00000000000034FF        C3                   ret
   .text:0x0000000000003500 func_0x3500:
   .text:0x0000000000003500        BA02000000           mov edx, 0x2
   .text:0x0000000000003505        33C9                 xor ecx, ecx
   .text:0x0000000000003507        448D42FF             lea r8d, [rdx-0x1]
   .text:0x000000000000350B        E984FEFFFF           jmp code_0x3394
   .text:0x0000000000003510 func_0x3510:
   .text:0x0000000000003510        33D2                 xor edx, edx
   .text:0x0000000000003512        33C9                 xor ecx, ecx
   .text:0x0000000000003514        448D4201             lea r8d, [rdx+0x1]
   .text:0x0000000000003518        E977FEFFFF           jmp code_0x3394
   .text:0x000000000000351D data_0x351D:
   .text:0x000000000000351D        db 3 dup(0xCC)
   .text:0x0000000000003520 func_0x3520:
   .text:0x0000000000003520        4533C0               xor r8d, r8d
   .text:0x0000000000003523        418D5002             lea edx, [r8+0x2]
   .text:0x0000000000003527        E968FEFFFF           jmp code_0x3394
   .text:0x000000000000352C _register_thread_local_exe_atexit_callback:
   .text:0x000000000000352C        4883EC28             sub rsp, 0x28
   .text:0x0000000000003530        4C8B05F10A0100       mov r8, qword ptr [__security_cookie]
   .text:0x0000000000003537        488BD1               mov rdx, rcx
   .text:0x000000000000353A        418BC0               mov eax, r8d
   .text:0x000000000000353D        B940000000           mov ecx, 0x40
   .text:0x0000000000003542        83E03F               and eax, 0x3F
   .text:0x0000000000003545        2BC8                 sub ecx, eax
   .text:0x0000000000003547        33C0                 xor eax, eax
   .text:0x0000000000003549        48D3C8               ror rax, cl
   .text:0x000000000000354C        4933C0               xor rax, r8
   .text:0x000000000000354F        483905D2170100       cmp qword ptr [data_0x14D28], rax
   .text:0x0000000000003556        7512                 jnz code_0x356A
   .text:0x0000000000003558 code_0x3558:
   .text:0x0000000000003558        48D3CA               ror rdx, cl
   .text:0x000000000000355B        4933D0               xor rdx, r8
   .text:0x000000000000355E        488915C3170100       mov qword ptr [data_0x14D28], rdx
   .text:0x0000000000003565        4883C428             add rsp, 0x28
   .text:0x0000000000003569        C3                   ret
   .text:0x000000000000356A code_0x356A:
   .text:0x000000000000356A        E889070000           call func_0x3CF8; int32_t __cdecl( void )
   .text:0x000000000000356F        CC                   int3
   .text:0x0000000000003570 func_0x3570:
   .text:0x0000000000003570        4533C0               xor r8d, r8d
   .text:0x0000000000003573        33D2                 xor edx, edx
   .text:0x0000000000003575        E91AFEFFFF           jmp code_0x3394
   .text:0x000000000000357A data_0x357A:
   .text:0x000000000000357A        db 2 dup(0xCC)
   .text:0x000000000000357C _set_fmode:
   .text:0x000000000000357C        4883EC28             sub rsp, 0x28
   .text:0x0000000000003580        8D8100C0FFFF         lea eax, [rcx-0x4000]
   .text:0x0000000000003586        A9FF3FFFFF           test eax, 0xFFFF3FFF
   .text:0x000000000000358B        7512                 jnz code_0x359F
   .text:0x000000000000358D code_0x358D:
   .text:0x000000000000358D        81F900C00000         cmp ecx, 0xC000
   .text:0x0000000000003593        740A                 jz code_0x359F
   .text:0x0000000000003595 code_0x3595:
   .text:0x0000000000003595        870D691A0100         xchg dword ptr [data_0x15004], ecx
   .text:0x000000000000359B        33C0                 xor eax, eax
   .text:0x000000000000359D        EB15                 jmp code_0x35B4
   .text:0x000000000000359F code_0x359F:
   .text:0x000000000000359F        E8D8130000           call _errno; int * __cdecl( void )
   .text:0x00000000000035A4        C70016000000         mov dword ptr [rax], 0x16
   .text:0x00000000000035AA        E841110000           call _invalid_parameter_noinfo; void __cdecl( void )
   .text:0x00000000000035AF        B816000000           mov eax, 0x16
   .text:0x00000000000035B4 code_0x35B4:
   .text:0x00000000000035B4        4883C428             add rsp, 0x28
   .text:0x00000000000035B8        C3                   ret
   .text:0x00000000000035B9 data_0x35B9:
   .text:0x00000000000035B9        db 3 dup(0xCC)
   .text:0x00000000000035BC __crt_seh_guarded_call<void>::operator()<class <lambda_410d79af7f07d98d83a3f525b3859a53>,class <lambda_3e16ef9562a7dcce91392c22ab16ea36> & __ptr64,class <lambda_38119f0e861e05405d8a144b9b982f0a> >:
   .text:0x00000000000035BC        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x00000000000035C1        4889742410           mov qword ptr [rsp+0x10], rsi
   .text:0x00000000000035C6        4C894C2420           mov qword ptr [rsp+0x20], r9
   .text:0x00000000000035CB        57                   push rdi
   .text:0x00000000000035CC        4883EC30             sub rsp, 0x30
   .text:0x00000000000035D0        498BF9               mov rdi, r9
   .text:0x00000000000035D3        8B0A                 mov ecx, dword ptr [rdx]
   .text:0x00000000000035D5        E87E260000           call __acrt_lock; void __cdecl( int32_t p1 )
   .text:0x00000000000035DA        90                   nop
   .text:0x00000000000035DB        488D1D361E0100       lea rbx, [data_0x15418]
   .text:0x00000000000035E2        488D35A70F0100       lea rsi, [data_0x14590]
   .text:0x00000000000035E9 code_0x35E9:
   .text:0x00000000000035E9        48895C2420           mov qword ptr [rsp+0x20], rbx
   .text:0x00000000000035EE        488D052B1E0100       lea rax, [data_0x15420]
   .text:0x00000000000035F5        483BD8               cmp rbx, rax
   .text:0x00000000000035F8        7419                 jz code_0x3613
   .text:0x00000000000035FA code_0x35FA:
   .text:0x00000000000035FA        483933               cmp qword ptr [rbx], rsi
   .text:0x00000000000035FD        740E                 jz code_0x360D
   .text:0x00000000000035FF code_0x35FF:
   .text:0x00000000000035FF        488BD6               mov rdx, rsi
   .text:0x0000000000003602        488BCB               mov rcx, rbx
   .text:0x0000000000003605        E836350000           call _updatetlocinfoEx_nolock; int32_t __cdecl( int64_t p1, int64_t p2 )
   .text:0x000000000000360A        488903               mov qword ptr [rbx], rax
   .text:0x000000000000360D code_0x360D:
   .text:0x000000000000360D        4883C308             add rbx, 0x8
   .text:0x0000000000003611        EBD6                 jmp code_0x35E9
   .text:0x0000000000003613 code_0x3613:
   .text:0x0000000000003613        8B0F                 mov ecx, dword ptr [rdi]
   .text:0x0000000000003615        E892260000           call func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x000000000000361A        488B5C2440           mov rbx, qword ptr [rsp+0x40]
   .text:0x000000000000361F        488B742448           mov rsi, qword ptr [rsp+0x48]
   .text:0x0000000000003624        4883C430             add rsp, 0x30
   .text:0x0000000000003628        5F                   pop rdi
   .text:0x0000000000003629        C3                   ret
   .text:0x000000000000362A data_0x362A:
   .text:0x000000000000362A        db 2 dup(0xCC)
   .text:0x000000000000362C __acrt_set_locale_changed:
   .text:0x000000000000362C        B801000000           mov eax, 0x1
   .text:0x0000000000003631        8705FD160100         xchg dword ptr [data_0x14D34], eax
   .text:0x0000000000003637        C3                   ret
   .text:0x0000000000003638 __acrt_uninitialize_locale:
   .text:0x0000000000003638        4C8BDC               mov r11, rsp
   .text:0x000000000000363B        4883EC28             sub rsp, 0x28
   .text:0x000000000000363F        B804000000           mov eax, 0x4
   .text:0x0000000000003644        4D8D4B10             lea r9, [r11+0x10]
   .text:0x0000000000003648        4D8D4308             lea r8, [r11+0x8]
   .text:0x000000000000364C        89442438             mov dword ptr [rsp+0x38], eax
   .text:0x0000000000003650        498D5318             lea rdx, [r11+0x18]
   .text:0x0000000000003654        89442440             mov dword ptr [rsp+0x40], eax
   .text:0x0000000000003658        498D4B08             lea rcx, [r11+0x8]
   .text:0x000000000000365C        E85BFFFFFF           call __crt_seh_guarded_call<void>::operator()<class <lambda_410d79af7f07d98d83a3f525b3859a53>,class <lambda_3e16ef9562a7dcce91392c22ab16ea36> & __ptr64,class <lambda_38119f0e861e05405d8a144b9b982f0a> >; public: void __cdecl( class <lambda_410d79af7f07d98d83a3f525b3859a53> && p1, class <lambda_3e16ef9562a7dcce91392c22ab16ea36> & p2, class <lambda_38119f0e861e05405d8a144b9b982f0a> && p3 )
   .text:0x0000000000003661        4883C428             add rsp, 0x28
   .text:0x0000000000003665        C3                   ret
   .text:0x0000000000003666 data_0x3666:
   .text:0x0000000000003666        db 2 dup(0xCC)
   .text:0x0000000000003668 _configthreadlocale:
   .text:0x0000000000003668        4053                 push rbx
   .text:0x000000000000366A        4883EC20             sub rsp, 0x20
   .text:0x000000000000366E        8BD9                 mov ebx, ecx
   .text:0x0000000000003670        E8E30B0000           call func_0x4258; int64_t __cdecl( void )
   .text:0x0000000000003675        448B80A8030000       mov r8d, dword ptr [rax+0x3A8]
   .text:0x000000000000367C        418BD0               mov edx, r8d
   .text:0x000000000000367F        80E202               and dl, 0x2
   .text:0x0000000000003682        F6DA                 neg dl
   .text:0x0000000000003684        1BC9                 sbb ecx, ecx
   .text:0x0000000000003686        83FBFF               cmp ebx, 0xFFFFFFFF
   .text:0x0000000000003689        7436                 jz code_0x36C1
   .text:0x000000000000368B code_0x368B:
   .text:0x000000000000368B        85DB                 test ebx, ebx
   .text:0x000000000000368D        7439                 jz code_0x36C8
   .text:0x000000000000368F code_0x368F:
   .text:0x000000000000368F        83FB01               cmp ebx, 0x1
   .text:0x0000000000003692        7420                 jz code_0x36B4
   .text:0x0000000000003694 code_0x3694:
   .text:0x0000000000003694        83FB02               cmp ebx, 0x2
   .text:0x0000000000003697        7415                 jz code_0x36AE
   .text:0x0000000000003699 code_0x3699:
   .text:0x0000000000003699        E8DE120000           call _errno; int * __cdecl( void )
   .text:0x000000000000369E        C70016000000         mov dword ptr [rax], 0x16
   .text:0x00000000000036A4        E847100000           call _invalid_parameter_noinfo; void __cdecl( void )
   .text:0x00000000000036A9        83C8FF               or eax, 0xFFFFFFFF
   .text:0x00000000000036AC        EB1D                 jmp code_0x36CB
   .text:0x00000000000036AE code_0x36AE:
   .text:0x00000000000036AE        4183E0FD             and r8d, 0xFFFFFFFD
   .text:0x00000000000036B2        EB04                 jmp code_0x36B8
   .text:0x00000000000036B4 code_0x36B4:
   .text:0x00000000000036B4        4183C802             or r8d, 0x2
   .text:0x00000000000036B8 code_0x36B8:
   .text:0x00000000000036B8        448980A8030000       mov dword ptr [rax+0x3A8], r8d
   .text:0x00000000000036BF        EB07                 jmp code_0x36C8
   .text:0x00000000000036C1 code_0x36C1:
   .text:0x00000000000036C1        830DD8100100FF       or dword ptr [data_0x147A0], 0xFFFFFFFF
   .text:0x00000000000036C8 code_0x36C8:
   .text:0x00000000000036C8        8D4102               lea eax, [rcx+0x2]
   .text:0x00000000000036CB code_0x36CB:
   .text:0x00000000000036CB        4883C420             add rsp, 0x20
   .text:0x00000000000036CF        5B                   pop rbx
   .text:0x00000000000036D0        C3                   ret
   .text:0x00000000000036D1 data_0x36D1:
   .text:0x00000000000036D1        db 3 dup(0xCC)
   .text:0x00000000000036D4 _query_new_mode:
   .text:0x00000000000036D4        8B055E160100         mov eax, dword ptr [data_0x14D38]
   .text:0x00000000000036DA        C3                   ret
   .text:0x00000000000036DB code_0x36DB:
   .text:0x00000000000036DB        CC                   int3
   .text:0x00000000000036DC code_0x36DC:
   .text:0x00000000000036DC        4883EC28             sub rsp, 0x28
   .text:0x00000000000036E0        83F901               cmp ecx, 0x1
   .text:0x00000000000036E3        7615                 jbe code_0x36FA
   .text:0x00000000000036E5 code_0x36E5:
   .text:0x00000000000036E5        E892120000           call _errno; int * __cdecl( void )
   .text:0x00000000000036EA        C70016000000         mov dword ptr [rax], 0x16
   .text:0x00000000000036F0        E8FB0F0000           call _invalid_parameter_noinfo; void __cdecl( void )
   .text:0x00000000000036F5        83C8FF               or eax, 0xFFFFFFFF
   .text:0x00000000000036F8        EB08                 jmp code_0x3702
   .text:0x00000000000036FA code_0x36FA:
   .text:0x00000000000036FA        870D38160100         xchg dword ptr [data_0x14D38], ecx
   .text:0x0000000000003700        8BC1                 mov eax, ecx
   .text:0x0000000000003702 code_0x3702:
   .text:0x0000000000003702        4883C428             add rsp, 0x28
   .text:0x0000000000003706        C3                   ret
   .text:0x0000000000003707 code_0x3707:
   .text:0x0000000000003707        CC                   int3
   .text:0x0000000000003708 func_0x3708:
   .text:0x0000000000003708        488D052D160100       lea rax, [data_0x14D3C]
   .text:0x000000000000370F        C3                   ret
   .text:0x0000000000003710 __crt_seh_guarded_call<int>::operator()<class <lambda_7777bce6b2f8c936911f934f8298dc43>,class <lambda_f03950bc5685219e0bcd2087efbe011e> & __ptr64,class <lambda_3883c3dff614d5e0c5f61bb1ac94921c> >:
   .text:0x0000000000003710        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000003715        4C894C2420           mov qword ptr [rsp+0x20], r9
   .text:0x000000000000371A        57                   push rdi
   .text:0x000000000000371B        4883EC20             sub rsp, 0x20
   .text:0x000000000000371F        498BD9               mov rbx, r9
   .text:0x0000000000003722        498BF8               mov rdi, r8
   .text:0x0000000000003725        8B0A                 mov ecx, dword ptr [rdx]
   .text:0x0000000000003727        E82C250000           call __acrt_lock; void __cdecl( int32_t p1 )
   .text:0x000000000000372C        90                   nop
   .text:0x000000000000372D        488BCF               mov rcx, rdi
   .text:0x0000000000003730        E817020000           call <lambda_f03950bc5685219e0bcd2087efbe011e>::operator(); public: int __cdecl( void )
   .text:0x0000000000003735        8BF8                 mov edi, eax
   .text:0x0000000000003737        8B0B                 mov ecx, dword ptr [rbx]
   .text:0x0000000000003739        E86E250000           call func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x000000000000373E        8BC7                 mov eax, edi
   .text:0x0000000000003740        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000003745        4883C420             add rsp, 0x20
   .text:0x0000000000003749        5F                   pop rdi
   .text:0x000000000000374A        C3                   ret
   .text:0x000000000000374B code_0x374B:
   .text:0x000000000000374B        CC                   int3
   .text:0x000000000000374C func_0x374C:
   .text:0x000000000000374C        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000003751        4C894C2420           mov qword ptr [rsp+0x20], r9
   .text:0x0000000000003756        57                   push rdi
   .text:0x0000000000003757        4883EC20             sub rsp, 0x20
   .text:0x000000000000375B        498BD9               mov rbx, r9
   .text:0x000000000000375E        498BF8               mov rdi, r8
   .text:0x0000000000003761        8B0A                 mov ecx, dword ptr [rdx]
   .text:0x0000000000003763        E8F0240000           call __acrt_lock; void __cdecl( int32_t p1 )
   .text:0x0000000000003768        90                   nop
   .text:0x0000000000003769        488BCF               mov rcx, rdi
   .text:0x000000000000376C        E817000000           call <lambda_a10e4b102d4a2c3aac6f4f48bbdf488f>::operator(); public: int __cdecl( void )
   .text:0x0000000000003771        8BF8                 mov edi, eax
   .text:0x0000000000003773        8B0B                 mov ecx, dword ptr [rbx]
   .text:0x0000000000003775        E832250000           call func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x000000000000377A        8BC7                 mov eax, edi
   .text:0x000000000000377C        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000003781        4883C420             add rsp, 0x20
   .text:0x0000000000003785        5F                   pop rdi
   .text:0x0000000000003786        C3                   ret
   .text:0x0000000000003787 code_0x3787:
   .text:0x0000000000003787        CC                   int3
   .text:0x0000000000003788 <lambda_a10e4b102d4a2c3aac6f4f48bbdf488f>::operator():
   .text:0x0000000000003788        488BC4               mov rax, rsp
   .text:0x000000000000378B        48895808             mov qword ptr [rax+0x8], rbx
   .text:0x000000000000378F        48896810             mov qword ptr [rax+0x10], rbp
   .text:0x0000000000003793        48897018             mov qword ptr [rax+0x18], rsi
   .text:0x0000000000003797        48897820             mov qword ptr [rax+0x20], rdi
   .text:0x000000000000379B        4154                 push r12
   .text:0x000000000000379D        4156                 push r14
   .text:0x000000000000379F        4157                 push r15
   .text:0x00000000000037A1        4883EC20             sub rsp, 0x20
   .text:0x00000000000037A5        488B01               mov rax, qword ptr [rcx]
   .text:0x00000000000037A8        4533E4               xor r12d, r12d
   .text:0x00000000000037AB        4C8BF9               mov r15, rcx
   .text:0x00000000000037AE        488B18               mov rbx, qword ptr [rax]
   .text:0x00000000000037B1        4885DB               test rbx, rbx
   .text:0x00000000000037B4        7508                 jnz code_0x37BE
   .text:0x00000000000037B6 code_0x37B6:
   .text:0x00000000000037B6        83C8FF               or eax, 0xFFFFFFFF
   .text:0x00000000000037B9        E96E010000           jmp code_0x392C
   .text:0x00000000000037BE code_0x37BE:
   .text:0x00000000000037BE        488B3D63080100       mov rdi, qword ptr [__security_cookie]
   .text:0x00000000000037C5        BD40000000           mov ebp, 0x40
   .text:0x00000000000037CA        488B33               mov rsi, qword ptr [rbx]
   .text:0x00000000000037CD        8BCF                 mov ecx, edi
   .text:0x00000000000037CF        4C8B4308             mov r8, qword ptr [rbx+0x8]
   .text:0x00000000000037D3        83E13F               and ecx, 0x3F
   .text:0x00000000000037D6        488B5B10             mov rbx, qword ptr [rbx+0x10]
   .text:0x00000000000037DA        4833F7               xor rsi, rdi
   .text:0x00000000000037DD        4C33C7               xor r8, rdi
   .text:0x00000000000037E0        48D3CE               ror rsi, cl
   .text:0x00000000000037E3        4833DF               xor rbx, rdi
   .text:0x00000000000037E6        49D3C8               ror r8, cl
   .text:0x00000000000037E9        48D3CB               ror rbx, cl
   .text:0x00000000000037EC        4C3BC3               cmp r8, rbx
   .text:0x00000000000037EF        0F85B6000000         jnz code_0x38AB
   .text:0x00000000000037F5 code_0x37F5:
   .text:0x00000000000037F5        482BDE               sub rbx, rsi
   .text:0x00000000000037F8        B800020000           mov eax, 0x200
   .text:0x00000000000037FD        48C1FB03             sar rbx, 0x3
   .text:0x0000000000003801        483BD8               cmp rbx, rax
   .text:0x0000000000003804        488BFB               mov rdi, rbx
   .text:0x0000000000003807        480F47F8             cmova rdi, rax
   .text:0x000000000000380B        8D45E0               lea eax, [rbp-0x20]
   .text:0x000000000000380E        4803FB               add rdi, rbx
   .text:0x0000000000003811        480F44F8             cmove rdi, rax
   .text:0x0000000000003815        483BFB               cmp rdi, rbx
   .text:0x0000000000003818        721E                 jb code_0x3838
   .text:0x000000000000381A code_0x381A:
   .text:0x000000000000381A        448D45C8             lea r8d, [rbp-0x38]
   .text:0x000000000000381E        488BD7               mov rdx, rdi
   .text:0x0000000000003821        488BCE               mov rcx, rsi
   .text:0x0000000000003824        E8EF380000           call func_0x7118; int64_t __cdecl( int64_t p1, int64_t p2, int64_t p3 )
   .text:0x0000000000003829        33C9                 xor ecx, ecx
   .text:0x000000000000382B        4C8BF0               mov r14, rax
   .text:0x000000000000382E        E8E1110000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000003833        4D85F6               test r14, r14
   .text:0x0000000000003836        7528                 jnz code_0x3860
   .text:0x0000000000003838 code_0x3838:
   .text:0x0000000000003838        488D7B04             lea rdi, [rbx+0x4]
   .text:0x000000000000383C        41B808000000         mov r8d, 0x8
   .text:0x0000000000003842        488BD7               mov rdx, rdi
   .text:0x0000000000003845        488BCE               mov rcx, rsi
   .text:0x0000000000003848        E8CB380000           call func_0x7118; int64_t __cdecl( int64_t p1, int64_t p2, int64_t p3 )
   .text:0x000000000000384D        33C9                 xor ecx, ecx
   .text:0x000000000000384F        4C8BF0               mov r14, rax
   .text:0x0000000000003852        E8BD110000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000003857        4D85F6               test r14, r14
   .text:0x000000000000385A        0F8456FFFFFF         jz code_0x37B6
   .text:0x0000000000003860 code_0x3860:
   .text:0x0000000000003860        4D8D04DE             lea r8, [r14+rbx*8]
   .text:0x0000000000003864        8BCD                 mov ecx, ebp
   .text:0x0000000000003866        498D1CFE             lea rbx, [r14+rdi*8]
   .text:0x000000000000386A        498BF6               mov rsi, r14
   .text:0x000000000000386D        488B3DB4070100       mov rdi, qword ptr [__security_cookie]
   .text:0x0000000000003874        8BC7                 mov eax, edi
   .text:0x0000000000003876        83E03F               and eax, 0x3F
   .text:0x0000000000003879        2BC8                 sub ecx, eax
   .text:0x000000000000387B        498BC4               mov rax, r12
   .text:0x000000000000387E        48D3C8               ror rax, cl
   .text:0x0000000000003881        488BCB               mov rcx, rbx
   .text:0x0000000000003884        492BC8               sub rcx, r8
   .text:0x0000000000003887        4833C7               xor rax, rdi
   .text:0x000000000000388A        4883C107             add rcx, 0x7
   .text:0x000000000000388E        48C1E903             shr rcx, 0x3
   .text:0x0000000000003892        4C3BC3               cmp r8, rbx
   .text:0x0000000000003895        490F47CC             cmova rcx, r12
   .text:0x0000000000003899        4885C9               test rcx, rcx
   .text:0x000000000000389C        740D                 jz code_0x38AB
   .text:0x000000000000389E code_0x389E:
   .text:0x000000000000389E        498BF8               mov rdi, r8
   .text:0x00000000000038A1        F348AB               rep stosq
   .text:0x00000000000038A4        488B3D7D070100       mov rdi, qword ptr [__security_cookie]
   .text:0x00000000000038AB code_0x38AB:
   .text:0x00000000000038AB        8BC7                 mov eax, edi
   .text:0x00000000000038AD        8BCD                 mov ecx, ebp
   .text:0x00000000000038AF        83E03F               and eax, 0x3F
   .text:0x00000000000038B2        2BC8                 sub ecx, eax
   .text:0x00000000000038B4        498B4708             mov rax, qword ptr [r15+0x8]
   .text:0x00000000000038B8        488B10               mov rdx, qword ptr [rax]
   .text:0x00000000000038BB        8BC5                 mov eax, ebp
   .text:0x00000000000038BD        48D3CA               ror rdx, cl
   .text:0x00000000000038C0        4833D7               xor rdx, rdi
   .text:0x00000000000038C3        498D7808             lea rdi, [r8+0x8]
   .text:0x00000000000038C7        498910               mov qword ptr [r8], rdx
   .text:0x00000000000038CA        488B1557070100       mov rdx, qword ptr [__security_cookie]
   .text:0x00000000000038D1        8BCA                 mov ecx, edx
   .text:0x00000000000038D3        83E13F               and ecx, 0x3F
   .text:0x00000000000038D6        2BC1                 sub eax, ecx
   .text:0x00000000000038D8        8AC8                 mov cl, al
   .text:0x00000000000038DA        498B07               mov rax, qword ptr [r15]
   .text:0x00000000000038DD        48D3CE               ror rsi, cl
   .text:0x00000000000038E0        4833F2               xor rsi, rdx
   .text:0x00000000000038E3        488B08               mov rcx, qword ptr [rax]
   .text:0x00000000000038E6        488931               mov qword ptr [rcx], rsi
   .text:0x00000000000038E9        8BCD                 mov ecx, ebp
   .text:0x00000000000038EB        488B1536070100       mov rdx, qword ptr [__security_cookie]
   .text:0x00000000000038F2        8BC2                 mov eax, edx
   .text:0x00000000000038F4        83E03F               and eax, 0x3F
   .text:0x00000000000038F7        2BC8                 sub ecx, eax
   .text:0x00000000000038F9        498B07               mov rax, qword ptr [r15]
   .text:0x00000000000038FC        48D3CF               ror rdi, cl
   .text:0x00000000000038FF        4833FA               xor rdi, rdx
   .text:0x0000000000003902        488B10               mov rdx, qword ptr [rax]
   .text:0x0000000000003905        48897A08             mov qword ptr [rdx+0x8], rdi
   .text:0x0000000000003909        488B1518070100       mov rdx, qword ptr [__security_cookie]
   .text:0x0000000000003910        8BC2                 mov eax, edx
   .text:0x0000000000003912        83E03F               and eax, 0x3F
   .text:0x0000000000003915        2BE8                 sub ebp, eax
   .text:0x0000000000003917        498B07               mov rax, qword ptr [r15]
   .text:0x000000000000391A        408ACD               mov cl, bpl
   .text:0x000000000000391D        48D3CB               ror rbx, cl
   .text:0x0000000000003920        4833DA               xor rbx, rdx
   .text:0x0000000000003923        488B08               mov rcx, qword ptr [rax]
   .text:0x0000000000003926        33C0                 xor eax, eax
   .text:0x0000000000003928        48895910             mov qword ptr [rcx+0x10], rbx
   .text:0x000000000000392C code_0x392C:
   .text:0x000000000000392C        488B5C2440           mov rbx, qword ptr [rsp+0x40]
   .text:0x0000000000003931        488B6C2448           mov rbp, qword ptr [rsp+0x48]
   .text:0x0000000000003936        488B742450           mov rsi, qword ptr [rsp+0x50]
   .text:0x000000000000393B        488B7C2458           mov rdi, qword ptr [rsp+0x58]
   .text:0x0000000000003940        4883C420             add rsp, 0x20
   .text:0x0000000000003944        415F                 pop r15
   .text:0x0000000000003946        415E                 pop r14
   .text:0x0000000000003948        415C                 pop r12
   .text:0x000000000000394A        C3                   ret
   .text:0x000000000000394B code_0x394B:
   .text:0x000000000000394B        CC                   int3
   .text:0x000000000000394C <lambda_f03950bc5685219e0bcd2087efbe011e>::operator():
   .text:0x000000000000394C        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000003951        48896C2410           mov qword ptr [rsp+0x10], rbp
   .text:0x0000000000003956        4889742418           mov qword ptr [rsp+0x18], rsi
   .text:0x000000000000395B        57                   push rdi
   .text:0x000000000000395C        4154                 push r12
   .text:0x000000000000395E        4155                 push r13
   .text:0x0000000000003960        4156                 push r14
   .text:0x0000000000003962        4157                 push r15
   .text:0x0000000000003964        4883EC20             sub rsp, 0x20
   .text:0x0000000000003968        488B01               mov rax, qword ptr [rcx]
   .text:0x000000000000396B        33F6                 xor esi, esi
   .text:0x000000000000396D        4C8BF1               mov r14, rcx
   .text:0x0000000000003970        488B18               mov rbx, qword ptr [rax]
   .text:0x0000000000003973        4885DB               test rbx, rbx
   .text:0x0000000000003976        7508                 jnz code_0x3980
   .text:0x0000000000003978 code_0x3978:
   .text:0x0000000000003978        83C8FF               or eax, 0xFFFFFFFF
   .text:0x000000000000397B        E9F8000000           jmp code_0x3A78
   .text:0x0000000000003980 code_0x3980:
   .text:0x0000000000003980        488B3B               mov rdi, qword ptr [rbx]
   .text:0x0000000000003983        4C8B059E060100       mov r8, qword ptr [__security_cookie]
   .text:0x000000000000398A        488B5B08             mov rbx, qword ptr [rbx+0x8]
   .text:0x000000000000398E        4933F8               xor rdi, r8
   .text:0x0000000000003991        4933D8               xor rbx, r8
   .text:0x0000000000003994        458BC8               mov r9d, r8d
   .text:0x0000000000003997        4183E13F             and r9d, 0x3F
   .text:0x000000000000399B        418BC9               mov ecx, r9d
   .text:0x000000000000399E        48D3CF               ror rdi, cl
   .text:0x00000000000039A1        48D3CB               ror rbx, cl
   .text:0x00000000000039A4        488D47FF             lea rax, [rdi-0x1]
   .text:0x00000000000039A8        4883F8FD             cmp rax, 0xFFFFFFFFFFFFFFFD
   .text:0x00000000000039AC        0F87C4000000         ja code_0x3A76
   .text:0x00000000000039B2 code_0x39B2:
   .text:0x00000000000039B2        41BF40000000         mov r15d, 0x40
   .text:0x00000000000039B8        488BEE               mov rbp, rsi
   .text:0x00000000000039BB        418BCF               mov ecx, r15d
   .text:0x00000000000039BE        4C8BEF               mov r13, rdi
   .text:0x00000000000039C1        412BC9               sub ecx, r9d
   .text:0x00000000000039C4        4C8BE3               mov r12, rbx
   .text:0x00000000000039C7        48D3CD               ror rbp, cl
   .text:0x00000000000039CA        4933E8               xor rbp, r8
   .text:0x00000000000039CD code_0x39CD:
   .text:0x00000000000039CD        4883EB08             sub rbx, 0x8
   .text:0x00000000000039D1        483BDF               cmp rbx, rdi
   .text:0x00000000000039D4        725C                 jb code_0x3A32
   .text:0x00000000000039D6 code_0x39D6:
   .text:0x00000000000039D6        488B03               mov rax, qword ptr [rbx]
   .text:0x00000000000039D9        483BC5               cmp rax, rbp
   .text:0x00000000000039DC        74EF                 jz code_0x39CD
   .text:0x00000000000039DE code_0x39DE:
   .text:0x00000000000039DE        4933C0               xor rax, r8
   .text:0x00000000000039E1        48892B               mov qword ptr [rbx], rbp
   .text:0x00000000000039E4        418BC9               mov ecx, r9d
   .text:0x00000000000039E7        48D3C8               ror rax, cl
   .text:0x00000000000039EA        FF1538780000         call qword ptr [GuardCFDispatchFunction]; void (__cdecl *)( void )
   .text:0x00000000000039F0        4C8B0531060100       mov r8, qword ptr [__security_cookie]
   .text:0x00000000000039F7        498B06               mov rax, qword ptr [r14]
   .text:0x00000000000039FA        458BC8               mov r9d, r8d
   .text:0x00000000000039FD        4183E13F             and r9d, 0x3F
   .text:0x0000000000003A01        418BC9               mov ecx, r9d
   .text:0x0000000000003A04        488B10               mov rdx, qword ptr [rax]
   .text:0x0000000000003A07        4C8B12               mov r10, qword ptr [rdx]
   .text:0x0000000000003A0A        488B4208             mov rax, qword ptr [rdx+0x8]
   .text:0x0000000000003A0E        4D33D0               xor r10, r8
   .text:0x0000000000003A11        4933C0               xor rax, r8
   .text:0x0000000000003A14        49D3CA               ror r10, cl
   .text:0x0000000000003A17        48D3C8               ror rax, cl
   .text:0x0000000000003A1A        4D3BD5               cmp r10, r13
   .text:0x0000000000003A1D        7505                 jnz code_0x3A24
   .text:0x0000000000003A1F code_0x3A1F:
   .text:0x0000000000003A1F        493BC4               cmp rax, r12
   .text:0x0000000000003A22        74A9                 jz code_0x39CD
   .text:0x0000000000003A24 code_0x3A24:
   .text:0x0000000000003A24        4D8BEA               mov r13, r10
   .text:0x0000000000003A27        498BFA               mov rdi, r10
   .text:0x0000000000003A2A        4C8BE0               mov r12, rax
   .text:0x0000000000003A2D        488BD8               mov rbx, rax
   .text:0x0000000000003A30        EB9B                 jmp code_0x39CD
   .text:0x0000000000003A32 code_0x3A32:
   .text:0x0000000000003A32        4883FFFF             cmp rdi, 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000003A36        740F                 jz code_0x3A47
   .text:0x0000000000003A38 code_0x3A38:
   .text:0x0000000000003A38        488BCF               mov rcx, rdi
   .text:0x0000000000003A3B        E8D40F0000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000003A40        4C8B05E1050100       mov r8, qword ptr [__security_cookie]
   .text:0x0000000000003A47 code_0x3A47:
   .text:0x0000000000003A47        418BC0               mov eax, r8d
   .text:0x0000000000003A4A        83E03F               and eax, 0x3F
   .text:0x0000000000003A4D        442BF8               sub r15d, eax
   .text:0x0000000000003A50        498B06               mov rax, qword ptr [r14]
   .text:0x0000000000003A53        418ACF               mov cl, r15b
   .text:0x0000000000003A56        48D3CE               ror rsi, cl
   .text:0x0000000000003A59        4933F0               xor rsi, r8
   .text:0x0000000000003A5C        488B08               mov rcx, qword ptr [rax]
   .text:0x0000000000003A5F        488931               mov qword ptr [rcx], rsi
   .text:0x0000000000003A62        498B06               mov rax, qword ptr [r14]
   .text:0x0000000000003A65        488B08               mov rcx, qword ptr [rax]
   .text:0x0000000000003A68        48897108             mov qword ptr [rcx+0x8], rsi
   .text:0x0000000000003A6C        498B06               mov rax, qword ptr [r14]
   .text:0x0000000000003A6F        488B08               mov rcx, qword ptr [rax]
   .text:0x0000000000003A72        48897110             mov qword ptr [rcx+0x10], rsi
   .text:0x0000000000003A76 code_0x3A76:
   .text:0x0000000000003A76        33C0                 xor eax, eax
   .text:0x0000000000003A78 code_0x3A78:
   .text:0x0000000000003A78        488B5C2450           mov rbx, qword ptr [rsp+0x50]
   .text:0x0000000000003A7D        488B6C2458           mov rbp, qword ptr [rsp+0x58]
   .text:0x0000000000003A82        488B742460           mov rsi, qword ptr [rsp+0x60]
   .text:0x0000000000003A87        4883C420             add rsp, 0x20
   .text:0x0000000000003A8B        415F                 pop r15
   .text:0x0000000000003A8D        415E                 pop r14
   .text:0x0000000000003A8F        415D                 pop r13
   .text:0x0000000000003A91        415C                 pop r12
   .text:0x0000000000003A93        5F                   pop rdi
   .text:0x0000000000003A94        C3                   ret
   .text:0x0000000000003A95 data_0x3A95:
   .text:0x0000000000003A95        db 3 dup(0xCC)
   .text:0x0000000000003A98 operator new:
   .text:0x0000000000003A98        488BD1               mov rdx, rcx
   .text:0x0000000000003A9B        488D0D9E120100       lea rcx, [data_0x14D40]
   .text:0x0000000000003AA2        E97D000000           jmp func_0x3B24; void __cdecl( int64_t p1, int64_t p2 )
   .text:0x0000000000003AA7 code_0x3AA7:
   .text:0x0000000000003AA7        CC                   int3
   .text:0x0000000000003AA8 _execute_onexit_table:
   .text:0x0000000000003AA8        4C8BDC               mov r11, rsp
   .text:0x0000000000003AAB        49894B08             mov qword ptr [r11+0x8], rcx
   .text:0x0000000000003AAF        4883EC38             sub rsp, 0x38
   .text:0x0000000000003AB3        498D4308             lea rax, [r11+0x8]
   .text:0x0000000000003AB7        498943E8             mov qword ptr [r11-0x18], rax
   .text:0x0000000000003ABB        4D8D4B18             lea r9, [r11+0x18]
   .text:0x0000000000003ABF        B802000000           mov eax, 0x2
   .text:0x0000000000003AC4        4D8D43E8             lea r8, [r11-0x18]
   .text:0x0000000000003AC8        498D5320             lea rdx, [r11+0x20]
   .text:0x0000000000003ACC        89442450             mov dword ptr [rsp+0x50], eax
   .text:0x0000000000003AD0        498D4B10             lea rcx, [r11+0x10]
   .text:0x0000000000003AD4        89442458             mov dword ptr [rsp+0x58], eax
   .text:0x0000000000003AD8        E833FCFFFF           call __crt_seh_guarded_call<int>::operator()<class <lambda_7777bce6b2f8c936911f934f8298dc43>,class <lambda_f03950bc5685219e0bcd2087efbe011e> & __ptr64,class <lambda_3883c3dff614d5e0c5f61bb1ac94921c> >; public: int __cdecl( class <lambda_7777bce6b2f8c936911f934f8298dc43> && p1, class <lambda_f03950bc5685219e0bcd2087efbe011e> & p2, class <lambda_3883c3dff614d5e0c5f61bb1ac94921c> && p3 )
   .text:0x0000000000003ADD        4883C438             add rsp, 0x38
   .text:0x0000000000003AE1        C3                   ret
   .text:0x0000000000003AE2 data_0x3AE2:
   .text:0x0000000000003AE2        db 2 dup(0xCC)
   .text:0x0000000000003AE4 _initialize_onexit_table:
   .text:0x0000000000003AE4        4533C9               xor r9d, r9d
   .text:0x0000000000003AE7        4C8BC1               mov r8, rcx
   .text:0x0000000000003AEA        4885C9               test rcx, rcx
   .text:0x0000000000003AED        7504                 jnz code_0x3AF3
   .text:0x0000000000003AEF code_0x3AEF:
   .text:0x0000000000003AEF        83C8FF               or eax, 0xFFFFFFFF
   .text:0x0000000000003AF2        C3                   ret
   .text:0x0000000000003AF3 code_0x3AF3:
   .text:0x0000000000003AF3        488B4110             mov rax, qword ptr [rcx+0x10]
   .text:0x0000000000003AF7        483901               cmp qword ptr [rcx], rax
   .text:0x0000000000003AFA        7524                 jnz code_0x3B20
   .text:0x0000000000003AFC code_0x3AFC:
   .text:0x0000000000003AFC        488B1525050100       mov rdx, qword ptr [__security_cookie]
   .text:0x0000000000003B03        B940000000           mov ecx, 0x40
   .text:0x0000000000003B08        8BC2                 mov eax, edx
   .text:0x0000000000003B0A        83E03F               and eax, 0x3F
   .text:0x0000000000003B0D        2BC8                 sub ecx, eax
   .text:0x0000000000003B0F        49D3C9               ror r9, cl
   .text:0x0000000000003B12        4C33CA               xor r9, rdx
   .text:0x0000000000003B15        4D8908               mov qword ptr [r8], r9
   .text:0x0000000000003B18        4D894808             mov qword ptr [r8+0x8], r9
   .text:0x0000000000003B1C        4D894810             mov qword ptr [r8+0x10], r9
   .text:0x0000000000003B20 code_0x3B20:
   .text:0x0000000000003B20        33C0                 xor eax, eax
   .text:0x0000000000003B22        C3                   ret
   .text:0x0000000000003B23 code_0x3B23:
   .text:0x0000000000003B23        CC                   int3
   .text:0x0000000000003B24 func_0x3B24:
   .text:0x0000000000003B24        4889542410           mov qword ptr [rsp+0x10], rdx
   .text:0x0000000000003B29        48894C2408           mov qword ptr [rsp+0x8], rcx
   .text:0x0000000000003B2E        55                   push rbp
   .text:0x0000000000003B2F        488BEC               mov rbp, rsp
   .text:0x0000000000003B32        4883EC40             sub rsp, 0x40
   .text:0x0000000000003B36        488D4510             lea rax, [rbp+0x10]
   .text:0x0000000000003B3A        488945E8             mov qword ptr [rbp-0x18], rax
   .text:0x0000000000003B3E        4C8D4D28             lea r9, [rbp+0x28]
   .text:0x0000000000003B42        488D4518             lea rax, [rbp+0x18]
   .text:0x0000000000003B46        488945F0             mov qword ptr [rbp-0x10], rax
   .text:0x0000000000003B4A        4C8D45E8             lea r8, [rbp-0x18]
   .text:0x0000000000003B4E        B802000000           mov eax, 0x2
   .text:0x0000000000003B53        488D55E0             lea rdx, [rbp-0x20]
   .text:0x0000000000003B57        488D4D20             lea rcx, [rbp+0x20]
   .text:0x0000000000003B5B        894528               mov dword ptr [rbp+0x28], eax
   .text:0x0000000000003B5E        8945E0               mov dword ptr [rbp-0x20], eax
   .text:0x0000000000003B61        E8E6FBFFFF           call func_0x374C; int32_t __cdecl( int64_t p1, int64_t p2, int64_t p3, int64_t p4 )
   .text:0x0000000000003B66        4883C440             add rsp, 0x40
   .text:0x0000000000003B6A        5D                   pop rbp
   .text:0x0000000000003B6B        C3                   ret
   .text:0x0000000000003B6C initialize_global_variables:
   .text:0x0000000000003B6C        488D051D0A0100       lea rax, [data_0x14590]
   .text:0x0000000000003B73        4889059E180100       mov qword ptr [data_0x15418], rax
   .text:0x0000000000003B7A        B001                 mov al, 0x1
   .text:0x0000000000003B7C        C3                   ret
   .text:0x0000000000003B7D data_0x3B7D:
   .text:0x0000000000003B7D        db 3 dup(0xCC)
   .text:0x0000000000003B80 initialize_c:
   .text:0x0000000000003B80        4883EC28             sub rsp, 0x28
   .text:0x0000000000003B84        488D0DB5110100       lea rcx, [data_0x14D40]
   .text:0x0000000000003B8B        E854FFFFFF           call _initialize_onexit_table; int32_t __cdecl( int64_t p1 )
   .text:0x0000000000003B90        488D0DC1110100       lea rcx, [data_0x14D58]
   .text:0x0000000000003B97        E848FFFFFF           call _initialize_onexit_table; int32_t __cdecl( int64_t p1 )
   .text:0x0000000000003B9C        B001                 mov al, 0x1
   .text:0x0000000000003B9E        4883C428             add rsp, 0x28
   .text:0x0000000000003BA2        C3                   ret
   .text:0x0000000000003BA3 code_0x3BA3:
   .text:0x0000000000003BA3        CC                   int3
   .text:0x0000000000003BA4 __vcrt_uninitialize_critical:
   .text:0x0000000000003BA4        4883EC28             sub rsp, 0x28
   .text:0x0000000000003BA8        E893F5FFFF           call __dcrt_uninitialize_environments_nolock; void __cdecl( void )
   .text:0x0000000000003BAD        B001                 mov al, 0x1
   .text:0x0000000000003BAF        4883C428             add rsp, 0x28
   .text:0x0000000000003BB3        C3                   ret
   .text:0x0000000000003BB4 initialize_pointers:
   .text:0x0000000000003BB4        4053                 push rbx
   .text:0x0000000000003BB6        4883EC20             sub rsp, 0x20
   .text:0x0000000000003BBA        488B1567040100       mov rdx, qword ptr [__security_cookie]
   .text:0x0000000000003BC1        B940000000           mov ecx, 0x40
   .text:0x0000000000003BC6        8BC2                 mov eax, edx
   .text:0x0000000000003BC8        33DB                 xor ebx, ebx
   .text:0x0000000000003BCA        83E03F               and eax, 0x3F
   .text:0x0000000000003BCD        2BC8                 sub ecx, eax
   .text:0x0000000000003BCF        48D3CB               ror rbx, cl
   .text:0x0000000000003BD2        4833DA               xor rbx, rdx
   .text:0x0000000000003BD5        488BCB               mov rcx, rbx
   .text:0x0000000000003BD8        E85B0A0000           call func_0x4638; inline void __cdecl( int64_t p1 )
   .text:0x0000000000003BDD        488BCB               mov rcx, rbx
   .text:0x0000000000003BE0        E8B7360000           call func_0x729C; inline void __cdecl( int64_t p1 )
   .text:0x0000000000003BE5        488BCB               mov rcx, rbx
   .text:0x0000000000003BE8        E893370000           call __acrt_initialize_signal_handlers; inline void __cdecl( int64_t p1 )
   .text:0x0000000000003BED        488BCB               mov rcx, rbx
   .text:0x0000000000003BF0        E86BEFFFFF           call func_0x2B60; inline void __cdecl( int64_t p1 )
   .text:0x0000000000003BF5        488BCB               mov rcx, rbx
   .text:0x0000000000003BF8        E8FBF8FFFF           call func_0x34F8; inline void __cdecl( int64_t p1 )
   .text:0x0000000000003BFD        B001                 mov al, 0x1
   .text:0x0000000000003BFF        4883C420             add rsp, 0x20
   .text:0x0000000000003C03        5B                   pop rbx
   .text:0x0000000000003C04        C3                   ret
   .text:0x0000000000003C05 data_0x3C05:
   .text:0x0000000000003C05        db 3 dup(0xCC)
   .text:0x0000000000003C08 func_0x3C08:
   .text:0x0000000000003C08        33C9                 xor ecx, ecx
   .text:0x0000000000003C0A        E9F9E0FFFF           jmp __vcrt_uninitialize; int8_t __cdecl( int8_t p1 )
   .text:0x0000000000003C0F code_0x3C0F:
   .text:0x0000000000003C0F        CC                   int3
   .text:0x0000000000003C10 uninitialize_allocated_memory:
   .text:0x0000000000003C10        4053                 push rbx
   .text:0x0000000000003C12        4883EC20             sub rsp, 0x20
   .text:0x0000000000003C16        488B0D5B110100       mov rcx, qword ptr [data_0x14D78]
   .text:0x0000000000003C1D        83C8FF               or eax, 0xFFFFFFFF
   .text:0x0000000000003C20        F00FC101             lock xadd dword ptr [rcx], eax
   .text:0x0000000000003C24        83F801               cmp eax, 0x1
   .text:0x0000000000003C27        751F                 jnz code_0x3C48
   .text:0x0000000000003C29 code_0x3C29:
   .text:0x0000000000003C29        488B0D48110100       mov rcx, qword ptr [data_0x14D78]
   .text:0x0000000000003C30        488D1D19050100       lea rbx, [data_0x14150]
   .text:0x0000000000003C37        483BCB               cmp rcx, rbx
   .text:0x0000000000003C3A        740C                 jz code_0x3C48
   .text:0x0000000000003C3C code_0x3C3C:
   .text:0x0000000000003C3C        E8D30D0000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000003C41        48891D30110100       mov qword ptr [data_0x14D78], rbx
   .text:0x0000000000003C48 code_0x3C48:
   .text:0x0000000000003C48        B001                 mov al, 0x1
   .text:0x0000000000003C4A        4883C420             add rsp, 0x20
   .text:0x0000000000003C4E        5B                   pop rbx
   .text:0x0000000000003C4F        C3                   ret
   .text:0x0000000000003C50 uninitialize_allocated_io_buffers:
   .text:0x0000000000003C50        4883EC28             sub rsp, 0x28
   .text:0x0000000000003C54        488B0DBD190100       mov rcx, qword ptr [data_0x15618]
   .text:0x0000000000003C5B        E8B40D0000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000003C60        488B0DB9190100       mov rcx, qword ptr [data_0x15620]
   .text:0x0000000000003C67        488325A919010000     and qword ptr [data_0x15618], 0x0
   .text:0x0000000000003C6F        E8A00D0000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000003C74        488B0D25110100       mov rcx, qword ptr [data_0x14DA0]
   .text:0x0000000000003C7B        4883259D19010000     and qword ptr [data_0x15620], 0x0
   .text:0x0000000000003C83        E88C0D0000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000003C88        488B0D19110100       mov rcx, qword ptr [data_0x14DA8]
   .text:0x0000000000003C8F        4883250911010000     and qword ptr [data_0x14DA0], 0x0
   .text:0x0000000000003C97        E8780D0000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000003C9C        4883250411010000     and qword ptr [data_0x14DA8], 0x0
   .text:0x0000000000003CA4        B001                 mov al, 0x1
   .text:0x0000000000003CA6        4883C428             add rsp, 0x28
   .text:0x0000000000003CAA        C3                   ret
   .text:0x0000000000003CAB code_0x3CAB:
   .text:0x0000000000003CAB        CC                   int3
   .text:0x0000000000003CAC func_0x3CAC:
   .text:0x0000000000003CAC        488D151D830000       lea rdx, [data_0xBFD0]
   .text:0x0000000000003CB3        488D0D16820000       lea rcx, [data_0xBED0]
   .text:0x0000000000003CBA        E921350000           jmp code_0x71E0
   .text:0x0000000000003CBF code_0x3CBF:
   .text:0x0000000000003CBF        CC                   int3
   .text:0x0000000000003CC0 func_0x3CC0:
   .text:0x0000000000003CC0        4883EC28             sub rsp, 0x28
   .text:0x0000000000003CC4        84C9                 test cl, cl
   .text:0x0000000000003CC6        7416                 jz code_0x3CDE
   .text:0x0000000000003CC8 code_0x3CC8:
   .text:0x0000000000003CC8        48833D4019010000     cmp qword ptr [data_0x15610], 0x0
   .text:0x0000000000003CD0        7405                 jz code_0x3CD7
   .text:0x0000000000003CD2 code_0x3CD2:
   .text:0x0000000000003CD2        E8ED3B0000           call func_0x78C4; int32_t __cdecl( void )
   .text:0x0000000000003CD7 code_0x3CD7:
   .text:0x0000000000003CD7        B001                 mov al, 0x1
   .text:0x0000000000003CD9        4883C428             add rsp, 0x28
   .text:0x0000000000003CDD        C3                   ret
   .text:0x0000000000003CDE code_0x3CDE:
   .text:0x0000000000003CDE        488D15EB820000       lea rdx, [data_0xBFD0]
   .text:0x0000000000003CE5        488D0DE4810000       lea rcx, [data_0xBED0]
   .text:0x0000000000003CEC        4883C428             add rsp, 0x28
   .text:0x0000000000003CF0        E96B350000           jmp code_0x7260
   .text:0x0000000000003CF5 data_0x3CF5:
   .text:0x0000000000003CF5        db 3 dup(0xCC)
   .text:0x0000000000003CF8 func_0x3CF8:
   .text:0x0000000000003CF8        4883EC28             sub rsp, 0x28
   .text:0x0000000000003CFC        E857050000           call func_0x4258; int64_t __cdecl( void )
   .text:0x0000000000003D01        488B4018             mov rax, qword ptr [rax+0x18]
   .text:0x0000000000003D05        4885C0               test rax, rax
   .text:0x0000000000003D08        7408                 jz code_0x3D12
   .text:0x0000000000003D0A code_0x3D0A:
   .text:0x0000000000003D0A        FF1518750000         call qword ptr [GuardCFDispatchFunction]; void (__cdecl *)( void )
   .text:0x0000000000003D10        EB00                 jmp code_0x3D12
   .text:0x0000000000003D12 code_0x3D12:
   .text:0x0000000000003D12        E815000000           call func_0x3D2C; void __cdecl( void )
   .text:0x0000000000003D17        90                   nop
   .text:0x0000000000003D18 free:
   .text:0x0000000000003D18        C744241000000000     mov dword ptr [rsp+0x10], 0x0
   .text:0x0000000000003D20        8B442410             mov eax, dword ptr [rsp+0x10]
   .text:0x0000000000003D24        E9EB0C0000           jmp _free_base; void __cdecl( void * _Block )
   .text:0x0000000000003D29 data_0x3D29:
   .text:0x0000000000003D29        db 3 dup(0xCC)
   .text:0x0000000000003D2C func_0x3D2C:
   .text:0x0000000000003D2C        4883EC28             sub rsp, 0x28
   .text:0x0000000000003D30        E81B360000           call __acrt_get_sigabrt_handler; int64_t __cdecl( void )
   .text:0x0000000000003D35        4885C0               test rax, rax
   .text:0x0000000000003D38        740A                 jz code_0x3D44
   .text:0x0000000000003D3A code_0x3D3A:
   .text:0x0000000000003D3A        B916000000           mov ecx, 0x16
   .text:0x0000000000003D3F        E85C360000           call raise; int __cdecl( int _Signal )
   .text:0x0000000000003D44 code_0x3D44:
   .text:0x0000000000003D44        F605F502010002       test byte ptr [data_0x14040], 0x2
   .text:0x0000000000003D4B        742A                 jz code_0x3D77
   .text:0x0000000000003D4D code_0x3D4D:
   .text:0x0000000000003D4D        B917000000           mov ecx, 0x17
   .text:0x0000000000003D52        FF1518730000         call qword ptr [IsProcessorFeaturePresent]; int (__cdecl *)( unsigned long ProcessorFeature )
   .text:0x0000000000003D58        85C0                 test eax, eax
   .text:0x0000000000003D5A        7407                 jz code_0x3D63
   .text:0x0000000000003D5C code_0x3D5C:
   .text:0x0000000000003D5C        B907000000           mov ecx, 0x7
   .text:0x0000000000003D61        CD29                 int 0x29
   .text:0x0000000000003D63 code_0x3D63:
   .text:0x0000000000003D63        41B801000000         mov r8d, 0x1
   .text:0x0000000000003D69        BA15000040           mov edx, 0x40000015
   .text:0x0000000000003D6E        418D4802             lea ecx, [r8+0x2]
   .text:0x0000000000003D72        E865070000           call __acrt_call_reportfault; void __cdecl( int32_t p1, int32_t p2, int32_t p3 )
   .text:0x0000000000003D77 code_0x3D77:
   .text:0x0000000000003D77        B903000000           mov ecx, 0x3
   .text:0x0000000000003D7C        E89FF7FFFF           call func_0x3520; void __cdecl( int32_t p1 )
   .text:0x0000000000003D81 data_0x3D81:
   .text:0x0000000000003D81        db 3 dup(0xCC)
   .text:0x0000000000003D84 wcsncmp:
   .text:0x0000000000003D84        4D85C0               test r8, r8
   .text:0x0000000000003D87        7518                 jnz code_0x3DA1
   .text:0x0000000000003D89 code_0x3D89:
   .text:0x0000000000003D89        33C0                 xor eax, eax
   .text:0x0000000000003D8B        C3                   ret
   .text:0x0000000000003D8C code_0x3D8C:
   .text:0x0000000000003D8C        0FB701               movzx eax, word ptr [rcx]
   .text:0x0000000000003D8F        6685C0               test ax, ax
   .text:0x0000000000003D92        7413                 jz code_0x3DA7
   .text:0x0000000000003D94 code_0x3D94:
   .text:0x0000000000003D94        663B02               cmp ax, word ptr [rdx]
   .text:0x0000000000003D97        750E                 jnz code_0x3DA7
   .text:0x0000000000003D99 code_0x3D99:
   .text:0x0000000000003D99        4883C102             add rcx, 0x2
   .text:0x0000000000003D9D        4883C202             add rdx, 0x2
   .text:0x0000000000003DA1 code_0x3DA1:
   .text:0x0000000000003DA1        4983E801             sub r8, 0x1
   .text:0x0000000000003DA5        75E5                 jnz code_0x3D8C
   .text:0x0000000000003DA7 code_0x3DA7:
   .text:0x0000000000003DA7        0FB701               movzx eax, word ptr [rcx]
   .text:0x0000000000003DAA        0FB70A               movzx ecx, word ptr [rdx]
   .text:0x0000000000003DAD        2BC1                 sub eax, ecx
   .text:0x0000000000003DAF        C3                   ret
   .text:0x0000000000003DB0 _LocaleUpdate::_LocaleUpdate:
   .text:0x0000000000003DB0        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000003DB5        4889742410           mov qword ptr [rsp+0x10], rsi
   .text:0x0000000000003DBA        57                   push rdi
   .text:0x0000000000003DBB        4883EC20             sub rsp, 0x20
   .text:0x0000000000003DBF        C6411800             mov byte ptr [rcx+0x18], 0x0
   .text:0x0000000000003DC3        488BF9               mov rdi, rcx
   .text:0x0000000000003DC6        488D7108             lea rsi, [rcx+0x8]
   .text:0x0000000000003DCA        4885D2               test rdx, rdx
   .text:0x0000000000003DCD        7405                 jz code_0x3DD4
   .text:0x0000000000003DCF code_0x3DCF:
   .text:0x0000000000003DCF        0F1002               movups xmm0, xmmword ptr [rdx]
   .text:0x0000000000003DD2        EB10                 jmp code_0x3DE4
   .text:0x0000000000003DD4 code_0x3DD4:
   .text:0x0000000000003DD4        833D590F010000       cmp dword ptr [data_0x14D34], 0x0
   .text:0x0000000000003DDB        750D                 jnz code_0x3DEA
   .text:0x0000000000003DDD code_0x3DDD:
   .text:0x0000000000003DDD        0F100504090100       movups xmm0, xmmword ptr [data_0x146E8]
   .text:0x0000000000003DE4 code_0x3DE4:
   .text:0x0000000000003DE4        F30F7F06             movdqu xmmword ptr [rsi], xmm0
   .text:0x0000000000003DE8        EB4E                 jmp code_0x3E38
   .text:0x0000000000003DEA code_0x3DEA:
   .text:0x0000000000003DEA        E869040000           call func_0x4258; int64_t __cdecl( void )
   .text:0x0000000000003DEF        488907               mov qword ptr [rdi], rax
   .text:0x0000000000003DF2        488BD6               mov rdx, rsi
   .text:0x0000000000003DF5        488B8890000000       mov rcx, qword ptr [rax+0x90]
   .text:0x0000000000003DFC        48890E               mov qword ptr [rsi], rcx
   .text:0x0000000000003DFF        488B8888000000       mov rcx, qword ptr [rax+0x88]
   .text:0x0000000000003E06        48894F10             mov qword ptr [rdi+0x10], rcx
   .text:0x0000000000003E0A        488BC8               mov rcx, rax
   .text:0x0000000000003E0D        E8D23D0000           call __acrt_update_locale_info; void __cdecl( int64_t p1, int64_t p2 )
   .text:0x0000000000003E12        488B0F               mov rcx, qword ptr [rdi]
   .text:0x0000000000003E15        488D5710             lea rdx, [rdi+0x10]
   .text:0x0000000000003E19        E8FA3D0000           call __acrt_update_multibyte_info; void __cdecl( int64_t p1, int64_t p2 )
   .text:0x0000000000003E1E        488B0F               mov rcx, qword ptr [rdi]
   .text:0x0000000000003E21        8B81A8030000         mov eax, dword ptr [rcx+0x3A8]
   .text:0x0000000000003E27        A802                 test al, 0x2
   .text:0x0000000000003E29        750D                 jnz code_0x3E38
   .text:0x0000000000003E2B code_0x3E2B:
   .text:0x0000000000003E2B        83C802               or eax, 0x2
   .text:0x0000000000003E2E        8981A8030000         mov dword ptr [rcx+0x3A8], eax
   .text:0x0000000000003E34        C6471801             mov byte ptr [rdi+0x18], 0x1
   .text:0x0000000000003E38 code_0x3E38:
   .text:0x0000000000003E38        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000003E3D        488BC7               mov rax, rdi
   .text:0x0000000000003E40        488B742438           mov rsi, qword ptr [rsp+0x38]
   .text:0x0000000000003E45        4883C420             add rsp, 0x20
   .text:0x0000000000003E49        5F                   pop rdi
   .text:0x0000000000003E4A        C3                   ret
   .text:0x0000000000003E4B data_0x3E4B:
   .text:0x0000000000003E4B        db 11 dup(0xCC)
   .text:0x0000000000003E56 data_0x3E56:
   .text:0x0000000000003E56        dq 0x000000841F0F6666
   .text:0x0000000000003E5E        dw 0x0000
   .text:0x0000000000003E60 strncmp:
   .text:0x0000000000003E60        482BD1               sub rdx, rcx
   .text:0x0000000000003E63        4D85C0               test r8, r8
   .text:0x0000000000003E66        746A                 jz code_0x3ED2
   .text:0x0000000000003E68 code_0x3E68:
   .text:0x0000000000003E68        F7C107000000         test ecx, 0x7
   .text:0x0000000000003E6E        741D                 jz code_0x3E8D
   .text:0x0000000000003E70 code_0x3E70:
   .text:0x0000000000003E70        0FB601               movzx eax, byte ptr [rcx]
   .text:0x0000000000003E73        3A040A               cmp al, byte ptr [rdx+rcx]
   .text:0x0000000000003E76        755D                 jnz code_0x3ED5
   .text:0x0000000000003E78 code_0x3E78:
   .text:0x0000000000003E78        48FFC1               inc rcx
   .text:0x0000000000003E7B        49FFC8               dec r8
   .text:0x0000000000003E7E        7452                 jz code_0x3ED2
   .text:0x0000000000003E80 code_0x3E80:
   .text:0x0000000000003E80        84C0                 test al, al
   .text:0x0000000000003E82        744E                 jz code_0x3ED2
   .text:0x0000000000003E84 code_0x3E84:
   .text:0x0000000000003E84        48F7C107000000       test rcx, 0x7
   .text:0x0000000000003E8B        75E3                 jnz code_0x3E70
   .text:0x0000000000003E8D code_0x3E8D:
   .text:0x0000000000003E8D        49BB8080808080808080 mov r11, 0x8080808080808080
   .text:0x0000000000003E97        49BAFFFEFEFEFEFEFEFE mov r10, 0xFEFEFEFEFEFEFEFF
   .text:0x0000000000003EA1 code_0x3EA1:
   .text:0x0000000000003EA1        8D040A               lea eax, [rdx+rcx]
   .text:0x0000000000003EA4        25FF0F0000           and eax, 0xFFF
   .text:0x0000000000003EA9        3DF80F0000           cmp eax, 0xFF8
   .text:0x0000000000003EAE        77C0                 ja code_0x3E70
   .text:0x0000000000003EB0 code_0x3EB0:
   .text:0x0000000000003EB0        488B01               mov rax, qword ptr [rcx]
   .text:0x0000000000003EB3        483B040A             cmp rax, qword ptr [rdx+rcx]
   .text:0x0000000000003EB7        75B7                 jnz code_0x3E70
   .text:0x0000000000003EB9 code_0x3EB9:
   .text:0x0000000000003EB9        4883C108             add rcx, 0x8
   .text:0x0000000000003EBD        4983E808             sub r8, 0x8
   .text:0x0000000000003EC1        760F                 jbe code_0x3ED2
   .text:0x0000000000003EC3 code_0x3EC3:
   .text:0x0000000000003EC3        4D8D0C02             lea r9, [r10+rax]
   .text:0x0000000000003EC7        48F7D0               not rax
   .text:0x0000000000003ECA        4923C1               and rax, r9
   .text:0x0000000000003ECD        4985C3               test r11, rax
   .text:0x0000000000003ED0        74CF                 jz code_0x3EA1
   .text:0x0000000000003ED2 code_0x3ED2:
   .text:0x0000000000003ED2        33C0                 xor eax, eax
   .text:0x0000000000003ED4        C3                   ret
   .text:0x0000000000003ED5 code_0x3ED5:
   .text:0x0000000000003ED5        481BC0               sbb rax, rax
   .text:0x0000000000003ED8        4883C801             or rax, 0x1
   .text:0x0000000000003EDC        C3                   ret
   .text:0x0000000000003EDD data_0x3EDD:
   .text:0x0000000000003EDD        db 3 dup(0xCC)
   .text:0x0000000000003EE0 __crt_seh_guarded_call<void>::operator()<class <lambda_0ae27a3a962d80f24befdcbee591983d>,class <lambda_8d0ee55de4b1038c4002e0adecdf1839> & __ptr64,class <lambda_dc504788e8f1664fe9b84e20bfb512f2> >:
   .text:0x0000000000003EE0        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000003EE5        4C894C2420           mov qword ptr [rsp+0x20], r9
   .text:0x0000000000003EEA        57                   push rdi
   .text:0x0000000000003EEB        4883EC20             sub rsp, 0x20
   .text:0x0000000000003EEF        498BD9               mov rbx, r9
   .text:0x0000000000003EF2        498BF8               mov rdi, r8
   .text:0x0000000000003EF5        8B0A                 mov ecx, dword ptr [rdx]
   .text:0x0000000000003EF7        E85C1D0000           call __acrt_lock; void __cdecl( int32_t p1 )
   .text:0x0000000000003EFC        90                   nop
   .text:0x0000000000003EFD        488B07               mov rax, qword ptr [rdi]
   .text:0x0000000000003F00        488B08               mov rcx, qword ptr [rax]
   .text:0x0000000000003F03        488B8188000000       mov rax, qword ptr [rcx+0x88]
   .text:0x0000000000003F0A        F0FF00               lock inc dword ptr [rax]
   .text:0x0000000000003F0D        8B0B                 mov ecx, dword ptr [rbx]
   .text:0x0000000000003F0F        E8981D0000           call func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x0000000000003F14        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000003F19        4883C420             add rsp, 0x20
   .text:0x0000000000003F1D        5F                   pop rdi
   .text:0x0000000000003F1E        C3                   ret
   .text:0x0000000000003F1F code_0x3F1F:
   .text:0x0000000000003F1F        CC                   int3
   .text:0x0000000000003F20 __crt_seh_guarded_call<void>::operator()<class <lambda_2d41944a1d46af3157314b8a01080d33>,class <lambda_8f455de75cd7d7f24b4096f044d8b9e6> & __ptr64,class <lambda_aa500f224e6afead328df44964fe2772> >:
   .text:0x0000000000003F20        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000003F25        4C894C2420           mov qword ptr [rsp+0x20], r9
   .text:0x0000000000003F2A        57                   push rdi
   .text:0x0000000000003F2B        4883EC20             sub rsp, 0x20
   .text:0x0000000000003F2F        498BD9               mov rbx, r9
   .text:0x0000000000003F32        498BF8               mov rdi, r8
   .text:0x0000000000003F35        8B0A                 mov ecx, dword ptr [rdx]
   .text:0x0000000000003F37        E81C1D0000           call __acrt_lock; void __cdecl( int32_t p1 )
   .text:0x0000000000003F3C        90                   nop
   .text:0x0000000000003F3D        488B0F               mov rcx, qword ptr [rdi]
   .text:0x0000000000003F40        33D2                 xor edx, edx
   .text:0x0000000000003F42        488B09               mov rcx, qword ptr [rcx]
   .text:0x0000000000003F45        E8A6020000           call replace_current_thread_locale_nolock; void __cdecl( const struct __acrt_ptd * p1, const struct __crt_locale_data * p2 )
   .text:0x0000000000003F4A        90                   nop
   .text:0x0000000000003F4B        8B0B                 mov ecx, dword ptr [rbx]
   .text:0x0000000000003F4D        E85A1D0000           call func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x0000000000003F52        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000003F57        4883C420             add rsp, 0x20
   .text:0x0000000000003F5B        5F                   pop rdi
   .text:0x0000000000003F5C        C3                   ret
   .text:0x0000000000003F5D data_0x3F5D:
   .text:0x0000000000003F5D        db 3 dup(0xCC)
   .text:0x0000000000003F60 func_0x3F60:
   .text:0x0000000000003F60        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000003F65        4C894C2420           mov qword ptr [rsp+0x20], r9
   .text:0x0000000000003F6A        57                   push rdi
   .text:0x0000000000003F6B        4883EC20             sub rsp, 0x20
   .text:0x0000000000003F6F        498BD9               mov rbx, r9
   .text:0x0000000000003F72        498BF8               mov rdi, r8
   .text:0x0000000000003F75        8B0A                 mov ecx, dword ptr [rdx]
   .text:0x0000000000003F77        E8DC1C0000           call __acrt_lock; void __cdecl( int32_t p1 )
   .text:0x0000000000003F7C        90                   nop
   .text:0x0000000000003F7D        488B4708             mov rax, qword ptr [rdi+0x8]
   .text:0x0000000000003F81        488B10               mov rdx, qword ptr [rax]
   .text:0x0000000000003F84        488B0F               mov rcx, qword ptr [rdi]
   .text:0x0000000000003F87        488B12               mov rdx, qword ptr [rdx]
   .text:0x0000000000003F8A        488B09               mov rcx, qword ptr [rcx]
   .text:0x0000000000003F8D        E85E020000           call replace_current_thread_locale_nolock; void __cdecl( const struct __acrt_ptd * p1, const struct __crt_locale_data * p2 )
   .text:0x0000000000003F92        90                   nop
   .text:0x0000000000003F93        8B0B                 mov ecx, dword ptr [rbx]
   .text:0x0000000000003F95        E8121D0000           call func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x0000000000003F9A        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000003F9F        4883C420             add rsp, 0x20
   .text:0x0000000000003FA3        5F                   pop rdi
   .text:0x0000000000003FA4        C3                   ret
   .text:0x0000000000003FA5 data_0x3FA5:
   .text:0x0000000000003FA5        db 3 dup(0xCC)
   .text:0x0000000000003FA8 __crt_seh_guarded_call<void>::operator()<class <lambda_f2e299630e499de9f9a165e60fcd3db5>,class <lambda_2ae9d31cdba2644fcbeaf08da7c24588> & __ptr64,class <lambda_40d01ff24d0e7b3814fdbdcee8eab3c7> >:
   .text:0x0000000000003FA8        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000003FAD        4C894C2420           mov qword ptr [rsp+0x20], r9
   .text:0x0000000000003FB2        57                   push rdi
   .text:0x0000000000003FB3        4883EC20             sub rsp, 0x20
   .text:0x0000000000003FB7        498BD9               mov rbx, r9
   .text:0x0000000000003FBA        498BF8               mov rdi, r8
   .text:0x0000000000003FBD        8B0A                 mov ecx, dword ptr [rdx]
   .text:0x0000000000003FBF        E8941C0000           call __acrt_lock; void __cdecl( int32_t p1 )
   .text:0x0000000000003FC4        90                   nop
   .text:0x0000000000003FC5        488B07               mov rax, qword ptr [rdi]
   .text:0x0000000000003FC8        488B08               mov rcx, qword ptr [rax]
   .text:0x0000000000003FCB        488B8988000000       mov rcx, qword ptr [rcx+0x88]
   .text:0x0000000000003FD2        4885C9               test rcx, rcx
   .text:0x0000000000003FD5        741E                 jz code_0x3FF5
   .text:0x0000000000003FD7 code_0x3FD7:
   .text:0x0000000000003FD7        83C8FF               or eax, 0xFFFFFFFF
   .text:0x0000000000003FDA        F00FC101             lock xadd dword ptr [rcx], eax
   .text:0x0000000000003FDE        83F801               cmp eax, 0x1
   .text:0x0000000000003FE1        7512                 jnz code_0x3FF5
   .text:0x0000000000003FE3 code_0x3FE3:
   .text:0x0000000000003FE3        488D0566010100       lea rax, [data_0x14150]
   .text:0x0000000000003FEA        483BC8               cmp rcx, rax
   .text:0x0000000000003FED        7406                 jz code_0x3FF5
   .text:0x0000000000003FEF code_0x3FEF:
   .text:0x0000000000003FEF        E8200A0000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000003FF4        90                   nop
   .text:0x0000000000003FF5 code_0x3FF5:
   .text:0x0000000000003FF5        8B0B                 mov ecx, dword ptr [rbx]
   .text:0x0000000000003FF7        E8B01C0000           call func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x0000000000003FFC        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000004001        4883C420             add rsp, 0x20
   .text:0x0000000000004005        5F                   pop rdi
   .text:0x0000000000004006        C3                   ret
   .text:0x0000000000004007 code_0x4007:
   .text:0x0000000000004007        CC                   int3
   .text:0x0000000000004008 construct_ptd_array:
   .text:0x0000000000004008        4055                 push rbp
   .text:0x000000000000400A        488BEC               mov rbp, rsp
   .text:0x000000000000400D        4883EC50             sub rsp, 0x50
   .text:0x0000000000004011        48894DD8             mov qword ptr [rbp-0x28], rcx
   .text:0x0000000000004015        488D45D8             lea rax, [rbp-0x28]
   .text:0x0000000000004019        488945E8             mov qword ptr [rbp-0x18], rax
   .text:0x000000000000401D        4C8D4D20             lea r9, [rbp+0x20]
   .text:0x0000000000004021        BA01000000           mov edx, 0x1
   .text:0x0000000000004026        4C8D45E8             lea r8, [rbp-0x18]
   .text:0x000000000000402A        B805000000           mov eax, 0x5
   .text:0x000000000000402F        894520               mov dword ptr [rbp+0x20], eax
   .text:0x0000000000004032        894528               mov dword ptr [rbp+0x28], eax
   .text:0x0000000000004035        488D45D8             lea rax, [rbp-0x28]
   .text:0x0000000000004039        488945F0             mov qword ptr [rbp-0x10], rax
   .text:0x000000000000403D        488D45E0             lea rax, [rbp-0x20]
   .text:0x0000000000004041        488945F8             mov qword ptr [rbp-0x8], rax
   .text:0x0000000000004045        B804000000           mov eax, 0x4
   .text:0x000000000000404A        8945D0               mov dword ptr [rbp-0x30], eax
   .text:0x000000000000404D        8945D4               mov dword ptr [rbp-0x2C], eax
   .text:0x0000000000004050        488D05C1130100       lea rax, [data_0x15418]
   .text:0x0000000000004057        488945E0             mov qword ptr [rbp-0x20], rax
   .text:0x000000000000405B        895128               mov dword ptr [rcx+0x28], edx
   .text:0x000000000000405E        488D0D6B7D0000       lea rcx, [data_0xBDD0]
   .text:0x0000000000004065        488B45D8             mov rax, qword ptr [rbp-0x28]
   .text:0x0000000000004069        488908               mov qword ptr [rax], rcx
   .text:0x000000000000406C        488D0DDD000100       lea rcx, [data_0x14150]
   .text:0x0000000000004073        488B45D8             mov rax, qword ptr [rbp-0x28]
   .text:0x0000000000004077        8990A8030000         mov dword ptr [rax+0x3A8], edx
   .text:0x000000000000407D        488B45D8             mov rax, qword ptr [rbp-0x28]
   .text:0x0000000000004081        48898888000000       mov qword ptr [rax+0x88], rcx
   .text:0x0000000000004088        8D4A42               lea ecx, [rdx+0x42]
   .text:0x000000000000408B        488B45D8             mov rax, qword ptr [rbp-0x28]
   .text:0x000000000000408F        488D5528             lea rdx, [rbp+0x28]
   .text:0x0000000000004093        668988BC000000       mov word ptr [rax+0xBC], cx
   .text:0x000000000000409A        488B45D8             mov rax, qword ptr [rbp-0x28]
   .text:0x000000000000409E        668988C2010000       mov word ptr [rax+0x1C2], cx
   .text:0x00000000000040A5        488D4D18             lea rcx, [rbp+0x18]
   .text:0x00000000000040A9        488B45D8             mov rax, qword ptr [rbp-0x28]
   .text:0x00000000000040AD        4883A0A003000000     and qword ptr [rax+0x3A0], 0x0
   .text:0x00000000000040B5        E826FEFFFF           call __crt_seh_guarded_call<void>::operator()<class <lambda_0ae27a3a962d80f24befdcbee591983d>,class <lambda_8d0ee55de4b1038c4002e0adecdf1839> & __ptr64,class <lambda_dc504788e8f1664fe9b84e20bfb512f2> >; public: void __cdecl( class <lambda_0ae27a3a962d80f24befdcbee591983d> && p1, class <lambda_8d0ee55de4b1038c4002e0adecdf1839> & p2, class <lambda_dc504788e8f1664fe9b84e20bfb512f2> && p3 )
   .text:0x00000000000040BA        4C8D4DD0             lea r9, [rbp-0x30]
   .text:0x00000000000040BE        4C8D45F0             lea r8, [rbp-0x10]
   .text:0x00000000000040C2        488D55D4             lea rdx, [rbp-0x2C]
   .text:0x00000000000040C6        488D4D18             lea rcx, [rbp+0x18]
   .text:0x00000000000040CA        E891FEFFFF           call func_0x3F60; void __cdecl( int64_t p1, int64_t p2, int64_t p3, int64_t p4 )
   .text:0x00000000000040CF        4883C450             add rsp, 0x50
   .text:0x00000000000040D3        5D                   pop rbp
   .text:0x00000000000040D4        C3                   ret
   .text:0x00000000000040D5 data_0x40D5:
   .text:0x00000000000040D5        db 3 dup(0xCC)
   .text:0x00000000000040D8 destroy_fls:
   .text:0x00000000000040D8        4885C9               test rcx, rcx
   .text:0x00000000000040DB        741A                 jz code_0x40F7
   .text:0x00000000000040DD code_0x40DD:
   .text:0x00000000000040DD        53                   push rbx
   .text:0x00000000000040DE        4883EC20             sub rsp, 0x20
   .text:0x00000000000040E2        488BD9               mov rbx, rcx
   .text:0x00000000000040E5        E80E000000           call destroy_ptd_array; void __cdecl( const struct __acrt_ptd * p1 )
   .text:0x00000000000040EA        488BCB               mov rcx, rbx
   .text:0x00000000000040ED        E822090000           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000040F2        4883C420             add rsp, 0x20
   .text:0x00000000000040F6        5B                   pop rbx
   .text:0x00000000000040F7 code_0x40F7:
   .text:0x00000000000040F7        C3                   ret
   .text:0x00000000000040F8 destroy_ptd_array:
   .text:0x00000000000040F8        4055                 push rbp
   .text:0x00000000000040FA        488BEC               mov rbp, rsp
   .text:0x00000000000040FD        4883EC40             sub rsp, 0x40
   .text:0x0000000000004101        488D45E8             lea rax, [rbp-0x18]
   .text:0x0000000000004105        48894DE8             mov qword ptr [rbp-0x18], rcx
   .text:0x0000000000004109        488945F0             mov qword ptr [rbp-0x10], rax
   .text:0x000000000000410D        488D15BC7C0000       lea rdx, [data_0xBDD0]
   .text:0x0000000000004114        B805000000           mov eax, 0x5
   .text:0x0000000000004119        894520               mov dword ptr [rbp+0x20], eax
   .text:0x000000000000411C        894528               mov dword ptr [rbp+0x28], eax
   .text:0x000000000000411F        488D45E8             lea rax, [rbp-0x18]
   .text:0x0000000000004123        488945F8             mov qword ptr [rbp-0x8], rax
   .text:0x0000000000004127        B804000000           mov eax, 0x4
   .text:0x000000000000412C        8945E0               mov dword ptr [rbp-0x20], eax
   .text:0x000000000000412F        8945E4               mov dword ptr [rbp-0x1C], eax
   .text:0x0000000000004132        488B01               mov rax, qword ptr [rcx]
   .text:0x0000000000004135        483BC2               cmp rax, rdx
   .text:0x0000000000004138        740C                 jz code_0x4146
   .text:0x000000000000413A code_0x413A:
   .text:0x000000000000413A        488BC8               mov rcx, rax
   .text:0x000000000000413D        E8D2080000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000004142        488B4DE8             mov rcx, qword ptr [rbp-0x18]
   .text:0x0000000000004146 code_0x4146:
   .text:0x0000000000004146        488B4970             mov rcx, qword ptr [rcx+0x70]
   .text:0x000000000000414A        E8C5080000           call _free_base; void __cdecl( void * _Block )
   .text:0x000000000000414F        488B4DE8             mov rcx, qword ptr [rbp-0x18]
   .text:0x0000000000004153        488B4958             mov rcx, qword ptr [rcx+0x58]
   .text:0x0000000000004157        E8B8080000           call _free_base; void __cdecl( void * _Block )
   .text:0x000000000000415C        488B4DE8             mov rcx, qword ptr [rbp-0x18]
   .text:0x0000000000004160        488B4960             mov rcx, qword ptr [rcx+0x60]
   .text:0x0000000000004164        E8AB080000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000004169        488B4DE8             mov rcx, qword ptr [rbp-0x18]
   .text:0x000000000000416D        488B4968             mov rcx, qword ptr [rcx+0x68]
   .text:0x0000000000004171        E89E080000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000004176        488B4DE8             mov rcx, qword ptr [rbp-0x18]
   .text:0x000000000000417A        488B4948             mov rcx, qword ptr [rcx+0x48]
   .text:0x000000000000417E        E891080000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000004183        488B4DE8             mov rcx, qword ptr [rbp-0x18]
   .text:0x0000000000004187        488B4950             mov rcx, qword ptr [rcx+0x50]
   .text:0x000000000000418B        E884080000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000004190        488B4DE8             mov rcx, qword ptr [rbp-0x18]
   .text:0x0000000000004194        488B4978             mov rcx, qword ptr [rcx+0x78]
   .text:0x0000000000004198        E877080000           call _free_base; void __cdecl( void * _Block )
   .text:0x000000000000419D        488B4DE8             mov rcx, qword ptr [rbp-0x18]
   .text:0x00000000000041A1        488B8980000000       mov rcx, qword ptr [rcx+0x80]
   .text:0x00000000000041A8        E867080000           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000041AD        488B4DE8             mov rcx, qword ptr [rbp-0x18]
   .text:0x00000000000041B1        488B89C0030000       mov rcx, qword ptr [rcx+0x3C0]
   .text:0x00000000000041B8        E857080000           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000041BD        4C8D4D20             lea r9, [rbp+0x20]
   .text:0x00000000000041C1        4C8D45F0             lea r8, [rbp-0x10]
   .text:0x00000000000041C5        488D5528             lea rdx, [rbp+0x28]
   .text:0x00000000000041C9        488D4D18             lea rcx, [rbp+0x18]
   .text:0x00000000000041CD        E8D6FDFFFF           call __crt_seh_guarded_call<void>::operator()<class <lambda_f2e299630e499de9f9a165e60fcd3db5>,class <lambda_2ae9d31cdba2644fcbeaf08da7c24588> & __ptr64,class <lambda_40d01ff24d0e7b3814fdbdcee8eab3c7> >; public: void __cdecl( class <lambda_f2e299630e499de9f9a165e60fcd3db5> && p1, class <lambda_2ae9d31cdba2644fcbeaf08da7c24588> & p2, class <lambda_40d01ff24d0e7b3814fdbdcee8eab3c7> && p3 )
   .text:0x00000000000041D2        4C8D4DE0             lea r9, [rbp-0x20]
   .text:0x00000000000041D6        4C8D45F8             lea r8, [rbp-0x8]
   .text:0x00000000000041DA        488D55E4             lea rdx, [rbp-0x1C]
   .text:0x00000000000041DE        488D4D18             lea rcx, [rbp+0x18]
   .text:0x00000000000041E2        E839FDFFFF           call __crt_seh_guarded_call<void>::operator()<class <lambda_2d41944a1d46af3157314b8a01080d33>,class <lambda_8f455de75cd7d7f24b4096f044d8b9e6> & __ptr64,class <lambda_aa500f224e6afead328df44964fe2772> >; public: void __cdecl( class <lambda_2d41944a1d46af3157314b8a01080d33> && p1, class <lambda_8f455de75cd7d7f24b4096f044d8b9e6> & p2, class <lambda_aa500f224e6afead328df44964fe2772> && p3 )
   .text:0x00000000000041E7        4883C440             add rsp, 0x40
   .text:0x00000000000041EB        5D                   pop rbp
   .text:0x00000000000041EC        C3                   ret
   .text:0x00000000000041ED data_0x41ED:
   .text:0x00000000000041ED        db 3 dup(0xCC)
   .text:0x00000000000041F0 replace_current_thread_locale_nolock:
   .text:0x00000000000041F0        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x00000000000041F5        57                   push rdi
   .text:0x00000000000041F6        4883EC20             sub rsp, 0x20
   .text:0x00000000000041FA        488BF9               mov rdi, rcx
   .text:0x00000000000041FD        488BDA               mov rbx, rdx
   .text:0x0000000000004200        488B8990000000       mov rcx, qword ptr [rcx+0x90]
   .text:0x0000000000004207        4885C9               test rcx, rcx
   .text:0x000000000000420A        742C                 jz code_0x4238
   .text:0x000000000000420C code_0x420C:
   .text:0x000000000000420C        E817280000           call __acrt_release_locale_ref; void __cdecl( int64_t p1 )
   .text:0x0000000000004211        488B8F90000000       mov rcx, qword ptr [rdi+0x90]
   .text:0x0000000000004218        483B0DF9110100       cmp rcx, qword ptr [data_0x15418]
   .text:0x000000000000421F        7417                 jz code_0x4238
   .text:0x0000000000004221 code_0x4221:
   .text:0x0000000000004221        488D0568030100       lea rax, [data_0x14590]
   .text:0x0000000000004228        483BC8               cmp rcx, rax
   .text:0x000000000000422B        740B                 jz code_0x4238
   .text:0x000000000000422D code_0x422D:
   .text:0x000000000000422D        83791000             cmp dword ptr [rcx+0x10], 0x0
   .text:0x0000000000004231        7505                 jnz code_0x4238
   .text:0x0000000000004233 code_0x4233:
   .text:0x0000000000004233        E8F0250000           call __acrt_free_locale; void __cdecl( int64_t p1 )
   .text:0x0000000000004238 code_0x4238:
   .text:0x0000000000004238        48899F90000000       mov qword ptr [rdi+0x90], rbx
   .text:0x000000000000423F        4885DB               test rbx, rbx
   .text:0x0000000000004242        7408                 jz code_0x424C
   .text:0x0000000000004244 code_0x4244:
   .text:0x0000000000004244        488BCB               mov rcx, rbx
   .text:0x0000000000004247        E850250000           call __acrt_add_locale_ref; int64_t __cdecl( int64_t p1 )
   .text:0x000000000000424C code_0x424C:
   .text:0x000000000000424C        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000004251        4883C420             add rsp, 0x20
   .text:0x0000000000004255        5F                   pop rdi
   .text:0x0000000000004256        C3                   ret
   .text:0x0000000000004257 code_0x4257:
   .text:0x0000000000004257        CC                   int3
   .text:0x0000000000004258 func_0x4258:
   .text:0x0000000000004258        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x000000000000425D        57                   push rdi
   .text:0x000000000000425E        4883EC20             sub rsp, 0x20
   .text:0x0000000000004262        FF15286E0000         call qword ptr [GetLastError]; unsigned long (__cdecl *)( void )
   .text:0x0000000000004268        8B0DE2FD0000         mov ecx, dword ptr [data_0x14050]
   .text:0x000000000000426E        8BD8                 mov ebx, eax
   .text:0x0000000000004270        83F9FF               cmp ecx, 0xFFFFFFFF
   .text:0x0000000000004273        741D                 jz code_0x4292
   .text:0x0000000000004275 code_0x4275:
   .text:0x0000000000004275        E8E62B0000           call __acrt_FlsGetValue; int64_t __cdecl( int32_t p1 )
   .text:0x000000000000427A        488BF8               mov rdi, rax
   .text:0x000000000000427D        4885C0               test rax, rax
   .text:0x0000000000004280        740A                 jz code_0x428C
   .text:0x0000000000004282 code_0x4282:
   .text:0x0000000000004282        4883F8FF             cmp rax, 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000004286        7571                 jnz code_0x42F9
   .text:0x0000000000004288 code_0x4288:
   .text:0x0000000000004288        33FF                 xor edi, edi
   .text:0x000000000000428A        EB6D                 jmp code_0x42F9
   .text:0x000000000000428C code_0x428C:
   .text:0x000000000000428C        8B0DBEFD0000         mov ecx, dword ptr [data_0x14050]
   .text:0x0000000000004292 code_0x4292:
   .text:0x0000000000004292        4883CAFF             or rdx, 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000004296        E80D2C0000           call __acrt_FlsSetValue; int32_t __cdecl( int32_t p1, int64_t p2 )
   .text:0x000000000000429B        85C0                 test eax, eax
   .text:0x000000000000429D        74E9                 jz code_0x4288
   .text:0x000000000000429F code_0x429F:
   .text:0x000000000000429F        BAC8030000           mov edx, 0x3C8
   .text:0x00000000000042A4        B901000000           mov ecx, 0x1
   .text:0x00000000000042A9        E8EE060000           call _calloc_base; void * __cdecl( unsigned long long _Count, unsigned long long _Size )
   .text:0x00000000000042AE        8B0D9CFD0000         mov ecx, dword ptr [data_0x14050]
   .text:0x00000000000042B4        488BF8               mov rdi, rax
   .text:0x00000000000042B7        4885C0               test rax, rax
   .text:0x00000000000042BA        7510                 jnz code_0x42CC
   .text:0x00000000000042BC code_0x42BC:
   .text:0x00000000000042BC        33D2                 xor edx, edx
   .text:0x00000000000042BE        E8E52B0000           call __acrt_FlsSetValue; int32_t __cdecl( int32_t p1, int64_t p2 )
   .text:0x00000000000042C3        33C9                 xor ecx, ecx
   .text:0x00000000000042C5 code_0x42C5:
   .text:0x00000000000042C5        E84A070000           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000042CA        EBBC                 jmp code_0x4288
   .text:0x00000000000042CC code_0x42CC:
   .text:0x00000000000042CC        488BD7               mov rdx, rdi
   .text:0x00000000000042CF        E8D42B0000           call __acrt_FlsSetValue; int32_t __cdecl( int32_t p1, int64_t p2 )
   .text:0x00000000000042D4        85C0                 test eax, eax
   .text:0x00000000000042D6        7512                 jnz code_0x42EA
   .text:0x00000000000042D8 code_0x42D8:
   .text:0x00000000000042D8        8B0D72FD0000         mov ecx, dword ptr [data_0x14050]
   .text:0x00000000000042DE        33D2                 xor edx, edx
   .text:0x00000000000042E0        E8C32B0000           call __acrt_FlsSetValue; int32_t __cdecl( int32_t p1, int64_t p2 )
   .text:0x00000000000042E5        488BCF               mov rcx, rdi
   .text:0x00000000000042E8        EBDB                 jmp code_0x42C5
   .text:0x00000000000042EA code_0x42EA:
   .text:0x00000000000042EA        488BCF               mov rcx, rdi
   .text:0x00000000000042ED        E816FDFFFF           call construct_ptd_array; void __cdecl( const struct __acrt_ptd * p1 )
   .text:0x00000000000042F2        33C9                 xor ecx, ecx
   .text:0x00000000000042F4        E81B070000           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000042F9 code_0x42F9:
   .text:0x00000000000042F9        8BCB                 mov ecx, ebx
   .text:0x00000000000042FB        FF15976D0000         call qword ptr [SetLastError]; void (__cdecl *)( unsigned long dwErrCode )
   .text:0x0000000000004301        4885FF               test rdi, rdi
   .text:0x0000000000004304        740E                 jz code_0x4314
   .text:0x0000000000004306 code_0x4306:
   .text:0x0000000000004306        488BC7               mov rax, rdi
   .text:0x0000000000004309        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x000000000000430E        4883C420             add rsp, 0x20
   .text:0x0000000000004312        5F                   pop rdi
   .text:0x0000000000004313        C3                   ret
   .text:0x0000000000004314 code_0x4314:
   .text:0x0000000000004314        E813FAFFFF           call func_0x3D2C; void __cdecl( void )
   .text:0x0000000000004319 data_0x4319:
   .text:0x0000000000004319        db 3 dup(0xCC)
   .text:0x000000000000431C func_0x431C:
   .text:0x000000000000431C        4053                 push rbx
   .text:0x000000000000431E        4883EC20             sub rsp, 0x20
   .text:0x0000000000004322        8B0D28FD0000         mov ecx, dword ptr [data_0x14050]
   .text:0x0000000000004328        83F9FF               cmp ecx, 0xFFFFFFFF
   .text:0x000000000000432B        741B                 jz code_0x4348
   .text:0x000000000000432D code_0x432D:
   .text:0x000000000000432D        E82E2B0000           call __acrt_FlsGetValue; int64_t __cdecl( int32_t p1 )
   .text:0x0000000000004332        488BD8               mov rbx, rax
   .text:0x0000000000004335        4885C0               test rax, rax
   .text:0x0000000000004338        7408                 jz code_0x4342
   .text:0x000000000000433A code_0x433A:
   .text:0x000000000000433A        4883F8FF             cmp rax, 0xFFFFFFFFFFFFFFFF
   .text:0x000000000000433E        747D                 jz code_0x43BD
   .text:0x0000000000004340 code_0x4340:
   .text:0x0000000000004340        EB6D                 jmp code_0x43AF
   .text:0x0000000000004342 code_0x4342:
   .text:0x0000000000004342        8B0D08FD0000         mov ecx, dword ptr [data_0x14050]
   .text:0x0000000000004348 code_0x4348:
   .text:0x0000000000004348        4883CAFF             or rdx, 0xFFFFFFFFFFFFFFFF
   .text:0x000000000000434C        E8572B0000           call __acrt_FlsSetValue; int32_t __cdecl( int32_t p1, int64_t p2 )
   .text:0x0000000000004351        85C0                 test eax, eax
   .text:0x0000000000004353        7468                 jz code_0x43BD
   .text:0x0000000000004355 code_0x4355:
   .text:0x0000000000004355        BAC8030000           mov edx, 0x3C8
   .text:0x000000000000435A        B901000000           mov ecx, 0x1
   .text:0x000000000000435F        E838060000           call _calloc_base; void * __cdecl( unsigned long long _Count, unsigned long long _Size )
   .text:0x0000000000004364        8B0DE6FC0000         mov ecx, dword ptr [data_0x14050]
   .text:0x000000000000436A        488BD8               mov rbx, rax
   .text:0x000000000000436D        4885C0               test rax, rax
   .text:0x0000000000004370        7510                 jnz code_0x4382
   .text:0x0000000000004372 code_0x4372:
   .text:0x0000000000004372        33D2                 xor edx, edx
   .text:0x0000000000004374        E82F2B0000           call __acrt_FlsSetValue; int32_t __cdecl( int32_t p1, int64_t p2 )
   .text:0x0000000000004379        33C9                 xor ecx, ecx
   .text:0x000000000000437B code_0x437B:
   .text:0x000000000000437B        E894060000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000004380        EB3B                 jmp code_0x43BD
   .text:0x0000000000004382 code_0x4382:
   .text:0x0000000000004382        488BD3               mov rdx, rbx
   .text:0x0000000000004385        E81E2B0000           call __acrt_FlsSetValue; int32_t __cdecl( int32_t p1, int64_t p2 )
   .text:0x000000000000438A        85C0                 test eax, eax
   .text:0x000000000000438C        7512                 jnz code_0x43A0
   .text:0x000000000000438E code_0x438E:
   .text:0x000000000000438E        8B0DBCFC0000         mov ecx, dword ptr [data_0x14050]
   .text:0x0000000000004394        33D2                 xor edx, edx
   .text:0x0000000000004396        E80D2B0000           call __acrt_FlsSetValue; int32_t __cdecl( int32_t p1, int64_t p2 )
   .text:0x000000000000439B        488BCB               mov rcx, rbx
   .text:0x000000000000439E        EBDB                 jmp code_0x437B
   .text:0x00000000000043A0 code_0x43A0:
   .text:0x00000000000043A0        488BCB               mov rcx, rbx
   .text:0x00000000000043A3        E860FCFFFF           call construct_ptd_array; void __cdecl( const struct __acrt_ptd * p1 )
   .text:0x00000000000043A8        33C9                 xor ecx, ecx
   .text:0x00000000000043AA        E865060000           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000043AF code_0x43AF:
   .text:0x00000000000043AF        4885DB               test rbx, rbx
   .text:0x00000000000043B2        7409                 jz code_0x43BD
   .text:0x00000000000043B4 code_0x43B4:
   .text:0x00000000000043B4        488BC3               mov rax, rbx
   .text:0x00000000000043B7        4883C420             add rsp, 0x20
   .text:0x00000000000043BB        5B                   pop rbx
   .text:0x00000000000043BC        C3                   ret
   .text:0x00000000000043BD code_0x43BD:
   .text:0x00000000000043BD        E86AF9FFFF           call func_0x3D2C; void __cdecl( void )
   .text:0x00000000000043C2 data_0x43C2:
   .text:0x00000000000043C2        db 2 dup(0xCC)
   .text:0x00000000000043C4 __acrt_getptd_noexit:
   .text:0x00000000000043C4        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x00000000000043C9        57                   push rdi
   .text:0x00000000000043CA        4883EC20             sub rsp, 0x20
   .text:0x00000000000043CE        FF15BC6C0000         call qword ptr [GetLastError]; unsigned long (__cdecl *)( void )
   .text:0x00000000000043D4        8B0D76FC0000         mov ecx, dword ptr [data_0x14050]
   .text:0x00000000000043DA        8BD8                 mov ebx, eax
   .text:0x00000000000043DC        83F9FF               cmp ecx, 0xFFFFFFFF
   .text:0x00000000000043DF        741D                 jz code_0x43FE
   .text:0x00000000000043E1 code_0x43E1:
   .text:0x00000000000043E1        E87A2A0000           call __acrt_FlsGetValue; int64_t __cdecl( int32_t p1 )
   .text:0x00000000000043E6        488BF8               mov rdi, rax
   .text:0x00000000000043E9        4885C0               test rax, rax
   .text:0x00000000000043EC        740A                 jz code_0x43F8
   .text:0x00000000000043EE code_0x43EE:
   .text:0x00000000000043EE        4883F8FF             cmp rax, 0xFFFFFFFFFFFFFFFF
   .text:0x00000000000043F2        7571                 jnz code_0x4465
   .text:0x00000000000043F4 code_0x43F4:
   .text:0x00000000000043F4        33FF                 xor edi, edi
   .text:0x00000000000043F6        EB6D                 jmp code_0x4465
   .text:0x00000000000043F8 code_0x43F8:
   .text:0x00000000000043F8        8B0D52FC0000         mov ecx, dword ptr [data_0x14050]
   .text:0x00000000000043FE code_0x43FE:
   .text:0x00000000000043FE        4883CAFF             or rdx, 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000004402        E8A12A0000           call __acrt_FlsSetValue; int32_t __cdecl( int32_t p1, int64_t p2 )
   .text:0x0000000000004407        85C0                 test eax, eax
   .text:0x0000000000004409        74E9                 jz code_0x43F4
   .text:0x000000000000440B code_0x440B:
   .text:0x000000000000440B        BAC8030000           mov edx, 0x3C8
   .text:0x0000000000004410        B901000000           mov ecx, 0x1
   .text:0x0000000000004415        E882050000           call _calloc_base; void * __cdecl( unsigned long long _Count, unsigned long long _Size )
   .text:0x000000000000441A        8B0D30FC0000         mov ecx, dword ptr [data_0x14050]
   .text:0x0000000000004420        488BF8               mov rdi, rax
   .text:0x0000000000004423        4885C0               test rax, rax
   .text:0x0000000000004426        7510                 jnz code_0x4438
   .text:0x0000000000004428 code_0x4428:
   .text:0x0000000000004428        33D2                 xor edx, edx
   .text:0x000000000000442A        E8792A0000           call __acrt_FlsSetValue; int32_t __cdecl( int32_t p1, int64_t p2 )
   .text:0x000000000000442F        33C9                 xor ecx, ecx
   .text:0x0000000000004431 code_0x4431:
   .text:0x0000000000004431        E8DE050000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000004436        EBBC                 jmp code_0x43F4
   .text:0x0000000000004438 code_0x4438:
   .text:0x0000000000004438        488BD7               mov rdx, rdi
   .text:0x000000000000443B        E8682A0000           call __acrt_FlsSetValue; int32_t __cdecl( int32_t p1, int64_t p2 )
   .text:0x0000000000004440        85C0                 test eax, eax
   .text:0x0000000000004442        7512                 jnz code_0x4456
   .text:0x0000000000004444 code_0x4444:
   .text:0x0000000000004444        8B0D06FC0000         mov ecx, dword ptr [data_0x14050]
   .text:0x000000000000444A        33D2                 xor edx, edx
   .text:0x000000000000444C        E8572A0000           call __acrt_FlsSetValue; int32_t __cdecl( int32_t p1, int64_t p2 )
   .text:0x0000000000004451        488BCF               mov rcx, rdi
   .text:0x0000000000004454        EBDB                 jmp code_0x4431
   .text:0x0000000000004456 code_0x4456:
   .text:0x0000000000004456        488BCF               mov rcx, rdi
   .text:0x0000000000004459        E8AAFBFFFF           call construct_ptd_array; void __cdecl( const struct __acrt_ptd * p1 )
   .text:0x000000000000445E        33C9                 xor ecx, ecx
   .text:0x0000000000004460        E8AF050000           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000004465 code_0x4465:
   .text:0x0000000000004465        8BCB                 mov ecx, ebx
   .text:0x0000000000004467        FF152B6C0000         call qword ptr [SetLastError]; void (__cdecl *)( unsigned long dwErrCode )
   .text:0x000000000000446D        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000004472        488BC7               mov rax, rdi
   .text:0x0000000000004475        4883C420             add rsp, 0x20
   .text:0x0000000000004479        5F                   pop rdi
   .text:0x000000000000447A        C3                   ret
   .text:0x000000000000447B code_0x447B:
   .text:0x000000000000447B        CC                   int3
   .text:0x000000000000447C __acrt_initialize_ptd:
   .text:0x000000000000447C        4883EC28             sub rsp, 0x28
   .text:0x0000000000004480        488D0D51FCFFFF       lea rcx, [destroy_fls]; void __cdecl( void * p1 )
   .text:0x0000000000004487        E844290000           call __acrt_FlsAlloc; int32_t __cdecl( int64_t p1 )
   .text:0x000000000000448C        8905BEFB0000         mov dword ptr [data_0x14050], eax
   .text:0x0000000000004492        83F8FF               cmp eax, 0xFFFFFFFF
   .text:0x0000000000004495        7504                 jnz code_0x449B
   .text:0x0000000000004497 code_0x4497:
   .text:0x0000000000004497        32C0                 xor al, al
   .text:0x0000000000004499        EB15                 jmp code_0x44B0
   .text:0x000000000000449B code_0x449B:
   .text:0x000000000000449B        E824FFFFFF           call __acrt_getptd_noexit; int64_t __cdecl( void )
   .text:0x00000000000044A0        4885C0               test rax, rax
   .text:0x00000000000044A3        7509                 jnz code_0x44AE
   .text:0x00000000000044A5 code_0x44A5:
   .text:0x00000000000044A5        33C9                 xor ecx, ecx
   .text:0x00000000000044A7        E80C000000           call __acrt_uninitialize_ptd; int8_t __cdecl( void )
   .text:0x00000000000044AC        EBE9                 jmp code_0x4497
   .text:0x00000000000044AE code_0x44AE:
   .text:0x00000000000044AE        B001                 mov al, 0x1
   .text:0x00000000000044B0 code_0x44B0:
   .text:0x00000000000044B0        4883C428             add rsp, 0x28
   .text:0x00000000000044B4        C3                   ret
   .text:0x00000000000044B5 data_0x44B5:
   .text:0x00000000000044B5        db 3 dup(0xCC)
   .text:0x00000000000044B8 __acrt_uninitialize_ptd:
   .text:0x00000000000044B8        4883EC28             sub rsp, 0x28
   .text:0x00000000000044BC        8B0D8EFB0000         mov ecx, dword ptr [data_0x14050]
   .text:0x00000000000044C2        83F9FF               cmp ecx, 0xFFFFFFFF
   .text:0x00000000000044C5        740C                 jz code_0x44D3
   .text:0x00000000000044C7 code_0x44C7:
   .text:0x00000000000044C7        E84C290000           call __acrt_FlsFree; void __cdecl( int32_t p1 )
   .text:0x00000000000044CC        830D7DFB0000FF       or dword ptr [data_0x14050], 0xFFFFFFFF
   .text:0x00000000000044D3 code_0x44D3:
   .text:0x00000000000044D3        B001                 mov al, 0x1
   .text:0x00000000000044D5        4883C428             add rsp, 0x28
   .text:0x00000000000044D9        C3                   ret
   .text:0x00000000000044DA data_0x44DA:
   .text:0x00000000000044DA        db 2 dup(0xCC)
   .text:0x00000000000044DC __acrt_call_reportfault:
   .text:0x00000000000044DC        48895C2410           mov qword ptr [rsp+0x10], rbx
   .text:0x00000000000044E1        4889742418           mov qword ptr [rsp+0x18], rsi
   .text:0x00000000000044E6        55                   push rbp
   .text:0x00000000000044E7        57                   push rdi
   .text:0x00000000000044E8        4156                 push r14
   .text:0x00000000000044EA        488DAC2410FBFFFF     lea rbp, [rsp-0x4F0]
   .text:0x00000000000044F2        4881ECF0050000       sub rsp, 0x5F0
   .text:0x00000000000044F9        488B0528FB0000       mov rax, qword ptr [__security_cookie]
   .text:0x0000000000004500        4833C4               xor rax, rsp
   .text:0x0000000000004503        488985E0040000       mov qword ptr [rbp+0x4E0], rax
   .text:0x000000000000450A        418BF8               mov edi, r8d
   .text:0x000000000000450D        8BF2                 mov esi, edx
   .text:0x000000000000450F        8BD9                 mov ebx, ecx
   .text:0x0000000000004511        83F9FF               cmp ecx, 0xFFFFFFFF
   .text:0x0000000000004514        7405                 jz code_0x451B
   .text:0x0000000000004516 code_0x4516:
   .text:0x0000000000004516        E82DD1FFFF           call __crt_debugger_hook; inline void __cdecl( void )
   .text:0x000000000000451B code_0x451B:
   .text:0x000000000000451B        33D2                 xor edx, edx
   .text:0x000000000000451D        488D4C2470           lea rcx, [rsp+0x70]
   .text:0x0000000000004522        41B898000000         mov r8d, 0x98
   .text:0x0000000000004528        E833D8FFFF           call func_0x1D60; int64_t __cdecl( int64_t p1, int8_t p2, int64_t p3 )
   .text:0x000000000000452D        33D2                 xor edx, edx
   .text:0x000000000000452F        488D4D10             lea rcx, [rbp+0x10]
   .text:0x0000000000004533        41B8D0040000         mov r8d, 0x4D0
   .text:0x0000000000004539        E822D8FFFF           call func_0x1D60; int64_t __cdecl( int64_t p1, int8_t p2, int64_t p3 )
   .text:0x000000000000453E        488D442470           lea rax, [rsp+0x70]
   .text:0x0000000000004543        4889442448           mov qword ptr [rsp+0x48], rax
   .text:0x0000000000004548        488D4D10             lea rcx, [rbp+0x10]
   .text:0x000000000000454C        488D4510             lea rax, [rbp+0x10]
   .text:0x0000000000004550        4889442450           mov qword ptr [rsp+0x50], rax
   .text:0x0000000000004555        FF15DD6A0000         call qword ptr [RtlCaptureContext]; void (__cdecl *)( struct _CONTEXT * ContextRecord )
   .text:0x000000000000455B        4C8BB508010000       mov r14, qword ptr [rbp+0x108]
   .text:0x0000000000004562        488D542440           lea rdx, [rsp+0x40]
   .text:0x0000000000004567        498BCE               mov rcx, r14
   .text:0x000000000000456A        4533C0               xor r8d, r8d
   .text:0x000000000000456D        FF15CD6A0000         call qword ptr [RtlLookupFunctionEntry]; struct _IMAGE_RUNTIME_FUNCTION_ENTRY * (__cdecl *)( unsigned long long ControlPc, unsigned long long * ImageBase, struct _UNWIND_HISTORY_TABLE * HistoryTable )
   .text:0x0000000000004573        4885C0               test rax, rax
   .text:0x0000000000004576        7436                 jz code_0x45AE
   .text:0x0000000000004578 code_0x4578:
   .text:0x0000000000004578        488364243800         and qword ptr [rsp+0x38], 0x0
   .text:0x000000000000457E        488D4C2458           lea rcx, [rsp+0x58]
   .text:0x0000000000004583        488B542440           mov rdx, qword ptr [rsp+0x40]
   .text:0x0000000000004588        4C8BC8               mov r9, rax
   .text:0x000000000000458B        48894C2430           mov qword ptr [rsp+0x30], rcx
   .text:0x0000000000004590        4D8BC6               mov r8, r14
   .text:0x0000000000004593        488D4C2460           lea rcx, [rsp+0x60]
   .text:0x0000000000004598        48894C2428           mov qword ptr [rsp+0x28], rcx
   .text:0x000000000000459D        488D4D10             lea rcx, [rbp+0x10]
   .text:0x00000000000045A1        48894C2420           mov qword ptr [rsp+0x20], rcx
   .text:0x00000000000045A6        33C9                 xor ecx, ecx
   .text:0x00000000000045A8        FF159A6A0000         call qword ptr [RtlVirtualUnwind]; enum _EXCEPTION_DISPOSITION (__cdecl *)( struct _EXCEPTION_RECORD * p1, void * p2, struct _CONTEXT * p3, void * p4 ) (__cdecl *)( unsigned long HandlerType, unsigned long long ImageBase, unsigned long long ControlPc, struct _IMAGE_RUNTIME_FUNCTION_ENTRY * FunctionEntry, struct _CONTEXT * ContextRecord, void ** HandlerData, unsigned long long * EstablisherFrame, struct _KNONVOLATILE_CONTEXT_POINTERS * ContextPointers )
   .text:0x00000000000045AE code_0x45AE:
   .text:0x00000000000045AE        488B8508050000       mov rax, qword ptr [rbp+0x508]
   .text:0x00000000000045B5        48898508010000       mov qword ptr [rbp+0x108], rax
   .text:0x00000000000045BC        488D8508050000       lea rax, [rbp+0x508]
   .text:0x00000000000045C3        4883C008             add rax, 0x8
   .text:0x00000000000045C7        89742470             mov dword ptr [rsp+0x70], esi
   .text:0x00000000000045CB        488985A8000000       mov qword ptr [rbp+0xA8], rax
   .text:0x00000000000045D2        488B8508050000       mov rax, qword ptr [rbp+0x508]
   .text:0x00000000000045D9        48894580             mov qword ptr [rbp-0x80], rax
   .text:0x00000000000045DD        897C2474             mov dword ptr [rsp+0x74], edi
   .text:0x00000000000045E1        FF15696A0000         call qword ptr [IsDebuggerPresent]; int (__cdecl *)( void )
   .text:0x00000000000045E7        33C9                 xor ecx, ecx
   .text:0x00000000000045E9        8BF8                 mov edi, eax
   .text:0x00000000000045EB        FF156F6A0000         call qword ptr [SetUnhandledExceptionFilter]; long (__cdecl *)( struct _EXCEPTION_POINTERS * p1 ) (__cdecl *)( long (__cdecl * lpTopLevelExceptionFilter)( struct _EXCEPTION_POINTERS * p1 ) )
   .text:0x00000000000045F1        488D4C2448           lea rcx, [rsp+0x48]
   .text:0x00000000000045F6        FF155C6A0000         call qword ptr [UnhandledExceptionFilter]; long (__cdecl *)( struct _EXCEPTION_POINTERS * ExceptionInfo )
   .text:0x00000000000045FC        85C0                 test eax, eax
   .text:0x00000000000045FE        7510                 jnz code_0x4610
   .text:0x0000000000004600 code_0x4600:
   .text:0x0000000000004600        85FF                 test edi, edi
   .text:0x0000000000004602        750C                 jnz code_0x4610
   .text:0x0000000000004604 code_0x4604:
   .text:0x0000000000004604        83FBFF               cmp ebx, 0xFFFFFFFF
   .text:0x0000000000004607        7407                 jz code_0x4610
   .text:0x0000000000004609 code_0x4609:
   .text:0x0000000000004609        8BCB                 mov ecx, ebx
   .text:0x000000000000460B        E838D0FFFF           call __crt_debugger_hook; inline void __cdecl( void )
   .text:0x0000000000004610 code_0x4610:
   .text:0x0000000000004610        488B8DE0040000       mov rcx, qword ptr [rbp+0x4E0]
   .text:0x0000000000004617        4833CC               xor rcx, rsp
   .text:0x000000000000461A        E831620000           call __security_check_cookie; noclobber void __cdecl( uint64_t p1 )
   .text:0x000000000000461F        4C8D9C24F0050000     lea r11, [rsp+0x5F0]
   .text:0x0000000000004627        498B5B28             mov rbx, qword ptr [r11+0x28]
   .text:0x000000000000462B        498B7330             mov rsi, qword ptr [r11+0x30]
   .text:0x000000000000462F        498BE3               mov rsp, r11
   .text:0x0000000000004632        415E                 pop r14
   .text:0x0000000000004634        5F                   pop rdi
   .text:0x0000000000004635        5D                   pop rbp
   .text:0x0000000000004636        C3                   ret
   .text:0x0000000000004637 code_0x4637:
   .text:0x0000000000004637        CC                   int3
   .text:0x0000000000004638 func_0x4638:
   .text:0x0000000000004638        48890D31070100       mov qword ptr [data_0x14D70], rcx
   .text:0x000000000000463F        C3                   ret
   .text:0x0000000000004640 _invalid_parameter:
   .text:0x0000000000004640        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000004645        48896C2410           mov qword ptr [rsp+0x10], rbp
   .text:0x000000000000464A        4889742418           mov qword ptr [rsp+0x18], rsi
   .text:0x000000000000464F        57                   push rdi
   .text:0x0000000000004650        4883EC30             sub rsp, 0x30
   .text:0x0000000000004654        418BD9               mov ebx, r9d
   .text:0x0000000000004657        498BF8               mov rdi, r8
   .text:0x000000000000465A        488BF2               mov rsi, rdx
   .text:0x000000000000465D        488BE9               mov rbp, rcx
   .text:0x0000000000004660        E85FFDFFFF           call __acrt_getptd_noexit; int64_t __cdecl( void )
   .text:0x0000000000004665        4885C0               test rax, rax
   .text:0x0000000000004668        743D                 jz code_0x46A7
   .text:0x000000000000466A code_0x466A:
   .text:0x000000000000466A        488B80B8030000       mov rax, qword ptr [rax+0x3B8]
   .text:0x0000000000004671        4885C0               test rax, rax
   .text:0x0000000000004674        7431                 jz code_0x46A7
   .text:0x0000000000004676 code_0x4676:
   .text:0x0000000000004676        488B542460           mov rdx, qword ptr [rsp+0x60]
   .text:0x000000000000467B        448BCB               mov r9d, ebx
   .text:0x000000000000467E        4889542420           mov qword ptr [rsp+0x20], rdx
   .text:0x0000000000004683        4C8BC7               mov r8, rdi
   .text:0x0000000000004686        488BD6               mov rdx, rsi
   .text:0x0000000000004689 code_0x4689:
   .text:0x0000000000004689        488BCD               mov rcx, rbp
   .text:0x000000000000468C        FF15966B0000         call qword ptr [GuardCFDispatchFunction]; void (__cdecl *)( int64_t p1, int64_t p2, int64_t p3, int32_t p4, int64_t p5 )
   .text:0x0000000000004692        488B5C2440           mov rbx, qword ptr [rsp+0x40]
   .text:0x0000000000004697        488B6C2448           mov rbp, qword ptr [rsp+0x48]
   .text:0x000000000000469C        488B742450           mov rsi, qword ptr [rsp+0x50]
   .text:0x00000000000046A1        4883C430             add rsp, 0x30
   .text:0x00000000000046A5        5F                   pop rdi
   .text:0x00000000000046A6        C3                   ret
   .text:0x00000000000046A7 code_0x46A7:
   .text:0x00000000000046A7        4C8B157AF90000       mov r10, qword ptr [__security_cookie]
   .text:0x00000000000046AE        448BCB               mov r9d, ebx
   .text:0x00000000000046B1        418BCA               mov ecx, r10d
   .text:0x00000000000046B4        4C8BC7               mov r8, rdi
   .text:0x00000000000046B7        4C3315B2060100       xor r10, qword ptr [data_0x14D70]
   .text:0x00000000000046BE        83E13F               and ecx, 0x3F
   .text:0x00000000000046C1        49D3CA               ror r10, cl
   .text:0x00000000000046C4        488BD6               mov rdx, rsi
   .text:0x00000000000046C7        4D85D2               test r10, r10
   .text:0x00000000000046CA        740F                 jz code_0x46DB
   .text:0x00000000000046CC code_0x46CC:
   .text:0x00000000000046CC        488B4C2460           mov rcx, qword ptr [rsp+0x60]
   .text:0x00000000000046D1        498BC2               mov rax, r10
   .text:0x00000000000046D4        48894C2420           mov qword ptr [rsp+0x20], rcx
   .text:0x00000000000046D9        EBAE                 jmp code_0x4689
   .text:0x00000000000046DB code_0x46DB:
   .text:0x00000000000046DB        488B442460           mov rax, qword ptr [rsp+0x60]
   .text:0x00000000000046E0        488BCD               mov rcx, rbp
   .text:0x00000000000046E3        4889442420           mov qword ptr [rsp+0x20], rax
   .text:0x00000000000046E8        E823000000           call _invoke_watson; noreturn void __cdecl( unsigned short * _Expression, unsigned short * _FunctionName, unsigned short * _FileName, unsigned int _LineNo, unsigned long long _Reserved )
   .text:0x00000000000046ED code_0x46ED:
   .text:0x00000000000046ED        CC                   int3
   .text:0x00000000000046EE data_0x46EE:
   .text:0x00000000000046EE        db 2 dup(0xCC)
   .text:0x00000000000046F0 _invalid_parameter_noinfo:
   .text:0x00000000000046F0        4883EC38             sub rsp, 0x38
   .text:0x00000000000046F4        488364242000         and qword ptr [rsp+0x20], 0x0
   .text:0x00000000000046FA        4533C9               xor r9d, r9d
   .text:0x00000000000046FD        4533C0               xor r8d, r8d
   .text:0x0000000000004700        33D2                 xor edx, edx
   .text:0x0000000000004702        33C9                 xor ecx, ecx
   .text:0x0000000000004704        E837FFFFFF           call _invalid_parameter; void __cdecl( int64_t p1, int64_t p2, int64_t p3, int32_t p4, int64_t p5 )
   .text:0x0000000000004709        4883C438             add rsp, 0x38
   .text:0x000000000000470D        C3                   ret
   .text:0x000000000000470E data_0x470E:
   .text:0x000000000000470E        db 2 dup(0xCC)
   .text:0x0000000000004710 _invoke_watson:
   .text:0x0000000000004710        4883EC28             sub rsp, 0x28
   .text:0x0000000000004714        B917000000           mov ecx, 0x17
   .text:0x0000000000004719        FF1551690000         call qword ptr [IsProcessorFeaturePresent]; int (__cdecl *)( unsigned long ProcessorFeature )
   .text:0x000000000000471F        85C0                 test eax, eax
   .text:0x0000000000004721        7407                 jz code_0x472A
   .text:0x0000000000004723 code_0x4723:
   .text:0x0000000000004723        B905000000           mov ecx, 0x5
   .text:0x0000000000004728        CD29                 int 0x29
   .text:0x000000000000472A code_0x472A:
   .text:0x000000000000472A        41B801000000         mov r8d, 0x1
   .text:0x0000000000004730        BA170400C0           mov edx, 0xC0000417
   .text:0x0000000000004735        418D4801             lea ecx, [r8+0x1]
   .text:0x0000000000004739        E89EFDFFFF           call __acrt_call_reportfault; void __cdecl( int32_t p1, int32_t p2, int32_t p3 )
   .text:0x000000000000473E        FF15D4690000         call qword ptr [GetCurrentProcess]; void * (__cdecl *)( void )
   .text:0x0000000000004744        488BC8               mov rcx, rax
   .text:0x0000000000004747        BA170400C0           mov edx, 0xC0000417
   .text:0x000000000000474C        4883C428             add rsp, 0x28
   .text:0x0000000000004750        48FF25D1690000       jmp qword ptr [TerminateProcess]; int (__cdecl *)( void * hProcess, unsigned int uExitCode )
   .text:0x0000000000004757 code_0x4757:
   .text:0x0000000000004757        CC                   int3
   .text:0x0000000000004758 wcscpy_s:
   .text:0x0000000000004758        4053                 push rbx
   .text:0x000000000000475A        4883EC20             sub rsp, 0x20
   .text:0x000000000000475E        33DB                 xor ebx, ebx
   .text:0x0000000000004760        4885C9               test rcx, rcx
   .text:0x0000000000004763        740D                 jz code_0x4772
   .text:0x0000000000004765 code_0x4765:
   .text:0x0000000000004765        4885D2               test rdx, rdx
   .text:0x0000000000004768        7408                 jz code_0x4772
   .text:0x000000000000476A code_0x476A:
   .text:0x000000000000476A        4D85C0               test r8, r8
   .text:0x000000000000476D        751C                 jnz code_0x478B
   .text:0x000000000000476F code_0x476F:
   .text:0x000000000000476F        668919               mov word ptr [rcx], bx
   .text:0x0000000000004772 code_0x4772:
   .text:0x0000000000004772        E805020000           call _errno; int * __cdecl( void )
   .text:0x0000000000004777        BB16000000           mov ebx, 0x16
   .text:0x000000000000477C code_0x477C:
   .text:0x000000000000477C        8918                 mov dword ptr [rax], ebx
   .text:0x000000000000477E        E86DFFFFFF           call _invalid_parameter_noinfo; void __cdecl( void )
   .text:0x0000000000004783 code_0x4783:
   .text:0x0000000000004783        8BC3                 mov eax, ebx
   .text:0x0000000000004785        4883C420             add rsp, 0x20
   .text:0x0000000000004789        5B                   pop rbx
   .text:0x000000000000478A        C3                   ret
   .text:0x000000000000478B code_0x478B:
   .text:0x000000000000478B        488BC1               mov rax, rcx
   .text:0x000000000000478E        4C2BC1               sub r8, rcx
   .text:0x0000000000004791 code_0x4791:
   .text:0x0000000000004791        450FB70C00           movzx r9d, word ptr [r8+rax]
   .text:0x0000000000004796        4C8BD2               mov r10, rdx
   .text:0x0000000000004799        66448908             mov word ptr [rax], r9w
   .text:0x000000000000479D        488D4002             lea rax, [rax+0x2]
   .text:0x00000000000047A1        664585C9             test r9w, r9w
   .text:0x00000000000047A5        7406                 jz code_0x47AD
   .text:0x00000000000047A7 code_0x47A7:
   .text:0x00000000000047A7        4883EA01             sub rdx, 0x1
   .text:0x00000000000047AB        75E4                 jnz code_0x4791
   .text:0x00000000000047AD code_0x47AD:
   .text:0x00000000000047AD        664585C9             test r9w, r9w
   .text:0x00000000000047B1        498D42FF             lea rax, [r10-0x1]
   .text:0x00000000000047B5        490F44C2             cmove rax, r10
   .text:0x00000000000047B9        4885C0               test rax, rax
   .text:0x00000000000047BC        75C5                 jnz code_0x4783
   .text:0x00000000000047BE code_0x47BE:
   .text:0x00000000000047BE        668919               mov word ptr [rcx], bx
   .text:0x00000000000047C1        E8B6010000           call _errno; int * __cdecl( void )
   .text:0x00000000000047C6        BB22000000           mov ebx, 0x22
   .text:0x00000000000047CB        EBAF                 jmp code_0x477C
   .text:0x00000000000047CD data_0x47CD:
   .text:0x00000000000047CD        db 3 dup(0xCC)
   .text:0x00000000000047D0 wcsncpy_s:
   .text:0x00000000000047D0        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x00000000000047D5        57                   push rdi
   .text:0x00000000000047D6        4883EC20             sub rsp, 0x20
   .text:0x00000000000047DA        4533D2               xor r10d, r10d
   .text:0x00000000000047DD        498BD8               mov rbx, r8
   .text:0x00000000000047E0        4C8BDA               mov r11, rdx
   .text:0x00000000000047E3        4D85C9               test r9, r9
   .text:0x00000000000047E6        752C                 jnz code_0x4814
   .text:0x00000000000047E8 code_0x47E8:
   .text:0x00000000000047E8        4885C9               test rcx, rcx
   .text:0x00000000000047EB        752C                 jnz code_0x4819
   .text:0x00000000000047ED code_0x47ED:
   .text:0x00000000000047ED        4885D2               test rdx, rdx
   .text:0x00000000000047F0        7414                 jz code_0x4806
   .text:0x00000000000047F2 code_0x47F2:
   .text:0x00000000000047F2        E885010000           call _errno; int * __cdecl( void )
   .text:0x00000000000047F7        BB16000000           mov ebx, 0x16
   .text:0x00000000000047FC code_0x47FC:
   .text:0x00000000000047FC        8918                 mov dword ptr [rax], ebx
   .text:0x00000000000047FE        E8EDFEFFFF           call _invalid_parameter_noinfo; void __cdecl( void )
   .text:0x0000000000004803        448BD3               mov r10d, ebx
   .text:0x0000000000004806 code_0x4806:
   .text:0x0000000000004806        418BC2               mov eax, r10d
   .text:0x0000000000004809        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x000000000000480E        4883C420             add rsp, 0x20
   .text:0x0000000000004812        5F                   pop rdi
   .text:0x0000000000004813        C3                   ret
   .text:0x0000000000004814 code_0x4814:
   .text:0x0000000000004814        4885C9               test rcx, rcx
   .text:0x0000000000004817        74D9                 jz code_0x47F2
   .text:0x0000000000004819 code_0x4819:
   .text:0x0000000000004819        4D85DB               test r11, r11
   .text:0x000000000000481C        74D4                 jz code_0x47F2
   .text:0x000000000000481E code_0x481E:
   .text:0x000000000000481E        4D85C9               test r9, r9
   .text:0x0000000000004821        7506                 jnz code_0x4829
   .text:0x0000000000004823 code_0x4823:
   .text:0x0000000000004823        66448911             mov word ptr [rcx], r10w
   .text:0x0000000000004827        EBDD                 jmp code_0x4806
   .text:0x0000000000004829 code_0x4829:
   .text:0x0000000000004829        4885DB               test rbx, rbx
   .text:0x000000000000482C        7506                 jnz code_0x4834
   .text:0x000000000000482E code_0x482E:
   .text:0x000000000000482E        66448911             mov word ptr [rcx], r10w
   .text:0x0000000000004832        EBBE                 jmp code_0x47F2
   .text:0x0000000000004834 code_0x4834:
   .text:0x0000000000004834        482BD9               sub rbx, rcx
   .text:0x0000000000004837        4C8BC1               mov r8, rcx
   .text:0x000000000000483A        498BF9               mov rdi, r9
   .text:0x000000000000483D        4983F9FF             cmp r9, 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000004841        7528                 jnz code_0x486B
   .text:0x0000000000004843 code_0x4843:
   .text:0x0000000000004843        420FB70403           movzx eax, word ptr [rbx+r8]
   .text:0x0000000000004848        488BFA               mov rdi, rdx
   .text:0x000000000000484B        66418900             mov word ptr [r8], ax
   .text:0x000000000000484F        4D8D4002             lea r8, [r8+0x2]
   .text:0x0000000000004853        6685C0               test ax, ax
   .text:0x0000000000004856        7406                 jz code_0x485E
   .text:0x0000000000004858 code_0x4858:
   .text:0x0000000000004858        4883EA01             sub rdx, 0x1
   .text:0x000000000000485C        75E5                 jnz code_0x4843
   .text:0x000000000000485E code_0x485E:
   .text:0x000000000000485E        6685C0               test ax, ax
   .text:0x0000000000004861        488D57FF             lea rdx, [rdi-0x1]
   .text:0x0000000000004865        480F44D7             cmove rdx, rdi
   .text:0x0000000000004869        EB27                 jmp code_0x4892
   .text:0x000000000000486B code_0x486B:
   .text:0x000000000000486B        420FB70403           movzx eax, word ptr [rbx+r8]
   .text:0x0000000000004870        66418900             mov word ptr [r8], ax
   .text:0x0000000000004874        4D8D4002             lea r8, [r8+0x2]
   .text:0x0000000000004878        6685C0               test ax, ax
   .text:0x000000000000487B        740C                 jz code_0x4889
   .text:0x000000000000487D code_0x487D:
   .text:0x000000000000487D        4883EA01             sub rdx, 0x1
   .text:0x0000000000004881        7406                 jz code_0x4889
   .text:0x0000000000004883 code_0x4883:
   .text:0x0000000000004883        4883EF01             sub rdi, 0x1
   .text:0x0000000000004887        75E2                 jnz code_0x486B
   .text:0x0000000000004889 code_0x4889:
   .text:0x0000000000004889        4885FF               test rdi, rdi
   .text:0x000000000000488C        7504                 jnz code_0x4892
   .text:0x000000000000488E code_0x488E:
   .text:0x000000000000488E        66458910             mov word ptr [r8], r10w
   .text:0x0000000000004892 code_0x4892:
   .text:0x0000000000004892        4885D2               test rdx, rdx
   .text:0x0000000000004895        0F856BFFFFFF         jnz code_0x4806
   .text:0x000000000000489B code_0x489B:
   .text:0x000000000000489B        4983F9FF             cmp r9, 0xFFFFFFFFFFFFFFFF
   .text:0x000000000000489F        750F                 jnz code_0x48B0
   .text:0x00000000000048A1 code_0x48A1:
   .text:0x00000000000048A1        6646895459FE         mov word ptr [rcx+r11*2-0x2], r10w
   .text:0x00000000000048A7        448D5250             lea r10d, [rdx+0x50]
   .text:0x00000000000048AB        E956FFFFFF           jmp code_0x4806
   .text:0x00000000000048B0 code_0x48B0:
   .text:0x00000000000048B0        66448911             mov word ptr [rcx], r10w
   .text:0x00000000000048B4        E8C3000000           call _errno; int * __cdecl( void )
   .text:0x00000000000048B9        BB22000000           mov ebx, 0x22
   .text:0x00000000000048BE        E939FFFFFF           jmp code_0x47FC
   .text:0x00000000000048C3 code_0x48C3:
   .text:0x00000000000048C3        CC                   int3
   .text:0x00000000000048C4 __acrt_errno_from_os_error:
   .text:0x00000000000048C4        33C0                 xor eax, eax
   .text:0x00000000000048C6        4C8D0D03770000       lea r9, [data_0xBFD0]
   .text:0x00000000000048CD        498BD1               mov rdx, r9
   .text:0x00000000000048D0        448D4008             lea r8d, [rax+0x8]
   .text:0x00000000000048D4 code_0x48D4:
   .text:0x00000000000048D4        3B0A                 cmp ecx, dword ptr [rdx]
   .text:0x00000000000048D6        742B                 jz code_0x4903
   .text:0x00000000000048D8 code_0x48D8:
   .text:0x00000000000048D8        FFC0                 inc eax
   .text:0x00000000000048DA        4903D0               add rdx, r8
   .text:0x00000000000048DD        83F82C               cmp eax, 0x2C
   .text:0x00000000000048E0        72F2                 jb code_0x48D4
   .text:0x00000000000048E2 code_0x48E2:
   .text:0x00000000000048E2        8D41ED               lea eax, [rcx-0x13]
   .text:0x00000000000048E5        83F811               cmp eax, 0x11
   .text:0x00000000000048E8        7706                 ja code_0x48F0
   .text:0x00000000000048EA code_0x48EA:
   .text:0x00000000000048EA        B80D000000           mov eax, 0xD
   .text:0x00000000000048EF        C3                   ret
   .text:0x00000000000048F0 code_0x48F0:
   .text:0x00000000000048F0        81C144FFFFFF         add ecx, 0xFFFFFF44
   .text:0x00000000000048F6        B816000000           mov eax, 0x16
   .text:0x00000000000048FB        83F90E               cmp ecx, 0xE
   .text:0x00000000000048FE        410F46C0             cmovbe eax, r8d
   .text:0x0000000000004902        C3                   ret
   .text:0x0000000000004903 code_0x4903:
   .text:0x0000000000004903        418B44C104           mov eax, dword ptr [r9+rax*8+0x4]
   .text:0x0000000000004908        C3                   ret
   .text:0x0000000000004909 data_0x4909:
   .text:0x0000000000004909        db 3 dup(0xCC)
   .text:0x000000000000490C __acrt_errno_map_os_error:
   .text:0x000000000000490C        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000004911        57                   push rdi
   .text:0x0000000000004912        4883EC20             sub rsp, 0x20
   .text:0x0000000000004916        8BF9                 mov edi, ecx
   .text:0x0000000000004918        E8A7FAFFFF           call __acrt_getptd_noexit; int64_t __cdecl( void )
   .text:0x000000000000491D        4885C0               test rax, rax
   .text:0x0000000000004920        7509                 jnz code_0x492B
   .text:0x0000000000004922 code_0x4922:
   .text:0x0000000000004922        488D052FF70000       lea rax, [data_0x14058]
   .text:0x0000000000004929        EB04                 jmp code_0x492F
   .text:0x000000000000492B code_0x492B:
   .text:0x000000000000492B        4883C024             add rax, 0x24
   .text:0x000000000000492F code_0x492F:
   .text:0x000000000000492F        8938                 mov dword ptr [rax], edi
   .text:0x0000000000004931        E88EFAFFFF           call __acrt_getptd_noexit; int64_t __cdecl( void )
   .text:0x0000000000004936        488D1D17F70000       lea rbx, [data_0x14054]
   .text:0x000000000000493D        4885C0               test rax, rax
   .text:0x0000000000004940        7404                 jz code_0x4946
   .text:0x0000000000004942 code_0x4942:
   .text:0x0000000000004942        488D5820             lea rbx, [rax+0x20]
   .text:0x0000000000004946 code_0x4946:
   .text:0x0000000000004946        8BCF                 mov ecx, edi
   .text:0x0000000000004948        E877FFFFFF           call __acrt_errno_from_os_error; int32_t __cdecl( int32_t p1 )
   .text:0x000000000000494D        8903                 mov dword ptr [rbx], eax
   .text:0x000000000000494F        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000004954        4883C420             add rsp, 0x20
   .text:0x0000000000004958        5F                   pop rdi
   .text:0x0000000000004959        C3                   ret
   .text:0x000000000000495A data_0x495A:
   .text:0x000000000000495A        db 2 dup(0xCC)
   .text:0x000000000000495C __doserrno:
   .text:0x000000000000495C        4883EC28             sub rsp, 0x28
   .text:0x0000000000004960        E85FFAFFFF           call __acrt_getptd_noexit; int64_t __cdecl( void )
   .text:0x0000000000004965        4885C0               test rax, rax
   .text:0x0000000000004968        7509                 jnz code_0x4973
   .text:0x000000000000496A code_0x496A:
   .text:0x000000000000496A        488D05E7F60000       lea rax, [data_0x14058]
   .text:0x0000000000004971        EB04                 jmp code_0x4977
   .text:0x0000000000004973 code_0x4973:
   .text:0x0000000000004973        4883C024             add rax, 0x24
   .text:0x0000000000004977 code_0x4977:
   .text:0x0000000000004977        4883C428             add rsp, 0x28
   .text:0x000000000000497B        C3                   ret
   .text:0x000000000000497C _errno:
   .text:0x000000000000497C        4883EC28             sub rsp, 0x28
   .text:0x0000000000004980        E83FFAFFFF           call __acrt_getptd_noexit; int64_t __cdecl( void )
   .text:0x0000000000004985        4885C0               test rax, rax
   .text:0x0000000000004988        7509                 jnz code_0x4993
   .text:0x000000000000498A code_0x498A:
   .text:0x000000000000498A        488D05C3F60000       lea rax, [data_0x14054]
   .text:0x0000000000004991        EB04                 jmp code_0x4997
   .text:0x0000000000004993 code_0x4993:
   .text:0x0000000000004993        4883C020             add rax, 0x20
   .text:0x0000000000004997 code_0x4997:
   .text:0x0000000000004997        4883C428             add rsp, 0x28
   .text:0x000000000000499B        C3                   ret
   .text:0x000000000000499C _calloc_base:
   .text:0x000000000000499C        4053                 push rbx
   .text:0x000000000000499E        4883EC20             sub rsp, 0x20
   .text:0x00000000000049A2        4C8BC2               mov r8, rdx
   .text:0x00000000000049A5        488BD9               mov rbx, rcx
   .text:0x00000000000049A8        4885C9               test rcx, rcx
   .text:0x00000000000049AB        740E                 jz code_0x49BB
   .text:0x00000000000049AD code_0x49AD:
   .text:0x00000000000049AD        33D2                 xor edx, edx
   .text:0x00000000000049AF        488D42E0             lea rax, [rdx-0x20]
   .text:0x00000000000049B3        48F7F3               div rbx
   .text:0x00000000000049B6        493BC0               cmp rax, r8
   .text:0x00000000000049B9        7243                 jb code_0x49FE
   .text:0x00000000000049BB code_0x49BB:
   .text:0x00000000000049BB        490FAFD8             imul rbx, r8
   .text:0x00000000000049BF        B801000000           mov eax, 0x1
   .text:0x00000000000049C4        4885DB               test rbx, rbx
   .text:0x00000000000049C7        480F44D8             cmove rbx, rax
   .text:0x00000000000049CB        EB15                 jmp code_0x49E2
   .text:0x00000000000049CD code_0x49CD:
   .text:0x00000000000049CD        E802EDFFFF           call _query_new_mode; inline int32_t __cdecl( void )
   .text:0x00000000000049D2        85C0                 test eax, eax
   .text:0x00000000000049D4        7428                 jz code_0x49FE
   .text:0x00000000000049D6 code_0x49D6:
   .text:0x00000000000049D6        488BCB               mov rcx, rbx
   .text:0x00000000000049D9        E8C6280000           call _callnewh; int __cdecl( unsigned long long _Size )
   .text:0x00000000000049DE        85C0                 test eax, eax
   .text:0x00000000000049E0        741C                 jz code_0x49FE
   .text:0x00000000000049E2 code_0x49E2:
   .text:0x00000000000049E2        488B0DEF0B0100       mov rcx, qword ptr [data_0x155D8]
   .text:0x00000000000049E9        4C8BC3               mov r8, rbx
   .text:0x00000000000049EC        BA08000000           mov edx, 0x8
   .text:0x00000000000049F1        FF1539670000         call qword ptr [HeapAlloc]; void * (__cdecl *)( void * hHeap, unsigned long dwFlags, unsigned long long dwBytes )
   .text:0x00000000000049F7        4885C0               test rax, rax
   .text:0x00000000000049FA        74D1                 jz code_0x49CD
   .text:0x00000000000049FC code_0x49FC:
   .text:0x00000000000049FC        EB0D                 jmp code_0x4A0B
   .text:0x00000000000049FE code_0x49FE:
   .text:0x00000000000049FE        E879FFFFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000004A03        C7000C000000         mov dword ptr [rax], 0xC
   .text:0x0000000000004A09        33C0                 xor eax, eax
   .text:0x0000000000004A0B code_0x4A0B:
   .text:0x0000000000004A0B        4883C420             add rsp, 0x20
   .text:0x0000000000004A0F        5B                   pop rbx
   .text:0x0000000000004A10        C3                   ret
   .text:0x0000000000004A11 data_0x4A11:
   .text:0x0000000000004A11        db 3 dup(0xCC)
   .text:0x0000000000004A14 _free_base:
   .text:0x0000000000004A14        4885C9               test rcx, rcx
   .text:0x0000000000004A17        7437                 jz code_0x4A50
   .text:0x0000000000004A19 code_0x4A19:
   .text:0x0000000000004A19        53                   push rbx
   .text:0x0000000000004A1A        4883EC20             sub rsp, 0x20
   .text:0x0000000000004A1E        4C8BC1               mov r8, rcx
   .text:0x0000000000004A21        33D2                 xor edx, edx
   .text:0x0000000000004A23        488B0DAE0B0100       mov rcx, qword ptr [data_0x155D8]
   .text:0x0000000000004A2A        FF1508670000         call qword ptr [HeapFree]; int (__cdecl *)( void * hHeap, unsigned long dwFlags, void * lpMem )
   .text:0x0000000000004A30        85C0                 test eax, eax
   .text:0x0000000000004A32        7517                 jnz code_0x4A4B
   .text:0x0000000000004A34 code_0x4A34:
   .text:0x0000000000004A34        E843FFFFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000004A39        488BD8               mov rbx, rax
   .text:0x0000000000004A3C        FF154E660000         call qword ptr [GetLastError]; unsigned long (__cdecl *)( void )
   .text:0x0000000000004A42        8BC8                 mov ecx, eax
   .text:0x0000000000004A44        E87BFEFFFF           call __acrt_errno_from_os_error; int32_t __cdecl( int32_t p1 )
   .text:0x0000000000004A49        8903                 mov dword ptr [rbx], eax
   .text:0x0000000000004A4B code_0x4A4B:
   .text:0x0000000000004A4B        4883C420             add rsp, 0x20
   .text:0x0000000000004A4F        5B                   pop rbx
   .text:0x0000000000004A50 code_0x4A50:
   .text:0x0000000000004A50        C3                   ret
   .text:0x0000000000004A51 data_0x4A51:
   .text:0x0000000000004A51        db 3 dup(0xCC)
   .text:0x0000000000004A54 data_0x4A54:
   .text:0x0000000000004A54        dq 0xFFC8830473CA3B48
   .text:0x0000000000004A5C        dq 0x970FCA3B48C033C3
   .text:0x0000000000004A64        dw 0xC3C0
   .text:0x0000000000004A66 data_0x4A66:
   .text:0x0000000000004A66        db 2 dup(0xCC)
   .text:0x0000000000004A68 func_0x4A68:
   .text:0x0000000000004A68        48895C2418           mov qword ptr [rsp+0x18], rbx
   .text:0x0000000000004A6D        55                   push rbp
   .text:0x0000000000004A6E        56                   push rsi
   .text:0x0000000000004A6F        57                   push rdi
   .text:0x0000000000004A70        4154                 push r12
   .text:0x0000000000004A72        4155                 push r13
   .text:0x0000000000004A74        4156                 push r14
   .text:0x0000000000004A76        4157                 push r15
   .text:0x0000000000004A78        488BEC               mov rbp, rsp
   .text:0x0000000000004A7B        4881EC80000000       sub rsp, 0x80
   .text:0x0000000000004A82        488B059FF50000       mov rax, qword ptr [__security_cookie]
   .text:0x0000000000004A89        4833C4               xor rax, rsp
   .text:0x0000000000004A8C        488945F0             mov qword ptr [rbp-0x10], rax
   .text:0x0000000000004A90        33FF                 xor edi, edi
   .text:0x0000000000004A92        488955E0             mov qword ptr [rbp-0x20], rdx
   .text:0x0000000000004A96        488BD9               mov rbx, rcx
   .text:0x0000000000004A99        4885D2               test rdx, rdx
   .text:0x0000000000004A9C        7516                 jnz code_0x4AB4
   .text:0x0000000000004A9E code_0x4A9E:
   .text:0x0000000000004A9E        E8D9FEFFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000004AA3        8D5F16               lea ebx, [rdi+0x16]
   .text:0x0000000000004AA6        8918                 mov dword ptr [rax], ebx
   .text:0x0000000000004AA8        E843FCFFFF           call _invalid_parameter_noinfo; void __cdecl( void )
   .text:0x0000000000004AAD        8BC3                 mov eax, ebx
   .text:0x0000000000004AAF        E9A7010000           jmp code_0x4C5B
   .text:0x0000000000004AB4 code_0x4AB4:
   .text:0x0000000000004AB4        0F57C0               xorps xmm0, xmm0
   .text:0x0000000000004AB7        48893A               mov qword ptr [rdx], rdi
   .text:0x0000000000004ABA        488B01               mov rax, qword ptr [rcx]
   .text:0x0000000000004ABD        F30F7F45B8           movdqu xmmword ptr [rbp-0x48], xmm0
   .text:0x0000000000004AC2        48897DC8             mov qword ptr [rbp-0x38], rdi
   .text:0x0000000000004AC6 code_0x4AC6:
   .text:0x0000000000004AC6        4885C0               test rax, rax
   .text:0x0000000000004AC9        7457                 jz code_0x4B22
   .text:0x0000000000004ACB code_0x4ACB:
   .text:0x0000000000004ACB        488D55E8             lea rdx, [rbp-0x18]
   .text:0x0000000000004ACF        C745E82A003F00       mov dword ptr [rbp-0x18], 0x3F002A
   .text:0x0000000000004AD6        488BC8               mov rcx, rax
   .text:0x0000000000004AD9        66897DEC             mov word ptr [rbp-0x14], di
   .text:0x0000000000004ADD        E8F61A0000           call wcspbrk; unsigned short * __cdecl( unsigned short * _String, unsigned short * _Control )
   .text:0x0000000000004AE2        488B0B               mov rcx, qword ptr [rbx]
   .text:0x0000000000004AE5        4885C0               test rax, rax
   .text:0x0000000000004AE8        7510                 jnz code_0x4AFA
   .text:0x0000000000004AEA code_0x4AEA:
   .text:0x0000000000004AEA        4C8D4DB8             lea r9, [rbp-0x48]
   .text:0x0000000000004AEE        4533C0               xor r8d, r8d
   .text:0x0000000000004AF1        33D2                 xor edx, edx
   .text:0x0000000000004AF3        E8A0010000           call func_0x4C98; int32_t __cdecl( int64_t p1, int64_t p2, int64_t p3, int64_t p4 )
   .text:0x0000000000004AF8        EB0C                 jmp code_0x4B06
   .text:0x0000000000004AFA code_0x4AFA:
   .text:0x0000000000004AFA        4C8D45B8             lea r8, [rbp-0x48]
   .text:0x0000000000004AFE        488BD0               mov rdx, rax
   .text:0x0000000000004B01        E832030000           call expand_argument_wildcards<wchar_t>; int __cdecl( const wchar_t * p1, const wchar_t * p2, class `anonymous namespace'::argument_list<wchar_t> & p3 )
   .text:0x0000000000004B06 code_0x4B06:
   .text:0x0000000000004B06        8BF0                 mov esi, eax
   .text:0x0000000000004B08        85C0                 test eax, eax
   .text:0x0000000000004B0A        7509                 jnz code_0x4B15
   .text:0x0000000000004B0C code_0x4B0C:
   .text:0x0000000000004B0C        4883C308             add rbx, 0x8
   .text:0x0000000000004B10        488B03               mov rax, qword ptr [rbx]
   .text:0x0000000000004B13        EBB1                 jmp code_0x4AC6
   .text:0x0000000000004B15 code_0x4B15:
   .text:0x0000000000004B15        4C8B65C0             mov r12, qword ptr [rbp-0x40]
   .text:0x0000000000004B19        4C8B7DB8             mov r15, qword ptr [rbp-0x48]
   .text:0x0000000000004B1D        E9FE000000           jmp code_0x4C20
   .text:0x0000000000004B22 code_0x4B22:
   .text:0x0000000000004B22        4C8B7DB8             mov r15, qword ptr [rbp-0x48]
   .text:0x0000000000004B26        4C8BCF               mov r9, rdi
   .text:0x0000000000004B29        4C8B65C0             mov r12, qword ptr [rbp-0x40]
   .text:0x0000000000004B2D        498BD7               mov rdx, r15
   .text:0x0000000000004B30        498BC4               mov rax, r12
   .text:0x0000000000004B33        48897DE8             mov qword ptr [rbp-0x18], rdi
   .text:0x0000000000004B37        492BC7               sub rax, r15
   .text:0x0000000000004B3A        4C8BC7               mov r8, rdi
   .text:0x0000000000004B3D        4C8BF0               mov r14, rax
   .text:0x0000000000004B40        49C1FE03             sar r14, 0x3
   .text:0x0000000000004B44        49FFC6               inc r14
   .text:0x0000000000004B47        488D4807             lea rcx, [rax+0x7]
   .text:0x0000000000004B4B        48C1E903             shr rcx, 0x3
   .text:0x0000000000004B4F        4D3BFC               cmp r15, r12
   .text:0x0000000000004B52        480F47CF             cmova rcx, rdi
   .text:0x0000000000004B56        4883CEFF             or rsi, 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000004B5A        4885C9               test rcx, rcx
   .text:0x0000000000004B5D        7426                 jz code_0x4B85
   .text:0x0000000000004B5F code_0x4B5F:
   .text:0x0000000000004B5F        4C8B12               mov r10, qword ptr [rdx]
   .text:0x0000000000004B62        488BC6               mov rax, rsi
   .text:0x0000000000004B65 code_0x4B65:
   .text:0x0000000000004B65        48FFC0               inc rax
   .text:0x0000000000004B68        6641393C42           cmp word ptr [r10+rax*2], di
   .text:0x0000000000004B6D        75F6                 jnz code_0x4B65
   .text:0x0000000000004B6F code_0x4B6F:
   .text:0x0000000000004B6F        49FFC1               inc r9
   .text:0x0000000000004B72        4883C208             add rdx, 0x8
   .text:0x0000000000004B76        4C03C8               add r9, rax
   .text:0x0000000000004B79        49FFC0               inc r8
   .text:0x0000000000004B7C        4C3BC1               cmp r8, rcx
   .text:0x0000000000004B7F        75DE                 jnz code_0x4B5F
   .text:0x0000000000004B81 code_0x4B81:
   .text:0x0000000000004B81        4C894DE8             mov qword ptr [rbp-0x18], r9
   .text:0x0000000000004B85 code_0x4B85:
   .text:0x0000000000004B85        41B802000000         mov r8d, 0x2
   .text:0x0000000000004B8B        498BD1               mov rdx, r9
   .text:0x0000000000004B8E        498BCE               mov rcx, r14
   .text:0x0000000000004B91        E8CEE1FFFF           call __acrt_allocate_buffer_for_argv; int32_t __cdecl( int64_t p1, int64_t p2, int64_t p3 )
   .text:0x0000000000004B96        488BD8               mov rbx, rax
   .text:0x0000000000004B99        4885C0               test rax, rax
   .text:0x0000000000004B9C        747B                 jz code_0x4C19
   .text:0x0000000000004B9E code_0x4B9E:
   .text:0x0000000000004B9E        4A8D14F0             lea rdx, [rax+r14*8]
   .text:0x0000000000004BA2        4D8BF7               mov r14, r15
   .text:0x0000000000004BA5        488955D8             mov qword ptr [rbp-0x28], rdx
   .text:0x0000000000004BA9        488BCA               mov rcx, rdx
   .text:0x0000000000004BAC        488955B0             mov qword ptr [rbp-0x50], rdx
   .text:0x0000000000004BB0        4D3BFC               cmp r15, r12
   .text:0x0000000000004BB3        745B                 jz code_0x4C10
   .text:0x0000000000004BB5 code_0x4BB5:
   .text:0x0000000000004BB5        492BC7               sub rax, r15
   .text:0x0000000000004BB8        488945D0             mov qword ptr [rbp-0x30], rax
   .text:0x0000000000004BBC code_0x4BBC:
   .text:0x0000000000004BBC        4D8B06               mov r8, qword ptr [r14]
   .text:0x0000000000004BBF        4C8BEE               mov r13, rsi
   .text:0x0000000000004BC2 code_0x4BC2:
   .text:0x0000000000004BC2        49FFC5               inc r13
   .text:0x0000000000004BC5        6643393C68           cmp word ptr [r8+r13*2], di
   .text:0x0000000000004BCA        75F6                 jnz code_0x4BC2
   .text:0x0000000000004BCC code_0x4BCC:
   .text:0x0000000000004BCC        488BC1               mov rax, rcx
   .text:0x0000000000004BCF        49FFC5               inc r13
   .text:0x0000000000004BD2        482BC2               sub rax, rdx
   .text:0x0000000000004BD5        4D8BCD               mov r9, r13
   .text:0x0000000000004BD8        488B55E8             mov rdx, qword ptr [rbp-0x18]
   .text:0x0000000000004BDC        48D1F8               sar rax, 1
   .text:0x0000000000004BDF        482BD0               sub rdx, rax
   .text:0x0000000000004BE2        E8E9FBFFFF           call wcsncpy_s; int __cdecl( unsigned short * _Destination, unsigned long long _SizeInWords, unsigned short * _Source, unsigned long long _MaxCount )
   .text:0x0000000000004BE7        85C0                 test eax, eax
   .text:0x0000000000004BE9        0F8593000000         jnz code_0x4C82
   .text:0x0000000000004BEF code_0x4BEF:
   .text:0x0000000000004BEF        488B4DB0             mov rcx, qword ptr [rbp-0x50]
   .text:0x0000000000004BF3        488B45D0             mov rax, qword ptr [rbp-0x30]
   .text:0x0000000000004BF7        488B55D8             mov rdx, qword ptr [rbp-0x28]
   .text:0x0000000000004BFB        4A890C30             mov qword ptr [rax+r14], rcx
   .text:0x0000000000004BFF        4983C608             add r14, 0x8
   .text:0x0000000000004C03        4A8D0C69             lea rcx, [rcx+r13*2]
   .text:0x0000000000004C07        48894DB0             mov qword ptr [rbp-0x50], rcx
   .text:0x0000000000004C0B        4D3BF4               cmp r14, r12
   .text:0x0000000000004C0E        75AC                 jnz code_0x4BBC
   .text:0x0000000000004C10 code_0x4C10:
   .text:0x0000000000004C10        488B45E0             mov rax, qword ptr [rbp-0x20]
   .text:0x0000000000004C14        8BF7                 mov esi, edi
   .text:0x0000000000004C16        488918               mov qword ptr [rax], rbx
   .text:0x0000000000004C19 code_0x4C19:
   .text:0x0000000000004C19        33C9                 xor ecx, ecx
   .text:0x0000000000004C1B        E8F4FDFFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000004C20 code_0x4C20:
   .text:0x0000000000004C20        498BDC               mov rbx, r12
   .text:0x0000000000004C23        4D8BF7               mov r14, r15
   .text:0x0000000000004C26        492BDF               sub rbx, r15
   .text:0x0000000000004C29        4883C307             add rbx, 0x7
   .text:0x0000000000004C2D        48C1EB03             shr rbx, 0x3
   .text:0x0000000000004C31        4D3BFC               cmp r15, r12
   .text:0x0000000000004C34        480F47DF             cmova rbx, rdi
   .text:0x0000000000004C38        4885DB               test rbx, rbx
   .text:0x0000000000004C3B        7414                 jz code_0x4C51
   .text:0x0000000000004C3D code_0x4C3D:
   .text:0x0000000000004C3D        498B0E               mov rcx, qword ptr [r14]
   .text:0x0000000000004C40        E8CFFDFFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000004C45        48FFC7               inc rdi
   .text:0x0000000000004C48        4D8D7608             lea r14, [r14+0x8]
   .text:0x0000000000004C4C        483BFB               cmp rdi, rbx
   .text:0x0000000000004C4F        75EC                 jnz code_0x4C3D
   .text:0x0000000000004C51 code_0x4C51:
   .text:0x0000000000004C51        498BCF               mov rcx, r15
   .text:0x0000000000004C54        E8BBFDFFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000004C59        8BC6                 mov eax, esi
   .text:0x0000000000004C5B code_0x4C5B:
   .text:0x0000000000004C5B        488B4DF0             mov rcx, qword ptr [rbp-0x10]
   .text:0x0000000000004C5F        4833CC               xor rcx, rsp
   .text:0x0000000000004C62        E8E95B0000           call __security_check_cookie; noclobber void __cdecl( uint64_t p1 )
   .text:0x0000000000004C67        488B9C24D0000000     mov rbx, qword ptr [rsp+0xD0]
   .text:0x0000000000004C6F        4881C480000000       add rsp, 0x80
   .text:0x0000000000004C76        415F                 pop r15
   .text:0x0000000000004C78        415E                 pop r14
   .text:0x0000000000004C7A        415D                 pop r13
   .text:0x0000000000004C7C        415C                 pop r12
   .text:0x0000000000004C7E        5F                   pop rdi
   .text:0x0000000000004C7F        5E                   pop rsi
   .text:0x0000000000004C80        5D                   pop rbp
   .text:0x0000000000004C81        C3                   ret
   .text:0x0000000000004C82 code_0x4C82:
   .text:0x0000000000004C82        4533C9               xor r9d, r9d
   .text:0x0000000000004C85        48897C2420           mov qword ptr [rsp+0x20], rdi
   .text:0x0000000000004C8A        4533C0               xor r8d, r8d
   .text:0x0000000000004C8D        33D2                 xor edx, edx
   .text:0x0000000000004C8F        33C9                 xor ecx, ecx
   .text:0x0000000000004C91        E87AFAFFFF           call _invoke_watson; noreturn void __cdecl( unsigned short * _Expression, unsigned short * _FunctionName, unsigned short * _FileName, unsigned int _LineNo, unsigned long long _Reserved )
   .text:0x0000000000004C96 data_0x4C96:
   .text:0x0000000000004C96        db 2 dup(0xCC)
   .text:0x0000000000004C98 func_0x4C98:
   .text:0x0000000000004C98        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000004C9D        48896C2410           mov qword ptr [rsp+0x10], rbp
   .text:0x0000000000004CA2        4889742418           mov qword ptr [rsp+0x18], rsi
   .text:0x0000000000004CA7        57                   push rdi
   .text:0x0000000000004CA8        4154                 push r12
   .text:0x0000000000004CAA        4155                 push r13
   .text:0x0000000000004CAC        4156                 push r14
   .text:0x0000000000004CAE        4157                 push r15
   .text:0x0000000000004CB0        4883EC30             sub rsp, 0x30
   .text:0x0000000000004CB4        4883CDFF             or rbp, 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000004CB8        498BF1               mov rsi, r9
   .text:0x0000000000004CBB        33FF                 xor edi, edi
   .text:0x0000000000004CBD        4D8BF0               mov r14, r8
   .text:0x0000000000004CC0        4C8BEA               mov r13, rdx
   .text:0x0000000000004CC3        4C8BE1               mov r12, rcx
   .text:0x0000000000004CC6 code_0x4CC6:
   .text:0x0000000000004CC6        48FFC5               inc rbp
   .text:0x0000000000004CC9        66393C69             cmp word ptr [rcx+rbp*2], di
   .text:0x0000000000004CCD        75F7                 jnz code_0x4CC6
   .text:0x0000000000004CCF code_0x4CCF:
   .text:0x0000000000004CCF        498BC6               mov rax, r14
   .text:0x0000000000004CD2        48FFC5               inc rbp
   .text:0x0000000000004CD5        48F7D0               not rax
   .text:0x0000000000004CD8        483BE8               cmp rbp, rax
   .text:0x0000000000004CDB        7622                 jbe code_0x4CFF
   .text:0x0000000000004CDD code_0x4CDD:
   .text:0x0000000000004CDD        B80C000000           mov eax, 0xC
   .text:0x0000000000004CE2 code_0x4CE2:
   .text:0x0000000000004CE2        488B5C2460           mov rbx, qword ptr [rsp+0x60]
   .text:0x0000000000004CE7        488B6C2468           mov rbp, qword ptr [rsp+0x68]
   .text:0x0000000000004CEC        488B742470           mov rsi, qword ptr [rsp+0x70]
   .text:0x0000000000004CF1        4883C430             add rsp, 0x30
   .text:0x0000000000004CF5        415F                 pop r15
   .text:0x0000000000004CF7        415E                 pop r14
   .text:0x0000000000004CF9        415D                 pop r13
   .text:0x0000000000004CFB        415C                 pop r12
   .text:0x0000000000004CFD        5F                   pop rdi
   .text:0x0000000000004CFE        C3                   ret
   .text:0x0000000000004CFF code_0x4CFF:
   .text:0x0000000000004CFF        4D8D7801             lea r15, [r8+0x1]
   .text:0x0000000000004D03        BA02000000           mov edx, 0x2
   .text:0x0000000000004D08        4C03FD               add r15, rbp
   .text:0x0000000000004D0B        498BCF               mov rcx, r15
   .text:0x0000000000004D0E        E889FCFFFF           call _calloc_base; void * __cdecl( unsigned long long _Count, unsigned long long _Size )
   .text:0x0000000000004D13        488BD8               mov rbx, rax
   .text:0x0000000000004D16        4D85F6               test r14, r14
   .text:0x0000000000004D19        7419                 jz code_0x4D34
   .text:0x0000000000004D1B code_0x4D1B:
   .text:0x0000000000004D1B        4D8BCE               mov r9, r14
   .text:0x0000000000004D1E        4D8BC5               mov r8, r13
   .text:0x0000000000004D21        498BD7               mov rdx, r15
   .text:0x0000000000004D24        488BC8               mov rcx, rax
   .text:0x0000000000004D27        E8A4FAFFFF           call wcsncpy_s; int __cdecl( unsigned short * _Destination, unsigned long long _SizeInWords, unsigned short * _Source, unsigned long long _MaxCount )
   .text:0x0000000000004D2C        85C0                 test eax, eax
   .text:0x0000000000004D2E        0F85D8000000         jnz code_0x4E0C
   .text:0x0000000000004D34 code_0x4D34:
   .text:0x0000000000004D34        4D2BFE               sub r15, r14
   .text:0x0000000000004D37        4A8D0C73             lea rcx, [rbx+r14*2]
   .text:0x0000000000004D3B        498BD7               mov rdx, r15
   .text:0x0000000000004D3E        4C8BCD               mov r9, rbp
   .text:0x0000000000004D41        4D8BC4               mov r8, r12
   .text:0x0000000000004D44        E887FAFFFF           call wcsncpy_s; int __cdecl( unsigned short * _Destination, unsigned long long _SizeInWords, unsigned short * _Source, unsigned long long _MaxCount )
   .text:0x0000000000004D49        85C0                 test eax, eax
   .text:0x0000000000004D4B        0F85D0000000         jnz code_0x4E21
   .text:0x0000000000004D51 code_0x4D51:
   .text:0x0000000000004D51        488B4E08             mov rcx, qword ptr [rsi+0x8]
   .text:0x0000000000004D55        448D7808             lea r15d, [rax+0x8]
   .text:0x0000000000004D59        4C8B7610             mov r14, qword ptr [rsi+0x10]
   .text:0x0000000000004D5D        493BCE               cmp rcx, r14
   .text:0x0000000000004D60        0F859D000000         jnz code_0x4E03
   .text:0x0000000000004D66 code_0x4D66:
   .text:0x0000000000004D66        48393E               cmp qword ptr [rsi], rdi
   .text:0x0000000000004D69        752B                 jnz code_0x4D96
   .text:0x0000000000004D6B code_0x4D6B:
   .text:0x0000000000004D6B        418BD7               mov edx, r15d
   .text:0x0000000000004D6E        8D4804               lea ecx, [rax+0x4]
   .text:0x0000000000004D71        E826FCFFFF           call _calloc_base; void * __cdecl( unsigned long long _Count, unsigned long long _Size )
   .text:0x0000000000004D76        33C9                 xor ecx, ecx
   .text:0x0000000000004D78        488906               mov qword ptr [rsi], rax
   .text:0x0000000000004D7B        E894FCFFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000004D80        488B0E               mov rcx, qword ptr [rsi]
   .text:0x0000000000004D83        4885C9               test rcx, rcx
   .text:0x0000000000004D86        7442                 jz code_0x4DCA
   .text:0x0000000000004D88 code_0x4D88:
   .text:0x0000000000004D88        488D4120             lea rax, [rcx+0x20]
   .text:0x0000000000004D8C        48894E08             mov qword ptr [rsi+0x8], rcx
   .text:0x0000000000004D90        48894610             mov qword ptr [rsi+0x10], rax
   .text:0x0000000000004D94        EB6D                 jmp code_0x4E03
   .text:0x0000000000004D96 code_0x4D96:
   .text:0x0000000000004D96        4C2B36               sub r14, qword ptr [rsi]
   .text:0x0000000000004D99        48B8FFFFFFFFFFFFFF7F mov rax, 0x7FFFFFFFFFFFFFFF
   .text:0x0000000000004DA3        49C1FE03             sar r14, 0x3
   .text:0x0000000000004DA7        4C3BF0               cmp r14, rax
   .text:0x0000000000004DAA        771E                 ja code_0x4DCA
   .text:0x0000000000004DAC code_0x4DAC:
   .text:0x0000000000004DAC        488B0E               mov rcx, qword ptr [rsi]
   .text:0x0000000000004DAF        4B8D2C36             lea rbp, [r14+r14]
   .text:0x0000000000004DB3        488BD5               mov rdx, rbp
   .text:0x0000000000004DB6        4D8BC7               mov r8, r15
   .text:0x0000000000004DB9        E85A230000           call func_0x7118; int64_t __cdecl( int64_t p1, int64_t p2, int64_t p3 )
   .text:0x0000000000004DBE        4885C0               test rax, rax
   .text:0x0000000000004DC1        7522                 jnz code_0x4DE5
   .text:0x0000000000004DC3 code_0x4DC3:
   .text:0x0000000000004DC3        33C9                 xor ecx, ecx
   .text:0x0000000000004DC5        E84AFCFFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000004DCA code_0x4DCA:
   .text:0x0000000000004DCA        488BCB               mov rcx, rbx
   .text:0x0000000000004DCD        E842FCFFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000004DD2        BF0C000000           mov edi, 0xC
   .text:0x0000000000004DD7 code_0x4DD7:
   .text:0x0000000000004DD7        33C9                 xor ecx, ecx
   .text:0x0000000000004DD9        E836FCFFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000004DDE        8BC7                 mov eax, edi
   .text:0x0000000000004DE0        E9FDFEFFFF           jmp code_0x4CE2
   .text:0x0000000000004DE5 code_0x4DE5:
   .text:0x0000000000004DE5        4A8D0CF0             lea rcx, [rax+r14*8]
   .text:0x0000000000004DE9        488906               mov qword ptr [rsi], rax
   .text:0x0000000000004DEC        48894E08             mov qword ptr [rsi+0x8], rcx
   .text:0x0000000000004DF0        488D0CE8             lea rcx, [rax+rbp*8]
   .text:0x0000000000004DF4        48894E10             mov qword ptr [rsi+0x10], rcx
   .text:0x0000000000004DF8        33C9                 xor ecx, ecx
   .text:0x0000000000004DFA        E815FCFFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000004DFF        488B4E08             mov rcx, qword ptr [rsi+0x8]
   .text:0x0000000000004E03 code_0x4E03:
   .text:0x0000000000004E03        488919               mov qword ptr [rcx], rbx
   .text:0x0000000000004E06        4C017E08             add qword ptr [rsi+0x8], r15
   .text:0x0000000000004E0A        EBCB                 jmp code_0x4DD7
   .text:0x0000000000004E0C code_0x4E0C:
   .text:0x0000000000004E0C        4533C9               xor r9d, r9d
   .text:0x0000000000004E0F        48897C2420           mov qword ptr [rsp+0x20], rdi
   .text:0x0000000000004E14        4533C0               xor r8d, r8d
   .text:0x0000000000004E17        33D2                 xor edx, edx
   .text:0x0000000000004E19        33C9                 xor ecx, ecx
   .text:0x0000000000004E1B        E8F0F8FFFF           call _invoke_watson; noreturn void __cdecl( unsigned short * _Expression, unsigned short * _FunctionName, unsigned short * _FileName, unsigned int _LineNo, unsigned long long _Reserved )
   .text:0x0000000000004E20 code_0x4E20:
   .text:0x0000000000004E20        CC                   int3
   .text:0x0000000000004E21 code_0x4E21:
   .text:0x0000000000004E21        4533C9               xor r9d, r9d
   .text:0x0000000000004E24        48897C2420           mov qword ptr [rsp+0x20], rdi
   .text:0x0000000000004E29        4533C0               xor r8d, r8d
   .text:0x0000000000004E2C        33D2                 xor edx, edx
   .text:0x0000000000004E2E        33C9                 xor ecx, ecx
   .text:0x0000000000004E30        E8DBF8FFFF           call _invoke_watson; noreturn void __cdecl( unsigned short * _Expression, unsigned short * _FunctionName, unsigned short * _FileName, unsigned int _LineNo, unsigned long long _Reserved )
   .text:0x0000000000004E35 data_0x4E35:
   .text:0x0000000000004E35        db 3 dup(0xCC)
   .text:0x0000000000004E38 expand_argument_wildcards<wchar_t>:
   .text:0x0000000000004E38        48895C2420           mov qword ptr [rsp+0x20], rbx
   .text:0x0000000000004E3D        55                   push rbp
   .text:0x0000000000004E3E        56                   push rsi
   .text:0x0000000000004E3F        57                   push rdi
   .text:0x0000000000004E40        4156                 push r14
   .text:0x0000000000004E42        4157                 push r15
   .text:0x0000000000004E44        4881EC90020000       sub rsp, 0x290
   .text:0x0000000000004E4B        488B05D6F10000       mov rax, qword ptr [__security_cookie]
   .text:0x0000000000004E52        4833C4               xor rax, rsp
   .text:0x0000000000004E55        4889842480020000     mov qword ptr [rsp+0x280], rax
   .text:0x0000000000004E5D        4D8BF0               mov r14, r8
   .text:0x0000000000004E60        49B80108000000200000 mov r8, 0x200000000801
   .text:0x0000000000004E6A        488BE9               mov rbp, rcx
   .text:0x0000000000004E6D        483BD1               cmp rdx, rcx
   .text:0x0000000000004E70        741F                 jz code_0x4E91
   .text:0x0000000000004E72 code_0x4E72:
   .text:0x0000000000004E72        0FB702               movzx eax, word ptr [rdx]
   .text:0x0000000000004E75        6683E82F             sub ax, 0x2F
   .text:0x0000000000004E79        6683F82D             cmp ax, 0x2D
   .text:0x0000000000004E7D        7709                 ja code_0x4E88
   .text:0x0000000000004E7F code_0x4E7F:
   .text:0x0000000000004E7F        0FB7C0               movzx eax, ax
   .text:0x0000000000004E82        490FA3C0             bt r8, rax
   .text:0x0000000000004E86        7209                 jb code_0x4E91
   .text:0x0000000000004E88 code_0x4E88:
   .text:0x0000000000004E88        4883EA02             sub rdx, 0x2
   .text:0x0000000000004E8C        483BD5               cmp rdx, rbp
   .text:0x0000000000004E8F        75E1                 jnz code_0x4E72
   .text:0x0000000000004E91 code_0x4E91:
   .text:0x0000000000004E91        0FB70A               movzx ecx, word ptr [rdx]
   .text:0x0000000000004E94        6683F93A             cmp cx, 0x3A
   .text:0x0000000000004E98        751E                 jnz code_0x4EB8
   .text:0x0000000000004E9A code_0x4E9A:
   .text:0x0000000000004E9A        488D4502             lea rax, [rbp+0x2]
   .text:0x0000000000004E9E        483BD0               cmp rdx, rax
   .text:0x0000000000004EA1        7415                 jz code_0x4EB8
   .text:0x0000000000004EA3 code_0x4EA3:
   .text:0x0000000000004EA3        4D8BCE               mov r9, r14
   .text:0x0000000000004EA6        4533C0               xor r8d, r8d
   .text:0x0000000000004EA9        33D2                 xor edx, edx
   .text:0x0000000000004EAB        488BCD               mov rcx, rbp
   .text:0x0000000000004EAE        E8E5FDFFFF           call func_0x4C98; int32_t __cdecl( int64_t p1, int64_t p2, int64_t p3, int64_t p4 )
   .text:0x0000000000004EB3        E985000000           jmp code_0x4F3D
   .text:0x0000000000004EB8 code_0x4EB8:
   .text:0x0000000000004EB8        6683E92F             sub cx, 0x2F
   .text:0x0000000000004EBC        33FF                 xor edi, edi
   .text:0x0000000000004EBE        6683F92D             cmp cx, 0x2D
   .text:0x0000000000004EC2        770B                 ja code_0x4ECF
   .text:0x0000000000004EC4 code_0x4EC4:
   .text:0x0000000000004EC4        0FB7C1               movzx eax, cx
   .text:0x0000000000004EC7        490FA3C0             bt r8, rax
   .text:0x0000000000004ECB        B001                 mov al, 0x1
   .text:0x0000000000004ECD        7203                 jb code_0x4ED2
   .text:0x0000000000004ECF code_0x4ECF:
   .text:0x0000000000004ECF        408AC7               mov al, dil
   .text:0x0000000000004ED2 code_0x4ED2:
   .text:0x0000000000004ED2        482BD5               sub rdx, rbp
   .text:0x0000000000004ED5        488D4C2430           lea rcx, [rsp+0x30]
   .text:0x0000000000004EDA        48D1FA               sar rdx, 1
   .text:0x0000000000004EDD        41B850020000         mov r8d, 0x250
   .text:0x0000000000004EE3        48FFC2               inc rdx
   .text:0x0000000000004EE6        F6D8                 neg al
   .text:0x0000000000004EE8        4D1BFF               sbb r15, r15
   .text:0x0000000000004EEB        4C23FA               and r15, rdx
   .text:0x0000000000004EEE        33D2                 xor edx, edx
   .text:0x0000000000004EF0        E86BCEFFFF           call func_0x1D60; int64_t __cdecl( int64_t p1, int8_t p2, int64_t p3 )
   .text:0x0000000000004EF5        4533C9               xor r9d, r9d
   .text:0x0000000000004EF8        897C2428             mov dword ptr [rsp+0x28], edi
   .text:0x0000000000004EFC        4C8D442430           lea r8, [rsp+0x30]
   .text:0x0000000000004F01        48897C2420           mov qword ptr [rsp+0x20], rdi
   .text:0x0000000000004F06        33D2                 xor edx, edx
   .text:0x0000000000004F08        488BCD               mov rcx, rbp
   .text:0x0000000000004F0B        FF1537620000         call qword ptr [FindFirstFileExW]; void * (__cdecl *)( unsigned short * lpFileName, enum _FINDEX_INFO_LEVELS fInfoLevelId, void * lpFindFileData, enum _FINDEX_SEARCH_OPS fSearchOp, void * lpSearchFilter, unsigned long dwAdditionalFlags )
   .text:0x0000000000004F11        488BD8               mov rbx, rax
   .text:0x0000000000004F14        4883F8FF             cmp rax, 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000004F18        754A                 jnz code_0x4F64
   .text:0x0000000000004F1A code_0x4F1A:
   .text:0x0000000000004F1A        4D8BCE               mov r9, r14
   .text:0x0000000000004F1D        4533C0               xor r8d, r8d
   .text:0x0000000000004F20        33D2                 xor edx, edx
   .text:0x0000000000004F22        488BCD               mov rcx, rbp
   .text:0x0000000000004F25        E86EFDFFFF           call func_0x4C98; int32_t __cdecl( int64_t p1, int64_t p2, int64_t p3, int64_t p4 )
   .text:0x0000000000004F2A code_0x4F2A:
   .text:0x0000000000004F2A        8BF8                 mov edi, eax
   .text:0x0000000000004F2C code_0x4F2C:
   .text:0x0000000000004F2C        4883FBFF             cmp rbx, 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000004F30        7409                 jz code_0x4F3B
   .text:0x0000000000004F32 code_0x4F32:
   .text:0x0000000000004F32        488BCB               mov rcx, rbx
   .text:0x0000000000004F35        FF1505620000         call qword ptr [FindClose]; int (__cdecl *)( void * hFindFile )
   .text:0x0000000000004F3B code_0x4F3B:
   .text:0x0000000000004F3B        8BC7                 mov eax, edi
   .text:0x0000000000004F3D code_0x4F3D:
   .text:0x0000000000004F3D        488B8C2480020000     mov rcx, qword ptr [rsp+0x280]
   .text:0x0000000000004F45        4833CC               xor rcx, rsp
   .text:0x0000000000004F48        E803590000           call __security_check_cookie; noclobber void __cdecl( uint64_t p1 )
   .text:0x0000000000004F4D        488B9C24D8020000     mov rbx, qword ptr [rsp+0x2D8]
   .text:0x0000000000004F55        4881C490020000       add rsp, 0x290
   .text:0x0000000000004F5C        415F                 pop r15
   .text:0x0000000000004F5E        415E                 pop r14
   .text:0x0000000000004F60        5F                   pop rdi
   .text:0x0000000000004F61        5E                   pop rsi
   .text:0x0000000000004F62        5D                   pop rbp
   .text:0x0000000000004F63        C3                   ret
   .text:0x0000000000004F64 code_0x4F64:
   .text:0x0000000000004F64        498B7608             mov rsi, qword ptr [r14+0x8]
   .text:0x0000000000004F68        492B36               sub rsi, qword ptr [r14]
   .text:0x0000000000004F6B        48C1FE03             sar rsi, 0x3
   .text:0x0000000000004F6F code_0x4F6F:
   .text:0x0000000000004F6F        66837C245C2E         cmp word ptr [rsp+0x5C], 0x2E
   .text:0x0000000000004F75        7516                 jnz code_0x4F8D
   .text:0x0000000000004F77 code_0x4F77:
   .text:0x0000000000004F77        66397C245E           cmp word ptr [rsp+0x5E], di
   .text:0x0000000000004F7C        7426                 jz code_0x4FA4
   .text:0x0000000000004F7E code_0x4F7E:
   .text:0x0000000000004F7E        66837C245E2E         cmp word ptr [rsp+0x5E], 0x2E
   .text:0x0000000000004F84        7507                 jnz code_0x4F8D
   .text:0x0000000000004F86 code_0x4F86:
   .text:0x0000000000004F86        66397C2460           cmp word ptr [rsp+0x60], di
   .text:0x0000000000004F8B        7417                 jz code_0x4FA4
   .text:0x0000000000004F8D code_0x4F8D:
   .text:0x0000000000004F8D        4D8BCE               mov r9, r14
   .text:0x0000000000004F90        488D4C245C           lea rcx, [rsp+0x5C]
   .text:0x0000000000004F95        4D8BC7               mov r8, r15
   .text:0x0000000000004F98        488BD5               mov rdx, rbp
   .text:0x0000000000004F9B        E8F8FCFFFF           call func_0x4C98; int32_t __cdecl( int64_t p1, int64_t p2, int64_t p3, int64_t p4 )
   .text:0x0000000000004FA0        85C0                 test eax, eax
   .text:0x0000000000004FA2        7586                 jnz code_0x4F2A
   .text:0x0000000000004FA4 code_0x4FA4:
   .text:0x0000000000004FA4        488D542430           lea rdx, [rsp+0x30]
   .text:0x0000000000004FA9        488BCB               mov rcx, rbx
   .text:0x0000000000004FAC        FF159E610000         call qword ptr [FindNextFileW]; int (__cdecl *)( void * hFindFile, struct _WIN32_FIND_DATAW * lpFindFileData )
   .text:0x0000000000004FB2        85C0                 test eax, eax
   .text:0x0000000000004FB4        75B9                 jnz code_0x4F6F
   .text:0x0000000000004FB6 code_0x4FB6:
   .text:0x0000000000004FB6        498B06               mov rax, qword ptr [r14]
   .text:0x0000000000004FB9        498B5608             mov rdx, qword ptr [r14+0x8]
   .text:0x0000000000004FBD        482BD0               sub rdx, rax
   .text:0x0000000000004FC0        48C1FA03             sar rdx, 0x3
   .text:0x0000000000004FC4        483BF2               cmp rsi, rdx
   .text:0x0000000000004FC7        0F845FFFFFFF         jz code_0x4F2C
   .text:0x0000000000004FCD code_0x4FCD:
   .text:0x0000000000004FCD        482BD6               sub rdx, rsi
   .text:0x0000000000004FD0        488D0CF0             lea rcx, [rax+rsi*8]
   .text:0x0000000000004FD4        4C8D0D79FAFFFF       lea r9, [data_0x4A54]
   .text:0x0000000000004FDB        41B808000000         mov r8d, 0x8
   .text:0x0000000000004FE1        E89A2C0000           call qsort; void __cdecl( void * _Base, unsigned long long _NumOfElements, unsigned long long _SizeOfElements, int (__cdecl * _CompareFunction)( void * p1, void * p2 ) )
   .text:0x0000000000004FE6        E941FFFFFF           jmp code_0x4F2C
   .text:0x0000000000004FEB code_0x4FEB:
   .text:0x0000000000004FEB        CC                   int3
   .text:0x0000000000004FEC func_0x4FEC:
   .text:0x0000000000004FEC        E977FAFFFF           jmp func_0x4A68; int32_t __cdecl( int64_t p1, int64_t p2 )
   .text:0x0000000000004FF1 data_0x4FF1:
   .text:0x0000000000004FF1        db 3 dup(0xCC)
   .text:0x0000000000004FF4 __crt_seh_guarded_call<void>::operator()<class <lambda_efdfa57d1f175319df784efa44bb7b81>,class <lambda_5f0a4c1567f8adc6734073e5d1e1b35c> & __ptr64,class <lambda_2e8a7d3640ea6ccb4c2413664c2db6fd> >:
   .text:0x0000000000004FF4        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000004FF9        4C894C2420           mov qword ptr [rsp+0x20], r9
   .text:0x0000000000004FFE        57                   push rdi
   .text:0x0000000000004FFF        4883EC20             sub rsp, 0x20
   .text:0x0000000000005003        498BF9               mov rdi, r9
   .text:0x0000000000005006        498BD8               mov rbx, r8
   .text:0x0000000000005009        8B0A                 mov ecx, dword ptr [rdx]
   .text:0x000000000000500B        E8480C0000           call __acrt_lock; void __cdecl( int32_t p1 )
   .text:0x0000000000005010        90                   nop
   .text:0x0000000000005011        488B03               mov rax, qword ptr [rbx]
   .text:0x0000000000005014        488B08               mov rcx, qword ptr [rax]
   .text:0x0000000000005017        488B8188000000       mov rax, qword ptr [rcx+0x88]
   .text:0x000000000000501E        4883C018             add rax, 0x18
   .text:0x0000000000005022        488B0D57FD0000       mov rcx, qword ptr [data_0x14D80]
   .text:0x0000000000005029        4885C9               test rcx, rcx
   .text:0x000000000000502C        746F                 jz code_0x509D
   .text:0x000000000000502E code_0x502E:
   .text:0x000000000000502E        4885C0               test rax, rax
   .text:0x0000000000005031        745D                 jz code_0x5090
   .text:0x0000000000005033 code_0x5033:
   .text:0x0000000000005033        41B802000000         mov r8d, 0x2
   .text:0x0000000000005039        458BC8               mov r9d, r8d
   .text:0x000000000000503C        418D507E             lea edx, [r8+0x7E]
   .text:0x0000000000005040 code_0x5040:
   .text:0x0000000000005040        0F1000               movups xmm0, xmmword ptr [rax]
   .text:0x0000000000005043        0F1101               movups xmmword ptr [rcx], xmm0
   .text:0x0000000000005046        0F104810             movups xmm1, xmmword ptr [rax+0x10]
   .text:0x000000000000504A        0F114910             movups xmmword ptr [rcx+0x10], xmm1
   .text:0x000000000000504E        0F104020             movups xmm0, xmmword ptr [rax+0x20]
   .text:0x0000000000005052        0F114120             movups xmmword ptr [rcx+0x20], xmm0
   .text:0x0000000000005056        0F104830             movups xmm1, xmmword ptr [rax+0x30]
   .text:0x000000000000505A        0F114930             movups xmmword ptr [rcx+0x30], xmm1
   .text:0x000000000000505E        0F104040             movups xmm0, xmmword ptr [rax+0x40]
   .text:0x0000000000005062        0F114140             movups xmmword ptr [rcx+0x40], xmm0
   .text:0x0000000000005066        0F104850             movups xmm1, xmmword ptr [rax+0x50]
   .text:0x000000000000506A        0F114950             movups xmmword ptr [rcx+0x50], xmm1
   .text:0x000000000000506E        0F104060             movups xmm0, xmmword ptr [rax+0x60]
   .text:0x0000000000005072        0F114160             movups xmmword ptr [rcx+0x60], xmm0
   .text:0x0000000000005076        4803CA               add rcx, rdx
   .text:0x0000000000005079        0F104870             movups xmm1, xmmword ptr [rax+0x70]
   .text:0x000000000000507D        0F1149F0             movups xmmword ptr [rcx-0x10], xmm1
   .text:0x0000000000005081        4803C2               add rax, rdx
   .text:0x0000000000005084        4983E901             sub r9, 0x1
   .text:0x0000000000005088        75B6                 jnz code_0x5040
   .text:0x000000000000508A code_0x508A:
   .text:0x000000000000508A        8A00                 mov al, byte ptr [rax]
   .text:0x000000000000508C        8801                 mov byte ptr [rcx], al
   .text:0x000000000000508E        EB27                 jmp code_0x50B7
   .text:0x0000000000005090 code_0x5090:
   .text:0x0000000000005090        33D2                 xor edx, edx
   .text:0x0000000000005092        41B801010000         mov r8d, 0x101
   .text:0x0000000000005098        E8C3CCFFFF           call func_0x1D60; int64_t __cdecl( int64_t p1, int8_t p2, int64_t p3 )
   .text:0x000000000000509D code_0x509D:
   .text:0x000000000000509D        E8DAF8FFFF           call _errno; int * __cdecl( void )
   .text:0x00000000000050A2        C70016000000         mov dword ptr [rax], 0x16
   .text:0x00000000000050A8        E843F6FFFF           call _invalid_parameter_noinfo; void __cdecl( void )
   .text:0x00000000000050AD        41B802000000         mov r8d, 0x2
   .text:0x00000000000050B3        418D507E             lea edx, [r8+0x7E]
   .text:0x00000000000050B7 code_0x50B7:
   .text:0x00000000000050B7        488B03               mov rax, qword ptr [rbx]
   .text:0x00000000000050BA        488B08               mov rcx, qword ptr [rax]
   .text:0x00000000000050BD        488B8188000000       mov rax, qword ptr [rcx+0x88]
   .text:0x00000000000050C4        480519010000         add rax, 0x119
   .text:0x00000000000050CA        488B0DB7FC0000       mov rcx, qword ptr [data_0x14D88]
   .text:0x00000000000050D1        4885C9               test rcx, rcx
   .text:0x00000000000050D4        745E                 jz code_0x5134
   .text:0x00000000000050D6 code_0x50D6:
   .text:0x00000000000050D6        4885C0               test rax, rax
   .text:0x00000000000050D9        744C                 jz code_0x5127
   .text:0x00000000000050DB code_0x50DB:
   .text:0x00000000000050DB        0F1000               movups xmm0, xmmword ptr [rax]
   .text:0x00000000000050DE        0F1101               movups xmmword ptr [rcx], xmm0
   .text:0x00000000000050E1        0F104810             movups xmm1, xmmword ptr [rax+0x10]
   .text:0x00000000000050E5        0F114910             movups xmmword ptr [rcx+0x10], xmm1
   .text:0x00000000000050E9        0F104020             movups xmm0, xmmword ptr [rax+0x20]
   .text:0x00000000000050ED        0F114120             movups xmmword ptr [rcx+0x20], xmm0
   .text:0x00000000000050F1        0F104830             movups xmm1, xmmword ptr [rax+0x30]
   .text:0x00000000000050F5        0F114930             movups xmmword ptr [rcx+0x30], xmm1
   .text:0x00000000000050F9        0F104040             movups xmm0, xmmword ptr [rax+0x40]
   .text:0x00000000000050FD        0F114140             movups xmmword ptr [rcx+0x40], xmm0
   .text:0x0000000000005101        0F104850             movups xmm1, xmmword ptr [rax+0x50]
   .text:0x0000000000005105        0F114950             movups xmmword ptr [rcx+0x50], xmm1
   .text:0x0000000000005109        0F104060             movups xmm0, xmmword ptr [rax+0x60]
   .text:0x000000000000510D        0F114160             movups xmmword ptr [rcx+0x60], xmm0
   .text:0x0000000000005111        4803CA               add rcx, rdx
   .text:0x0000000000005114        0F104870             movups xmm1, xmmword ptr [rax+0x70]
   .text:0x0000000000005118        0F1149F0             movups xmmword ptr [rcx-0x10], xmm1
   .text:0x000000000000511C        4803C2               add rax, rdx
   .text:0x000000000000511F        4983E801             sub r8, 0x1
   .text:0x0000000000005123        75B6                 jnz code_0x50DB
   .text:0x0000000000005125 code_0x5125:
   .text:0x0000000000005125        EB1D                 jmp code_0x5144
   .text:0x0000000000005127 code_0x5127:
   .text:0x0000000000005127        33D2                 xor edx, edx
   .text:0x0000000000005129        41B800010000         mov r8d, 0x100
   .text:0x000000000000512F        E82CCCFFFF           call func_0x1D60; int64_t __cdecl( int64_t p1, int8_t p2, int64_t p3 )
   .text:0x0000000000005134 code_0x5134:
   .text:0x0000000000005134        E843F8FFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000005139        C70016000000         mov dword ptr [rax], 0x16
   .text:0x000000000000513F        E8ACF5FFFF           call _invalid_parameter_noinfo; void __cdecl( void )
   .text:0x0000000000005144 code_0x5144:
   .text:0x0000000000005144        488B4308             mov rax, qword ptr [rbx+0x8]
   .text:0x0000000000005148        488B08               mov rcx, qword ptr [rax]
   .text:0x000000000000514B        488B11               mov rdx, qword ptr [rcx]
   .text:0x000000000000514E        83C8FF               or eax, 0xFFFFFFFF
   .text:0x0000000000005151        F00FC102             lock xadd dword ptr [rdx], eax
   .text:0x0000000000005155        83F801               cmp eax, 0x1
   .text:0x0000000000005158        751B                 jnz code_0x5175
   .text:0x000000000000515A code_0x515A:
   .text:0x000000000000515A        488B4308             mov rax, qword ptr [rbx+0x8]
   .text:0x000000000000515E        488B08               mov rcx, qword ptr [rax]
   .text:0x0000000000005161        488D05E8EF0000       lea rax, [data_0x14150]
   .text:0x0000000000005168        483901               cmp qword ptr [rcx], rax
   .text:0x000000000000516B        7408                 jz code_0x5175
   .text:0x000000000000516D code_0x516D:
   .text:0x000000000000516D        488B09               mov rcx, qword ptr [rcx]
   .text:0x0000000000005170        E89FF8FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000005175 code_0x5175:
   .text:0x0000000000005175        488B03               mov rax, qword ptr [rbx]
   .text:0x0000000000005178        488B10               mov rdx, qword ptr [rax]
   .text:0x000000000000517B        488B4308             mov rax, qword ptr [rbx+0x8]
   .text:0x000000000000517F        488B08               mov rcx, qword ptr [rax]
   .text:0x0000000000005182        488B8288000000       mov rax, qword ptr [rdx+0x88]
   .text:0x0000000000005189        488901               mov qword ptr [rcx], rax
   .text:0x000000000000518C        488B03               mov rax, qword ptr [rbx]
   .text:0x000000000000518F        488B08               mov rcx, qword ptr [rax]
   .text:0x0000000000005192        488B8188000000       mov rax, qword ptr [rcx+0x88]
   .text:0x0000000000005199        F0FF00               lock inc dword ptr [rax]
   .text:0x000000000000519C        8B0F                 mov ecx, dword ptr [rdi]
   .text:0x000000000000519E        E8090B0000           call func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x00000000000051A3        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x00000000000051A8        4883C420             add rsp, 0x20
   .text:0x00000000000051AC        5F                   pop rdi
   .text:0x00000000000051AD        C3                   ret
   .text:0x00000000000051AE data_0x51AE:
   .text:0x00000000000051AE        db 2 dup(0xCC)
   .text:0x00000000000051B0 func_0x51B0:
   .text:0x00000000000051B0        4053                 push rbx
   .text:0x00000000000051B2        4883EC40             sub rsp, 0x40
   .text:0x00000000000051B6        8BD9                 mov ebx, ecx
   .text:0x00000000000051B8        33D2                 xor edx, edx
   .text:0x00000000000051BA        488D4C2420           lea rcx, [rsp+0x20]
   .text:0x00000000000051BF        E8ECEBFFFF           call _LocaleUpdate::_LocaleUpdate; public: void __cdecl( const struct __crt_locale_pointers * p1 )
   .text:0x00000000000051C4        8325C5FB000000       and dword ptr [data_0x14D90], 0x0
   .text:0x00000000000051CB        83FBFE               cmp ebx, 0xFFFFFFFE
   .text:0x00000000000051CE        7512                 jnz code_0x51E2
   .text:0x00000000000051D0 code_0x51D0:
   .text:0x00000000000051D0        C705B6FB000001000000 mov dword ptr [data_0x14D90], 0x1
   .text:0x00000000000051DA        FF15885F0000         call qword ptr [GetOEMCP]; unsigned int (__cdecl *)( void )
   .text:0x00000000000051E0        EB15                 jmp code_0x51F7
   .text:0x00000000000051E2 code_0x51E2:
   .text:0x00000000000051E2        83FBFD               cmp ebx, 0xFFFFFFFD
   .text:0x00000000000051E5        7514                 jnz code_0x51FB
   .text:0x00000000000051E7 code_0x51E7:
   .text:0x00000000000051E7        C7059FFB000001000000 mov dword ptr [data_0x14D90], 0x1
   .text:0x00000000000051F1        FF15695F0000         call qword ptr [GetACP]; unsigned int (__cdecl *)( void )
   .text:0x00000000000051F7 code_0x51F7:
   .text:0x00000000000051F7        8BD8                 mov ebx, eax
   .text:0x00000000000051F9        EB17                 jmp code_0x5212
   .text:0x00000000000051FB code_0x51FB:
   .text:0x00000000000051FB        83FBFC               cmp ebx, 0xFFFFFFFC
   .text:0x00000000000051FE        7512                 jnz code_0x5212
   .text:0x0000000000005200 code_0x5200:
   .text:0x0000000000005200        488B442428           mov rax, qword ptr [rsp+0x28]
   .text:0x0000000000005205        C70581FB000001000000 mov dword ptr [data_0x14D90], 0x1
   .text:0x000000000000520F        8B580C               mov ebx, dword ptr [rax+0xC]
   .text:0x0000000000005212 code_0x5212:
   .text:0x0000000000005212        807C243800           cmp byte ptr [rsp+0x38], 0x0
   .text:0x0000000000005217        740C                 jz code_0x5225
   .text:0x0000000000005219 code_0x5219:
   .text:0x0000000000005219        488B4C2420           mov rcx, qword ptr [rsp+0x20]
   .text:0x000000000000521E        83A1A8030000FD       and dword ptr [rcx+0x3A8], 0xFFFFFFFD
   .text:0x0000000000005225 code_0x5225:
   .text:0x0000000000005225        8BC3                 mov eax, ebx
   .text:0x0000000000005227        4883C440             add rsp, 0x40
   .text:0x000000000000522B        5B                   pop rbx
   .text:0x000000000000522C        C3                   ret
   .text:0x000000000000522D data_0x522D:
   .text:0x000000000000522D        db 3 dup(0xCC)
   .text:0x0000000000005230 setSBCS:
   .text:0x0000000000005230        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000005235        48896C2410           mov qword ptr [rsp+0x10], rbp
   .text:0x000000000000523A        4889742418           mov qword ptr [rsp+0x18], rsi
   .text:0x000000000000523F        57                   push rdi
   .text:0x0000000000005240        4883EC20             sub rsp, 0x20
   .text:0x0000000000005244        488D5918             lea rbx, [rcx+0x18]
   .text:0x0000000000005248        488BF1               mov rsi, rcx
   .text:0x000000000000524B        BD01010000           mov ebp, 0x101
   .text:0x0000000000005250        488BCB               mov rcx, rbx
   .text:0x0000000000005253        448BC5               mov r8d, ebp
   .text:0x0000000000005256        33D2                 xor edx, edx
   .text:0x0000000000005258        E803CBFFFF           call func_0x1D60; int64_t __cdecl( int64_t p1, int8_t p2, int64_t p3 )
   .text:0x000000000000525D        33C0                 xor eax, eax
   .text:0x000000000000525F        488D7E0C             lea rdi, [rsi+0xC]
   .text:0x0000000000005263        48894604             mov qword ptr [rsi+0x4], rax
   .text:0x0000000000005267        B906000000           mov ecx, 0x6
   .text:0x000000000000526C        48898620020000       mov qword ptr [rsi+0x220], rax
   .text:0x0000000000005273        0FB7C0               movzx eax, ax
   .text:0x0000000000005276        66F3AB               rep stosw
   .text:0x0000000000005279        488D3DD0EE0000       lea rdi, [data_0x14150]
   .text:0x0000000000005280        482BFE               sub rdi, rsi
   .text:0x0000000000005283 code_0x5283:
   .text:0x0000000000005283        8A041F               mov al, byte ptr [rdi+rbx]
   .text:0x0000000000005286        8803                 mov byte ptr [rbx], al
   .text:0x0000000000005288        48FFC3               inc rbx
   .text:0x000000000000528B        4883ED01             sub rbp, 0x1
   .text:0x000000000000528F        75F2                 jnz code_0x5283
   .text:0x0000000000005291 code_0x5291:
   .text:0x0000000000005291        488D8E19010000       lea rcx, [rsi+0x119]
   .text:0x0000000000005298        BA00010000           mov edx, 0x100
   .text:0x000000000000529D code_0x529D:
   .text:0x000000000000529D        8A0439               mov al, byte ptr [rcx+rdi]
   .text:0x00000000000052A0        8801                 mov byte ptr [rcx], al
   .text:0x00000000000052A2        48FFC1               inc rcx
   .text:0x00000000000052A5        4883EA01             sub rdx, 0x1
   .text:0x00000000000052A9        75F2                 jnz code_0x529D
   .text:0x00000000000052AB code_0x52AB:
   .text:0x00000000000052AB        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x00000000000052B0        488B6C2438           mov rbp, qword ptr [rsp+0x38]
   .text:0x00000000000052B5        488B742440           mov rsi, qword ptr [rsp+0x40]
   .text:0x00000000000052BA        4883C420             add rsp, 0x20
   .text:0x00000000000052BE        5F                   pop rdi
   .text:0x00000000000052BF        C3                   ret
   .text:0x00000000000052C0 setSBUpLow:
   .text:0x00000000000052C0        48895C2410           mov qword ptr [rsp+0x10], rbx
   .text:0x00000000000052C5        4889742418           mov qword ptr [rsp+0x18], rsi
   .text:0x00000000000052CA        55                   push rbp
   .text:0x00000000000052CB        488DAC2480F9FFFF     lea rbp, [rsp-0x680]
   .text:0x00000000000052D3        4881EC80070000       sub rsp, 0x780
   .text:0x00000000000052DA        488B0547ED0000       mov rax, qword ptr [__security_cookie]
   .text:0x00000000000052E1        4833C4               xor rax, rsp
   .text:0x00000000000052E4        48898570060000       mov qword ptr [rbp+0x670], rax
   .text:0x00000000000052EB        488BD9               mov rbx, rcx
   .text:0x00000000000052EE        8B4904               mov ecx, dword ptr [rcx+0x4]
   .text:0x00000000000052F1        81F9E9FD0000         cmp ecx, 0xFDE9
   .text:0x00000000000052F7        0F843F010000         jz code_0x543C
   .text:0x00000000000052FD code_0x52FD:
   .text:0x00000000000052FD        488D542450           lea rdx, [rsp+0x50]
   .text:0x0000000000005302        FF15685E0000         call qword ptr [GetCPInfo]; int (__cdecl *)( unsigned int CodePage, struct _cpinfo * lpCPInfo )
   .text:0x0000000000005308        85C0                 test eax, eax
   .text:0x000000000000530A        0F842C010000         jz code_0x543C
   .text:0x0000000000005310 code_0x5310:
   .text:0x0000000000005310        33C0                 xor eax, eax
   .text:0x0000000000005312        488D4C2470           lea rcx, [rsp+0x70]
   .text:0x0000000000005317        BE00010000           mov esi, 0x100
   .text:0x000000000000531C code_0x531C:
   .text:0x000000000000531C        8801                 mov byte ptr [rcx], al
   .text:0x000000000000531E        FFC0                 inc eax
   .text:0x0000000000005320        48FFC1               inc rcx
   .text:0x0000000000005323        3BC6                 cmp eax, esi
   .text:0x0000000000005325        72F5                 jb code_0x531C
   .text:0x0000000000005327 code_0x5327:
   .text:0x0000000000005327        8A442456             mov al, byte ptr [rsp+0x56]
   .text:0x000000000000532B        488D542456           lea rdx, [rsp+0x56]
   .text:0x0000000000005330        C644247020           mov byte ptr [rsp+0x70], 0x20
   .text:0x0000000000005335        EB22                 jmp code_0x5359
   .text:0x0000000000005337 code_0x5337:
   .text:0x0000000000005337        440FB64201           movzx r8d, byte ptr [rdx+0x1]
   .text:0x000000000000533C        0FB6C8               movzx ecx, al
   .text:0x000000000000533F        EB0D                 jmp code_0x534E
   .text:0x0000000000005341 code_0x5341:
   .text:0x0000000000005341        3BCE                 cmp ecx, esi
   .text:0x0000000000005343        730E                 jae code_0x5353
   .text:0x0000000000005345 code_0x5345:
   .text:0x0000000000005345        8BC1                 mov eax, ecx
   .text:0x0000000000005347        C6440C7020           mov byte ptr [rsp+rcx+0x70], 0x20
   .text:0x000000000000534C        FFC1                 inc ecx
   .text:0x000000000000534E code_0x534E:
   .text:0x000000000000534E        413BC8               cmp ecx, r8d
   .text:0x0000000000005351        76EE                 jbe code_0x5341
   .text:0x0000000000005353 code_0x5353:
   .text:0x0000000000005353        4883C202             add rdx, 0x2
   .text:0x0000000000005357        8A02                 mov al, byte ptr [rdx]
   .text:0x0000000000005359 code_0x5359:
   .text:0x0000000000005359        84C0                 test al, al
   .text:0x000000000000535B        75DA                 jnz code_0x5337
   .text:0x000000000000535D code_0x535D:
   .text:0x000000000000535D        8B4304               mov eax, dword ptr [rbx+0x4]
   .text:0x0000000000005360        4C8D442470           lea r8, [rsp+0x70]
   .text:0x0000000000005365        8364243000           and dword ptr [rsp+0x30], 0x0
   .text:0x000000000000536A        448BCE               mov r9d, esi
   .text:0x000000000000536D        89442428             mov dword ptr [rsp+0x28], eax
   .text:0x0000000000005371        BA01000000           mov edx, 0x1
   .text:0x0000000000005376        488D8570020000       lea rax, [rbp+0x270]
   .text:0x000000000000537D        33C9                 xor ecx, ecx
   .text:0x000000000000537F        4889442420           mov qword ptr [rsp+0x20], rax
   .text:0x0000000000005384        E883120000           call __acrt_GetStringTypeA; int32_t __cdecl( int64_t p1, int32_t p2, int64_t p3, int32_t p4, int64_t p5, int32_t p6, int32_t p7 )
   .text:0x0000000000005389        8364244000           and dword ptr [rsp+0x40], 0x0
   .text:0x000000000000538E        4C8D4C2470           lea r9, [rsp+0x70]
   .text:0x0000000000005393        8B4304               mov eax, dword ptr [rbx+0x4]
   .text:0x0000000000005396        448BC6               mov r8d, esi
   .text:0x0000000000005399        488B9320020000       mov rdx, qword ptr [rbx+0x220]
   .text:0x00000000000053A0        33C9                 xor ecx, ecx
   .text:0x00000000000053A2        89442438             mov dword ptr [rsp+0x38], eax
   .text:0x00000000000053A6        488D4570             lea rax, [rbp+0x70]
   .text:0x00000000000053AA        89742430             mov dword ptr [rsp+0x30], esi
   .text:0x00000000000053AE        4889442428           mov qword ptr [rsp+0x28], rax
   .text:0x00000000000053B3        89742420             mov dword ptr [rsp+0x20], esi
   .text:0x00000000000053B7        E88C2F0000           call __acrt_LCMapStringA; void __cdecl( int64_t p1, int64_t p2, int32_t p3, int64_t p4, int32_t p5, int64_t p6, int32_t p7, int32_t p8, int32_t p9 )
   .text:0x00000000000053BC        8364244000           and dword ptr [rsp+0x40], 0x0
   .text:0x00000000000053C1        4C8D4C2470           lea r9, [rsp+0x70]
   .text:0x00000000000053C6        8B4304               mov eax, dword ptr [rbx+0x4]
   .text:0x00000000000053C9        41B800020000         mov r8d, 0x200
   .text:0x00000000000053CF        488B9320020000       mov rdx, qword ptr [rbx+0x220]
   .text:0x00000000000053D6        33C9                 xor ecx, ecx
   .text:0x00000000000053D8        89442438             mov dword ptr [rsp+0x38], eax
   .text:0x00000000000053DC        488D8570010000       lea rax, [rbp+0x170]
   .text:0x00000000000053E3        89742430             mov dword ptr [rsp+0x30], esi
   .text:0x00000000000053E7        4889442428           mov qword ptr [rsp+0x28], rax
   .text:0x00000000000053EC        89742420             mov dword ptr [rsp+0x20], esi
   .text:0x00000000000053F0        E8532F0000           call __acrt_LCMapStringA; void __cdecl( int64_t p1, int64_t p2, int32_t p3, int64_t p4, int32_t p5, int64_t p6, int32_t p7, int32_t p8, int32_t p9 )
   .text:0x00000000000053F5        B801000000           mov eax, 0x1
   .text:0x00000000000053FA        488D9570020000       lea rdx, [rbp+0x270]
   .text:0x0000000000005401 code_0x5401:
   .text:0x0000000000005401        F60201               test byte ptr [rdx], 0x1
   .text:0x0000000000005404        740B                 jz code_0x5411
   .text:0x0000000000005406 code_0x5406:
   .text:0x0000000000005406        804C181810           or byte ptr [rax+rbx+0x18], 0x10
   .text:0x000000000000540B        8A4C056F             mov cl, byte ptr [rbp+rax+0x6F]
   .text:0x000000000000540F        EB15                 jmp code_0x5426
   .text:0x0000000000005411 code_0x5411:
   .text:0x0000000000005411        F60202               test byte ptr [rdx], 0x2
   .text:0x0000000000005414        740E                 jz code_0x5424
   .text:0x0000000000005416 code_0x5416:
   .text:0x0000000000005416        804C181820           or byte ptr [rax+rbx+0x18], 0x20
   .text:0x000000000000541B        8A8C056F010000       mov cl, byte ptr [rbp+rax+0x16F]
   .text:0x0000000000005422        EB02                 jmp code_0x5426
   .text:0x0000000000005424 code_0x5424:
   .text:0x0000000000005424        32C9                 xor cl, cl
   .text:0x0000000000005426 code_0x5426:
   .text:0x0000000000005426        888C0318010000       mov byte ptr [rbx+rax+0x118], cl
   .text:0x000000000000542D        4883C202             add rdx, 0x2
   .text:0x0000000000005431        48FFC0               inc rax
   .text:0x0000000000005434        4883EE01             sub rsi, 0x1
   .text:0x0000000000005438        75C7                 jnz code_0x5401
   .text:0x000000000000543A code_0x543A:
   .text:0x000000000000543A        EB43                 jmp code_0x547F
   .text:0x000000000000543C code_0x543C:
   .text:0x000000000000543C        33D2                 xor edx, edx
   .text:0x000000000000543E        BE00010000           mov esi, 0x100
   .text:0x0000000000005443        8D4A01               lea ecx, [rdx+0x1]
   .text:0x0000000000005446 code_0x5446:
   .text:0x0000000000005446        448D429F             lea r8d, [rdx-0x61]
   .text:0x000000000000544A        418D4020             lea eax, [r8+0x20]
   .text:0x000000000000544E        83F819               cmp eax, 0x19
   .text:0x0000000000005451        770A                 ja code_0x545D
   .text:0x0000000000005453 code_0x5453:
   .text:0x0000000000005453        804C191810           or byte ptr [rcx+rbx+0x18], 0x10
   .text:0x0000000000005458        8D4220               lea eax, [rdx+0x20]
   .text:0x000000000000545B        EB12                 jmp code_0x546F
   .text:0x000000000000545D code_0x545D:
   .text:0x000000000000545D        4183F819             cmp r8d, 0x19
   .text:0x0000000000005461        770A                 ja code_0x546D
   .text:0x0000000000005463 code_0x5463:
   .text:0x0000000000005463        804C191820           or byte ptr [rcx+rbx+0x18], 0x20
   .text:0x0000000000005468        8D42E0               lea eax, [rdx-0x20]
   .text:0x000000000000546B        EB02                 jmp code_0x546F
   .text:0x000000000000546D code_0x546D:
   .text:0x000000000000546D        32C0                 xor al, al
   .text:0x000000000000546F code_0x546F:
   .text:0x000000000000546F        88840B18010000       mov byte ptr [rbx+rcx+0x118], al
   .text:0x0000000000005476        FFC2                 inc edx
   .text:0x0000000000005478        48FFC1               inc rcx
   .text:0x000000000000547B        3BD6                 cmp edx, esi
   .text:0x000000000000547D        72C7                 jb code_0x5446
   .text:0x000000000000547F code_0x547F:
   .text:0x000000000000547F        488B8D70060000       mov rcx, qword ptr [rbp+0x670]
   .text:0x0000000000005486        4833CC               xor rcx, rsp
   .text:0x0000000000005489        E8C2530000           call __security_check_cookie; noclobber void __cdecl( uint64_t p1 )
   .text:0x000000000000548E        4C8D9C2480070000     lea r11, [rsp+0x780]
   .text:0x0000000000005496        498B5B18             mov rbx, qword ptr [r11+0x18]
   .text:0x000000000000549A        498B7320             mov rsi, qword ptr [r11+0x20]
   .text:0x000000000000549E        498BE3               mov rsp, r11
   .text:0x00000000000054A1        5D                   pop rbp
   .text:0x00000000000054A2        C3                   ret
   .text:0x00000000000054A3 code_0x54A3:
   .text:0x00000000000054A3        CC                   int3
   .text:0x00000000000054A4 setmbcp_internal:
   .text:0x00000000000054A4        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x00000000000054A9        4C894C2420           mov qword ptr [rsp+0x20], r9
   .text:0x00000000000054AE        4C89442418           mov qword ptr [rsp+0x18], r8
   .text:0x00000000000054B3        55                   push rbp
   .text:0x00000000000054B4        56                   push rsi
   .text:0x00000000000054B5        57                   push rdi
   .text:0x00000000000054B6        488BEC               mov rbp, rsp
   .text:0x00000000000054B9        4883EC40             sub rsp, 0x40
   .text:0x00000000000054BD        408AF2               mov sil, dl
   .text:0x00000000000054C0        8BD9                 mov ebx, ecx
   .text:0x00000000000054C2        498BD1               mov rdx, r9
   .text:0x00000000000054C5        498BC8               mov rcx, r8
   .text:0x00000000000054C8        E89B010000           call func_0x5668; int64_t __cdecl( int64_t p1, int64_t p2 )
   .text:0x00000000000054CD        8BCB                 mov ecx, ebx
   .text:0x00000000000054CF        E8DCFCFFFF           call func_0x51B0; int32_t __cdecl( int32_t p1 )
   .text:0x00000000000054D4        488B4D30             mov rcx, qword ptr [rbp+0x30]
   .text:0x00000000000054D8        8BF8                 mov edi, eax
   .text:0x00000000000054DA        4C8B8188000000       mov r8, qword ptr [rcx+0x88]
   .text:0x00000000000054E1        413B4004             cmp eax, dword ptr [r8+0x4]
   .text:0x00000000000054E5        7507                 jnz code_0x54EE
   .text:0x00000000000054E7 code_0x54E7:
   .text:0x00000000000054E7        33C0                 xor eax, eax
   .text:0x00000000000054E9        E9B8000000           jmp code_0x55A6
   .text:0x00000000000054EE code_0x54EE:
   .text:0x00000000000054EE        B928020000           mov ecx, 0x228
   .text:0x00000000000054F3        E880100000           call _malloc_base; void * __cdecl( unsigned long long _Size )
   .text:0x00000000000054F8        488BD8               mov rbx, rax
   .text:0x00000000000054FB        4885C0               test rax, rax
   .text:0x00000000000054FE        0F8495000000         jz code_0x5599
   .text:0x0000000000005504 code_0x5504:
   .text:0x0000000000005504        488B4530             mov rax, qword ptr [rbp+0x30]
   .text:0x0000000000005508        BA04000000           mov edx, 0x4
   .text:0x000000000000550D        488BCB               mov rcx, rbx
   .text:0x0000000000005510        488B8088000000       mov rax, qword ptr [rax+0x88]
   .text:0x0000000000005517        448D427C             lea r8d, [rdx+0x7C]
   .text:0x000000000000551B code_0x551B:
   .text:0x000000000000551B        0F1000               movups xmm0, xmmword ptr [rax]
   .text:0x000000000000551E        0F1101               movups xmmword ptr [rcx], xmm0
   .text:0x0000000000005521        0F104810             movups xmm1, xmmword ptr [rax+0x10]
   .text:0x0000000000005525        0F114910             movups xmmword ptr [rcx+0x10], xmm1
   .text:0x0000000000005529        0F104020             movups xmm0, xmmword ptr [rax+0x20]
   .text:0x000000000000552D        0F114120             movups xmmword ptr [rcx+0x20], xmm0
   .text:0x0000000000005531        0F104830             movups xmm1, xmmword ptr [rax+0x30]
   .text:0x0000000000005535        0F114930             movups xmmword ptr [rcx+0x30], xmm1
   .text:0x0000000000005539        0F104040             movups xmm0, xmmword ptr [rax+0x40]
   .text:0x000000000000553D        0F114140             movups xmmword ptr [rcx+0x40], xmm0
   .text:0x0000000000005541        0F104850             movups xmm1, xmmword ptr [rax+0x50]
   .text:0x0000000000005545        0F114950             movups xmmword ptr [rcx+0x50], xmm1
   .text:0x0000000000005549        0F104060             movups xmm0, xmmword ptr [rax+0x60]
   .text:0x000000000000554D        0F114160             movups xmmword ptr [rcx+0x60], xmm0
   .text:0x0000000000005551        4903C8               add rcx, r8
   .text:0x0000000000005554        0F104870             movups xmm1, xmmword ptr [rax+0x70]
   .text:0x0000000000005558        4903C0               add rax, r8
   .text:0x000000000000555B        0F1149F0             movups xmmword ptr [rcx-0x10], xmm1
   .text:0x000000000000555F        4883EA01             sub rdx, 0x1
   .text:0x0000000000005563        75B6                 jnz code_0x551B
   .text:0x0000000000005565 code_0x5565:
   .text:0x0000000000005565        0F1000               movups xmm0, xmmword ptr [rax]
   .text:0x0000000000005568        0F1101               movups xmmword ptr [rcx], xmm0
   .text:0x000000000000556B        0F104810             movups xmm1, xmmword ptr [rax+0x10]
   .text:0x000000000000556F        0F114910             movups xmmword ptr [rcx+0x10], xmm1
   .text:0x0000000000005573        488B4020             mov rax, qword ptr [rax+0x20]
   .text:0x0000000000005577        48894120             mov qword ptr [rcx+0x20], rax
   .text:0x000000000000557B        8BCF                 mov ecx, edi
   .text:0x000000000000557D        2113                 and dword ptr [rbx], edx
   .text:0x000000000000557F        488BD3               mov rdx, rbx
   .text:0x0000000000005582        E815020000           call _setmbcp_nolock; int32_t __cdecl( int64_t p1, int64_t p2 )
   .text:0x0000000000005587        8BF8                 mov edi, eax
   .text:0x0000000000005589        83F8FF               cmp eax, 0xFFFFFFFF
   .text:0x000000000000558C        7525                 jnz code_0x55B3
   .text:0x000000000000558E code_0x558E:
   .text:0x000000000000558E        E8E9F3FFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000005593        C70016000000         mov dword ptr [rax], 0x16
   .text:0x0000000000005599 code_0x5599:
   .text:0x0000000000005599        83CFFF               or edi, 0xFFFFFFFF
   .text:0x000000000000559C code_0x559C:
   .text:0x000000000000559C        488BCB               mov rcx, rbx
   .text:0x000000000000559F        E870F4FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000055A4        8BC7                 mov eax, edi
   .text:0x00000000000055A6 code_0x55A6:
   .text:0x00000000000055A6        488B5C2460           mov rbx, qword ptr [rsp+0x60]
   .text:0x00000000000055AB        4883C440             add rsp, 0x40
   .text:0x00000000000055AF        5F                   pop rdi
   .text:0x00000000000055B0        5E                   pop rsi
   .text:0x00000000000055B1        5D                   pop rbp
   .text:0x00000000000055B2        C3                   ret
   .text:0x00000000000055B3 code_0x55B3:
   .text:0x00000000000055B3        4084F6               test sil, sil
   .text:0x00000000000055B6        7505                 jnz code_0x55BD
   .text:0x00000000000055B8 code_0x55B8:
   .text:0x00000000000055B8        E86FE0FFFF           call __acrt_set_locale_changed; inline int32_t __cdecl( void )
   .text:0x00000000000055BD code_0x55BD:
   .text:0x00000000000055BD        488B4530             mov rax, qword ptr [rbp+0x30]
   .text:0x00000000000055C1        488B8888000000       mov rcx, qword ptr [rax+0x88]
   .text:0x00000000000055C8        83C8FF               or eax, 0xFFFFFFFF
   .text:0x00000000000055CB        F00FC101             lock xadd dword ptr [rcx], eax
   .text:0x00000000000055CF        83F801               cmp eax, 0x1
   .text:0x00000000000055D2        751C                 jnz code_0x55F0
   .text:0x00000000000055D4 code_0x55D4:
   .text:0x00000000000055D4        488B4530             mov rax, qword ptr [rbp+0x30]
   .text:0x00000000000055D8        488B8888000000       mov rcx, qword ptr [rax+0x88]
   .text:0x00000000000055DF        488D056AEB0000       lea rax, [data_0x14150]
   .text:0x00000000000055E6        483BC8               cmp rcx, rax
   .text:0x00000000000055E9        7405                 jz code_0x55F0
   .text:0x00000000000055EB code_0x55EB:
   .text:0x00000000000055EB        E824F4FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000055F0 code_0x55F0:
   .text:0x00000000000055F0        C70301000000         mov dword ptr [rbx], 0x1
   .text:0x00000000000055F6        488BCB               mov rcx, rbx
   .text:0x00000000000055F9        488B4530             mov rax, qword ptr [rbp+0x30]
   .text:0x00000000000055FD        33DB                 xor ebx, ebx
   .text:0x00000000000055FF        48898888000000       mov qword ptr [rax+0x88], rcx
   .text:0x0000000000005606        488B4530             mov rax, qword ptr [rbp+0x30]
   .text:0x000000000000560A        F680A803000002       test byte ptr [rax+0x3A8], 0x2
   .text:0x0000000000005611        7589                 jnz code_0x559C
   .text:0x0000000000005613 code_0x5613:
   .text:0x0000000000005613        F60586F1000001       test byte ptr [data_0x147A0], 0x1
   .text:0x000000000000561A        7580                 jnz code_0x559C
   .text:0x000000000000561C code_0x561C:
   .text:0x000000000000561C        488D4530             lea rax, [rbp+0x30]
   .text:0x0000000000005620        488945F0             mov qword ptr [rbp-0x10], rax
   .text:0x0000000000005624        4C8D4DE4             lea r9, [rbp-0x1C]
   .text:0x0000000000005628        488D4538             lea rax, [rbp+0x38]
   .text:0x000000000000562C        488945F8             mov qword ptr [rbp-0x8], rax
   .text:0x0000000000005630        4C8D45F0             lea r8, [rbp-0x10]
   .text:0x0000000000005634        8D4305               lea eax, [rbx+0x5]
   .text:0x0000000000005637        488D55E8             lea rdx, [rbp-0x18]
   .text:0x000000000000563B        8945E4               mov dword ptr [rbp-0x1C], eax
   .text:0x000000000000563E        488D4DE0             lea rcx, [rbp-0x20]
   .text:0x0000000000005642        8945E8               mov dword ptr [rbp-0x18], eax
   .text:0x0000000000005645        E8AAF9FFFF           call __crt_seh_guarded_call<void>::operator()<class <lambda_efdfa57d1f175319df784efa44bb7b81>,class <lambda_5f0a4c1567f8adc6734073e5d1e1b35c> & __ptr64,class <lambda_2e8a7d3640ea6ccb4c2413664c2db6fd> >; public: void __cdecl( class <lambda_efdfa57d1f175319df784efa44bb7b81> && p1, class <lambda_5f0a4c1567f8adc6734073e5d1e1b35c> & p2, class <lambda_2e8a7d3640ea6ccb4c2413664c2db6fd> && p3 )
   .text:0x000000000000564A        4084F6               test sil, sil
   .text:0x000000000000564D        0F8449FFFFFF         jz code_0x559C
   .text:0x0000000000005653 code_0x5653:
   .text:0x0000000000005653        488B4538             mov rax, qword ptr [rbp+0x38]
   .text:0x0000000000005657        488B08               mov rcx, qword ptr [rax]
   .text:0x000000000000565A        48890D8FF00000       mov qword ptr [data_0x146F0], rcx
   .text:0x0000000000005661        E936FFFFFF           jmp code_0x559C
   .text:0x0000000000005666 data_0x5666:
   .text:0x0000000000005666        db 2 dup(0xCC)
   .text:0x0000000000005668 func_0x5668:
   .text:0x0000000000005668        48895C2410           mov qword ptr [rsp+0x10], rbx
   .text:0x000000000000566D        4889742418           mov qword ptr [rsp+0x18], rsi
   .text:0x0000000000005672        57                   push rdi
   .text:0x0000000000005673        4883EC20             sub rsp, 0x20
   .text:0x0000000000005677        488BF2               mov rsi, rdx
   .text:0x000000000000567A        488BF9               mov rdi, rcx
   .text:0x000000000000567D        8B051DF10000         mov eax, dword ptr [data_0x147A0]
   .text:0x0000000000005683        8581A8030000         test dword ptr [rcx+0x3A8], eax
   .text:0x0000000000005689        7413                 jz code_0x569E
   .text:0x000000000000568B code_0x568B:
   .text:0x000000000000568B        4883B99000000000     cmp qword ptr [rcx+0x90], 0x0
   .text:0x0000000000005693        7409                 jz code_0x569E
   .text:0x0000000000005695 code_0x5695:
   .text:0x0000000000005695        488B9988000000       mov rbx, qword ptr [rcx+0x88]
   .text:0x000000000000569C        EB64                 jmp code_0x5702
   .text:0x000000000000569E code_0x569E:
   .text:0x000000000000569E        B905000000           mov ecx, 0x5
   .text:0x00000000000056A3        E8B0050000           call __acrt_lock; void __cdecl( int32_t p1 )
   .text:0x00000000000056A8        90                   nop
   .text:0x00000000000056A9        488B9F88000000       mov rbx, qword ptr [rdi+0x88]
   .text:0x00000000000056B0        48895C2430           mov qword ptr [rsp+0x30], rbx
   .text:0x00000000000056B5        483B1E               cmp rbx, qword ptr [rsi]
   .text:0x00000000000056B8        743E                 jz code_0x56F8
   .text:0x00000000000056BA code_0x56BA:
   .text:0x00000000000056BA        4885DB               test rbx, rbx
   .text:0x00000000000056BD        7422                 jz code_0x56E1
   .text:0x00000000000056BF code_0x56BF:
   .text:0x00000000000056BF        83C8FF               or eax, 0xFFFFFFFF
   .text:0x00000000000056C2        F00FC103             lock xadd dword ptr [rbx], eax
   .text:0x00000000000056C6        83F801               cmp eax, 0x1
   .text:0x00000000000056C9        7516                 jnz code_0x56E1
   .text:0x00000000000056CB code_0x56CB:
   .text:0x00000000000056CB        488D057EEA0000       lea rax, [data_0x14150]
   .text:0x00000000000056D2        488B4C2430           mov rcx, qword ptr [rsp+0x30]
   .text:0x00000000000056D7        483BC8               cmp rcx, rax
   .text:0x00000000000056DA        7405                 jz code_0x56E1
   .text:0x00000000000056DC code_0x56DC:
   .text:0x00000000000056DC        E833F3FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000056E1 code_0x56E1:
   .text:0x00000000000056E1        488B06               mov rax, qword ptr [rsi]
   .text:0x00000000000056E4        48898788000000       mov qword ptr [rdi+0x88], rax
   .text:0x00000000000056EB        4889442430           mov qword ptr [rsp+0x30], rax
   .text:0x00000000000056F0        F0FF00               lock inc dword ptr [rax]
   .text:0x00000000000056F3        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x00000000000056F8 code_0x56F8:
   .text:0x00000000000056F8        B905000000           mov ecx, 0x5
   .text:0x00000000000056FD        E8AA050000           call func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x0000000000005702 code_0x5702:
   .text:0x0000000000005702        4885DB               test rbx, rbx
   .text:0x0000000000005705        7413                 jz code_0x571A
   .text:0x0000000000005707 code_0x5707:
   .text:0x0000000000005707        488BC3               mov rax, rbx
   .text:0x000000000000570A        488B5C2438           mov rbx, qword ptr [rsp+0x38]
   .text:0x000000000000570F        488B742440           mov rsi, qword ptr [rsp+0x40]
   .text:0x0000000000005714        4883C420             add rsp, 0x20
   .text:0x0000000000005718        5F                   pop rdi
   .text:0x0000000000005719        C3                   ret
   .text:0x000000000000571A code_0x571A:
   .text:0x000000000000571A        E80DE6FFFF           call func_0x3D2C; void __cdecl( void )
   .text:0x000000000000571F        90                   nop
   .text:0x0000000000005720 __acrt_initialize_multibyte:
   .text:0x0000000000005720        4883EC28             sub rsp, 0x28
   .text:0x0000000000005724        803D69F6000000       cmp byte ptr [data_0x14D94], 0x0
   .text:0x000000000000572B        754C                 jnz code_0x5779
   .text:0x000000000000572D code_0x572D:
   .text:0x000000000000572D        488D0D5CED0000       lea rcx, [data_0x14490]
   .text:0x0000000000005734        48890D4DF60000       mov qword ptr [data_0x14D88], rcx
   .text:0x000000000000573B        488D050EEA0000       lea rax, [data_0x14150]
   .text:0x0000000000005742        488D0D37EC0000       lea rcx, [data_0x14380]
   .text:0x0000000000005749        48890528F60000       mov qword ptr [data_0x14D78], rax
   .text:0x0000000000005750        48890D29F60000       mov qword ptr [data_0x14D80], rcx
   .text:0x0000000000005757        E8C0EBFFFF           call func_0x431C; int64_t __cdecl( void )
   .text:0x000000000000575C        4C8D0D15F60000       lea r9, [data_0x14D78]
   .text:0x0000000000005763        4C8BC0               mov r8, rax
   .text:0x0000000000005766        B201                 mov dl, 0x1
   .text:0x0000000000005768        B9FDFFFFFF           mov ecx, 0xFFFFFFFD
   .text:0x000000000000576D        E832FDFFFF           call setmbcp_internal; int __cdecl( int p1, bool p2, const struct __acrt_ptd * p3, const struct __crt_multibyte_data ** p4 )
   .text:0x0000000000005772        C6051BF6000001       mov byte ptr [data_0x14D94], 0x1
   .text:0x0000000000005779 code_0x5779:
   .text:0x0000000000005779        B001                 mov al, 0x1
   .text:0x000000000000577B        4883C428             add rsp, 0x28
   .text:0x000000000000577F        C3                   ret
   .text:0x0000000000005780 __acrt_update_thread_multibyte_data:
   .text:0x0000000000005780        4883EC28             sub rsp, 0x28
   .text:0x0000000000005784        E8CFEAFFFF           call func_0x4258; int64_t __cdecl( void )
   .text:0x0000000000005789        488BC8               mov rcx, rax
   .text:0x000000000000578C        488D15E5F50000       lea rdx, [data_0x14D78]
   .text:0x0000000000005793        4883C428             add rsp, 0x28
   .text:0x0000000000005797        E9CCFEFFFF           jmp func_0x5668; int64_t __cdecl( int64_t p1, int64_t p2 )
   .text:0x000000000000579C _setmbcp_nolock:
   .text:0x000000000000579C        48895C2418           mov qword ptr [rsp+0x18], rbx
   .text:0x00000000000057A1        55                   push rbp
   .text:0x00000000000057A2        56                   push rsi
   .text:0x00000000000057A3        57                   push rdi
   .text:0x00000000000057A4        4154                 push r12
   .text:0x00000000000057A6        4155                 push r13
   .text:0x00000000000057A8        4156                 push r14
   .text:0x00000000000057AA        4157                 push r15
   .text:0x00000000000057AC        4883EC40             sub rsp, 0x40
   .text:0x00000000000057B0        488B0571E80000       mov rax, qword ptr [__security_cookie]
   .text:0x00000000000057B7        4833C4               xor rax, rsp
   .text:0x00000000000057BA        4889442438           mov qword ptr [rsp+0x38], rax
   .text:0x00000000000057BF        488BF2               mov rsi, rdx
   .text:0x00000000000057C2        E8E9F9FFFF           call func_0x51B0; int32_t __cdecl( int32_t p1 )
   .text:0x00000000000057C7        33DB                 xor ebx, ebx
   .text:0x00000000000057C9        8BF8                 mov edi, eax
   .text:0x00000000000057CB        85C0                 test eax, eax
   .text:0x00000000000057CD        750D                 jnz code_0x57DC
   .text:0x00000000000057CF code_0x57CF:
   .text:0x00000000000057CF        488BCE               mov rcx, rsi
   .text:0x00000000000057D2        E859FAFFFF           call setSBCS; void __cdecl( struct __crt_multibyte_data * p1 )
   .text:0x00000000000057D7        E950020000           jmp code_0x5A2C
   .text:0x00000000000057DC code_0x57DC:
   .text:0x00000000000057DC        4C8D2D7DE80000       lea r13, [data_0x14060]
   .text:0x00000000000057E3        448BF3               mov r14d, ebx
   .text:0x00000000000057E6        498BC5               mov rax, r13
   .text:0x00000000000057E9        BD01000000           mov ebp, 0x1
   .text:0x00000000000057EE code_0x57EE:
   .text:0x00000000000057EE        3938                 cmp dword ptr [rax], edi
   .text:0x00000000000057F0        0F8446010000         jz code_0x593C
   .text:0x00000000000057F6 code_0x57F6:
   .text:0x00000000000057F6        4403F5               add r14d, ebp
   .text:0x00000000000057F9        4883C030             add rax, 0x30
   .text:0x00000000000057FD        4183FE05             cmp r14d, 0x5
   .text:0x0000000000005801        72EB                 jb code_0x57EE
   .text:0x0000000000005803 code_0x5803:
   .text:0x0000000000005803        81FFE8FD0000         cmp edi, 0xFDE8
   .text:0x0000000000005809        0F8425010000         jz code_0x5934
   .text:0x000000000000580F code_0x580F:
   .text:0x000000000000580F        0FB7CF               movzx ecx, di
   .text:0x0000000000005812        FF1540590000         call qword ptr [IsValidCodePage]; int (__cdecl *)( unsigned int CodePage )
   .text:0x0000000000005818        85C0                 test eax, eax
   .text:0x000000000000581A        0F8414010000         jz code_0x5934
   .text:0x0000000000005820 code_0x5820:
   .text:0x0000000000005820        B8E9FD0000           mov eax, 0xFDE9
   .text:0x0000000000005825        3BF8                 cmp edi, eax
   .text:0x0000000000005827        7526                 jnz code_0x584F
   .text:0x0000000000005829 code_0x5829:
   .text:0x0000000000005829        48894604             mov qword ptr [rsi+0x4], rax
   .text:0x000000000000582D        48899E20020000       mov qword ptr [rsi+0x220], rbx
   .text:0x0000000000005834        895E18               mov dword ptr [rsi+0x18], ebx
   .text:0x0000000000005837        66895E1C             mov word ptr [rsi+0x1C], bx
   .text:0x000000000000583B code_0x583B:
   .text:0x000000000000583B        488D7E0C             lea rdi, [rsi+0xC]
   .text:0x000000000000583F        0FB7C3               movzx eax, bx
   .text:0x0000000000005842        B906000000           mov ecx, 0x6
   .text:0x0000000000005847        66F3AB               rep stosw
   .text:0x000000000000584A        E9D5010000           jmp code_0x5A24
   .text:0x000000000000584F code_0x584F:
   .text:0x000000000000584F        488D542420           lea rdx, [rsp+0x20]
   .text:0x0000000000005854        8BCF                 mov ecx, edi
   .text:0x0000000000005856        FF1514590000         call qword ptr [GetCPInfo]; int (__cdecl *)( unsigned int CodePage, struct _cpinfo * lpCPInfo )
   .text:0x000000000000585C        85C0                 test eax, eax
   .text:0x000000000000585E        0F84C4000000         jz code_0x5928
   .text:0x0000000000005864 code_0x5864:
   .text:0x0000000000005864        33D2                 xor edx, edx
   .text:0x0000000000005866        488D4E18             lea rcx, [rsi+0x18]
   .text:0x000000000000586A        41B801010000         mov r8d, 0x101
   .text:0x0000000000005870        E8EBC4FFFF           call func_0x1D60; int64_t __cdecl( int64_t p1, int8_t p2, int64_t p3 )
   .text:0x0000000000005875        837C242002           cmp dword ptr [rsp+0x20], 0x2
   .text:0x000000000000587A        897E04               mov dword ptr [rsi+0x4], edi
   .text:0x000000000000587D        48899E20020000       mov qword ptr [rsi+0x220], rbx
   .text:0x0000000000005884        0F8594000000         jnz code_0x591E
   .text:0x000000000000588A code_0x588A:
   .text:0x000000000000588A        488D4C2426           lea rcx, [rsp+0x26]
   .text:0x000000000000588F        385C2426             cmp byte ptr [rsp+0x26], bl
   .text:0x0000000000005893        742C                 jz code_0x58C1
   .text:0x0000000000005895 code_0x5895:
   .text:0x0000000000005895        385901               cmp byte ptr [rcx+0x1], bl
   .text:0x0000000000005898        7427                 jz code_0x58C1
   .text:0x000000000000589A code_0x589A:
   .text:0x000000000000589A        0FB64101             movzx eax, byte ptr [rcx+0x1]
   .text:0x000000000000589E        0FB611               movzx edx, byte ptr [rcx]
   .text:0x00000000000058A1        3BD0                 cmp edx, eax
   .text:0x00000000000058A3        7714                 ja code_0x58B9
   .text:0x00000000000058A5 code_0x58A5:
   .text:0x00000000000058A5        2BC2                 sub eax, edx
   .text:0x00000000000058A7        8D7A01               lea edi, [rdx+0x1]
   .text:0x00000000000058AA        8D1428               lea edx, [rax+rbp]
   .text:0x00000000000058AD code_0x58AD:
   .text:0x00000000000058AD        804C371804           or byte ptr [rdi+rsi+0x18], 0x4
   .text:0x00000000000058B2        03FD                 add edi, ebp
   .text:0x00000000000058B4        482BD5               sub rdx, rbp
   .text:0x00000000000058B7        75F4                 jnz code_0x58AD
   .text:0x00000000000058B9 code_0x58B9:
   .text:0x00000000000058B9        4883C102             add rcx, 0x2
   .text:0x00000000000058BD        3819                 cmp byte ptr [rcx], bl
   .text:0x00000000000058BF        75D4                 jnz code_0x5895
   .text:0x00000000000058C1 code_0x58C1:
   .text:0x00000000000058C1        488D461A             lea rax, [rsi+0x1A]
   .text:0x00000000000058C5        B9FE000000           mov ecx, 0xFE
   .text:0x00000000000058CA code_0x58CA:
   .text:0x00000000000058CA        800808               or byte ptr [rax], 0x8
   .text:0x00000000000058CD        4803C5               add rax, rbp
   .text:0x00000000000058D0        482BCD               sub rcx, rbp
   .text:0x00000000000058D3        75F5                 jnz code_0x58CA
   .text:0x00000000000058D5 code_0x58D5:
   .text:0x00000000000058D5        8B4E04               mov ecx, dword ptr [rsi+0x4]
   .text:0x00000000000058D8        81E9A4030000         sub ecx, 0x3A4
   .text:0x00000000000058DE        742E                 jz code_0x590E
   .text:0x00000000000058E0 code_0x58E0:
   .text:0x00000000000058E0        83E904               sub ecx, 0x4
   .text:0x00000000000058E3        7420                 jz code_0x5905
   .text:0x00000000000058E5 code_0x58E5:
   .text:0x00000000000058E5        83E90D               sub ecx, 0xD
   .text:0x00000000000058E8        7412                 jz code_0x58FC
   .text:0x00000000000058EA code_0x58EA:
   .text:0x00000000000058EA        3BCD                 cmp ecx, ebp
   .text:0x00000000000058EC        7405                 jz code_0x58F3
   .text:0x00000000000058EE code_0x58EE:
   .text:0x00000000000058EE        488BC3               mov rax, rbx
   .text:0x00000000000058F1        EB22                 jmp code_0x5915
   .text:0x00000000000058F3 code_0x58F3:
   .text:0x00000000000058F3        488B054E680000       mov rax, qword ptr [data_0xC148]; "zh-TW"
   .text:0x00000000000058FA        EB19                 jmp code_0x5915
   .text:0x00000000000058FC code_0x58FC:
   .text:0x00000000000058FC        488B053D680000       mov rax, qword ptr [data_0xC140]; "ko-KR"
   .text:0x0000000000005903        EB10                 jmp code_0x5915
   .text:0x0000000000005905 code_0x5905:
   .text:0x0000000000005905        488B052C680000       mov rax, qword ptr [data_0xC138]; "zh-CN"
   .text:0x000000000000590C        EB07                 jmp code_0x5915
   .text:0x000000000000590E code_0x590E:
   .text:0x000000000000590E        488B051B680000       mov rax, qword ptr [data_0xC130]; "ja-JP"
   .text:0x0000000000005915 code_0x5915:
   .text:0x0000000000005915        48898620020000       mov qword ptr [rsi+0x220], rax
   .text:0x000000000000591C        EB02                 jmp code_0x5920
   .text:0x000000000000591E code_0x591E:
   .text:0x000000000000591E        8BEB                 mov ebp, ebx
   .text:0x0000000000005920 code_0x5920:
   .text:0x0000000000005920        896E08               mov dword ptr [rsi+0x8], ebp
   .text:0x0000000000005923        E913FFFFFF           jmp code_0x583B
   .text:0x0000000000005928 code_0x5928:
   .text:0x0000000000005928        391D62F40000         cmp dword ptr [data_0x14D90], ebx
   .text:0x000000000000592E        0F859BFEFFFF         jnz code_0x57CF
   .text:0x0000000000005934 code_0x5934:
   .text:0x0000000000005934        83C8FF               or eax, 0xFFFFFFFF
   .text:0x0000000000005937        E9F2000000           jmp code_0x5A2E
   .text:0x000000000000593C code_0x593C:
   .text:0x000000000000593C        33D2                 xor edx, edx
   .text:0x000000000000593E        488D4E18             lea rcx, [rsi+0x18]
   .text:0x0000000000005942        41B801010000         mov r8d, 0x101
   .text:0x0000000000005948        E813C4FFFF           call func_0x1D60; int64_t __cdecl( int64_t p1, int8_t p2, int64_t p3 )
   .text:0x000000000000594D        418BC6               mov eax, r14d
   .text:0x0000000000005950        4D8D4D10             lea r9, [r13+0x10]
   .text:0x0000000000005954        4C8D3D01E70000       lea r15, [data_0x1405C]
   .text:0x000000000000595B        41BE04000000         mov r14d, 0x4
   .text:0x0000000000005961        4C8D1C40             lea r11, [rax+rax*2]
   .text:0x0000000000005965        49C1E304             shl r11, 0x4
   .text:0x0000000000005969        4D03CB               add r9, r11
   .text:0x000000000000596C code_0x596C:
   .text:0x000000000000596C        498BD1               mov rdx, r9
   .text:0x000000000000596F        413819               cmp byte ptr [r9], bl
   .text:0x0000000000005972        743E                 jz code_0x59B2
   .text:0x0000000000005974 code_0x5974:
   .text:0x0000000000005974        385A01               cmp byte ptr [rdx+0x1], bl
   .text:0x0000000000005977        7439                 jz code_0x59B2
   .text:0x0000000000005979 code_0x5979:
   .text:0x0000000000005979        440FB602             movzx r8d, byte ptr [rdx]
   .text:0x000000000000597D        0FB64201             movzx eax, byte ptr [rdx+0x1]
   .text:0x0000000000005981        443BC0               cmp r8d, eax
   .text:0x0000000000005984        7724                 ja code_0x59AA
   .text:0x0000000000005986 code_0x5986:
   .text:0x0000000000005986        458D5001             lea r10d, [r8+0x1]
   .text:0x000000000000598A code_0x598A:
   .text:0x000000000000598A        4181FA01010000       cmp r10d, 0x101
   .text:0x0000000000005991        7317                 jae code_0x59AA
   .text:0x0000000000005993 code_0x5993:
   .text:0x0000000000005993        418A07               mov al, byte ptr [r15]
   .text:0x0000000000005996        4403C5               add r8d, ebp
   .text:0x0000000000005999        4108443218           or byte ptr [r10+rsi+0x18], al
   .text:0x000000000000599E        4403D5               add r10d, ebp
   .text:0x00000000000059A1        0FB64201             movzx eax, byte ptr [rdx+0x1]
   .text:0x00000000000059A5        443BC0               cmp r8d, eax
   .text:0x00000000000059A8        76E0                 jbe code_0x598A
   .text:0x00000000000059AA code_0x59AA:
   .text:0x00000000000059AA        4883C202             add rdx, 0x2
   .text:0x00000000000059AE        381A                 cmp byte ptr [rdx], bl
   .text:0x00000000000059B0        75C2                 jnz code_0x5974
   .text:0x00000000000059B2 code_0x59B2:
   .text:0x00000000000059B2        4983C108             add r9, 0x8
   .text:0x00000000000059B6        4C03FD               add r15, rbp
   .text:0x00000000000059B9        4C2BF5               sub r14, rbp
   .text:0x00000000000059BC        75AE                 jnz code_0x596C
   .text:0x00000000000059BE code_0x59BE:
   .text:0x00000000000059BE        897E04               mov dword ptr [rsi+0x4], edi
   .text:0x00000000000059C1        896E08               mov dword ptr [rsi+0x8], ebp
   .text:0x00000000000059C4        81EFA4030000         sub edi, 0x3A4
   .text:0x00000000000059CA        7429                 jz code_0x59F5
   .text:0x00000000000059CC code_0x59CC:
   .text:0x00000000000059CC        83EF04               sub edi, 0x4
   .text:0x00000000000059CF        741B                 jz code_0x59EC
   .text:0x00000000000059D1 code_0x59D1:
   .text:0x00000000000059D1        83EF0D               sub edi, 0xD
   .text:0x00000000000059D4        740D                 jz code_0x59E3
   .text:0x00000000000059D6 code_0x59D6:
   .text:0x00000000000059D6        3BFD                 cmp edi, ebp
   .text:0x00000000000059D8        7522                 jnz code_0x59FC
   .text:0x00000000000059DA code_0x59DA:
   .text:0x00000000000059DA        488B1D67670000       mov rbx, qword ptr [data_0xC148]; "zh-TW"
   .text:0x00000000000059E1        EB19                 jmp code_0x59FC
   .text:0x00000000000059E3 code_0x59E3:
   .text:0x00000000000059E3        488B1D56670000       mov rbx, qword ptr [data_0xC140]; "ko-KR"
   .text:0x00000000000059EA        EB10                 jmp code_0x59FC
   .text:0x00000000000059EC code_0x59EC:
   .text:0x00000000000059EC        488B1D45670000       mov rbx, qword ptr [data_0xC138]; "zh-CN"
   .text:0x00000000000059F3        EB07                 jmp code_0x59FC
   .text:0x00000000000059F5 code_0x59F5:
   .text:0x00000000000059F5        488B1D34670000       mov rbx, qword ptr [data_0xC130]; "ja-JP"
   .text:0x00000000000059FC code_0x59FC:
   .text:0x00000000000059FC        4C2BDE               sub r11, rsi
   .text:0x00000000000059FF        48899E20020000       mov qword ptr [rsi+0x220], rbx
   .text:0x0000000000005A06        488D560C             lea rdx, [rsi+0xC]
   .text:0x0000000000005A0A        B906000000           mov ecx, 0x6
   .text:0x0000000000005A0F        4B8D3C2B             lea rdi, [r11+r13]
   .text:0x0000000000005A13 code_0x5A13:
   .text:0x0000000000005A13        0FB74417F8           movzx eax, word ptr [rdi+rdx-0x8]
   .text:0x0000000000005A18        668902               mov word ptr [rdx], ax
   .text:0x0000000000005A1B        488D5202             lea rdx, [rdx+0x2]
   .text:0x0000000000005A1F        482BCD               sub rcx, rbp
   .text:0x0000000000005A22        75EF                 jnz code_0x5A13
   .text:0x0000000000005A24 code_0x5A24:
   .text:0x0000000000005A24        488BCE               mov rcx, rsi
   .text:0x0000000000005A27        E894F8FFFF           call setSBUpLow; void __cdecl( struct __crt_multibyte_data * p1 )
   .text:0x0000000000005A2C code_0x5A2C:
   .text:0x0000000000005A2C        33C0                 xor eax, eax
   .text:0x0000000000005A2E code_0x5A2E:
   .text:0x0000000000005A2E        488B4C2438           mov rcx, qword ptr [rsp+0x38]
   .text:0x0000000000005A33        4833CC               xor rcx, rsp
   .text:0x0000000000005A36        E8154E0000           call __security_check_cookie; noclobber void __cdecl( uint64_t p1 )
   .text:0x0000000000005A3B        488B9C2490000000     mov rbx, qword ptr [rsp+0x90]
   .text:0x0000000000005A43        4883C440             add rsp, 0x40
   .text:0x0000000000005A47        415F                 pop r15
   .text:0x0000000000005A49        415E                 pop r14
   .text:0x0000000000005A4B        415D                 pop r13
   .text:0x0000000000005A4D        415C                 pop r12
   .text:0x0000000000005A4F        5F                   pop rdi
   .text:0x0000000000005A50        5E                   pop rsi
   .text:0x0000000000005A51        5D                   pop rbp
   .text:0x0000000000005A52        C3                   ret
   .text:0x0000000000005A53 code_0x5A53:
   .text:0x0000000000005A53        CC                   int3
   .text:0x0000000000005A54 __acrt_initialize_command_line:
   .text:0x0000000000005A54        4883EC28             sub rsp, 0x28
   .text:0x0000000000005A58        FF151A570000         call qword ptr [GetCommandLineA]; char * (__cdecl *)( void )
   .text:0x0000000000005A5E        4889054BF30000       mov qword ptr [data_0x14DB0], rax
   .text:0x0000000000005A65        FF1515570000         call qword ptr [GetCommandLineW]; unsigned short * (__cdecl *)( void )
   .text:0x0000000000005A6B        48890546F30000       mov qword ptr [data_0x14DB8], rax
   .text:0x0000000000005A72        B001                 mov al, 0x1
   .text:0x0000000000005A74        4883C428             add rsp, 0x28
   .text:0x0000000000005A78        C3                   ret
   .text:0x0000000000005A79 data_0x5A79:
   .text:0x0000000000005A79        db 3 dup(0xCC)
   .text:0x0000000000005A7C __acrt_MultiByteToWideChar:
   .text:0x0000000000005A7C        81F935C40000         cmp ecx, 0xC435
   .text:0x0000000000005A82        7720                 ja code_0x5AA4
   .text:0x0000000000005A84 code_0x5A84:
   .text:0x0000000000005A84        8D81D43BFFFF         lea eax, [rcx-0xC42C]
   .text:0x0000000000005A8A        83F809               cmp eax, 0x9
   .text:0x0000000000005A8D        770C                 ja code_0x5A9B
   .text:0x0000000000005A8F code_0x5A8F:
   .text:0x0000000000005A8F        41BAA7020000         mov r10d, 0x2A7
   .text:0x0000000000005A95        410FA3C2             bt r10d, eax
   .text:0x0000000000005A99        7205                 jb code_0x5AA0
   .text:0x0000000000005A9B code_0x5A9B:
   .text:0x0000000000005A9B        83F92A               cmp ecx, 0x2A
   .text:0x0000000000005A9E        752F                 jnz MultiByteToWideChar_1
   .text:0x0000000000005AA0 code_0x5AA0:
   .text:0x0000000000005AA0        33D2                 xor edx, edx
   .text:0x0000000000005AA2        EB2B                 jmp MultiByteToWideChar_1
   .text:0x0000000000005AA4 code_0x5AA4:
   .text:0x0000000000005AA4        81F998D60000         cmp ecx, 0xD698
   .text:0x0000000000005AAA        7420                 jz code_0x5ACC
   .text:0x0000000000005AAC code_0x5AAC:
   .text:0x0000000000005AAC        81F9A9DE0000         cmp ecx, 0xDEA9
   .text:0x0000000000005AB2        761B                 jbe MultiByteToWideChar_1
   .text:0x0000000000005AB4 code_0x5AB4:
   .text:0x0000000000005AB4        81F9B3DE0000         cmp ecx, 0xDEB3
   .text:0x0000000000005ABA        76E4                 jbe code_0x5AA0
   .text:0x0000000000005ABC code_0x5ABC:
   .text:0x0000000000005ABC        81F9E8FD0000         cmp ecx, 0xFDE8
   .text:0x0000000000005AC2        74DC                 jz code_0x5AA0
   .text:0x0000000000005AC4 code_0x5AC4:
   .text:0x0000000000005AC4        81F9E9FD0000         cmp ecx, 0xFDE9
   .text:0x0000000000005ACA        7503                 jnz MultiByteToWideChar_1
   .text:0x0000000000005ACC code_0x5ACC:
   .text:0x0000000000005ACC        83E208               and edx, 0x8
   .text:0x0000000000005ACF MultiByteToWideChar_1:
   .text:0x0000000000005ACF        48FF25B2560000       jmp qword ptr [MultiByteToWideChar]; int (__cdecl *)( unsigned int CodePage, unsigned long dwFlags, char * lpMultiByteStr, int cbMultiByte, unsigned short * lpWideCharStr, int cchWideChar )
   .text:0x0000000000005AD6 data_0x5AD6:
   .text:0x0000000000005AD6        db 2 dup(0xCC)
   .text:0x0000000000005AD8 __acrt_WideCharToMultiByte:
   .text:0x0000000000005AD8        4053                 push rbx
   .text:0x0000000000005ADA        8D811802FFFF         lea eax, [rcx-0xFDE8]
   .text:0x0000000000005AE0        448BD1               mov r10d, ecx
   .text:0x0000000000005AE3        83F801               cmp eax, 0x1
   .text:0x0000000000005AE6        410F96C3             setbe r11b
   .text:0x0000000000005AEA        33DB                 xor ebx, ebx
   .text:0x0000000000005AEC        81F935C40000         cmp ecx, 0xC435
   .text:0x0000000000005AF2        771B                 ja code_0x5B0F
   .text:0x0000000000005AF4 code_0x5AF4:
   .text:0x0000000000005AF4        8D81D43BFFFF         lea eax, [rcx-0xC42C]
   .text:0x0000000000005AFA        83F809               cmp eax, 0x9
   .text:0x0000000000005AFD        770A                 ja code_0x5B09
   .text:0x0000000000005AFF code_0x5AFF:
   .text:0x0000000000005AFF        B9A7020000           mov ecx, 0x2A7
   .text:0x0000000000005B04        0FA3C1               bt ecx, eax
   .text:0x0000000000005B07        7239                 jb code_0x5B42
   .text:0x0000000000005B09 code_0x5B09:
   .text:0x0000000000005B09        4183FA2A             cmp r10d, 0x2A
   .text:0x0000000000005B0D        EB2B                 jmp code_0x5B3A
   .text:0x0000000000005B0F code_0x5B0F:
   .text:0x0000000000005B0F        4181FA98D60000       cmp r10d, 0xD698
   .text:0x0000000000005B16        742A                 jz code_0x5B42
   .text:0x0000000000005B18 code_0x5B18:
   .text:0x0000000000005B18        4181FAA9DE0000       cmp r10d, 0xDEA9
   .text:0x0000000000005B1F        761B                 jbe code_0x5B3C
   .text:0x0000000000005B21 code_0x5B21:
   .text:0x0000000000005B21        4181FAB3DE0000       cmp r10d, 0xDEB3
   .text:0x0000000000005B28        7618                 jbe code_0x5B42
   .text:0x0000000000005B2A code_0x5B2A:
   .text:0x0000000000005B2A        4181FAE8FD0000       cmp r10d, 0xFDE8
   .text:0x0000000000005B31        740F                 jz code_0x5B42
   .text:0x0000000000005B33 code_0x5B33:
   .text:0x0000000000005B33        4181FAE9FD0000       cmp r10d, 0xFDE9
   .text:0x0000000000005B3A code_0x5B3A:
   .text:0x0000000000005B3A        7406                 jz code_0x5B42
   .text:0x0000000000005B3C code_0x5B3C:
   .text:0x0000000000005B3C        0FBAF207             btr edx, 0x7
   .text:0x0000000000005B40        EB02                 jmp code_0x5B44
   .text:0x0000000000005B42 code_0x5B42:
   .text:0x0000000000005B42        8BD3                 mov edx, ebx
   .text:0x0000000000005B44 code_0x5B44:
   .text:0x0000000000005B44        488B4C2448           mov rcx, qword ptr [rsp+0x48]
   .text:0x0000000000005B49        4584DB               test r11b, r11b
   .text:0x0000000000005B4C        488B442440           mov rax, qword ptr [rsp+0x40]
   .text:0x0000000000005B51        480F45C3             cmovne rax, rbx
   .text:0x0000000000005B55        480F45CB             cmovne rcx, rbx
   .text:0x0000000000005B59        48894C2448           mov qword ptr [rsp+0x48], rcx
   .text:0x0000000000005B5E        418BCA               mov ecx, r10d
   .text:0x0000000000005B61        4889442440           mov qword ptr [rsp+0x40], rax
   .text:0x0000000000005B66        5B                   pop rbx
   .text:0x0000000000005B67        48FF2522560000       jmp qword ptr [WideCharToMultiByte]; int (__cdecl *)( unsigned int CodePage, unsigned long dwFlags, unsigned short * lpWideCharStr, int cchWideChar, char * lpMultiByteStr, int cbMultiByte, char * lpDefaultChar, int * lpUsedDefaultChar )
   .text:0x0000000000005B6E data_0x5B6E:
   .text:0x0000000000005B6E        db 2 dup(0xCC)
   .text:0x0000000000005B70 __dcrt_get_wide_environment_from_os:
   .text:0x0000000000005B70        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000005B75        48896C2410           mov qword ptr [rsp+0x10], rbp
   .text:0x0000000000005B7A        4889742418           mov qword ptr [rsp+0x18], rsi
   .text:0x0000000000005B7F        57                   push rdi
   .text:0x0000000000005B80        4883EC20             sub rsp, 0x20
   .text:0x0000000000005B84        FF150E560000         call qword ptr [GetEnvironmentStringsW]; unsigned short * (__cdecl *)( void )
   .text:0x0000000000005B8A        33F6                 xor esi, esi
   .text:0x0000000000005B8C        488BD8               mov rbx, rax
   .text:0x0000000000005B8F        4885C0               test rax, rax
   .text:0x0000000000005B92        7463                 jz code_0x5BF7
   .text:0x0000000000005B94 code_0x5B94:
   .text:0x0000000000005B94        488BE8               mov rbp, rax
   .text:0x0000000000005B97        663930               cmp word ptr [rax], si
   .text:0x0000000000005B9A        741D                 jz code_0x5BB9
   .text:0x0000000000005B9C code_0x5B9C:
   .text:0x0000000000005B9C        4883C8FF             or rax, 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000005BA0 code_0x5BA0:
   .text:0x0000000000005BA0        48FFC0               inc rax
   .text:0x0000000000005BA3        6639744500           cmp word ptr [rbp+rax*2+0x0], si
   .text:0x0000000000005BA8        75F6                 jnz code_0x5BA0
   .text:0x0000000000005BAA code_0x5BAA:
   .text:0x0000000000005BAA        488D6C4500           lea rbp, [rbp+rax*2+0x0]
   .text:0x0000000000005BAF        4883C502             add rbp, 0x2
   .text:0x0000000000005BB3        66397500             cmp word ptr [rbp+0x0], si
   .text:0x0000000000005BB7        75E3                 jnz code_0x5B9C
   .text:0x0000000000005BB9 code_0x5BB9:
   .text:0x0000000000005BB9        482BEB               sub rbp, rbx
   .text:0x0000000000005BBC        4883C502             add rbp, 0x2
   .text:0x0000000000005BC0        48D1FD               sar rbp, 1
   .text:0x0000000000005BC3        4803ED               add rbp, rbp
   .text:0x0000000000005BC6        488BCD               mov rcx, rbp
   .text:0x0000000000005BC9        E8AA090000           call _malloc_base; void * __cdecl( unsigned long long _Size )
   .text:0x0000000000005BCE        488BF8               mov rdi, rax
   .text:0x0000000000005BD1        4885C0               test rax, rax
   .text:0x0000000000005BD4        7411                 jz code_0x5BE7
   .text:0x0000000000005BD6 code_0x5BD6:
   .text:0x0000000000005BD6        4C8BC5               mov r8, rbp
   .text:0x0000000000005BD9        488BD3               mov rdx, rbx
   .text:0x0000000000005BDC        488BC8               mov rcx, rax
   .text:0x0000000000005BDF        E8ECC8FFFF           call func_0x24D0; void __cdecl( int64_t p1, int64_t p2, int64_t p3 )
   .text:0x0000000000005BE4        488BF7               mov rsi, rdi
   .text:0x0000000000005BE7 code_0x5BE7:
   .text:0x0000000000005BE7        33C9                 xor ecx, ecx
   .text:0x0000000000005BE9        E826EEFFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000005BEE        488BCB               mov rcx, rbx
   .text:0x0000000000005BF1        FF15A9550000         call qword ptr [FreeEnvironmentStringsW]; int (__cdecl *)( unsigned short * penv )
   .text:0x0000000000005BF7 code_0x5BF7:
   .text:0x0000000000005BF7        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000005BFC        488BC6               mov rax, rsi
   .text:0x0000000000005BFF        488B742440           mov rsi, qword ptr [rsp+0x40]
   .text:0x0000000000005C04        488B6C2438           mov rbp, qword ptr [rsp+0x38]
   .text:0x0000000000005C09        4883C420             add rsp, 0x20
   .text:0x0000000000005C0D        5F                   pop rdi
   .text:0x0000000000005C0E        C3                   ret
   .text:0x0000000000005C0F code_0x5C0F:
   .text:0x0000000000005C0F        CC                   int3
   .text:0x0000000000005C10 __acrt_initialize_locks:
   .text:0x0000000000005C10        4053                 push rbx
   .text:0x0000000000005C12        4883EC20             sub rsp, 0x20
   .text:0x0000000000005C16        33DB                 xor ebx, ebx
   .text:0x0000000000005C18 code_0x5C18:
   .text:0x0000000000005C18        488D15B1F10000       lea rdx, [data_0x14DD0]
   .text:0x0000000000005C1F        4533C0               xor r8d, r8d
   .text:0x0000000000005C22        488D0C9B             lea rcx, [rbx+rbx*4]
   .text:0x0000000000005C26        488D0CCA             lea rcx, [rdx+rcx*8]
   .text:0x0000000000005C2A        BAA00F0000           mov edx, 0xFA0
   .text:0x0000000000005C2F        E8C8120000           call __acrt_InitializeCriticalSectionEx; void __cdecl( int64_t p1, int32_t p2, int32_t p3 )
   .text:0x0000000000005C34        85C0                 test eax, eax
   .text:0x0000000000005C36        7411                 jz code_0x5C49
   .text:0x0000000000005C38 code_0x5C38:
   .text:0x0000000000005C38        FF05C2F30000         inc dword ptr [data_0x15000]
   .text:0x0000000000005C3E        FFC3                 inc ebx
   .text:0x0000000000005C40        83FB0E               cmp ebx, 0xE
   .text:0x0000000000005C43        72D3                 jb code_0x5C18
   .text:0x0000000000005C45 code_0x5C45:
   .text:0x0000000000005C45        B001                 mov al, 0x1
   .text:0x0000000000005C47        EB09                 jmp code_0x5C52
   .text:0x0000000000005C49 code_0x5C49:
   .text:0x0000000000005C49        33C9                 xor ecx, ecx
   .text:0x0000000000005C4B        E824000000           call __acrt_uninitialize_locks; int8_t __cdecl( void )
   .text:0x0000000000005C50        32C0                 xor al, al
   .text:0x0000000000005C52 code_0x5C52:
   .text:0x0000000000005C52        4883C420             add rsp, 0x20
   .text:0x0000000000005C56        5B                   pop rbx
   .text:0x0000000000005C57        C3                   ret
   .text:0x0000000000005C58 __acrt_lock:
   .text:0x0000000000005C58        4863C1               movsxd rax, ecx
   .text:0x0000000000005C5B        488D0C80             lea rcx, [rax+rax*4]
   .text:0x0000000000005C5F        488D056AF10000       lea rax, [data_0x14DD0]
   .text:0x0000000000005C66        488D0CC8             lea rcx, [rax+rcx*8]
   .text:0x0000000000005C6A        48FF252F540000       jmp qword ptr [EnterCriticalSection]; void (__cdecl *)( struct _RTL_CRITICAL_SECTION * lpCriticalSection )
   .text:0x0000000000005C71 data_0x5C71:
   .text:0x0000000000005C71        db 3 dup(0xCC)
   .text:0x0000000000005C74 __acrt_uninitialize_locks:
   .text:0x0000000000005C74        4053                 push rbx
   .text:0x0000000000005C76        4883EC20             sub rsp, 0x20
   .text:0x0000000000005C7A        8B1D80F30000         mov ebx, dword ptr [data_0x15000]
   .text:0x0000000000005C80        EB1D                 jmp code_0x5C9F
   .text:0x0000000000005C82 code_0x5C82:
   .text:0x0000000000005C82        488D0547F10000       lea rax, [data_0x14DD0]
   .text:0x0000000000005C89        FFCB                 dec ebx
   .text:0x0000000000005C8B        488D0C9B             lea rcx, [rbx+rbx*4]
   .text:0x0000000000005C8F        488D0CC8             lea rcx, [rax+rcx*8]
   .text:0x0000000000005C93        FF1517540000         call qword ptr [DeleteCriticalSection]; void (__cdecl *)( struct _RTL_CRITICAL_SECTION * lpCriticalSection )
   .text:0x0000000000005C99        FF0D61F30000         dec dword ptr [data_0x15000]
   .text:0x0000000000005C9F code_0x5C9F:
   .text:0x0000000000005C9F        85DB                 test ebx, ebx
   .text:0x0000000000005CA1        75DF                 jnz code_0x5C82
   .text:0x0000000000005CA3 code_0x5CA3:
   .text:0x0000000000005CA3        B001                 mov al, 0x1
   .text:0x0000000000005CA5        4883C420             add rsp, 0x20
   .text:0x0000000000005CA9        5B                   pop rbx
   .text:0x0000000000005CAA        C3                   ret
   .text:0x0000000000005CAB code_0x5CAB:
   .text:0x0000000000005CAB        CC                   int3
   .text:0x0000000000005CAC func_0x5CAC:
   .text:0x0000000000005CAC        4863C1               movsxd rax, ecx
   .text:0x0000000000005CAF        488D0C80             lea rcx, [rax+rax*4]
   .text:0x0000000000005CB3        488D0516F10000       lea rax, [data_0x14DD0]
   .text:0x0000000000005CBA        488D0CC8             lea rcx, [rax+rcx*8]
   .text:0x0000000000005CBE        48FF25E3530000       jmp qword ptr [LeaveCriticalSection]; void (__cdecl *)( struct _RTL_CRITICAL_SECTION * lpCriticalSection )
   .text:0x0000000000005CC5 data_0x5CC5:
   .text:0x0000000000005CC5        db 3 dup(0xCC)
   .text:0x0000000000005CC8 __acrt_get_process_end_policy:
   .text:0x0000000000005CC8        4053                 push rbx
   .text:0x0000000000005CCA        4883EC20             sub rsp, 0x20
   .text:0x0000000000005CCE        33DB                 xor ebx, ebx
   .text:0x0000000000005CD0        895C2430             mov dword ptr [rsp+0x30], ebx
   .text:0x0000000000005CD4        65488B042560000000   mov rax, qword ptr gs:[0x60]
   .text:0x0000000000005CDD        488B4820             mov rcx, qword ptr [rax+0x20]
   .text:0x0000000000005CE1        395908               cmp dword ptr [rcx+0x8], ebx
   .text:0x0000000000005CE4        7C11                 jl code_0x5CF7
   .text:0x0000000000005CE6 code_0x5CE6:
   .text:0x0000000000005CE6        488D4C2430           lea rcx, [rsp+0x30]
   .text:0x0000000000005CEB        E890100000           call __acrt_AppPolicyGetProcessTerminationMethodInternal; int32_t __cdecl( int64_t p1 )
   .text:0x0000000000005CF0        837C243001           cmp dword ptr [rsp+0x30], 0x1
   .text:0x0000000000005CF5        7405                 jz code_0x5CFC
   .text:0x0000000000005CF7 code_0x5CF7:
   .text:0x0000000000005CF7        BB01000000           mov ebx, 0x1
   .text:0x0000000000005CFC code_0x5CFC:
   .text:0x0000000000005CFC        8BC3                 mov eax, ebx
   .text:0x0000000000005CFE        4883C420             add rsp, 0x20
   .text:0x0000000000005D02        5B                   pop rbx
   .text:0x0000000000005D03        C3                   ret
   .text:0x0000000000005D04 __acrt_lowio_create_handle_array:
   .text:0x0000000000005D04        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000005D09        48896C2410           mov qword ptr [rsp+0x10], rbp
   .text:0x0000000000005D0E        4889742418           mov qword ptr [rsp+0x18], rsi
   .text:0x0000000000005D13        57                   push rdi
   .text:0x0000000000005D14        4883EC20             sub rsp, 0x20
   .text:0x0000000000005D18        BA40000000           mov edx, 0x40
   .text:0x0000000000005D1D        8BCA                 mov ecx, edx
   .text:0x0000000000005D1F        E878ECFFFF           call _calloc_base; void * __cdecl( unsigned long long _Count, unsigned long long _Size )
   .text:0x0000000000005D24        33F6                 xor esi, esi
   .text:0x0000000000005D26        488BD8               mov rbx, rax
   .text:0x0000000000005D29        4885C0               test rax, rax
   .text:0x0000000000005D2C        744C                 jz code_0x5D7A
   .text:0x0000000000005D2E code_0x5D2E:
   .text:0x0000000000005D2E        488DA800100000       lea rbp, [rax+0x1000]
   .text:0x0000000000005D35        483BC5               cmp rax, rbp
   .text:0x0000000000005D38        743D                 jz code_0x5D77
   .text:0x0000000000005D3A code_0x5D3A:
   .text:0x0000000000005D3A        488D7830             lea rdi, [rax+0x30]
   .text:0x0000000000005D3E code_0x5D3E:
   .text:0x0000000000005D3E        488D4FD0             lea rcx, [rdi-0x30]
   .text:0x0000000000005D42        4533C0               xor r8d, r8d
   .text:0x0000000000005D45        BAA00F0000           mov edx, 0xFA0
   .text:0x0000000000005D4A        E8AD110000           call __acrt_InitializeCriticalSectionEx; void __cdecl( int64_t p1, int32_t p2, int32_t p3 )
   .text:0x0000000000005D4F        48834FF8FF           or qword ptr [rdi-0x8], 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000005D54        488937               mov qword ptr [rdi], rsi
   .text:0x0000000000005D57        C7470800000A0A       mov dword ptr [rdi+0x8], 0xA0A0000
   .text:0x0000000000005D5E        C6470C0A             mov byte ptr [rdi+0xC], 0xA
   .text:0x0000000000005D62        80670DF8             and byte ptr [rdi+0xD], 0xF8
   .text:0x0000000000005D66        4088770E             mov byte ptr [rdi+0xE], sil
   .text:0x0000000000005D6A        488D7F40             lea rdi, [rdi+0x40]
   .text:0x0000000000005D6E        488D47D0             lea rax, [rdi-0x30]
   .text:0x0000000000005D72        483BC5               cmp rax, rbp
   .text:0x0000000000005D75        75C7                 jnz code_0x5D3E
   .text:0x0000000000005D77 code_0x5D77:
   .text:0x0000000000005D77        488BF3               mov rsi, rbx
   .text:0x0000000000005D7A code_0x5D7A:
   .text:0x0000000000005D7A        33C9                 xor ecx, ecx
   .text:0x0000000000005D7C        E893ECFFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000005D81        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000005D86        488BC6               mov rax, rsi
   .text:0x0000000000005D89        488B742440           mov rsi, qword ptr [rsp+0x40]
   .text:0x0000000000005D8E        488B6C2438           mov rbp, qword ptr [rsp+0x38]
   .text:0x0000000000005D93        4883C420             add rsp, 0x20
   .text:0x0000000000005D97        5F                   pop rdi
   .text:0x0000000000005D98        C3                   ret
   .text:0x0000000000005D99 data_0x5D99:
   .text:0x0000000000005D99        db 3 dup(0xCC)
   .text:0x0000000000005D9C __acrt_lowio_destroy_handle_array:
   .text:0x0000000000005D9C        4885C9               test rcx, rcx
   .text:0x0000000000005D9F        744A                 jz code_0x5DEB
   .text:0x0000000000005DA1 code_0x5DA1:
   .text:0x0000000000005DA1        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000005DA6        4889742410           mov qword ptr [rsp+0x10], rsi
   .text:0x0000000000005DAB        57                   push rdi
   .text:0x0000000000005DAC        4883EC20             sub rsp, 0x20
   .text:0x0000000000005DB0        488DB100100000       lea rsi, [rcx+0x1000]
   .text:0x0000000000005DB7        488BD9               mov rbx, rcx
   .text:0x0000000000005DBA        488BF9               mov rdi, rcx
   .text:0x0000000000005DBD        483BCE               cmp rcx, rsi
   .text:0x0000000000005DC0        7412                 jz code_0x5DD4
   .text:0x0000000000005DC2 code_0x5DC2:
   .text:0x0000000000005DC2        488BCF               mov rcx, rdi
   .text:0x0000000000005DC5        FF15E5520000         call qword ptr [DeleteCriticalSection]; void (__cdecl *)( struct _RTL_CRITICAL_SECTION * lpCriticalSection )
   .text:0x0000000000005DCB        4883C740             add rdi, 0x40
   .text:0x0000000000005DCF        483BFE               cmp rdi, rsi
   .text:0x0000000000005DD2        75EE                 jnz code_0x5DC2
   .text:0x0000000000005DD4 code_0x5DD4:
   .text:0x0000000000005DD4        488BCB               mov rcx, rbx
   .text:0x0000000000005DD7        E838ECFFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000005DDC        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000005DE1        488B742438           mov rsi, qword ptr [rsp+0x38]
   .text:0x0000000000005DE6        4883C420             add rsp, 0x20
   .text:0x0000000000005DEA        5F                   pop rdi
   .text:0x0000000000005DEB code_0x5DEB:
   .text:0x0000000000005DEB        C3                   ret
   .text:0x0000000000005DEC __acrt_lowio_ensure_fh_exists:
   .text:0x0000000000005DEC        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000005DF1        4889742410           mov qword ptr [rsp+0x10], rsi
   .text:0x0000000000005DF6        48897C2418           mov qword ptr [rsp+0x18], rdi
   .text:0x0000000000005DFB        4157                 push r15
   .text:0x0000000000005DFD        4883EC30             sub rsp, 0x30
   .text:0x0000000000005E01        8BF1                 mov esi, ecx
   .text:0x0000000000005E03        81F900200000         cmp ecx, 0x2000
   .text:0x0000000000005E09        7215                 jb code_0x5E20
   .text:0x0000000000005E0B code_0x5E0B:
   .text:0x0000000000005E0B        E86CEBFFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000005E10        BB09000000           mov ebx, 0x9
   .text:0x0000000000005E15        8918                 mov dword ptr [rax], ebx
   .text:0x0000000000005E17        E8D4E8FFFF           call _invalid_parameter_noinfo; void __cdecl( void )
   .text:0x0000000000005E1C        8BC3                 mov eax, ebx
   .text:0x0000000000005E1E        EB5E                 jmp code_0x5E7E
   .text:0x0000000000005E20 code_0x5E20:
   .text:0x0000000000005E20        33FF                 xor edi, edi
   .text:0x0000000000005E22        8D4F07               lea ecx, [rdi+0x7]
   .text:0x0000000000005E25        E82EFEFFFF           call __acrt_lock; void __cdecl( int32_t p1 )
   .text:0x0000000000005E2A        90                   nop
   .text:0x0000000000005E2B        8BDF                 mov ebx, edi
   .text:0x0000000000005E2D        8B05DDF50000         mov eax, dword ptr [data_0x15410]
   .text:0x0000000000005E33 code_0x5E33:
   .text:0x0000000000005E33        48895C2420           mov qword ptr [rsp+0x20], rbx
   .text:0x0000000000005E38        3BF0                 cmp esi, eax
   .text:0x0000000000005E3A        7C36                 jl code_0x5E72
   .text:0x0000000000005E3C code_0x5E3C:
   .text:0x0000000000005E3C        4C8D3DCDF10000       lea r15, [data_0x15010]
   .text:0x0000000000005E43        49393CDF             cmp qword ptr [r15+rbx*8], rdi
   .text:0x0000000000005E47        7402                 jz code_0x5E4B
   .text:0x0000000000005E49 code_0x5E49:
   .text:0x0000000000005E49        EB22                 jmp code_0x5E6D
   .text:0x0000000000005E4B code_0x5E4B:
   .text:0x0000000000005E4B        E8B4FEFFFF           call __acrt_lowio_create_handle_array; int64_t __cdecl( void )
   .text:0x0000000000005E50        498904DF             mov qword ptr [r15+rbx*8], rax
   .text:0x0000000000005E54        4885C0               test rax, rax
   .text:0x0000000000005E57        7505                 jnz code_0x5E5E
   .text:0x0000000000005E59 code_0x5E59:
   .text:0x0000000000005E59        8D780C               lea edi, [rax+0xC]
   .text:0x0000000000005E5C        EB14                 jmp code_0x5E72
   .text:0x0000000000005E5E code_0x5E5E:
   .text:0x0000000000005E5E        8B05ACF50000         mov eax, dword ptr [data_0x15410]
   .text:0x0000000000005E64        83C040               add eax, 0x40
   .text:0x0000000000005E67        8905A3F50000         mov dword ptr [data_0x15410], eax
   .text:0x0000000000005E6D code_0x5E6D:
   .text:0x0000000000005E6D        48FFC3               inc rbx
   .text:0x0000000000005E70        EBC1                 jmp code_0x5E33
   .text:0x0000000000005E72 code_0x5E72:
   .text:0x0000000000005E72        B907000000           mov ecx, 0x7
   .text:0x0000000000005E77        E830FEFFFF           call func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x0000000000005E7C        8BC7                 mov eax, edi
   .text:0x0000000000005E7E code_0x5E7E:
   .text:0x0000000000005E7E        488B5C2440           mov rbx, qword ptr [rsp+0x40]
   .text:0x0000000000005E83        488B742448           mov rsi, qword ptr [rsp+0x48]
   .text:0x0000000000005E88        488B7C2450           mov rdi, qword ptr [rsp+0x50]
   .text:0x0000000000005E8D        4883C430             add rsp, 0x30
   .text:0x0000000000005E91        415F                 pop r15
   .text:0x0000000000005E93        C3                   ret
   .text:0x0000000000005E94 __acrt_lowio_lock_fh:
   .text:0x0000000000005E94        4863C9               movsxd rcx, ecx
   .text:0x0000000000005E97        488D1572F10000       lea rdx, [data_0x15010]
   .text:0x0000000000005E9E        488BC1               mov rax, rcx
   .text:0x0000000000005EA1        83E13F               and ecx, 0x3F
   .text:0x0000000000005EA4        48C1F806             sar rax, 0x6
   .text:0x0000000000005EA8        48C1E106             shl rcx, 0x6
   .text:0x0000000000005EAC        48030CC2             add rcx, qword ptr [rdx+rax*8]
   .text:0x0000000000005EB0        48FF25E9510000       jmp qword ptr [EnterCriticalSection]; void (__cdecl *)( struct _RTL_CRITICAL_SECTION * lpCriticalSection )
   .text:0x0000000000005EB7 code_0x5EB7:
   .text:0x0000000000005EB7        CC                   int3
   .text:0x0000000000005EB8 func_0x5EB8:
   .text:0x0000000000005EB8        4863C9               movsxd rcx, ecx
   .text:0x0000000000005EBB        488D154EF10000       lea rdx, [data_0x15010]
   .text:0x0000000000005EC2        488BC1               mov rax, rcx
   .text:0x0000000000005EC5        83E13F               and ecx, 0x3F
   .text:0x0000000000005EC8        48C1F806             sar rax, 0x6
   .text:0x0000000000005ECC        48C1E106             shl rcx, 0x6
   .text:0x0000000000005ED0        48030CC2             add rcx, qword ptr [rdx+rax*8]
   .text:0x0000000000005ED4        48FF25CD510000       jmp qword ptr [LeaveCriticalSection]; void (__cdecl *)( struct _RTL_CRITICAL_SECTION * lpCriticalSection )
   .text:0x0000000000005EDB code_0x5EDB:
   .text:0x0000000000005EDB        CC                   int3
   .text:0x0000000000005EDC _free_osfhnd:
   .text:0x0000000000005EDC        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000005EE1        4889742410           mov qword ptr [rsp+0x10], rsi
   .text:0x0000000000005EE6        48897C2418           mov qword ptr [rsp+0x18], rdi
   .text:0x0000000000005EEB        4156                 push r14
   .text:0x0000000000005EED        4883EC20             sub rsp, 0x20
   .text:0x0000000000005EF1        4863D9               movsxd rbx, ecx
   .text:0x0000000000005EF4        85C9                 test ecx, ecx
   .text:0x0000000000005EF6        7872                 js code_0x5F6A
   .text:0x0000000000005EF8 code_0x5EF8:
   .text:0x0000000000005EF8        3B1D12F50000         cmp ebx, dword ptr [data_0x15410]
   .text:0x0000000000005EFE        736A                 jae code_0x5F6A
   .text:0x0000000000005F00 code_0x5F00:
   .text:0x0000000000005F00        488BFB               mov rdi, rbx
   .text:0x0000000000005F03        4C8D3506F10000       lea r14, [data_0x15010]
   .text:0x0000000000005F0A        83E73F               and edi, 0x3F
   .text:0x0000000000005F0D        488BF3               mov rsi, rbx
   .text:0x0000000000005F10        48C1FE06             sar rsi, 0x6
   .text:0x0000000000005F14        48C1E706             shl rdi, 0x6
   .text:0x0000000000005F18        498B04F6             mov rax, qword ptr [r14+rsi*8]
   .text:0x0000000000005F1C        F644383801           test byte ptr [rax+rdi+0x38], 0x1
   .text:0x0000000000005F21        7447                 jz code_0x5F6A
   .text:0x0000000000005F23 code_0x5F23:
   .text:0x0000000000005F23        48837C3828FF         cmp qword ptr [rax+rdi+0x28], 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000005F29        743F                 jz code_0x5F6A
   .text:0x0000000000005F2B code_0x5F2B:
   .text:0x0000000000005F2B        E800CCFFFF           call func_0x2B30; inline int32_t __cdecl( void )
   .text:0x0000000000005F30        83F801               cmp eax, 0x1
   .text:0x0000000000005F33        7527                 jnz code_0x5F5C
   .text:0x0000000000005F35 code_0x5F35:
   .text:0x0000000000005F35        85DB                 test ebx, ebx
   .text:0x0000000000005F37        7416                 jz code_0x5F4F
   .text:0x0000000000005F39 code_0x5F39:
   .text:0x0000000000005F39        2BD8                 sub ebx, eax
   .text:0x0000000000005F3B        740B                 jz code_0x5F48
   .text:0x0000000000005F3D code_0x5F3D:
   .text:0x0000000000005F3D        3BD8                 cmp ebx, eax
   .text:0x0000000000005F3F        751B                 jnz code_0x5F5C
   .text:0x0000000000005F41 code_0x5F41:
   .text:0x0000000000005F41        B9F4FFFFFF           mov ecx, 0xFFFFFFF4
   .text:0x0000000000005F46        EB0C                 jmp code_0x5F54
   .text:0x0000000000005F48 code_0x5F48:
   .text:0x0000000000005F48        B9F5FFFFFF           mov ecx, 0xFFFFFFF5
   .text:0x0000000000005F4D        EB05                 jmp code_0x5F54
   .text:0x0000000000005F4F code_0x5F4F:
   .text:0x0000000000005F4F        B9F6FFFFFF           mov ecx, 0xFFFFFFF6
   .text:0x0000000000005F54 code_0x5F54:
   .text:0x0000000000005F54        33D2                 xor edx, edx
   .text:0x0000000000005F56        FF154C520000         call qword ptr [SetStdHandle]; int (__cdecl *)( unsigned long nStdHandle, void * hHandle )
   .text:0x0000000000005F5C code_0x5F5C:
   .text:0x0000000000005F5C        498B04F6             mov rax, qword ptr [r14+rsi*8]
   .text:0x0000000000005F60        48834C3828FF         or qword ptr [rax+rdi+0x28], 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000005F66        33C0                 xor eax, eax
   .text:0x0000000000005F68        EB16                 jmp code_0x5F80
   .text:0x0000000000005F6A code_0x5F6A:
   .text:0x0000000000005F6A        E80DEAFFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000005F6F        C70009000000         mov dword ptr [rax], 0x9
   .text:0x0000000000005F75        E8E2E9FFFF           call __doserrno; unsigned long * __cdecl( void )
   .text:0x0000000000005F7A        832000               and dword ptr [rax], 0x0
   .text:0x0000000000005F7D        83C8FF               or eax, 0xFFFFFFFF
   .text:0x0000000000005F80 code_0x5F80:
   .text:0x0000000000005F80        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000005F85        488B742438           mov rsi, qword ptr [rsp+0x38]
   .text:0x0000000000005F8A        488B7C2440           mov rdi, qword ptr [rsp+0x40]
   .text:0x0000000000005F8F        4883C420             add rsp, 0x20
   .text:0x0000000000005F93        415E                 pop r14
   .text:0x0000000000005F95        C3                   ret
   .text:0x0000000000005F96 data_0x5F96:
   .text:0x0000000000005F96        db 2 dup(0xCC)
   .text:0x0000000000005F98 _get_osfhandle:
   .text:0x0000000000005F98        4883EC28             sub rsp, 0x28
   .text:0x0000000000005F9C        83F9FE               cmp ecx, 0xFFFFFFFE
   .text:0x0000000000005F9F        7515                 jnz code_0x5FB6
   .text:0x0000000000005FA1 code_0x5FA1:
   .text:0x0000000000005FA1        E8B6E9FFFF           call __doserrno; unsigned long * __cdecl( void )
   .text:0x0000000000005FA6        832000               and dword ptr [rax], 0x0
   .text:0x0000000000005FA9        E8CEE9FFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000005FAE        C70009000000         mov dword ptr [rax], 0x9
   .text:0x0000000000005FB4        EB4E                 jmp code_0x6004
   .text:0x0000000000005FB6 code_0x5FB6:
   .text:0x0000000000005FB6        85C9                 test ecx, ecx
   .text:0x0000000000005FB8        7832                 js code_0x5FEC
   .text:0x0000000000005FBA code_0x5FBA:
   .text:0x0000000000005FBA        3B0D50F40000         cmp ecx, dword ptr [data_0x15410]
   .text:0x0000000000005FC0        732A                 jae code_0x5FEC
   .text:0x0000000000005FC2 code_0x5FC2:
   .text:0x0000000000005FC2        4863D1               movsxd rdx, ecx
   .text:0x0000000000005FC5        488D0D44F00000       lea rcx, [data_0x15010]
   .text:0x0000000000005FCC        488BC2               mov rax, rdx
   .text:0x0000000000005FCF        83E23F               and edx, 0x3F
   .text:0x0000000000005FD2        48C1F806             sar rax, 0x6
   .text:0x0000000000005FD6        48C1E206             shl rdx, 0x6
   .text:0x0000000000005FDA        488B04C1             mov rax, qword ptr [rcx+rax*8]
   .text:0x0000000000005FDE        F644103801           test byte ptr [rax+rdx+0x38], 0x1
   .text:0x0000000000005FE3        7407                 jz code_0x5FEC
   .text:0x0000000000005FE5 code_0x5FE5:
   .text:0x0000000000005FE5        488B441028           mov rax, qword ptr [rax+rdx+0x28]
   .text:0x0000000000005FEA        EB1C                 jmp code_0x6008
   .text:0x0000000000005FEC code_0x5FEC:
   .text:0x0000000000005FEC        E86BE9FFFF           call __doserrno; unsigned long * __cdecl( void )
   .text:0x0000000000005FF1        832000               and dword ptr [rax], 0x0
   .text:0x0000000000005FF4        E883E9FFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000005FF9        C70009000000         mov dword ptr [rax], 0x9
   .text:0x0000000000005FFF        E8ECE6FFFF           call _invalid_parameter_noinfo; void __cdecl( void )
   .text:0x0000000000006004 code_0x6004:
   .text:0x0000000000006004        4883C8FF             or rax, 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000006008 code_0x6008:
   .text:0x0000000000006008        4883C428             add rsp, 0x28
   .text:0x000000000000600C        C3                   ret
   .text:0x000000000000600D data_0x600D:
   .text:0x000000000000600D        db 3 dup(0xCC)
   .text:0x0000000000006010 initialize_inherited_file_handles_nolock:
   .text:0x0000000000006010        488BC4               mov rax, rsp
   .text:0x0000000000006013        48895808             mov qword ptr [rax+0x8], rbx
   .text:0x0000000000006017        48896810             mov qword ptr [rax+0x10], rbp
   .text:0x000000000000601B        48897018             mov qword ptr [rax+0x18], rsi
   .text:0x000000000000601F        48897820             mov qword ptr [rax+0x20], rdi
   .text:0x0000000000006023        4156                 push r14
   .text:0x0000000000006025        4881EC90000000       sub rsp, 0x90
   .text:0x000000000000602C        488D4888             lea rcx, [rax-0x78]
   .text:0x0000000000006030        FF1532500000         call qword ptr [GetStartupInfoW]; void (__cdecl *)( struct _STARTUPINFOW * lpStartupInfo )
   .text:0x0000000000006036        4533F6               xor r14d, r14d
   .text:0x0000000000006039        664439742462         cmp word ptr [rsp+0x62], r14w
   .text:0x000000000000603F        0F8498000000         jz code_0x60DD
   .text:0x0000000000006045 code_0x6045:
   .text:0x0000000000006045        488B442468           mov rax, qword ptr [rsp+0x68]
   .text:0x000000000000604A        4885C0               test rax, rax
   .text:0x000000000000604D        0F848A000000         jz code_0x60DD
   .text:0x0000000000006053 code_0x6053:
   .text:0x0000000000006053        486318               movsxd rbx, dword ptr [rax]
   .text:0x0000000000006056        488D7004             lea rsi, [rax+0x4]
   .text:0x000000000000605A        BF00200000           mov edi, 0x2000
   .text:0x000000000000605F        4803DE               add rbx, rsi
   .text:0x0000000000006062        3938                 cmp dword ptr [rax], edi
   .text:0x0000000000006064        0F4C38               cmovl edi, dword ptr [rax]
   .text:0x0000000000006067        8BCF                 mov ecx, edi
   .text:0x0000000000006069        E87EFDFFFF           call __acrt_lowio_ensure_fh_exists; int32_t __cdecl( int32_t p1 )
   .text:0x000000000000606E        3B3D9CF30000         cmp edi, dword ptr [data_0x15410]
   .text:0x0000000000006074        0F4F3D95F30000       cmovg edi, dword ptr [data_0x15410]
   .text:0x000000000000607B        85FF                 test edi, edi
   .text:0x000000000000607D        745E                 jz code_0x60DD
   .text:0x000000000000607F code_0x607F:
   .text:0x000000000000607F        418BEE               mov ebp, r14d
   .text:0x0000000000006082 code_0x6082:
   .text:0x0000000000006082        48833BFF             cmp qword ptr [rbx], 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000006086        7445                 jz code_0x60CD
   .text:0x0000000000006088 code_0x6088:
   .text:0x0000000000006088        48833BFE             cmp qword ptr [rbx], 0xFFFFFFFFFFFFFFFE
   .text:0x000000000000608C        743F                 jz code_0x60CD
   .text:0x000000000000608E code_0x608E:
   .text:0x000000000000608E        F60601               test byte ptr [rsi], 0x1
   .text:0x0000000000006091        743A                 jz code_0x60CD
   .text:0x0000000000006093 code_0x6093:
   .text:0x0000000000006093        F60608               test byte ptr [rsi], 0x8
   .text:0x0000000000006096        750D                 jnz code_0x60A5
   .text:0x0000000000006098 code_0x6098:
   .text:0x0000000000006098        488B0B               mov rcx, qword ptr [rbx]
   .text:0x000000000000609B        FF150F510000         call qword ptr [GetFileType]; unsigned long (__cdecl *)( void * hFile )
   .text:0x00000000000060A1        85C0                 test eax, eax
   .text:0x00000000000060A3        7428                 jz code_0x60CD
   .text:0x00000000000060A5 code_0x60A5:
   .text:0x00000000000060A5        488BCD               mov rcx, rbp
   .text:0x00000000000060A8        488D1561EF0000       lea rdx, [data_0x15010]
   .text:0x00000000000060AF        83E13F               and ecx, 0x3F
   .text:0x00000000000060B2        488BC5               mov rax, rbp
   .text:0x00000000000060B5        48C1F806             sar rax, 0x6
   .text:0x00000000000060B9        48C1E106             shl rcx, 0x6
   .text:0x00000000000060BD        48030CC2             add rcx, qword ptr [rdx+rax*8]
   .text:0x00000000000060C1        488B03               mov rax, qword ptr [rbx]
   .text:0x00000000000060C4        48894128             mov qword ptr [rcx+0x28], rax
   .text:0x00000000000060C8        8A06                 mov al, byte ptr [rsi]
   .text:0x00000000000060CA        884138               mov byte ptr [rcx+0x38], al
   .text:0x00000000000060CD code_0x60CD:
   .text:0x00000000000060CD        48FFC5               inc rbp
   .text:0x00000000000060D0        48FFC6               inc rsi
   .text:0x00000000000060D3        4883C308             add rbx, 0x8
   .text:0x00000000000060D7        4883EF01             sub rdi, 0x1
   .text:0x00000000000060DB        75A5                 jnz code_0x6082
   .text:0x00000000000060DD code_0x60DD:
   .text:0x00000000000060DD        4C8D9C2490000000     lea r11, [rsp+0x90]
   .text:0x00000000000060E5        498B5B10             mov rbx, qword ptr [r11+0x10]
   .text:0x00000000000060E9        498B6B18             mov rbp, qword ptr [r11+0x18]
   .text:0x00000000000060ED        498B7320             mov rsi, qword ptr [r11+0x20]
   .text:0x00000000000060F1        498B7B28             mov rdi, qword ptr [r11+0x28]
   .text:0x00000000000060F5        498BE3               mov rsp, r11
   .text:0x00000000000060F8        415E                 pop r14
   .text:0x00000000000060FA        C3                   ret
   .text:0x00000000000060FB code_0x60FB:
   .text:0x00000000000060FB        CC                   int3
   .text:0x00000000000060FC initialize_stdio_handles_nolock:
   .text:0x00000000000060FC        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000006101        4889742410           mov qword ptr [rsp+0x10], rsi
   .text:0x0000000000006106        48897C2418           mov qword ptr [rsp+0x18], rdi
   .text:0x000000000000610B        4156                 push r14
   .text:0x000000000000610D        4883EC20             sub rsp, 0x20
   .text:0x0000000000006111        33FF                 xor edi, edi
   .text:0x0000000000006113        4533F6               xor r14d, r14d
   .text:0x0000000000006116 code_0x6116:
   .text:0x0000000000006116        4863DF               movsxd rbx, edi
   .text:0x0000000000006119        488D0DF0EE0000       lea rcx, [data_0x15010]
   .text:0x0000000000006120        488BC3               mov rax, rbx
   .text:0x0000000000006123        83E33F               and ebx, 0x3F
   .text:0x0000000000006126        48C1F806             sar rax, 0x6
   .text:0x000000000000612A        48C1E306             shl rbx, 0x6
   .text:0x000000000000612E        48031CC1             add rbx, qword ptr [rcx+rax*8]
   .text:0x0000000000006132        488B4328             mov rax, qword ptr [rbx+0x28]
   .text:0x0000000000006136        4883C002             add rax, 0x2
   .text:0x000000000000613A        4883F801             cmp rax, 0x1
   .text:0x000000000000613E        7609                 jbe code_0x6149
   .text:0x0000000000006140 code_0x6140:
   .text:0x0000000000006140        804B3880             or byte ptr [rbx+0x38], 0x80
   .text:0x0000000000006144        E989000000           jmp code_0x61D2
   .text:0x0000000000006149 code_0x6149:
   .text:0x0000000000006149        C6433881             mov byte ptr [rbx+0x38], 0x81
   .text:0x000000000000614D        8BCF                 mov ecx, edi
   .text:0x000000000000614F        85FF                 test edi, edi
   .text:0x0000000000006151        7416                 jz code_0x6169
   .text:0x0000000000006153 code_0x6153:
   .text:0x0000000000006153        83E901               sub ecx, 0x1
   .text:0x0000000000006156        740A                 jz code_0x6162
   .text:0x0000000000006158 code_0x6158:
   .text:0x0000000000006158        83F901               cmp ecx, 0x1
   .text:0x000000000000615B        B9F4FFFFFF           mov ecx, 0xFFFFFFF4
   .text:0x0000000000006160        EB0C                 jmp code_0x616E
   .text:0x0000000000006162 code_0x6162:
   .text:0x0000000000006162        B9F5FFFFFF           mov ecx, 0xFFFFFFF5
   .text:0x0000000000006167        EB05                 jmp code_0x616E
   .text:0x0000000000006169 code_0x6169:
   .text:0x0000000000006169        B9F6FFFFFF           mov ecx, 0xFFFFFFF6
   .text:0x000000000000616E code_0x616E:
   .text:0x000000000000616E        FF158C4F0000         call qword ptr [GetStdHandle]; void * (__cdecl *)( unsigned long nStdHandle )
   .text:0x0000000000006174        488BF0               mov rsi, rax
   .text:0x0000000000006177        488D4801             lea rcx, [rax+0x1]
   .text:0x000000000000617B        4883F901             cmp rcx, 0x1
   .text:0x000000000000617F        760B                 jbe code_0x618C
   .text:0x0000000000006181 code_0x6181:
   .text:0x0000000000006181        488BC8               mov rcx, rax
   .text:0x0000000000006184        FF1526500000         call qword ptr [GetFileType]; unsigned long (__cdecl *)( void * hFile )
   .text:0x000000000000618A        EB02                 jmp code_0x618E
   .text:0x000000000000618C code_0x618C:
   .text:0x000000000000618C        33C0                 xor eax, eax
   .text:0x000000000000618E code_0x618E:
   .text:0x000000000000618E        85C0                 test eax, eax
   .text:0x0000000000006190        741D                 jz code_0x61AF
   .text:0x0000000000006192 code_0x6192:
   .text:0x0000000000006192        0FB6C8               movzx ecx, al
   .text:0x0000000000006195        48897328             mov qword ptr [rbx+0x28], rsi
   .text:0x0000000000006199        83F902               cmp ecx, 0x2
   .text:0x000000000000619C        7506                 jnz code_0x61A4
   .text:0x000000000000619E code_0x619E:
   .text:0x000000000000619E        804B3840             or byte ptr [rbx+0x38], 0x40
   .text:0x00000000000061A2        EB2E                 jmp code_0x61D2
   .text:0x00000000000061A4 code_0x61A4:
   .text:0x00000000000061A4        83F903               cmp ecx, 0x3
   .text:0x00000000000061A7        7529                 jnz code_0x61D2
   .text:0x00000000000061A9 code_0x61A9:
   .text:0x00000000000061A9        804B3808             or byte ptr [rbx+0x38], 0x8
   .text:0x00000000000061AD        EB23                 jmp code_0x61D2
   .text:0x00000000000061AF code_0x61AF:
   .text:0x00000000000061AF        804B3840             or byte ptr [rbx+0x38], 0x40
   .text:0x00000000000061B3        48C74328FEFFFFFF     mov qword ptr [rbx+0x28], 0xFFFFFFFFFFFFFFFE
   .text:0x00000000000061BB        488B054EF40000       mov rax, qword ptr [data_0x15610]
   .text:0x00000000000061C2        4885C0               test rax, rax
   .text:0x00000000000061C5        740B                 jz code_0x61D2
   .text:0x00000000000061C7 code_0x61C7:
   .text:0x00000000000061C7        498B0406             mov rax, qword ptr [r14+rax]
   .text:0x00000000000061CB        C74018FEFFFFFF       mov dword ptr [rax+0x18], 0xFFFFFFFE
   .text:0x00000000000061D2 code_0x61D2:
   .text:0x00000000000061D2        FFC7                 inc edi
   .text:0x00000000000061D4        4983C608             add r14, 0x8
   .text:0x00000000000061D8        83FF03               cmp edi, 0x3
   .text:0x00000000000061DB        0F8535FFFFFF         jnz code_0x6116
   .text:0x00000000000061E1 code_0x61E1:
   .text:0x00000000000061E1        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x00000000000061E6        488B742438           mov rsi, qword ptr [rsp+0x38]
   .text:0x00000000000061EB        488B7C2440           mov rdi, qword ptr [rsp+0x40]
   .text:0x00000000000061F0        4883C420             add rsp, 0x20
   .text:0x00000000000061F4        415E                 pop r14
   .text:0x00000000000061F6        C3                   ret
   .text:0x00000000000061F7 code_0x61F7:
   .text:0x00000000000061F7        CC                   int3
   .text:0x00000000000061F8 __acrt_initialize_lowio:
   .text:0x00000000000061F8        4053                 push rbx
   .text:0x00000000000061FA        4883EC20             sub rsp, 0x20
   .text:0x00000000000061FE        B907000000           mov ecx, 0x7
   .text:0x0000000000006203        E850FAFFFF           call __acrt_lock; void __cdecl( int32_t p1 )
   .text:0x0000000000006208        33DB                 xor ebx, ebx
   .text:0x000000000000620A        33C9                 xor ecx, ecx
   .text:0x000000000000620C        E8DBFBFFFF           call __acrt_lowio_ensure_fh_exists; int32_t __cdecl( int32_t p1 )
   .text:0x0000000000006211        85C0                 test eax, eax
   .text:0x0000000000006213        750C                 jnz code_0x6221
   .text:0x0000000000006215 code_0x6215:
   .text:0x0000000000006215        E8F6FDFFFF           call initialize_inherited_file_handles_nolock; void __cdecl( void )
   .text:0x000000000000621A        E8DDFEFFFF           call initialize_stdio_handles_nolock; void __cdecl( void )
   .text:0x000000000000621F        B301                 mov bl, 0x1
   .text:0x0000000000006221 code_0x6221:
   .text:0x0000000000006221        B907000000           mov ecx, 0x7
   .text:0x0000000000006226        E881FAFFFF           call func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x000000000000622B        8AC3                 mov al, bl
   .text:0x000000000000622D        4883C420             add rsp, 0x20
   .text:0x0000000000006231        5B                   pop rbx
   .text:0x0000000000006232        C3                   ret
   .text:0x0000000000006233 code_0x6233:
   .text:0x0000000000006233        CC                   int3
   .text:0x0000000000006234 __acrt_uninitialize_lowio:
   .text:0x0000000000006234        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000006239        57                   push rdi
   .text:0x000000000000623A        4883EC20             sub rsp, 0x20
   .text:0x000000000000623E        33DB                 xor ebx, ebx
   .text:0x0000000000006240 code_0x6240:
   .text:0x0000000000006240        488D3DC9ED0000       lea rdi, [data_0x15010]
   .text:0x0000000000006247        488B0C3B             mov rcx, qword ptr [rbx+rdi]
   .text:0x000000000000624B        4885C9               test rcx, rcx
   .text:0x000000000000624E        740A                 jz code_0x625A
   .text:0x0000000000006250 code_0x6250:
   .text:0x0000000000006250        E847FBFFFF           call __acrt_lowio_destroy_handle_array; void __cdecl( int64_t p1 )
   .text:0x0000000000006255        4883243B00           and qword ptr [rbx+rdi], 0x0
   .text:0x000000000000625A code_0x625A:
   .text:0x000000000000625A        4883C308             add rbx, 0x8
   .text:0x000000000000625E        4881FB00040000       cmp rbx, 0x400
   .text:0x0000000000006265        72D9                 jb code_0x6240
   .text:0x0000000000006267 code_0x6267:
   .text:0x0000000000006267        B001                 mov al, 0x1
   .text:0x0000000000006269        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x000000000000626E        4883C420             add rsp, 0x20
   .text:0x0000000000006272        5F                   pop rdi
   .text:0x0000000000006273        C3                   ret
   .text:0x0000000000006274 __acrt_locale_free_monetary:
   .text:0x0000000000006274        4885C9               test rcx, rcx
   .text:0x0000000000006277        0F8400010000         jz code_0x637D
   .text:0x000000000000627D code_0x627D:
   .text:0x000000000000627D        53                   push rbx
   .text:0x000000000000627E        4883EC20             sub rsp, 0x20
   .text:0x0000000000006282        488BD9               mov rbx, rcx
   .text:0x0000000000006285        488B4918             mov rcx, qword ptr [rcx+0x18]
   .text:0x0000000000006289        483B0D88E40000       cmp rcx, qword ptr [data_0x14718]
   .text:0x0000000000006290        7405                 jz code_0x6297
   .text:0x0000000000006292 code_0x6292:
   .text:0x0000000000006292        E87DE7FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000006297 code_0x6297:
   .text:0x0000000000006297        488B4B20             mov rcx, qword ptr [rbx+0x20]
   .text:0x000000000000629B        483B0D7EE40000       cmp rcx, qword ptr [data_0x14720]
   .text:0x00000000000062A2        7405                 jz code_0x62A9
   .text:0x00000000000062A4 code_0x62A4:
   .text:0x00000000000062A4        E86BE7FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000062A9 code_0x62A9:
   .text:0x00000000000062A9        488B4B28             mov rcx, qword ptr [rbx+0x28]
   .text:0x00000000000062AD        483B0D74E40000       cmp rcx, qword ptr [data_0x14728]
   .text:0x00000000000062B4        7405                 jz code_0x62BB
   .text:0x00000000000062B6 code_0x62B6:
   .text:0x00000000000062B6        E859E7FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000062BB code_0x62BB:
   .text:0x00000000000062BB        488B4B30             mov rcx, qword ptr [rbx+0x30]
   .text:0x00000000000062BF        483B0D6AE40000       cmp rcx, qword ptr [data_0x14730]
   .text:0x00000000000062C6        7405                 jz code_0x62CD
   .text:0x00000000000062C8 code_0x62C8:
   .text:0x00000000000062C8        E847E7FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000062CD code_0x62CD:
   .text:0x00000000000062CD        488B4B38             mov rcx, qword ptr [rbx+0x38]
   .text:0x00000000000062D1        483B0D60E40000       cmp rcx, qword ptr [data_0x14738]
   .text:0x00000000000062D8        7405                 jz code_0x62DF
   .text:0x00000000000062DA code_0x62DA:
   .text:0x00000000000062DA        E835E7FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000062DF code_0x62DF:
   .text:0x00000000000062DF        488B4B40             mov rcx, qword ptr [rbx+0x40]
   .text:0x00000000000062E3        483B0D56E40000       cmp rcx, qword ptr [data_0x14740]
   .text:0x00000000000062EA        7405                 jz code_0x62F1
   .text:0x00000000000062EC code_0x62EC:
   .text:0x00000000000062EC        E823E7FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000062F1 code_0x62F1:
   .text:0x00000000000062F1        488B4B48             mov rcx, qword ptr [rbx+0x48]
   .text:0x00000000000062F5        483B0D4CE40000       cmp rcx, qword ptr [data_0x14748]
   .text:0x00000000000062FC        7405                 jz code_0x6303
   .text:0x00000000000062FE code_0x62FE:
   .text:0x00000000000062FE        E811E7FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000006303 code_0x6303:
   .text:0x0000000000006303        488B4B68             mov rcx, qword ptr [rbx+0x68]
   .text:0x0000000000006307        483B0D5AE40000       cmp rcx, qword ptr [data_0x14768]
   .text:0x000000000000630E        7405                 jz code_0x6315
   .text:0x0000000000006310 code_0x6310:
   .text:0x0000000000006310        E8FFE6FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000006315 code_0x6315:
   .text:0x0000000000006315        488B4B70             mov rcx, qword ptr [rbx+0x70]
   .text:0x0000000000006319        483B0D50E40000       cmp rcx, qword ptr [data_0x14770]
   .text:0x0000000000006320        7405                 jz code_0x6327
   .text:0x0000000000006322 code_0x6322:
   .text:0x0000000000006322        E8EDE6FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000006327 code_0x6327:
   .text:0x0000000000006327        488B4B78             mov rcx, qword ptr [rbx+0x78]
   .text:0x000000000000632B        483B0D46E40000       cmp rcx, qword ptr [data_0x14778]
   .text:0x0000000000006332        7405                 jz code_0x6339
   .text:0x0000000000006334 code_0x6334:
   .text:0x0000000000006334        E8DBE6FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000006339 code_0x6339:
   .text:0x0000000000006339        488B8B80000000       mov rcx, qword ptr [rbx+0x80]
   .text:0x0000000000006340        483B0D39E40000       cmp rcx, qword ptr [data_0x14780]
   .text:0x0000000000006347        7405                 jz code_0x634E
   .text:0x0000000000006349 code_0x6349:
   .text:0x0000000000006349        E8C6E6FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x000000000000634E code_0x634E:
   .text:0x000000000000634E        488B8B88000000       mov rcx, qword ptr [rbx+0x88]
   .text:0x0000000000006355        483B0D2CE40000       cmp rcx, qword ptr [data_0x14788]
   .text:0x000000000000635C        7405                 jz code_0x6363
   .text:0x000000000000635E code_0x635E:
   .text:0x000000000000635E        E8B1E6FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000006363 code_0x6363:
   .text:0x0000000000006363        488B8B90000000       mov rcx, qword ptr [rbx+0x90]
   .text:0x000000000000636A        483B0D1FE40000       cmp rcx, qword ptr [data_0x14790]
   .text:0x0000000000006371        7405                 jz code_0x6378
   .text:0x0000000000006373 code_0x6373:
   .text:0x0000000000006373        E89CE6FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000006378 code_0x6378:
   .text:0x0000000000006378        4883C420             add rsp, 0x20
   .text:0x000000000000637C        5B                   pop rbx
   .text:0x000000000000637D code_0x637D:
   .text:0x000000000000637D        C3                   ret
   .text:0x000000000000637E data_0x637E:
   .text:0x000000000000637E        db 2 dup(0xCC)
   .text:0x0000000000006380 __acrt_locale_free_numeric:
   .text:0x0000000000006380        4885C9               test rcx, rcx
   .text:0x0000000000006383        7466                 jz code_0x63EB
   .text:0x0000000000006385 code_0x6385:
   .text:0x0000000000006385        53                   push rbx
   .text:0x0000000000006386        4883EC20             sub rsp, 0x20
   .text:0x000000000000638A        488BD9               mov rbx, rcx
   .text:0x000000000000638D        488B09               mov rcx, qword ptr [rcx]
   .text:0x0000000000006390        483B0D69E30000       cmp rcx, qword ptr [data_0x14700]; "."
   .text:0x0000000000006397        7405                 jz code_0x639E
   .text:0x0000000000006399 code_0x6399:
   .text:0x0000000000006399        E876E6FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x000000000000639E code_0x639E:
   .text:0x000000000000639E        488B4B08             mov rcx, qword ptr [rbx+0x8]
   .text:0x00000000000063A2        483B0D5FE30000       cmp rcx, qword ptr [data_0x14708]
   .text:0x00000000000063A9        7405                 jz code_0x63B0
   .text:0x00000000000063AB code_0x63AB:
   .text:0x00000000000063AB        E864E6FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000063B0 code_0x63B0:
   .text:0x00000000000063B0        488B4B10             mov rcx, qword ptr [rbx+0x10]
   .text:0x00000000000063B4        483B0D55E30000       cmp rcx, qword ptr [data_0x14710]
   .text:0x00000000000063BB        7405                 jz code_0x63C2
   .text:0x00000000000063BD code_0x63BD:
   .text:0x00000000000063BD        E852E6FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000063C2 code_0x63C2:
   .text:0x00000000000063C2        488B4B58             mov rcx, qword ptr [rbx+0x58]
   .text:0x00000000000063C6        483B0D8BE30000       cmp rcx, qword ptr [data_0x14758]; "."
   .text:0x00000000000063CD        7405                 jz code_0x63D4
   .text:0x00000000000063CF code_0x63CF:
   .text:0x00000000000063CF        E840E6FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000063D4 code_0x63D4:
   .text:0x00000000000063D4        488B4B60             mov rcx, qword ptr [rbx+0x60]
   .text:0x00000000000063D8        483B0D81E30000       cmp rcx, qword ptr [data_0x14760]
   .text:0x00000000000063DF        7405                 jz code_0x63E6
   .text:0x00000000000063E1 code_0x63E1:
   .text:0x00000000000063E1        E82EE6FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000063E6 code_0x63E6:
   .text:0x00000000000063E6        4883C420             add rsp, 0x20
   .text:0x00000000000063EA        5B                   pop rbx
   .text:0x00000000000063EB code_0x63EB:
   .text:0x00000000000063EB        C3                   ret
   .text:0x00000000000063EC free_crt_array_internal:
   .text:0x00000000000063EC        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x00000000000063F1        4889742410           mov qword ptr [rsp+0x10], rsi
   .text:0x00000000000063F6        57                   push rdi
   .text:0x00000000000063F7        4883EC20             sub rsp, 0x20
   .text:0x00000000000063FB        33FF                 xor edi, edi
   .text:0x00000000000063FD        488BF2               mov rsi, rdx
   .text:0x0000000000006400        48C1E603             shl rsi, 0x3
   .text:0x0000000000006404        488BD9               mov rbx, rcx
   .text:0x0000000000006407        488D040E             lea rax, [rsi+rcx]
   .text:0x000000000000640B        48C1EE03             shr rsi, 0x3
   .text:0x000000000000640F        483BC8               cmp rcx, rax
   .text:0x0000000000006412        480F47F7             cmova rsi, rdi
   .text:0x0000000000006416        4885F6               test rsi, rsi
   .text:0x0000000000006419        7414                 jz code_0x642F
   .text:0x000000000000641B code_0x641B:
   .text:0x000000000000641B        488B0B               mov rcx, qword ptr [rbx]
   .text:0x000000000000641E        E8F1E5FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000006423        48FFC7               inc rdi
   .text:0x0000000000006426        488D5B08             lea rbx, [rbx+0x8]
   .text:0x000000000000642A        483BFE               cmp rdi, rsi
   .text:0x000000000000642D        75EC                 jnz code_0x641B
   .text:0x000000000000642F code_0x642F:
   .text:0x000000000000642F        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000006434        488B742438           mov rsi, qword ptr [rsp+0x38]
   .text:0x0000000000006439        4883C420             add rsp, 0x20
   .text:0x000000000000643D        5F                   pop rdi
   .text:0x000000000000643E        C3                   ret
   .text:0x000000000000643F code_0x643F:
   .text:0x000000000000643F        CC                   int3
   .text:0x0000000000006440 __acrt_locale_free_time:
   .text:0x0000000000006440        4885C9               test rcx, rcx
   .text:0x0000000000006443        0F84FE000000         jz code_0x6547
   .text:0x0000000000006449 code_0x6449:
   .text:0x0000000000006449        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x000000000000644E        48896C2410           mov qword ptr [rsp+0x10], rbp
   .text:0x0000000000006453        56                   push rsi
   .text:0x0000000000006454        4883EC20             sub rsp, 0x20
   .text:0x0000000000006458        BD07000000           mov ebp, 0x7
   .text:0x000000000000645D        488BD9               mov rbx, rcx
   .text:0x0000000000006460        8BD5                 mov edx, ebp
   .text:0x0000000000006462        E885FFFFFF           call free_crt_array_internal; void __cdecl( const void ** p1, unsigned __int64 p2 )
   .text:0x0000000000006467        488D4B38             lea rcx, [rbx+0x38]
   .text:0x000000000000646B        8BD5                 mov edx, ebp
   .text:0x000000000000646D        E87AFFFFFF           call free_crt_array_internal; void __cdecl( const void ** p1, unsigned __int64 p2 )
   .text:0x0000000000006472        8D7505               lea esi, [rbp+0x5]
   .text:0x0000000000006475        8BD6                 mov edx, esi
   .text:0x0000000000006477        488D4B70             lea rcx, [rbx+0x70]
   .text:0x000000000000647B        E86CFFFFFF           call free_crt_array_internal; void __cdecl( const void ** p1, unsigned __int64 p2 )
   .text:0x0000000000006480        488D8BD0000000       lea rcx, [rbx+0xD0]
   .text:0x0000000000006487        8BD6                 mov edx, esi
   .text:0x0000000000006489        E85EFFFFFF           call free_crt_array_internal; void __cdecl( const void ** p1, unsigned __int64 p2 )
   .text:0x000000000000648E        488D8B30010000       lea rcx, [rbx+0x130]
   .text:0x0000000000006495        8D55FB               lea edx, [rbp-0x5]
   .text:0x0000000000006498        E84FFFFFFF           call free_crt_array_internal; void __cdecl( const void ** p1, unsigned __int64 p2 )
   .text:0x000000000000649D        488B8B40010000       mov rcx, qword ptr [rbx+0x140]
   .text:0x00000000000064A4        E86BE5FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000064A9        488B8B48010000       mov rcx, qword ptr [rbx+0x148]
   .text:0x00000000000064B0        E85FE5FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000064B5        488B8B50010000       mov rcx, qword ptr [rbx+0x150]
   .text:0x00000000000064BC        E853E5FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000064C1        488D8B60010000       lea rcx, [rbx+0x160]
   .text:0x00000000000064C8        8BD5                 mov edx, ebp
   .text:0x00000000000064CA        E81DFFFFFF           call free_crt_array_internal; void __cdecl( const void ** p1, unsigned __int64 p2 )
   .text:0x00000000000064CF        488D8B98010000       lea rcx, [rbx+0x198]
   .text:0x00000000000064D6        8BD5                 mov edx, ebp
   .text:0x00000000000064D8        E80FFFFFFF           call free_crt_array_internal; void __cdecl( const void ** p1, unsigned __int64 p2 )
   .text:0x00000000000064DD        488D8BD0010000       lea rcx, [rbx+0x1D0]
   .text:0x00000000000064E4        8BD6                 mov edx, esi
   .text:0x00000000000064E6        E801FFFFFF           call free_crt_array_internal; void __cdecl( const void ** p1, unsigned __int64 p2 )
   .text:0x00000000000064EB        488D8B30020000       lea rcx, [rbx+0x230]
   .text:0x00000000000064F2        8BD6                 mov edx, esi
   .text:0x00000000000064F4        E8F3FEFFFF           call free_crt_array_internal; void __cdecl( const void ** p1, unsigned __int64 p2 )
   .text:0x00000000000064F9        488D8B90020000       lea rcx, [rbx+0x290]
   .text:0x0000000000006500        8D55FB               lea edx, [rbp-0x5]
   .text:0x0000000000006503        E8E4FEFFFF           call free_crt_array_internal; void __cdecl( const void ** p1, unsigned __int64 p2 )
   .text:0x0000000000006508        488B8BA0020000       mov rcx, qword ptr [rbx+0x2A0]
   .text:0x000000000000650F        E800E5FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000006514        488B8BA8020000       mov rcx, qword ptr [rbx+0x2A8]
   .text:0x000000000000651B        E8F4E4FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000006520        488B8BB0020000       mov rcx, qword ptr [rbx+0x2B0]
   .text:0x0000000000006527        E8E8E4FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x000000000000652C        488B8BB8020000       mov rcx, qword ptr [rbx+0x2B8]
   .text:0x0000000000006533        E8DCE4FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000006538        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x000000000000653D        488B6C2438           mov rbp, qword ptr [rsp+0x38]
   .text:0x0000000000006542        4883C420             add rsp, 0x20
   .text:0x0000000000006546        5E                   pop rsi
   .text:0x0000000000006547 code_0x6547:
   .text:0x0000000000006547        C3                   ret
   .text:0x0000000000006548 __pctype_func:
   .text:0x0000000000006548        4883EC28             sub rsp, 0x28
   .text:0x000000000000654C        E807DDFFFF           call func_0x4258; int64_t __cdecl( void )
   .text:0x0000000000006551        488D542430           lea rdx, [rsp+0x30]
   .text:0x0000000000006556        488B8890000000       mov rcx, qword ptr [rax+0x90]
   .text:0x000000000000655D        48894C2430           mov qword ptr [rsp+0x30], rcx
   .text:0x0000000000006562        488BC8               mov rcx, rax
   .text:0x0000000000006565        E87A160000           call __acrt_update_locale_info; void __cdecl( int64_t p1, int64_t p2 )
   .text:0x000000000000656A        488B442430           mov rax, qword ptr [rsp+0x30]
   .text:0x000000000000656F        488B00               mov rax, qword ptr [rax]
   .text:0x0000000000006572        4883C428             add rsp, 0x28
   .text:0x0000000000006576        C3                   ret
   .text:0x0000000000006577 code_0x6577:
   .text:0x0000000000006577        CC                   int3
   .text:0x0000000000006578 _malloc_base:
   .text:0x0000000000006578        4053                 push rbx
   .text:0x000000000000657A        4883EC20             sub rsp, 0x20
   .text:0x000000000000657E        488BD9               mov rbx, rcx
   .text:0x0000000000006581        4883F9E0             cmp rcx, 0xFFFFFFFFFFFFFFE0
   .text:0x0000000000006585        773C                 ja code_0x65C3
   .text:0x0000000000006587 code_0x6587:
   .text:0x0000000000006587        4885C9               test rcx, rcx
   .text:0x000000000000658A        B801000000           mov eax, 0x1
   .text:0x000000000000658F        480F44D8             cmove rbx, rax
   .text:0x0000000000006593        EB15                 jmp code_0x65AA
   .text:0x0000000000006595 code_0x6595:
   .text:0x0000000000006595        E83AD1FFFF           call _query_new_mode; inline int32_t __cdecl( void )
   .text:0x000000000000659A        85C0                 test eax, eax
   .text:0x000000000000659C        7425                 jz code_0x65C3
   .text:0x000000000000659E code_0x659E:
   .text:0x000000000000659E        488BCB               mov rcx, rbx
   .text:0x00000000000065A1        E8FE0C0000           call _callnewh; int __cdecl( unsigned long long _Size )
   .text:0x00000000000065A6        85C0                 test eax, eax
   .text:0x00000000000065A8        7419                 jz code_0x65C3
   .text:0x00000000000065AA code_0x65AA:
   .text:0x00000000000065AA        488B0D27F00000       mov rcx, qword ptr [data_0x155D8]
   .text:0x00000000000065B1        4C8BC3               mov r8, rbx
   .text:0x00000000000065B4        33D2                 xor edx, edx
   .text:0x00000000000065B6        FF15744B0000         call qword ptr [HeapAlloc]; void * (__cdecl *)( void * hHeap, unsigned long dwFlags, unsigned long long dwBytes )
   .text:0x00000000000065BC        4885C0               test rax, rax
   .text:0x00000000000065BF        74D4                 jz code_0x6595
   .text:0x00000000000065C1 code_0x65C1:
   .text:0x00000000000065C1        EB0D                 jmp code_0x65D0
   .text:0x00000000000065C3 code_0x65C3:
   .text:0x00000000000065C3        E8B4E3FFFF           call _errno; int * __cdecl( void )
   .text:0x00000000000065C8        C7000C000000         mov dword ptr [rax], 0xC
   .text:0x00000000000065CE        33C0                 xor eax, eax
   .text:0x00000000000065D0 code_0x65D0:
   .text:0x00000000000065D0        4883C420             add rsp, 0x20
   .text:0x00000000000065D4        5B                   pop rbx
   .text:0x00000000000065D5        C3                   ret
   .text:0x00000000000065D6 data_0x65D6:
   .text:0x00000000000065D6        db 2 dup(0xCC)
   .text:0x00000000000065D8 wcspbrk:
   .text:0x00000000000065D8        4533C9               xor r9d, r9d
   .text:0x00000000000065DB code_0x65DB:
   .text:0x00000000000065DB        66443909             cmp word ptr [rcx], r9w
   .text:0x00000000000065DF        7428                 jz code_0x6609
   .text:0x00000000000065E1 code_0x65E1:
   .text:0x00000000000065E1        4C8BC2               mov r8, rdx
   .text:0x00000000000065E4        6644390A             cmp word ptr [rdx], r9w
   .text:0x00000000000065E8        7415                 jz code_0x65FF
   .text:0x00000000000065EA code_0x65EA:
   .text:0x00000000000065EA        0FB702               movzx eax, word ptr [rdx]
   .text:0x00000000000065ED code_0x65ED:
   .text:0x00000000000065ED        663B01               cmp ax, word ptr [rcx]
   .text:0x00000000000065F0        7413                 jz code_0x6605
   .text:0x00000000000065F2 code_0x65F2:
   .text:0x00000000000065F2        4983C002             add r8, 0x2
   .text:0x00000000000065F6        410FB700             movzx eax, word ptr [r8]
   .text:0x00000000000065FA        6685C0               test ax, ax
   .text:0x00000000000065FD        75EE                 jnz code_0x65ED
   .text:0x00000000000065FF code_0x65FF:
   .text:0x00000000000065FF        4883C102             add rcx, 0x2
   .text:0x0000000000006603        EBD6                 jmp code_0x65DB
   .text:0x0000000000006605 code_0x6605:
   .text:0x0000000000006605        488BC1               mov rax, rcx
   .text:0x0000000000006608        C3                   ret
   .text:0x0000000000006609 code_0x6609:
   .text:0x0000000000006609        33C0                 xor eax, eax
   .text:0x000000000000660B        C3                   ret
   .text:0x000000000000660C __acrt_GetStringTypeA:
   .text:0x000000000000660C        4055                 push rbp
   .text:0x000000000000660E        4154                 push r12
   .text:0x0000000000006610        4155                 push r13
   .text:0x0000000000006612        4156                 push r14
   .text:0x0000000000006614        4157                 push r15
   .text:0x0000000000006616        4883EC60             sub rsp, 0x60
   .text:0x000000000000661A        488D6C2430           lea rbp, [rsp+0x30]
   .text:0x000000000000661F        48895D60             mov qword ptr [rbp+0x60], rbx
   .text:0x0000000000006623        48897568             mov qword ptr [rbp+0x68], rsi
   .text:0x0000000000006627        48897D70             mov qword ptr [rbp+0x70], rdi
   .text:0x000000000000662B        488B05F6D90000       mov rax, qword ptr [__security_cookie]
   .text:0x0000000000006632        4833C5               xor rax, rbp
   .text:0x0000000000006635        48894520             mov qword ptr [rbp+0x20], rax
   .text:0x0000000000006639        448BEA               mov r13d, edx
   .text:0x000000000000663C        458BF9               mov r15d, r9d
   .text:0x000000000000663F        488BD1               mov rdx, rcx
   .text:0x0000000000006642        4D8BE0               mov r12, r8
   .text:0x0000000000006645        488D4D00             lea rcx, [rbp+0x0]
   .text:0x0000000000006649        E862D7FFFF           call _LocaleUpdate::_LocaleUpdate; public: void __cdecl( const struct __crt_locale_pointers * p1 )
   .text:0x000000000000664E        8BBD88000000         mov edi, dword ptr [rbp+0x88]
   .text:0x0000000000006654        85FF                 test edi, edi
   .text:0x0000000000006656        7507                 jnz code_0x665F
   .text:0x0000000000006658 code_0x6658:
   .text:0x0000000000006658        488B4508             mov rax, qword ptr [rbp+0x8]
   .text:0x000000000000665C        8B780C               mov edi, dword ptr [rax+0xC]
   .text:0x000000000000665F code_0x665F:
   .text:0x000000000000665F        F79D90000000         neg dword ptr [rbp+0x90]
   .text:0x0000000000006665        458BCF               mov r9d, r15d
   .text:0x0000000000006668        4D8BC4               mov r8, r12
   .text:0x000000000000666B        8BCF                 mov ecx, edi
   .text:0x000000000000666D        1BD2                 sbb edx, edx
   .text:0x000000000000666F        8364242800           and dword ptr [rsp+0x28], 0x0
   .text:0x0000000000006674        488364242000         and qword ptr [rsp+0x20], 0x0
   .text:0x000000000000667A        83E208               and edx, 0x8
   .text:0x000000000000667D        FFC2                 inc edx
   .text:0x000000000000667F        E8F8F3FFFF           call __acrt_MultiByteToWideChar; int32_t __cdecl( int32_t p1, int32_t p2 )
   .text:0x0000000000006684        4C63F0               movsxd r14, eax
   .text:0x0000000000006687        85C0                 test eax, eax
   .text:0x0000000000006689        7507                 jnz code_0x6692
   .text:0x000000000000668B code_0x668B:
   .text:0x000000000000668B        33FF                 xor edi, edi
   .text:0x000000000000668D        E9CE000000           jmp code_0x6760
   .text:0x0000000000006692 code_0x6692:
   .text:0x0000000000006692        498BF6               mov rsi, r14
   .text:0x0000000000006695        4803F6               add rsi, rsi
   .text:0x0000000000006698        488D4610             lea rax, [rsi+0x10]
   .text:0x000000000000669C        483BF0               cmp rsi, rax
   .text:0x000000000000669F        481BC9               sbb rcx, rcx
   .text:0x00000000000066A2        4823C8               and rcx, rax
   .text:0x00000000000066A5        7453                 jz code_0x66FA
   .text:0x00000000000066A7 code_0x66A7:
   .text:0x00000000000066A7        4881F900040000       cmp rcx, 0x400
   .text:0x00000000000066AE        7731                 ja code_0x66E1
   .text:0x00000000000066B0 code_0x66B0:
   .text:0x00000000000066B0        488D410F             lea rax, [rcx+0xF]
   .text:0x00000000000066B4        483BC1               cmp rax, rcx
   .text:0x00000000000066B7        770A                 ja code_0x66C3
   .text:0x00000000000066B9 code_0x66B9:
   .text:0x00000000000066B9        48B8F0FFFFFFFFFFFF0F mov rax, 0xFFFFFFFFFFFFFF0
   .text:0x00000000000066C3 code_0x66C3:
   .text:0x00000000000066C3        4883E0F0             and rax, 0xFFFFFFFFFFFFFFF0
   .text:0x00000000000066C7        E834430000           call _alloca_probe; int64_t __cdecl( void )
   .text:0x00000000000066CC        482BE0               sub rsp, rax
   .text:0x00000000000066CF        488D5C2430           lea rbx, [rsp+0x30]
   .text:0x00000000000066D4        4885DB               test rbx, rbx
   .text:0x00000000000066D7        746F                 jz code_0x6748
   .text:0x00000000000066D9 code_0x66D9:
   .text:0x00000000000066D9        C703CCCC0000         mov dword ptr [rbx], 0xCCCC
   .text:0x00000000000066DF        EB13                 jmp code_0x66F4
   .text:0x00000000000066E1 code_0x66E1:
   .text:0x00000000000066E1        E892FEFFFF           call _malloc_base; void * __cdecl( unsigned long long _Size )
   .text:0x00000000000066E6        488BD8               mov rbx, rax
   .text:0x00000000000066E9        4885C0               test rax, rax
   .text:0x00000000000066EC        740E                 jz code_0x66FC
   .text:0x00000000000066EE code_0x66EE:
   .text:0x00000000000066EE        C700DDDD0000         mov dword ptr [rax], 0xDDDD
   .text:0x00000000000066F4 code_0x66F4:
   .text:0x00000000000066F4        4883C310             add rbx, 0x10
   .text:0x00000000000066F8        EB02                 jmp code_0x66FC
   .text:0x00000000000066FA code_0x66FA:
   .text:0x00000000000066FA        33DB                 xor ebx, ebx
   .text:0x00000000000066FC code_0x66FC:
   .text:0x00000000000066FC        4885DB               test rbx, rbx
   .text:0x00000000000066FF        7447                 jz code_0x6748
   .text:0x0000000000006701 code_0x6701:
   .text:0x0000000000006701        4C8BC6               mov r8, rsi
   .text:0x0000000000006704        33D2                 xor edx, edx
   .text:0x0000000000006706        488BCB               mov rcx, rbx
   .text:0x0000000000006709        E852B6FFFF           call func_0x1D60; int64_t __cdecl( int64_t p1, int8_t p2, int64_t p3 )
   .text:0x000000000000670E        458BCF               mov r9d, r15d
   .text:0x0000000000006711        4489742428           mov dword ptr [rsp+0x28], r14d
   .text:0x0000000000006716        4D8BC4               mov r8, r12
   .text:0x0000000000006719        48895C2420           mov qword ptr [rsp+0x20], rbx
   .text:0x000000000000671E        BA01000000           mov edx, 0x1
   .text:0x0000000000006723        8BCF                 mov ecx, edi
   .text:0x0000000000006725        E852F3FFFF           call __acrt_MultiByteToWideChar; int32_t __cdecl( int32_t p1, int32_t p2 )
   .text:0x000000000000672A        85C0                 test eax, eax
   .text:0x000000000000672C        741A                 jz code_0x6748
   .text:0x000000000000672E code_0x672E:
   .text:0x000000000000672E        4C8B8D80000000       mov r9, qword ptr [rbp+0x80]
   .text:0x0000000000006735        448BC0               mov r8d, eax
   .text:0x0000000000006738        488BD3               mov rdx, rbx
   .text:0x000000000000673B        418BCD               mov ecx, r13d
   .text:0x000000000000673E        FF15744A0000         call qword ptr [GetStringTypeW]; int (__cdecl *)( unsigned long dwInfoType, unsigned short * lpSrcStr, int cchSrc, unsigned short * lpCharType )
   .text:0x0000000000006744        8BF8                 mov edi, eax
   .text:0x0000000000006746        EB02                 jmp code_0x674A
   .text:0x0000000000006748 code_0x6748:
   .text:0x0000000000006748        33FF                 xor edi, edi
   .text:0x000000000000674A code_0x674A:
   .text:0x000000000000674A        4885DB               test rbx, rbx
   .text:0x000000000000674D        7411                 jz code_0x6760
   .text:0x000000000000674F code_0x674F:
   .text:0x000000000000674F        488D4BF0             lea rcx, [rbx-0x10]
   .text:0x0000000000006753        8139DDDD0000         cmp dword ptr [rcx], 0xDDDD
   .text:0x0000000000006759        7505                 jnz code_0x6760
   .text:0x000000000000675B code_0x675B:
   .text:0x000000000000675B        E8B4E2FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000006760 code_0x6760:
   .text:0x0000000000006760        807D1800             cmp byte ptr [rbp+0x18], 0x0
   .text:0x0000000000006764        740B                 jz code_0x6771
   .text:0x0000000000006766 code_0x6766:
   .text:0x0000000000006766        488B4500             mov rax, qword ptr [rbp+0x0]
   .text:0x000000000000676A        83A0A8030000FD       and dword ptr [rax+0x3A8], 0xFFFFFFFD
   .text:0x0000000000006771 code_0x6771:
   .text:0x0000000000006771        8BC7                 mov eax, edi
   .text:0x0000000000006773        488B4D20             mov rcx, qword ptr [rbp+0x20]
   .text:0x0000000000006777        4833CD               xor rcx, rbp
   .text:0x000000000000677A        E8D1400000           call __security_check_cookie; noclobber void __cdecl( uint64_t p1 )
   .text:0x000000000000677F        488B5D60             mov rbx, qword ptr [rbp+0x60]
   .text:0x0000000000006783        488B7568             mov rsi, qword ptr [rbp+0x68]
   .text:0x0000000000006787        488B7D70             mov rdi, qword ptr [rbp+0x70]
   .text:0x000000000000678B        488D6530             lea rsp, [rbp+0x30]
   .text:0x000000000000678F        415F                 pop r15
   .text:0x0000000000006791        415E                 pop r14
   .text:0x0000000000006793        415D                 pop r13
   .text:0x0000000000006795        415C                 pop r12
   .text:0x0000000000006797        5D                   pop rbp
   .text:0x0000000000006798        C3                   ret
   .text:0x0000000000006799 data_0x6799:
   .text:0x0000000000006799        db 3 dup(0xCC)
   .text:0x000000000000679C __acrt_add_locale_ref:
   .text:0x000000000000679C        F0FF4110             lock inc dword ptr [rcx+0x10]
   .text:0x00000000000067A0        488B81E0000000       mov rax, qword ptr [rcx+0xE0]
   .text:0x00000000000067A7        4885C0               test rax, rax
   .text:0x00000000000067AA        7403                 jz code_0x67AF
   .text:0x00000000000067AC code_0x67AC:
   .text:0x00000000000067AC        F0FF00               lock inc dword ptr [rax]
   .text:0x00000000000067AF code_0x67AF:
   .text:0x00000000000067AF        488B81F0000000       mov rax, qword ptr [rcx+0xF0]
   .text:0x00000000000067B6        4885C0               test rax, rax
   .text:0x00000000000067B9        7403                 jz code_0x67BE
   .text:0x00000000000067BB code_0x67BB:
   .text:0x00000000000067BB        F0FF00               lock inc dword ptr [rax]
   .text:0x00000000000067BE code_0x67BE:
   .text:0x00000000000067BE        488B81E8000000       mov rax, qword ptr [rcx+0xE8]
   .text:0x00000000000067C5        4885C0               test rax, rax
   .text:0x00000000000067C8        7403                 jz code_0x67CD
   .text:0x00000000000067CA code_0x67CA:
   .text:0x00000000000067CA        F0FF00               lock inc dword ptr [rax]
   .text:0x00000000000067CD code_0x67CD:
   .text:0x00000000000067CD        488B8100010000       mov rax, qword ptr [rcx+0x100]
   .text:0x00000000000067D4        4885C0               test rax, rax
   .text:0x00000000000067D7        7403                 jz code_0x67DC
   .text:0x00000000000067D9 code_0x67D9:
   .text:0x00000000000067D9        F0FF00               lock inc dword ptr [rax]
   .text:0x00000000000067DC code_0x67DC:
   .text:0x00000000000067DC        488D4138             lea rax, [rcx+0x38]
   .text:0x00000000000067E0        41B806000000         mov r8d, 0x6
   .text:0x00000000000067E6 code_0x67E6:
   .text:0x00000000000067E6        488D150BDF0000       lea rdx, [string_C]; "C"
   .text:0x00000000000067ED        483950F0             cmp qword ptr [rax-0x10], rdx
   .text:0x00000000000067F1        740B                 jz code_0x67FE
   .text:0x00000000000067F3 code_0x67F3:
   .text:0x00000000000067F3        488B10               mov rdx, qword ptr [rax]
   .text:0x00000000000067F6        4885D2               test rdx, rdx
   .text:0x00000000000067F9        7403                 jz code_0x67FE
   .text:0x00000000000067FB code_0x67FB:
   .text:0x00000000000067FB        F0FF02               lock inc dword ptr [rdx]
   .text:0x00000000000067FE code_0x67FE:
   .text:0x00000000000067FE        488378E800           cmp qword ptr [rax-0x18], 0x0
   .text:0x0000000000006803        740C                 jz code_0x6811
   .text:0x0000000000006805 code_0x6805:
   .text:0x0000000000006805        488B50F8             mov rdx, qword ptr [rax-0x8]
   .text:0x0000000000006809        4885D2               test rdx, rdx
   .text:0x000000000000680C        7403                 jz code_0x6811
   .text:0x000000000000680E code_0x680E:
   .text:0x000000000000680E        F0FF02               lock inc dword ptr [rdx]
   .text:0x0000000000006811 code_0x6811:
   .text:0x0000000000006811        4883C020             add rax, 0x20
   .text:0x0000000000006815        4983E801             sub r8, 0x1
   .text:0x0000000000006819        75CB                 jnz code_0x67E6
   .text:0x000000000000681B code_0x681B:
   .text:0x000000000000681B        488B8920010000       mov rcx, qword ptr [rcx+0x120]
   .text:0x0000000000006822        E979010000           jmp code_0x69A0
   .text:0x0000000000006827 code_0x6827:
   .text:0x0000000000006827        CC                   int3
   .text:0x0000000000006828 __acrt_free_locale:
   .text:0x0000000000006828        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x000000000000682D        48896C2410           mov qword ptr [rsp+0x10], rbp
   .text:0x0000000000006832        4889742418           mov qword ptr [rsp+0x18], rsi
   .text:0x0000000000006837        57                   push rdi
   .text:0x0000000000006838        4883EC20             sub rsp, 0x20
   .text:0x000000000000683C        488B81F8000000       mov rax, qword ptr [rcx+0xF8]
   .text:0x0000000000006843        488BD9               mov rbx, rcx
   .text:0x0000000000006846        4885C0               test rax, rax
   .text:0x0000000000006849        7479                 jz code_0x68C4
   .text:0x000000000000684B code_0x684B:
   .text:0x000000000000684B        488D0DAEDE0000       lea rcx, [data_0x14700]; "."
   .text:0x0000000000006852        483BC1               cmp rax, rcx
   .text:0x0000000000006855        746D                 jz code_0x68C4
   .text:0x0000000000006857 code_0x6857:
   .text:0x0000000000006857        488B83E0000000       mov rax, qword ptr [rbx+0xE0]
   .text:0x000000000000685E        4885C0               test rax, rax
   .text:0x0000000000006861        7461                 jz code_0x68C4
   .text:0x0000000000006863 code_0x6863:
   .text:0x0000000000006863        833800               cmp dword ptr [rax], 0x0
   .text:0x0000000000006866        755C                 jnz code_0x68C4
   .text:0x0000000000006868 code_0x6868:
   .text:0x0000000000006868        488B8BF0000000       mov rcx, qword ptr [rbx+0xF0]
   .text:0x000000000000686F        4885C9               test rcx, rcx
   .text:0x0000000000006872        7416                 jz code_0x688A
   .text:0x0000000000006874 code_0x6874:
   .text:0x0000000000006874        833900               cmp dword ptr [rcx], 0x0
   .text:0x0000000000006877        7511                 jnz code_0x688A
   .text:0x0000000000006879 code_0x6879:
   .text:0x0000000000006879        E896E1FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x000000000000687E        488B8BF8000000       mov rcx, qword ptr [rbx+0xF8]
   .text:0x0000000000006885        E8EAF9FFFF           call __acrt_locale_free_monetary; void __cdecl( int64_t p1 )
   .text:0x000000000000688A code_0x688A:
   .text:0x000000000000688A        488B8BE8000000       mov rcx, qword ptr [rbx+0xE8]
   .text:0x0000000000006891        4885C9               test rcx, rcx
   .text:0x0000000000006894        7416                 jz code_0x68AC
   .text:0x0000000000006896 code_0x6896:
   .text:0x0000000000006896        833900               cmp dword ptr [rcx], 0x0
   .text:0x0000000000006899        7511                 jnz code_0x68AC
   .text:0x000000000000689B code_0x689B:
   .text:0x000000000000689B        E874E1FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000068A0        488B8BF8000000       mov rcx, qword ptr [rbx+0xF8]
   .text:0x00000000000068A7        E8D4FAFFFF           call __acrt_locale_free_numeric; void __cdecl( int64_t p1 )
   .text:0x00000000000068AC code_0x68AC:
   .text:0x00000000000068AC        488B8BE0000000       mov rcx, qword ptr [rbx+0xE0]
   .text:0x00000000000068B3        E85CE1FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000068B8        488B8BF8000000       mov rcx, qword ptr [rbx+0xF8]
   .text:0x00000000000068BF        E850E1FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000068C4 code_0x68C4:
   .text:0x00000000000068C4        488B8300010000       mov rax, qword ptr [rbx+0x100]
   .text:0x00000000000068CB        4885C0               test rax, rax
   .text:0x00000000000068CE        7447                 jz code_0x6917
   .text:0x00000000000068D0 code_0x68D0:
   .text:0x00000000000068D0        833800               cmp dword ptr [rax], 0x0
   .text:0x00000000000068D3        7542                 jnz code_0x6917
   .text:0x00000000000068D5 code_0x68D5:
   .text:0x00000000000068D5        488B8B08010000       mov rcx, qword ptr [rbx+0x108]
   .text:0x00000000000068DC        4881E9FE000000       sub rcx, 0xFE
   .text:0x00000000000068E3        E82CE1FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000068E8        488B8B10010000       mov rcx, qword ptr [rbx+0x110]
   .text:0x00000000000068EF        BF80000000           mov edi, 0x80
   .text:0x00000000000068F4        482BCF               sub rcx, rdi
   .text:0x00000000000068F7        E818E1FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000068FC        488B8B18010000       mov rcx, qword ptr [rbx+0x118]
   .text:0x0000000000006903        482BCF               sub rcx, rdi
   .text:0x0000000000006906        E809E1FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x000000000000690B        488B8B00010000       mov rcx, qword ptr [rbx+0x100]
   .text:0x0000000000006912        E8FDE0FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000006917 code_0x6917:
   .text:0x0000000000006917        488B8B20010000       mov rcx, qword ptr [rbx+0x120]
   .text:0x000000000000691E        E8A5000000           call __acrt_locale_free_lc_time_if_unreferenced; void __cdecl( int64_t p1 )
   .text:0x0000000000006923        488DB328010000       lea rsi, [rbx+0x128]
   .text:0x000000000000692A        BD06000000           mov ebp, 0x6
   .text:0x000000000000692F        488D7B38             lea rdi, [rbx+0x38]
   .text:0x0000000000006933 code_0x6933:
   .text:0x0000000000006933        488D05BEDD0000       lea rax, [string_C]; "C"
   .text:0x000000000000693A        483947F0             cmp qword ptr [rdi-0x10], rax
   .text:0x000000000000693E        741A                 jz code_0x695A
   .text:0x0000000000006940 code_0x6940:
   .text:0x0000000000006940        488B0F               mov rcx, qword ptr [rdi]
   .text:0x0000000000006943        4885C9               test rcx, rcx
   .text:0x0000000000006946        7412                 jz code_0x695A
   .text:0x0000000000006948 code_0x6948:
   .text:0x0000000000006948        833900               cmp dword ptr [rcx], 0x0
   .text:0x000000000000694B        750D                 jnz code_0x695A
   .text:0x000000000000694D code_0x694D:
   .text:0x000000000000694D        E8C2E0FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000006952        488B0E               mov rcx, qword ptr [rsi]
   .text:0x0000000000006955        E8BAE0FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x000000000000695A code_0x695A:
   .text:0x000000000000695A        48837FE800           cmp qword ptr [rdi-0x18], 0x0
   .text:0x000000000000695F        7413                 jz code_0x6974
   .text:0x0000000000006961 code_0x6961:
   .text:0x0000000000006961        488B4FF8             mov rcx, qword ptr [rdi-0x8]
   .text:0x0000000000006965        4885C9               test rcx, rcx
   .text:0x0000000000006968        740A                 jz code_0x6974
   .text:0x000000000000696A code_0x696A:
   .text:0x000000000000696A        833900               cmp dword ptr [rcx], 0x0
   .text:0x000000000000696D        7505                 jnz code_0x6974
   .text:0x000000000000696F code_0x696F:
   .text:0x000000000000696F        E8A0E0FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000006974 code_0x6974:
   .text:0x0000000000006974        4883C608             add rsi, 0x8
   .text:0x0000000000006978        4883C720             add rdi, 0x20
   .text:0x000000000000697C        4883ED01             sub rbp, 0x1
   .text:0x0000000000006980        75B1                 jnz code_0x6933
   .text:0x0000000000006982 code_0x6982:
   .text:0x0000000000006982        488BCB               mov rcx, rbx
   .text:0x0000000000006985        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x000000000000698A        488B6C2438           mov rbp, qword ptr [rsp+0x38]
   .text:0x000000000000698F        488B742440           mov rsi, qword ptr [rsp+0x40]
   .text:0x0000000000006994        4883C420             add rsp, 0x20
   .text:0x0000000000006998        5F                   pop rdi
   .text:0x0000000000006999        E976E0FFFF           jmp _free_base; void __cdecl( void * _Block )
   .text:0x000000000000699E data_0x699E:
   .text:0x000000000000699E        db 2 dup(0xCC)
   .text:0x00000000000069A0 code_0x69A0:
   .text:0x00000000000069A0        4885C9               test rcx, rcx
   .text:0x00000000000069A3        741C                 jz code_0x69C1
   .text:0x00000000000069A5 code_0x69A5:
   .text:0x00000000000069A5        488D05E4570000       lea rax, [data_0xC190]
   .text:0x00000000000069AC        483BC8               cmp rcx, rax
   .text:0x00000000000069AF        7410                 jz code_0x69C1
   .text:0x00000000000069B1 code_0x69B1:
   .text:0x00000000000069B1        B801000000           mov eax, 0x1
   .text:0x00000000000069B6        F00FC1815C010000     lock xadd dword ptr [rcx+0x15C], eax
   .text:0x00000000000069BE        FFC0                 inc eax
   .text:0x00000000000069C0        C3                   ret
   .text:0x00000000000069C1 code_0x69C1:
   .text:0x00000000000069C1        B8FFFFFF7F           mov eax, 0x7FFFFFFF
   .text:0x00000000000069C6        C3                   ret
   .text:0x00000000000069C7 code_0x69C7:
   .text:0x00000000000069C7        CC                   int3
   .text:0x00000000000069C8 __acrt_locale_free_lc_time_if_unreferenced:
   .text:0x00000000000069C8        4885C9               test rcx, rcx
   .text:0x00000000000069CB        7430                 jz code_0x69FD
   .text:0x00000000000069CD code_0x69CD:
   .text:0x00000000000069CD        53                   push rbx
   .text:0x00000000000069CE        4883EC20             sub rsp, 0x20
   .text:0x00000000000069D2        488D05B7570000       lea rax, [data_0xC190]
   .text:0x00000000000069D9        488BD9               mov rbx, rcx
   .text:0x00000000000069DC        483BC8               cmp rcx, rax
   .text:0x00000000000069DF        7417                 jz code_0x69F8
   .text:0x00000000000069E1 code_0x69E1:
   .text:0x00000000000069E1        8B815C010000         mov eax, dword ptr [rcx+0x15C]
   .text:0x00000000000069E7        85C0                 test eax, eax
   .text:0x00000000000069E9        750D                 jnz code_0x69F8
   .text:0x00000000000069EB code_0x69EB:
   .text:0x00000000000069EB        E850FAFFFF           call __acrt_locale_free_time; void __cdecl( int64_t p1 )
   .text:0x00000000000069F0        488BCB               mov rcx, rbx
   .text:0x00000000000069F3        E81CE0FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000069F8 code_0x69F8:
   .text:0x00000000000069F8        4883C420             add rsp, 0x20
   .text:0x00000000000069FC        5B                   pop rbx
   .text:0x00000000000069FD code_0x69FD:
   .text:0x00000000000069FD        C3                   ret
   .text:0x00000000000069FE data_0x69FE:
   .text:0x00000000000069FE        db 2 dup(0xCC)
   .text:0x0000000000006A00 __acrt_locale_release_lc_time_reference:
   .text:0x0000000000006A00        4885C9               test rcx, rcx
   .text:0x0000000000006A03        741A                 jz code_0x6A1F
   .text:0x0000000000006A05 code_0x6A05:
   .text:0x0000000000006A05        488D0584570000       lea rax, [data_0xC190]
   .text:0x0000000000006A0C        483BC8               cmp rcx, rax
   .text:0x0000000000006A0F        740E                 jz code_0x6A1F
   .text:0x0000000000006A11 code_0x6A11:
   .text:0x0000000000006A11        83C8FF               or eax, 0xFFFFFFFF
   .text:0x0000000000006A14        F00FC1815C010000     lock xadd dword ptr [rcx+0x15C], eax
   .text:0x0000000000006A1C        FFC8                 dec eax
   .text:0x0000000000006A1E        C3                   ret
   .text:0x0000000000006A1F code_0x6A1F:
   .text:0x0000000000006A1F        B8FFFFFF7F           mov eax, 0x7FFFFFFF
   .text:0x0000000000006A24        C3                   ret
   .text:0x0000000000006A25 data_0x6A25:
   .text:0x0000000000006A25        db 3 dup(0xCC)
   .text:0x0000000000006A28 __acrt_release_locale_ref:
   .text:0x0000000000006A28        4883EC28             sub rsp, 0x28
   .text:0x0000000000006A2C        4885C9               test rcx, rcx
   .text:0x0000000000006A2F        0F8496000000         jz code_0x6ACB
   .text:0x0000000000006A35 code_0x6A35:
   .text:0x0000000000006A35        4183C9FF             or r9d, 0xFFFFFFFF
   .text:0x0000000000006A39        F044014910           lock add dword ptr [rcx+0x10], r9d
   .text:0x0000000000006A3E        488B81E0000000       mov rax, qword ptr [rcx+0xE0]
   .text:0x0000000000006A45        4885C0               test rax, rax
   .text:0x0000000000006A48        7404                 jz code_0x6A4E
   .text:0x0000000000006A4A code_0x6A4A:
   .text:0x0000000000006A4A        F0440108             lock add dword ptr [rax], r9d
   .text:0x0000000000006A4E code_0x6A4E:
   .text:0x0000000000006A4E        488B81F0000000       mov rax, qword ptr [rcx+0xF0]
   .text:0x0000000000006A55        4885C0               test rax, rax
   .text:0x0000000000006A58        7404                 jz code_0x6A5E
   .text:0x0000000000006A5A code_0x6A5A:
   .text:0x0000000000006A5A        F0440108             lock add dword ptr [rax], r9d
   .text:0x0000000000006A5E code_0x6A5E:
   .text:0x0000000000006A5E        488B81E8000000       mov rax, qword ptr [rcx+0xE8]
   .text:0x0000000000006A65        4885C0               test rax, rax
   .text:0x0000000000006A68        7404                 jz code_0x6A6E
   .text:0x0000000000006A6A code_0x6A6A:
   .text:0x0000000000006A6A        F0440108             lock add dword ptr [rax], r9d
   .text:0x0000000000006A6E code_0x6A6E:
   .text:0x0000000000006A6E        488B8100010000       mov rax, qword ptr [rcx+0x100]
   .text:0x0000000000006A75        4885C0               test rax, rax
   .text:0x0000000000006A78        7404                 jz code_0x6A7E
   .text:0x0000000000006A7A code_0x6A7A:
   .text:0x0000000000006A7A        F0440108             lock add dword ptr [rax], r9d
   .text:0x0000000000006A7E code_0x6A7E:
   .text:0x0000000000006A7E        488D4138             lea rax, [rcx+0x38]
   .text:0x0000000000006A82        41B806000000         mov r8d, 0x6
   .text:0x0000000000006A88 code_0x6A88:
   .text:0x0000000000006A88        488D1569DC0000       lea rdx, [string_C]; "C"
   .text:0x0000000000006A8F        483950F0             cmp qword ptr [rax-0x10], rdx
   .text:0x0000000000006A93        740C                 jz code_0x6AA1
   .text:0x0000000000006A95 code_0x6A95:
   .text:0x0000000000006A95        488B10               mov rdx, qword ptr [rax]
   .text:0x0000000000006A98        4885D2               test rdx, rdx
   .text:0x0000000000006A9B        7404                 jz code_0x6AA1
   .text:0x0000000000006A9D code_0x6A9D:
   .text:0x0000000000006A9D        F044010A             lock add dword ptr [rdx], r9d
   .text:0x0000000000006AA1 code_0x6AA1:
   .text:0x0000000000006AA1        488378E800           cmp qword ptr [rax-0x18], 0x0
   .text:0x0000000000006AA6        740D                 jz code_0x6AB5
   .text:0x0000000000006AA8 code_0x6AA8:
   .text:0x0000000000006AA8        488B50F8             mov rdx, qword ptr [rax-0x8]
   .text:0x0000000000006AAC        4885D2               test rdx, rdx
   .text:0x0000000000006AAF        7404                 jz code_0x6AB5
   .text:0x0000000000006AB1 code_0x6AB1:
   .text:0x0000000000006AB1        F044010A             lock add dword ptr [rdx], r9d
   .text:0x0000000000006AB5 code_0x6AB5:
   .text:0x0000000000006AB5        4883C020             add rax, 0x20
   .text:0x0000000000006AB9        4983E801             sub r8, 0x1
   .text:0x0000000000006ABD        75C9                 jnz code_0x6A88
   .text:0x0000000000006ABF code_0x6ABF:
   .text:0x0000000000006ABF        488B8920010000       mov rcx, qword ptr [rcx+0x120]
   .text:0x0000000000006AC6        E835FFFFFF           call __acrt_locale_release_lc_time_reference; int32_t __cdecl( int64_t p1 )
   .text:0x0000000000006ACB code_0x6ACB:
   .text:0x0000000000006ACB        4883C428             add rsp, 0x28
   .text:0x0000000000006ACF        C3                   ret
   .text:0x0000000000006AD0 func_0x6AD0:
   .text:0x0000000000006AD0        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000006AD5        57                   push rdi
   .text:0x0000000000006AD6        4883EC20             sub rsp, 0x20
   .text:0x0000000000006ADA        E879D7FFFF           call func_0x4258; int64_t __cdecl( void )
   .text:0x0000000000006ADF        488DB890000000       lea rdi, [rax+0x90]
   .text:0x0000000000006AE6        8B88A8030000         mov ecx, dword ptr [rax+0x3A8]
   .text:0x0000000000006AEC        8B05AEDC0000         mov eax, dword ptr [data_0x147A0]
   .text:0x0000000000006AF2        85C8                 test eax, ecx
   .text:0x0000000000006AF4        7408                 jz code_0x6AFE
   .text:0x0000000000006AF6 code_0x6AF6:
   .text:0x0000000000006AF6        488B1F               mov rbx, qword ptr [rdi]
   .text:0x0000000000006AF9        4885DB               test rbx, rbx
   .text:0x0000000000006AFC        752C                 jnz code_0x6B2A
   .text:0x0000000000006AFE code_0x6AFE:
   .text:0x0000000000006AFE        B904000000           mov ecx, 0x4
   .text:0x0000000000006B03        E850F1FFFF           call __acrt_lock; void __cdecl( int32_t p1 )
   .text:0x0000000000006B08        90                   nop
   .text:0x0000000000006B09        488B1508E90000       mov rdx, qword ptr [data_0x15418]
   .text:0x0000000000006B10        488BCF               mov rcx, rdi
   .text:0x0000000000006B13        E828000000           call _updatetlocinfoEx_nolock; int32_t __cdecl( int64_t p1, int64_t p2 )
   .text:0x0000000000006B18        488BD8               mov rbx, rax
   .text:0x0000000000006B1B        B904000000           mov ecx, 0x4
   .text:0x0000000000006B20        E887F1FFFF           call func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x0000000000006B25        4885DB               test rbx, rbx
   .text:0x0000000000006B28        740E                 jz code_0x6B38
   .text:0x0000000000006B2A code_0x6B2A:
   .text:0x0000000000006B2A        488BC3               mov rax, rbx
   .text:0x0000000000006B2D        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000006B32        4883C420             add rsp, 0x20
   .text:0x0000000000006B36        5F                   pop rdi
   .text:0x0000000000006B37        C3                   ret
   .text:0x0000000000006B38 code_0x6B38:
   .text:0x0000000000006B38        E8EFD1FFFF           call func_0x3D2C; void __cdecl( void )
   .text:0x0000000000006B3D        90                   nop
   .text:0x0000000000006B3E        CC                   int3
   .text:0x0000000000006B3F code_0x6B3F:
   .text:0x0000000000006B3F        CC                   int3
   .text:0x0000000000006B40 _updatetlocinfoEx_nolock:
   .text:0x0000000000006B40        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000006B45        57                   push rdi
   .text:0x0000000000006B46        4883EC20             sub rsp, 0x20
   .text:0x0000000000006B4A        488BFA               mov rdi, rdx
   .text:0x0000000000006B4D        4885D2               test rdx, rdx
   .text:0x0000000000006B50        7446                 jz code_0x6B98
   .text:0x0000000000006B52 code_0x6B52:
   .text:0x0000000000006B52        4885C9               test rcx, rcx
   .text:0x0000000000006B55        7441                 jz code_0x6B98
   .text:0x0000000000006B57 code_0x6B57:
   .text:0x0000000000006B57        488B19               mov rbx, qword ptr [rcx]
   .text:0x0000000000006B5A        483BDA               cmp rbx, rdx
   .text:0x0000000000006B5D        7505                 jnz code_0x6B64
   .text:0x0000000000006B5F code_0x6B5F:
   .text:0x0000000000006B5F        488BC7               mov rax, rdi
   .text:0x0000000000006B62        EB36                 jmp code_0x6B9A
   .text:0x0000000000006B64 code_0x6B64:
   .text:0x0000000000006B64        488939               mov qword ptr [rcx], rdi
   .text:0x0000000000006B67        488BCF               mov rcx, rdi
   .text:0x0000000000006B6A        E82DFCFFFF           call __acrt_add_locale_ref; int64_t __cdecl( int64_t p1 )
   .text:0x0000000000006B6F        4885DB               test rbx, rbx
   .text:0x0000000000006B72        74EB                 jz code_0x6B5F
   .text:0x0000000000006B74 code_0x6B74:
   .text:0x0000000000006B74        488BCB               mov rcx, rbx
   .text:0x0000000000006B77        E8ACFEFFFF           call __acrt_release_locale_ref; void __cdecl( int64_t p1 )
   .text:0x0000000000006B7C        837B1000             cmp dword ptr [rbx+0x10], 0x0
   .text:0x0000000000006B80        75DD                 jnz code_0x6B5F
   .text:0x0000000000006B82 code_0x6B82:
   .text:0x0000000000006B82        488D0507DA0000       lea rax, [data_0x14590]
   .text:0x0000000000006B89        483BD8               cmp rbx, rax
   .text:0x0000000000006B8C        74D1                 jz code_0x6B5F
   .text:0x0000000000006B8E code_0x6B8E:
   .text:0x0000000000006B8E        488BCB               mov rcx, rbx
   .text:0x0000000000006B91        E892FCFFFF           call __acrt_free_locale; void __cdecl( int64_t p1 )
   .text:0x0000000000006B96        EBC7                 jmp code_0x6B5F
   .text:0x0000000000006B98 code_0x6B98:
   .text:0x0000000000006B98        33C0                 xor eax, eax
   .text:0x0000000000006B9A code_0x6B9A:
   .text:0x0000000000006B9A        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000006B9F        4883C420             add rsp, 0x20
   .text:0x0000000000006BA3        5F                   pop rdi
   .text:0x0000000000006BA4        C3                   ret
   .text:0x0000000000006BA5 data_0x6BA5:
   .text:0x0000000000006BA5        db 3 dup(0xCC)
   .text:0x0000000000006BA8 func_0x6BA8:
   .text:0x0000000000006BA8        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000006BAD        48896C2410           mov qword ptr [rsp+0x10], rbp
   .text:0x0000000000006BB2        4889742418           mov qword ptr [rsp+0x18], rsi
   .text:0x0000000000006BB7        57                   push rdi
   .text:0x0000000000006BB8        4154                 push r12
   .text:0x0000000000006BBA        4155                 push r13
   .text:0x0000000000006BBC        4156                 push r14
   .text:0x0000000000006BBE        4157                 push r15
   .text:0x0000000000006BC0        4883EC20             sub rsp, 0x20
   .text:0x0000000000006BC4        448BF9               mov r15d, ecx
   .text:0x0000000000006BC7        4C8D353294FFFF       lea r14, [data_0x0]
   .text:0x0000000000006BCE        4D8BE1               mov r12, r9
   .text:0x0000000000006BD1        498BE8               mov rbp, r8
   .text:0x0000000000006BD4        4C8BEA               mov r13, rdx
   .text:0x0000000000006BD7        4B8B8CFEC0540100     mov rcx, qword ptr [r14+r15*8+0x154C0]
   .text:0x0000000000006BDF        4C8B1542D40000       mov r10, qword ptr [__security_cookie]
   .text:0x0000000000006BE6        4883CFFF             or rdi, 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000006BEA        418BC2               mov eax, r10d
   .text:0x0000000000006BED        498BD2               mov rdx, r10
   .text:0x0000000000006BF0        4833D1               xor rdx, rcx
   .text:0x0000000000006BF3        83E03F               and eax, 0x3F
   .text:0x0000000000006BF6        8AC8                 mov cl, al
   .text:0x0000000000006BF8        48D3CA               ror rdx, cl
   .text:0x0000000000006BFB        483BD7               cmp rdx, rdi
   .text:0x0000000000006BFE        0F845B010000         jz code_0x6D5F
   .text:0x0000000000006C04 code_0x6C04:
   .text:0x0000000000006C04        4885D2               test rdx, rdx
   .text:0x0000000000006C07        7408                 jz code_0x6C11
   .text:0x0000000000006C09 code_0x6C09:
   .text:0x0000000000006C09        488BC2               mov rax, rdx
   .text:0x0000000000006C0C        E950010000           jmp code_0x6D61
   .text:0x0000000000006C11 code_0x6C11:
   .text:0x0000000000006C11        4D3BC4               cmp r8, r12
   .text:0x0000000000006C14        0F84D9000000         jz code_0x6CF3
   .text:0x0000000000006C1A code_0x6C1A:
   .text:0x0000000000006C1A        8B7500               mov esi, dword ptr [rbp+0x0]
   .text:0x0000000000006C1D        498B9CF620540100     mov rbx, qword ptr [r14+rsi*8+0x15420]
   .text:0x0000000000006C25        4885DB               test rbx, rbx
   .text:0x0000000000006C28        740E                 jz code_0x6C38
   .text:0x0000000000006C2A code_0x6C2A:
   .text:0x0000000000006C2A        483BDF               cmp rbx, rdi
   .text:0x0000000000006C2D        0F84AC000000         jz code_0x6CDF
   .text:0x0000000000006C33 code_0x6C33:
   .text:0x0000000000006C33        E9A2000000           jmp code_0x6CDA
   .text:0x0000000000006C38 code_0x6C38:
   .text:0x0000000000006C38        4D8BB4F620CE0000     mov r14, qword ptr [r14+rsi*8+0xCE20]
   .text:0x0000000000006C40        33D2                 xor edx, edx
   .text:0x0000000000006C42        498BCE               mov rcx, r14
   .text:0x0000000000006C45        41B800080000         mov r8d, 0x800
   .text:0x0000000000006C4B        FF159F440000         call qword ptr [LoadLibraryExW]; struct HINSTANCE__ * (__cdecl *)( unsigned short * lpLibFileName, void * hFile, unsigned long dwFlags )
   .text:0x0000000000006C51        488BD8               mov rbx, rax
   .text:0x0000000000006C54        4885C0               test rax, rax
   .text:0x0000000000006C57        754F                 jnz code_0x6CA8
   .text:0x0000000000006C59 code_0x6C59:
   .text:0x0000000000006C59        FF1531440000         call qword ptr [GetLastError]; unsigned long (__cdecl *)( void )
   .text:0x0000000000006C5F        83F857               cmp eax, 0x57
   .text:0x0000000000006C62        7542                 jnz code_0x6CA6
   .text:0x0000000000006C64 code_0x6C64:
   .text:0x0000000000006C64        8D58B0               lea ebx, [rax-0x50]
   .text:0x0000000000006C67        498BCE               mov rcx, r14
   .text:0x0000000000006C6A        448BC3               mov r8d, ebx
   .text:0x0000000000006C6D        488D1534670000       lea rdx, [string_apims_1]; "api-ms-"
   .text:0x0000000000006C74        E80BD1FFFF           call wcsncmp; int __cdecl( unsigned short * _String1, unsigned short * _String2, unsigned long long _MaxCount )
   .text:0x0000000000006C79        85C0                 test eax, eax
   .text:0x0000000000006C7B        7429                 jz code_0x6CA6
   .text:0x0000000000006C7D code_0x6C7D:
   .text:0x0000000000006C7D        448BC3               mov r8d, ebx
   .text:0x0000000000006C80        488D1531670000       lea rdx, [string_extms_1]; "ext-ms-"
   .text:0x0000000000006C87        498BCE               mov rcx, r14
   .text:0x0000000000006C8A        E8F5D0FFFF           call wcsncmp; int __cdecl( unsigned short * _String1, unsigned short * _String2, unsigned long long _MaxCount )
   .text:0x0000000000006C8F        85C0                 test eax, eax
   .text:0x0000000000006C91        7413                 jz code_0x6CA6
   .text:0x0000000000006C93 code_0x6C93:
   .text:0x0000000000006C93        4533C0               xor r8d, r8d
   .text:0x0000000000006C96        33D2                 xor edx, edx
   .text:0x0000000000006C98        498BCE               mov rcx, r14
   .text:0x0000000000006C9B        FF154F440000         call qword ptr [LoadLibraryExW]; struct HINSTANCE__ * (__cdecl *)( unsigned short * lpLibFileName, void * hFile, unsigned long dwFlags )
   .text:0x0000000000006CA1        488BD8               mov rbx, rax
   .text:0x0000000000006CA4        EB02                 jmp code_0x6CA8
   .text:0x0000000000006CA6 code_0x6CA6:
   .text:0x0000000000006CA6        33DB                 xor ebx, ebx
   .text:0x0000000000006CA8 code_0x6CA8:
   .text:0x0000000000006CA8        4C8D355193FFFF       lea r14, [data_0x0]
   .text:0x0000000000006CAF        4885DB               test rbx, rbx
   .text:0x0000000000006CB2        750D                 jnz code_0x6CC1
   .text:0x0000000000006CB4 code_0x6CB4:
   .text:0x0000000000006CB4        488BC7               mov rax, rdi
   .text:0x0000000000006CB7        498784F620540100     xchg qword ptr [r14+rsi*8+0x15420], rax
   .text:0x0000000000006CBF        EB1E                 jmp code_0x6CDF
   .text:0x0000000000006CC1 code_0x6CC1:
   .text:0x0000000000006CC1        488BC3               mov rax, rbx
   .text:0x0000000000006CC4        498784F620540100     xchg qword ptr [r14+rsi*8+0x15420], rax
   .text:0x0000000000006CCC        4885C0               test rax, rax
   .text:0x0000000000006CCF        7409                 jz code_0x6CDA
   .text:0x0000000000006CD1 code_0x6CD1:
   .text:0x0000000000006CD1        488BCB               mov rcx, rbx
   .text:0x0000000000006CD4        FF1506440000         call qword ptr [FreeLibrary]; int (__cdecl *)( struct HINSTANCE__ * hLibModule )
   .text:0x0000000000006CDA code_0x6CDA:
   .text:0x0000000000006CDA        4885DB               test rbx, rbx
   .text:0x0000000000006CDD        7555                 jnz code_0x6D34
   .text:0x0000000000006CDF code_0x6CDF:
   .text:0x0000000000006CDF        4883C504             add rbp, 0x4
   .text:0x0000000000006CE3        493BEC               cmp rbp, r12
   .text:0x0000000000006CE6        0F852EFFFFFF         jnz code_0x6C1A
   .text:0x0000000000006CEC code_0x6CEC:
   .text:0x0000000000006CEC        4C8B1535D30000       mov r10, qword ptr [__security_cookie]
   .text:0x0000000000006CF3 code_0x6CF3:
   .text:0x0000000000006CF3        33DB                 xor ebx, ebx
   .text:0x0000000000006CF5 code_0x6CF5:
   .text:0x0000000000006CF5        4885DB               test rbx, rbx
   .text:0x0000000000006CF8        744A                 jz code_0x6D44
   .text:0x0000000000006CFA code_0x6CFA:
   .text:0x0000000000006CFA        498BD5               mov rdx, r13
   .text:0x0000000000006CFD        488BCB               mov rcx, rbx
   .text:0x0000000000006D00        FF15E2430000         call qword ptr [GetProcAddress]; long long (__cdecl *)( ... ) (__cdecl *)( struct HINSTANCE__ * hModule, char * lpProcName )
   .text:0x0000000000006D06        4885C0               test rax, rax
   .text:0x0000000000006D09        7432                 jz code_0x6D3D
   .text:0x0000000000006D0B code_0x6D0B:
   .text:0x0000000000006D0B        4C8B0516D30000       mov r8, qword ptr [__security_cookie]
   .text:0x0000000000006D12        BA40000000           mov edx, 0x40
   .text:0x0000000000006D17        418BC8               mov ecx, r8d
   .text:0x0000000000006D1A        83E13F               and ecx, 0x3F
   .text:0x0000000000006D1D        2BD1                 sub edx, ecx
   .text:0x0000000000006D1F        8ACA                 mov cl, dl
   .text:0x0000000000006D21        488BD0               mov rdx, rax
   .text:0x0000000000006D24        48D3CA               ror rdx, cl
   .text:0x0000000000006D27        4933D0               xor rdx, r8
   .text:0x0000000000006D2A        4B8794FEC0540100     xchg qword ptr [r14+r15*8+0x154C0], rdx
   .text:0x0000000000006D32        EB2D                 jmp code_0x6D61
   .text:0x0000000000006D34 code_0x6D34:
   .text:0x0000000000006D34        4C8B15EDD20000       mov r10, qword ptr [__security_cookie]
   .text:0x0000000000006D3B        EBB8                 jmp code_0x6CF5
   .text:0x0000000000006D3D code_0x6D3D:
   .text:0x0000000000006D3D        4C8B15E4D20000       mov r10, qword ptr [__security_cookie]
   .text:0x0000000000006D44 code_0x6D44:
   .text:0x0000000000006D44        418BC2               mov eax, r10d
   .text:0x0000000000006D47        B940000000           mov ecx, 0x40
   .text:0x0000000000006D4C        83E03F               and eax, 0x3F
   .text:0x0000000000006D4F        2BC8                 sub ecx, eax
   .text:0x0000000000006D51        48D3CF               ror rdi, cl
   .text:0x0000000000006D54        4933FA               xor rdi, r10
   .text:0x0000000000006D57        4B87BCFEC0540100     xchg qword ptr [r14+r15*8+0x154C0], rdi
   .text:0x0000000000006D5F code_0x6D5F:
   .text:0x0000000000006D5F        33C0                 xor eax, eax
   .text:0x0000000000006D61 code_0x6D61:
   .text:0x0000000000006D61        488B5C2450           mov rbx, qword ptr [rsp+0x50]
   .text:0x0000000000006D66        488B6C2458           mov rbp, qword ptr [rsp+0x58]
   .text:0x0000000000006D6B        488B742460           mov rsi, qword ptr [rsp+0x60]
   .text:0x0000000000006D70        4883C420             add rsp, 0x20
   .text:0x0000000000006D74        415F                 pop r15
   .text:0x0000000000006D76        415E                 pop r14
   .text:0x0000000000006D78        415D                 pop r13
   .text:0x0000000000006D7A        415C                 pop r12
   .text:0x0000000000006D7C        5F                   pop rdi
   .text:0x0000000000006D7D        C3                   ret
   .text:0x0000000000006D7E data_0x6D7E:
   .text:0x0000000000006D7E        db 2 dup(0xCC)
   .text:0x0000000000006D80 __acrt_AppPolicyGetProcessTerminationMethodInternal:
   .text:0x0000000000006D80        4053                 push rbx
   .text:0x0000000000006D82        4883EC20             sub rsp, 0x20
   .text:0x0000000000006D86        488BD9               mov rbx, rcx
   .text:0x0000000000006D89        4C8D0DF0660000       lea r9, [string_AppPolicyG]; "AppPolicyGetProcessTerminationMethod"
   .text:0x0000000000006D90        B91C000000           mov ecx, 0x1C
   .text:0x0000000000006D95        4C8D05E0660000       lea r8, [data_0xD47C]
   .text:0x0000000000006D9C        488D15DD660000       lea rdx, [string_AppPolicyG]; "AppPolicyGetProcessTerminationMethod"
   .text:0x0000000000006DA3        E800FEFFFF           call func_0x6BA8; int32_t __cdecl( int32_t p1, int64_t p2, int64_t p3, int64_t p4 )
   .text:0x0000000000006DA8        4885C0               test rax, rax
   .text:0x0000000000006DAB        7416                 jz code_0x6DC3
   .text:0x0000000000006DAD code_0x6DAD:
   .text:0x0000000000006DAD        488BD3               mov rdx, rbx
   .text:0x0000000000006DB0        48C7C1FAFFFFFF       mov rcx, 0xFFFFFFFFFFFFFFFA
   .text:0x0000000000006DB7        4883C420             add rsp, 0x20
   .text:0x0000000000006DBB        5B                   pop rbx
   .text:0x0000000000006DBC        48FF2565440000       jmp qword ptr [GuardCFDispatchFunction]
   .text:0x0000000000006DC3 code_0x6DC3:
   .text:0x0000000000006DC3        B8250200C0           mov eax, 0xC0000225
   .text:0x0000000000006DC8        4883C420             add rsp, 0x20
   .text:0x0000000000006DCC        5B                   pop rbx
   .text:0x0000000000006DCD        C3                   ret
   .text:0x0000000000006DCE data_0x6DCE:
   .text:0x0000000000006DCE        db 2 dup(0xCC)
   .text:0x0000000000006DD0 __acrt_FlsAlloc:
   .text:0x0000000000006DD0        4053                 push rbx
   .text:0x0000000000006DD2        4883EC20             sub rsp, 0x20
   .text:0x0000000000006DD6        488BD9               mov rbx, rcx
   .text:0x0000000000006DD9        4C8D0DF0650000       lea r9, [string_FlsAlloc_1]; "FlsAlloc"
   .text:0x0000000000006DE0        B903000000           mov ecx, 0x3
   .text:0x0000000000006DE5        4C8D05DC650000       lea r8, [data_0xD3C8]
   .text:0x0000000000006DEC        488D15DD650000       lea rdx, [string_FlsAlloc_1]; "FlsAlloc"
   .text:0x0000000000006DF3        E8B0FDFFFF           call func_0x6BA8; int32_t __cdecl( int32_t p1, int64_t p2, int64_t p3, int64_t p4 )
   .text:0x0000000000006DF8        4885C0               test rax, rax
   .text:0x0000000000006DFB        740F                 jz code_0x6E0C
   .text:0x0000000000006DFD code_0x6DFD:
   .text:0x0000000000006DFD        488BCB               mov rcx, rbx
   .text:0x0000000000006E00        4883C420             add rsp, 0x20
   .text:0x0000000000006E04        5B                   pop rbx
   .text:0x0000000000006E05        48FF251C440000       jmp qword ptr [GuardCFDispatchFunction]
   .text:0x0000000000006E0C code_0x6E0C:
   .text:0x0000000000006E0C        4883C420             add rsp, 0x20
   .text:0x0000000000006E10        5B                   pop rbx
   .text:0x0000000000006E11        48FF25A8420000       jmp qword ptr [TlsAlloc]; unsigned long (__cdecl *)( void )
   .text:0x0000000000006E18 __acrt_FlsFree:
   .text:0x0000000000006E18        4053                 push rbx
   .text:0x0000000000006E1A        4883EC20             sub rsp, 0x20
   .text:0x0000000000006E1E        8BD9                 mov ebx, ecx
   .text:0x0000000000006E20        4C8D0DC1650000       lea r9, [string_FlsFree_1]; "FlsFree"
   .text:0x0000000000006E27        B904000000           mov ecx, 0x4
   .text:0x0000000000006E2C        4C8D05AD650000       lea r8, [data_0xD3E0]
   .text:0x0000000000006E33        488D15AE650000       lea rdx, [string_FlsFree_1]; "FlsFree"
   .text:0x0000000000006E3A        E869FDFFFF           call func_0x6BA8; int32_t __cdecl( int32_t p1, int64_t p2, int64_t p3, int64_t p4 )
   .text:0x0000000000006E3F        8BCB                 mov ecx, ebx
   .text:0x0000000000006E41        4885C0               test rax, rax
   .text:0x0000000000006E44        740C                 jz code_0x6E52
   .text:0x0000000000006E46 code_0x6E46:
   .text:0x0000000000006E46        4883C420             add rsp, 0x20
   .text:0x0000000000006E4A        5B                   pop rbx
   .text:0x0000000000006E4B        48FF25D6430000       jmp qword ptr [GuardCFDispatchFunction]
   .text:0x0000000000006E52 code_0x6E52:
   .text:0x0000000000006E52        4883C420             add rsp, 0x20
   .text:0x0000000000006E56        5B                   pop rbx
   .text:0x0000000000006E57        48FF257A420000       jmp qword ptr [TlsFree]; int (__cdecl *)( unsigned long dwTlsIndex )
   .text:0x0000000000006E5E data_0x6E5E:
   .text:0x0000000000006E5E        db 2 dup(0xCC)
   .text:0x0000000000006E60 __acrt_FlsGetValue:
   .text:0x0000000000006E60        4053                 push rbx
   .text:0x0000000000006E62        4883EC20             sub rsp, 0x20
   .text:0x0000000000006E66        8BD9                 mov ebx, ecx
   .text:0x0000000000006E68        4C8D0D89650000       lea r9, [string_FlsGetValu]; "FlsGetValue"
   .text:0x0000000000006E6F        B905000000           mov ecx, 0x5
   .text:0x0000000000006E74        4C8D0575650000       lea r8, [data_0xD3F0]
   .text:0x0000000000006E7B        488D1576650000       lea rdx, [string_FlsGetValu]; "FlsGetValue"
   .text:0x0000000000006E82        E821FDFFFF           call func_0x6BA8; int32_t __cdecl( int32_t p1, int64_t p2, int64_t p3, int64_t p4 )
   .text:0x0000000000006E87        8BCB                 mov ecx, ebx
   .text:0x0000000000006E89        4885C0               test rax, rax
   .text:0x0000000000006E8C        740C                 jz code_0x6E9A
   .text:0x0000000000006E8E code_0x6E8E:
   .text:0x0000000000006E8E        4883C420             add rsp, 0x20
   .text:0x0000000000006E92        5B                   pop rbx
   .text:0x0000000000006E93        48FF258E430000       jmp qword ptr [GuardCFDispatchFunction]
   .text:0x0000000000006E9A code_0x6E9A:
   .text:0x0000000000006E9A        4883C420             add rsp, 0x20
   .text:0x0000000000006E9E        5B                   pop rbx
   .text:0x0000000000006E9F        48FF2522420000       jmp qword ptr [TlsGetValue]; void * (__cdecl *)( unsigned long dwTlsIndex )
   .text:0x0000000000006EA6 data_0x6EA6:
   .text:0x0000000000006EA6        db 2 dup(0xCC)
   .text:0x0000000000006EA8 __acrt_FlsSetValue:
   .text:0x0000000000006EA8        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000006EAD        57                   push rdi
   .text:0x0000000000006EAE        4883EC20             sub rsp, 0x20
   .text:0x0000000000006EB2        488BDA               mov rbx, rdx
   .text:0x0000000000006EB5        4C8D0D54650000       lea r9, [string_FlsSetValu_1]; "FlsSetValue"
   .text:0x0000000000006EBC        8BF9                 mov edi, ecx
   .text:0x0000000000006EBE        488D154B650000       lea rdx, [string_FlsSetValu_1]; "FlsSetValue"
   .text:0x0000000000006EC5        B906000000           mov ecx, 0x6
   .text:0x0000000000006ECA        4C8D0537650000       lea r8, [data_0xD408]
   .text:0x0000000000006ED1        E8D2FCFFFF           call func_0x6BA8; int32_t __cdecl( int32_t p1, int64_t p2, int64_t p3, int64_t p4 )
   .text:0x0000000000006ED6        488BD3               mov rdx, rbx
   .text:0x0000000000006ED9        8BCF                 mov ecx, edi
   .text:0x0000000000006EDB        4885C0               test rax, rax
   .text:0x0000000000006EDE        7408                 jz code_0x6EE8
   .text:0x0000000000006EE0 code_0x6EE0:
   .text:0x0000000000006EE0        FF1542430000         call qword ptr [GuardCFDispatchFunction]; void (__cdecl *)( int32_t p1, int64_t p2 )
   .text:0x0000000000006EE6        EB06                 jmp code_0x6EEE
   .text:0x0000000000006EE8 code_0x6EE8:
   .text:0x0000000000006EE8        FF15E2410000         call qword ptr [TlsSetValue]; int (__cdecl *)( unsigned long dwTlsIndex, void * lpTlsValue )
   .text:0x0000000000006EEE code_0x6EEE:
   .text:0x0000000000006EEE        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000006EF3        4883C420             add rsp, 0x20
   .text:0x0000000000006EF7        5F                   pop rdi
   .text:0x0000000000006EF8        C3                   ret
   .text:0x0000000000006EF9 data_0x6EF9:
   .text:0x0000000000006EF9        db 3 dup(0xCC)
   .text:0x0000000000006EFC __acrt_InitializeCriticalSectionEx:
   .text:0x0000000000006EFC        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000006F01        4889742410           mov qword ptr [rsp+0x10], rsi
   .text:0x0000000000006F06        57                   push rdi
   .text:0x0000000000006F07        4883EC20             sub rsp, 0x20
   .text:0x0000000000006F0B        418BF0               mov esi, r8d
   .text:0x0000000000006F0E        4C8D0D13650000       lea r9, [string_Initialize_1]; "InitializeCriticalSectionEx"
   .text:0x0000000000006F15        8BDA                 mov ebx, edx
   .text:0x0000000000006F17        4C8D0502650000       lea r8, [data_0xD420]
   .text:0x0000000000006F1E        488BF9               mov rdi, rcx
   .text:0x0000000000006F21        488D1500650000       lea rdx, [string_Initialize_1]; "InitializeCriticalSectionEx"
   .text:0x0000000000006F28        B912000000           mov ecx, 0x12
   .text:0x0000000000006F2D        E876FCFFFF           call func_0x6BA8; int32_t __cdecl( int32_t p1, int64_t p2, int64_t p3, int64_t p4 )
   .text:0x0000000000006F32        8BD3                 mov edx, ebx
   .text:0x0000000000006F34        488BCF               mov rcx, rdi
   .text:0x0000000000006F37        4885C0               test rax, rax
   .text:0x0000000000006F3A        740B                 jz code_0x6F47
   .text:0x0000000000006F3C code_0x6F3C:
   .text:0x0000000000006F3C        448BC6               mov r8d, esi
   .text:0x0000000000006F3F        FF15E3420000         call qword ptr [GuardCFDispatchFunction]; void (__cdecl *)( int64_t p1, int32_t p2, int32_t p3 )
   .text:0x0000000000006F45        EB06                 jmp code_0x6F4D
   .text:0x0000000000006F47 code_0x6F47:
   .text:0x0000000000006F47        FF156B410000         call qword ptr [InitializeCriticalSectionAndSpinCount]; int (__cdecl *)( struct _RTL_CRITICAL_SECTION * lpCriticalSection, unsigned long dwSpinCount )
   .text:0x0000000000006F4D code_0x6F4D:
   .text:0x0000000000006F4D        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000006F52        488B742438           mov rsi, qword ptr [rsp+0x38]
   .text:0x0000000000006F57        4883C420             add rsp, 0x20
   .text:0x0000000000006F5B        5F                   pop rdi
   .text:0x0000000000006F5C        C3                   ret
   .text:0x0000000000006F5D data_0x6F5D:
   .text:0x0000000000006F5D        db 3 dup(0xCC)
   .text:0x0000000000006F60 __acrt_LCMapStringEx:
   .text:0x0000000000006F60        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000006F65        48896C2410           mov qword ptr [rsp+0x10], rbp
   .text:0x0000000000006F6A        4889742418           mov qword ptr [rsp+0x18], rsi
   .text:0x0000000000006F6F        57                   push rdi
   .text:0x0000000000006F70        4883EC50             sub rsp, 0x50
   .text:0x0000000000006F74        418BD9               mov ebx, r9d
   .text:0x0000000000006F77        498BF8               mov rdi, r8
   .text:0x0000000000006F7A        8BF2                 mov esi, edx
   .text:0x0000000000006F7C        4C8D0DCD640000       lea r9, [string_LCMapStrin]; "LCMapStringEx"
   .text:0x0000000000006F83        488BE9               mov rbp, rcx
   .text:0x0000000000006F86        4C8D05BB640000       lea r8, [data_0xD448]
   .text:0x0000000000006F8D        488D15BC640000       lea rdx, [string_LCMapStrin]; "LCMapStringEx"
   .text:0x0000000000006F94        B914000000           mov ecx, 0x14
   .text:0x0000000000006F99        E80AFCFFFF           call func_0x6BA8; int32_t __cdecl( int32_t p1, int64_t p2, int64_t p3, int64_t p4 )
   .text:0x0000000000006F9E        4885C0               test rax, rax
   .text:0x0000000000006FA1        7452                 jz code_0x6FF5
   .text:0x0000000000006FA3 code_0x6FA3:
   .text:0x0000000000006FA3        4C8B8424A0000000     mov r8, qword ptr [rsp+0xA0]
   .text:0x0000000000006FAB        448BCB               mov r9d, ebx
   .text:0x0000000000006FAE        488B8C2498000000     mov rcx, qword ptr [rsp+0x98]
   .text:0x0000000000006FB6        8BD6                 mov edx, esi
   .text:0x0000000000006FB8        4C89442440           mov qword ptr [rsp+0x40], r8
   .text:0x0000000000006FBD        4C8BC7               mov r8, rdi
   .text:0x0000000000006FC0        48894C2438           mov qword ptr [rsp+0x38], rcx
   .text:0x0000000000006FC5        488B8C2490000000     mov rcx, qword ptr [rsp+0x90]
   .text:0x0000000000006FCD        48894C2430           mov qword ptr [rsp+0x30], rcx
   .text:0x0000000000006FD2        8B8C2488000000       mov ecx, dword ptr [rsp+0x88]
   .text:0x0000000000006FD9        894C2428             mov dword ptr [rsp+0x28], ecx
   .text:0x0000000000006FDD        488B8C2480000000     mov rcx, qword ptr [rsp+0x80]
   .text:0x0000000000006FE5        48894C2420           mov qword ptr [rsp+0x20], rcx
   .text:0x0000000000006FEA        488BCD               mov rcx, rbp
   .text:0x0000000000006FED        FF1535420000         call qword ptr [GuardCFDispatchFunction]; void (__cdecl *)( int64_t p1, int32_t p2, int64_t p3, int32_t p4, int64_t p5, int32_t p6, int64_t p7, int64_t p8, int64_t p9 )
   .text:0x0000000000006FF3        EB32                 jmp code_0x7027
   .text:0x0000000000006FF5 code_0x6FF5:
   .text:0x0000000000006FF5        33D2                 xor edx, edx
   .text:0x0000000000006FF7        488BCD               mov rcx, rbp
   .text:0x0000000000006FFA        E83D000000           call __acrt_LocaleNameToLCID; int32_t __cdecl( int64_t p1, int32_t p2 )
   .text:0x0000000000006FFF        8BC8                 mov ecx, eax
   .text:0x0000000000007001        448BCB               mov r9d, ebx
   .text:0x0000000000007004        8B842488000000       mov eax, dword ptr [rsp+0x88]
   .text:0x000000000000700B        4C8BC7               mov r8, rdi
   .text:0x000000000000700E        89442428             mov dword ptr [rsp+0x28], eax
   .text:0x0000000000007012        8BD6                 mov edx, esi
   .text:0x0000000000007014        488B842480000000     mov rax, qword ptr [rsp+0x80]
   .text:0x000000000000701C        4889442420           mov qword ptr [rsp+0x20], rax
   .text:0x0000000000007021        FF1599410000         call qword ptr [LCMapStringW]; int (__cdecl *)( unsigned long Locale, unsigned long dwMapFlags, unsigned short * lpSrcStr, int cchSrc, unsigned short * lpDestStr, int cchDest )
   .text:0x0000000000007027 code_0x7027:
   .text:0x0000000000007027        488B5C2460           mov rbx, qword ptr [rsp+0x60]
   .text:0x000000000000702C        488B6C2468           mov rbp, qword ptr [rsp+0x68]
   .text:0x0000000000007031        488B742470           mov rsi, qword ptr [rsp+0x70]
   .text:0x0000000000007036        4883C450             add rsp, 0x50
   .text:0x000000000000703A        5F                   pop rdi
   .text:0x000000000000703B        C3                   ret
   .text:0x000000000000703C __acrt_LocaleNameToLCID:
   .text:0x000000000000703C        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000007041        57                   push rdi
   .text:0x0000000000007042        4883EC20             sub rsp, 0x20
   .text:0x0000000000007046        8BFA                 mov edi, edx
   .text:0x0000000000007048        4C8D0D19640000       lea r9, [string_LocaleName]; "LocaleNameToLCID"
   .text:0x000000000000704F        488BD9               mov rbx, rcx
   .text:0x0000000000007052        488D150F640000       lea rdx, [string_LocaleName]; "LocaleNameToLCID"
   .text:0x0000000000007059        B916000000           mov ecx, 0x16
   .text:0x000000000000705E        4C8D05FB630000       lea r8, [data_0xD460]
   .text:0x0000000000007065        E83EFBFFFF           call func_0x6BA8; int32_t __cdecl( int32_t p1, int64_t p2, int64_t p3, int64_t p4 )
   .text:0x000000000000706A        488BCB               mov rcx, rbx
   .text:0x000000000000706D        4885C0               test rax, rax
   .text:0x0000000000007070        740A                 jz code_0x707C
   .text:0x0000000000007072 code_0x7072:
   .text:0x0000000000007072        8BD7                 mov edx, edi
   .text:0x0000000000007074        FF15AE410000         call qword ptr [GuardCFDispatchFunction]; void (__cdecl *)( int64_t p1, int32_t p2 )
   .text:0x000000000000707A        EB05                 jmp code_0x7081
   .text:0x000000000000707C code_0x707C:
   .text:0x000000000000707C        E85F140000           call __crtDownlevelLocaleNameToLCID; int32_t __cdecl( int64_t p1 )
   .text:0x0000000000007081 code_0x7081:
   .text:0x0000000000007081        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000007086        4883C420             add rsp, 0x20
   .text:0x000000000000708A        5F                   pop rdi
   .text:0x000000000000708B        C3                   ret
   .text:0x000000000000708C __acrt_initialize_winapi_thunks:
   .text:0x000000000000708C        48897C2408           mov qword ptr [rsp+0x8], rdi
   .text:0x0000000000007091        488B1590CF0000       mov rdx, qword ptr [__security_cookie]
   .text:0x0000000000007098        488D3D21E40000       lea rdi, [data_0x154C0]
   .text:0x000000000000709F        8BC2                 mov eax, edx
   .text:0x00000000000070A1        B940000000           mov ecx, 0x40
   .text:0x00000000000070A6        83E03F               and eax, 0x3F
   .text:0x00000000000070A9        2BC8                 sub ecx, eax
   .text:0x00000000000070AB        33C0                 xor eax, eax
   .text:0x00000000000070AD        48D3C8               ror rax, cl
   .text:0x00000000000070B0        488D0D19E50000       lea rcx, [data_0x155D0]
   .text:0x00000000000070B7        4833C2               xor rax, rdx
   .text:0x00000000000070BA        483BCF               cmp rcx, rdi
   .text:0x00000000000070BD        481BC9               sbb rcx, rcx
   .text:0x00000000000070C0        48F7D1               not rcx
   .text:0x00000000000070C3        83E122               and ecx, 0x22
   .text:0x00000000000070C6        F348AB               rep stosq
   .text:0x00000000000070C9        488B7C2408           mov rdi, qword ptr [rsp+0x8]
   .text:0x00000000000070CE        B001                 mov al, 0x1
   .text:0x00000000000070D0        C3                   ret
   .text:0x00000000000070D1 data_0x70D1:
   .text:0x00000000000070D1        db 3 dup(0xCC)
   .text:0x00000000000070D4 __acrt_uninitialize_winapi_thunks:
   .text:0x00000000000070D4        4053                 push rbx
   .text:0x00000000000070D6        4883EC20             sub rsp, 0x20
   .text:0x00000000000070DA        84C9                 test cl, cl
   .text:0x00000000000070DC        752F                 jnz code_0x710D
   .text:0x00000000000070DE code_0x70DE:
   .text:0x00000000000070DE        488D1D3BE30000       lea rbx, [data_0x15420]
   .text:0x00000000000070E5 code_0x70E5:
   .text:0x00000000000070E5        488B0B               mov rcx, qword ptr [rbx]
   .text:0x00000000000070E8        4885C9               test rcx, rcx
   .text:0x00000000000070EB        7410                 jz code_0x70FD
   .text:0x00000000000070ED code_0x70ED:
   .text:0x00000000000070ED        4883F9FF             cmp rcx, 0xFFFFFFFFFFFFFFFF
   .text:0x00000000000070F1        7406                 jz code_0x70F9
   .text:0x00000000000070F3 code_0x70F3:
   .text:0x00000000000070F3        FF15E73F0000         call qword ptr [FreeLibrary]; int (__cdecl *)( struct HINSTANCE__ * hLibModule )
   .text:0x00000000000070F9 code_0x70F9:
   .text:0x00000000000070F9        48832300             and qword ptr [rbx], 0x0
   .text:0x00000000000070FD code_0x70FD:
   .text:0x00000000000070FD        4883C308             add rbx, 0x8
   .text:0x0000000000007101        488D05B8E30000       lea rax, [data_0x154C0]
   .text:0x0000000000007108        483BD8               cmp rbx, rax
   .text:0x000000000000710B        75D8                 jnz code_0x70E5
   .text:0x000000000000710D code_0x710D:
   .text:0x000000000000710D        B001                 mov al, 0x1
   .text:0x000000000000710F        4883C420             add rsp, 0x20
   .text:0x0000000000007113        5B                   pop rbx
   .text:0x0000000000007114        C3                   ret
   .text:0x0000000000007115 data_0x7115:
   .text:0x0000000000007115        db 3 dup(0xCC)
   .text:0x0000000000007118 func_0x7118:
   .text:0x0000000000007118        E903000000           jmp func_0x7120; int64_t __cdecl( int64_t p1, int64_t p2, int64_t p3 )
   .text:0x000000000000711D data_0x711D:
   .text:0x000000000000711D        db 3 dup(0xCC)
   .text:0x0000000000007120 func_0x7120:
   .text:0x0000000000007120        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000007125        48896C2410           mov qword ptr [rsp+0x10], rbp
   .text:0x000000000000712A        4889742418           mov qword ptr [rsp+0x18], rsi
   .text:0x000000000000712F        57                   push rdi
   .text:0x0000000000007130        4883EC20             sub rsp, 0x20
   .text:0x0000000000007134        498BE8               mov rbp, r8
   .text:0x0000000000007137        488BDA               mov rbx, rdx
   .text:0x000000000000713A        488BF1               mov rsi, rcx
   .text:0x000000000000713D        4885D2               test rdx, rdx
   .text:0x0000000000007140        741D                 jz code_0x715F
   .text:0x0000000000007142 code_0x7142:
   .text:0x0000000000007142        33D2                 xor edx, edx
   .text:0x0000000000007144        488D42E0             lea rax, [rdx-0x20]
   .text:0x0000000000007148        48F7F3               div rbx
   .text:0x000000000000714B        493BC0               cmp rax, r8
   .text:0x000000000000714E        730F                 jae code_0x715F
   .text:0x0000000000007150 code_0x7150:
   .text:0x0000000000007150        E827D8FFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000007155        C7000C000000         mov dword ptr [rax], 0xC
   .text:0x000000000000715B        33C0                 xor eax, eax
   .text:0x000000000000715D        EB41                 jmp code_0x71A0
   .text:0x000000000000715F code_0x715F:
   .text:0x000000000000715F        4885F6               test rsi, rsi
   .text:0x0000000000007162        740A                 jz code_0x716E
   .text:0x0000000000007164 code_0x7164:
   .text:0x0000000000007164        E8AB130000           call _msize_base_1; unsigned long long __cdecl( void * _Block )
   .text:0x0000000000007169        488BF8               mov rdi, rax
   .text:0x000000000000716C        EB02                 jmp code_0x7170
   .text:0x000000000000716E code_0x716E:
   .text:0x000000000000716E        33FF                 xor edi, edi
   .text:0x0000000000007170 code_0x7170:
   .text:0x0000000000007170        480FAFDD             imul rbx, rbp
   .text:0x0000000000007174        488BCE               mov rcx, rsi
   .text:0x0000000000007177        488BD3               mov rdx, rbx
   .text:0x000000000000717A        E8D9130000           call _realloc_base; void * __cdecl( void * _Block, unsigned long long _Size )
   .text:0x000000000000717F        488BF0               mov rsi, rax
   .text:0x0000000000007182        4885C0               test rax, rax
   .text:0x0000000000007185        7416                 jz code_0x719D
   .text:0x0000000000007187 code_0x7187:
   .text:0x0000000000007187        483BFB               cmp rdi, rbx
   .text:0x000000000000718A        7311                 jae code_0x719D
   .text:0x000000000000718C code_0x718C:
   .text:0x000000000000718C        482BDF               sub rbx, rdi
   .text:0x000000000000718F        488D0C38             lea rcx, [rax+rdi]
   .text:0x0000000000007193        4C8BC3               mov r8, rbx
   .text:0x0000000000007196        33D2                 xor edx, edx
   .text:0x0000000000007198        E8C3ABFFFF           call func_0x1D60; int64_t __cdecl( int64_t p1, int8_t p2, int64_t p3 )
   .text:0x000000000000719D code_0x719D:
   .text:0x000000000000719D        488BC6               mov rax, rsi
   .text:0x00000000000071A0 code_0x71A0:
   .text:0x00000000000071A0        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x00000000000071A5        488B6C2438           mov rbp, qword ptr [rsp+0x38]
   .text:0x00000000000071AA        488B742440           mov rsi, qword ptr [rsp+0x40]
   .text:0x00000000000071AF        4883C420             add rsp, 0x20
   .text:0x00000000000071B3        5F                   pop rdi
   .text:0x00000000000071B4        C3                   ret
   .text:0x00000000000071B5 data_0x71B5:
   .text:0x00000000000071B5        db 3 dup(0xCC)
   .text:0x00000000000071B8 __acrt_initialize_heap:
   .text:0x00000000000071B8        4883EC28             sub rsp, 0x28
   .text:0x00000000000071BC        FF1506400000         call qword ptr [GetProcessHeap]; void * (__cdecl *)( void )
   .text:0x00000000000071C2        4885C0               test rax, rax
   .text:0x00000000000071C5        4889050CE40000       mov qword ptr [data_0x155D8], rax
   .text:0x00000000000071CC        0F95C0               setne al
   .text:0x00000000000071CF        4883C428             add rsp, 0x28
   .text:0x00000000000071D3        C3                   ret
   .text:0x00000000000071D4 __acrt_uninitialize_heap:
   .text:0x00000000000071D4        488325FCE3000000     and qword ptr [data_0x155D8], 0x0
   .text:0x00000000000071DC        B001                 mov al, 0x1
   .text:0x00000000000071DE        C3                   ret
   .text:0x00000000000071DF code_0x71DF:
   .text:0x00000000000071DF        CC                   int3
   .text:0x00000000000071E0 code_0x71E0:
   .text:0x00000000000071E0        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x00000000000071E5        4889742410           mov qword ptr [rsp+0x10], rsi
   .text:0x00000000000071EA        57                   push rdi
   .text:0x00000000000071EB        4883EC20             sub rsp, 0x20
   .text:0x00000000000071EF        488BF2               mov rsi, rdx
   .text:0x00000000000071F2        488BF9               mov rdi, rcx
   .text:0x00000000000071F5        483BCA               cmp rcx, rdx
   .text:0x00000000000071F8        7504                 jnz code_0x71FE
   .text:0x00000000000071FA code_0x71FA:
   .text:0x00000000000071FA        B001                 mov al, 0x1
   .text:0x00000000000071FC        EB52                 jmp code_0x7250
   .text:0x00000000000071FE code_0x71FE:
   .text:0x00000000000071FE        488BDF               mov rbx, rdi
   .text:0x0000000000007201 code_0x7201:
   .text:0x0000000000007201        488B03               mov rax, qword ptr [rbx]
   .text:0x0000000000007204        4885C0               test rax, rax
   .text:0x0000000000007207        740A                 jz code_0x7213
   .text:0x0000000000007209 code_0x7209:
   .text:0x0000000000007209        FF1519400000         call qword ptr [GuardCFDispatchFunction]; int8_t (__cdecl *)( void )
   .text:0x000000000000720F        84C0                 test al, al
   .text:0x0000000000007211        7409                 jz code_0x721C
   .text:0x0000000000007213 code_0x7213:
   .text:0x0000000000007213        4883C310             add rbx, 0x10
   .text:0x0000000000007217        483BDE               cmp rbx, rsi
   .text:0x000000000000721A        75E5                 jnz code_0x7201
   .text:0x000000000000721C code_0x721C:
   .text:0x000000000000721C        483BDE               cmp rbx, rsi
   .text:0x000000000000721F        74D9                 jz code_0x71FA
   .text:0x0000000000007221 code_0x7221:
   .text:0x0000000000007221        483BDF               cmp rbx, rdi
   .text:0x0000000000007224        7428                 jz code_0x724E
   .text:0x0000000000007226 code_0x7226:
   .text:0x0000000000007226        4883C3F8             add rbx, 0xFFFFFFFFFFFFFFF8
   .text:0x000000000000722A code_0x722A:
   .text:0x000000000000722A        48837BF800           cmp qword ptr [rbx-0x8], 0x0
   .text:0x000000000000722F        7410                 jz code_0x7241
   .text:0x0000000000007231 code_0x7231:
   .text:0x0000000000007231        488B03               mov rax, qword ptr [rbx]
   .text:0x0000000000007234        4885C0               test rax, rax
   .text:0x0000000000007237        7408                 jz code_0x7241
   .text:0x0000000000007239 code_0x7239:
   .text:0x0000000000007239        33C9                 xor ecx, ecx
   .text:0x000000000000723B        FF15E73F0000         call qword ptr [GuardCFDispatchFunction]; void (__cdecl *)( int32_t p1 )
   .text:0x0000000000007241 code_0x7241:
   .text:0x0000000000007241        4883EB10             sub rbx, 0x10
   .text:0x0000000000007245        488D4308             lea rax, [rbx+0x8]
   .text:0x0000000000007249        483BC7               cmp rax, rdi
   .text:0x000000000000724C        75DC                 jnz code_0x722A
   .text:0x000000000000724E code_0x724E:
   .text:0x000000000000724E        32C0                 xor al, al
   .text:0x0000000000007250 code_0x7250:
   .text:0x0000000000007250        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000007255        488B742438           mov rsi, qword ptr [rsp+0x38]
   .text:0x000000000000725A        4883C420             add rsp, 0x20
   .text:0x000000000000725E        5F                   pop rdi
   .text:0x000000000000725F        C3                   ret
   .text:0x0000000000007260 code_0x7260:
   .text:0x0000000000007260        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000007265        57                   push rdi
   .text:0x0000000000007266        4883EC20             sub rsp, 0x20
   .text:0x000000000000726A        488BDA               mov rbx, rdx
   .text:0x000000000000726D        488BF9               mov rdi, rcx
   .text:0x0000000000007270        483BCA               cmp rcx, rdx
   .text:0x0000000000007273        EB18                 jmp code_0x728D
   .text:0x0000000000007275 code_0x7275:
   .text:0x0000000000007275        488B43F8             mov rax, qword ptr [rbx-0x8]
   .text:0x0000000000007279        4885C0               test rax, rax
   .text:0x000000000000727C        7408                 jz code_0x7286
   .text:0x000000000000727E code_0x727E:
   .text:0x000000000000727E        33C9                 xor ecx, ecx
   .text:0x0000000000007280        FF15A23F0000         call qword ptr [GuardCFDispatchFunction]; void (__cdecl *)( int32_t p1 )
   .text:0x0000000000007286 code_0x7286:
   .text:0x0000000000007286        4883EB10             sub rbx, 0x10
   .text:0x000000000000728A        483BDF               cmp rbx, rdi
   .text:0x000000000000728D code_0x728D:
   .text:0x000000000000728D        75E6                 jnz code_0x7275
   .text:0x000000000000728F code_0x728F:
   .text:0x000000000000728F        B001                 mov al, 0x1
   .text:0x0000000000007291        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000007296        4883C420             add rsp, 0x20
   .text:0x000000000000729A        5F                   pop rdi
   .text:0x000000000000729B        C3                   ret
   .text:0x000000000000729C func_0x729C:
   .text:0x000000000000729C        48890D3DE30000       mov qword ptr [data_0x155E0], rcx
   .text:0x00000000000072A3        C3                   ret
   .text:0x00000000000072A4 _callnewh:
   .text:0x00000000000072A4        4053                 push rbx
   .text:0x00000000000072A6        4883EC20             sub rsp, 0x20
   .text:0x00000000000072AA        488BD9               mov rbx, rcx
   .text:0x00000000000072AD        E822000000           call _query_new_handler; int64_t __cdecl( void )
   .text:0x00000000000072B2        4885C0               test rax, rax
   .text:0x00000000000072B5        7414                 jz code_0x72CB
   .text:0x00000000000072B7 code_0x72B7:
   .text:0x00000000000072B7        488BCB               mov rcx, rbx
   .text:0x00000000000072BA        FF15683F0000         call qword ptr [GuardCFDispatchFunction]; int32_t (__cdecl *)( int64_t p1 )
   .text:0x00000000000072C0        85C0                 test eax, eax
   .text:0x00000000000072C2        7407                 jz code_0x72CB
   .text:0x00000000000072C4 code_0x72C4:
   .text:0x00000000000072C4        B801000000           mov eax, 0x1
   .text:0x00000000000072C9        EB02                 jmp code_0x72CD
   .text:0x00000000000072CB code_0x72CB:
   .text:0x00000000000072CB        33C0                 xor eax, eax
   .text:0x00000000000072CD code_0x72CD:
   .text:0x00000000000072CD        4883C420             add rsp, 0x20
   .text:0x00000000000072D1        5B                   pop rbx
   .text:0x00000000000072D2        C3                   ret
   .text:0x00000000000072D3 code_0x72D3:
   .text:0x00000000000072D3        CC                   int3
   .text:0x00000000000072D4 _query_new_handler:
   .text:0x00000000000072D4        4053                 push rbx
   .text:0x00000000000072D6        4883EC20             sub rsp, 0x20
   .text:0x00000000000072DA        33C9                 xor ecx, ecx
   .text:0x00000000000072DC        E877E9FFFF           call __acrt_lock; void __cdecl( int32_t p1 )
   .text:0x00000000000072E1        90                   nop
   .text:0x00000000000072E2        488B1D3FCD0000       mov rbx, qword ptr [__security_cookie]
   .text:0x00000000000072E9        8BCB                 mov ecx, ebx
   .text:0x00000000000072EB        83E13F               and ecx, 0x3F
   .text:0x00000000000072EE        48331DEBE20000       xor rbx, qword ptr [data_0x155E0]
   .text:0x00000000000072F5        48D3CB               ror rbx, cl
   .text:0x00000000000072F8        33C9                 xor ecx, ecx
   .text:0x00000000000072FA        E8ADE9FFFF           call func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x00000000000072FF        488BC3               mov rax, rbx
   .text:0x0000000000007302        4883C420             add rsp, 0x20
   .text:0x0000000000007306        5B                   pop rbx
   .text:0x0000000000007307        C3                   ret
   .text:0x0000000000007308 __crt_seh_guarded_call<void (__cdecl*)(int)>::operator()<<lambda_450d765d439847d4c735a33c368b5fc0>,<lambda_44731a7d0e6d81c3e6aa82d741081786> & __ptr64,<lambda_601a2a7da3b7a96e9554ac7215c4b07c> >:
   .text:0x0000000000007308        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x000000000000730D        4C894C2420           mov qword ptr [rsp+0x20], r9
   .text:0x0000000000007312        57                   push rdi
   .text:0x0000000000007313        4883EC20             sub rsp, 0x20
   .text:0x0000000000007317        498BF9               mov rdi, r9
   .text:0x000000000000731A        8B0A                 mov ecx, dword ptr [rdx]
   .text:0x000000000000731C        E837E9FFFF           call __acrt_lock; void __cdecl( int32_t p1 )
   .text:0x0000000000007321        90                   nop
   .text:0x0000000000007322        488B1DFFCC0000       mov rbx, qword ptr [__security_cookie]
   .text:0x0000000000007329        8BCB                 mov ecx, ebx
   .text:0x000000000000732B        83E13F               and ecx, 0x3F
   .text:0x000000000000732E        48331DC3E20000       xor rbx, qword ptr [data_0x155F8]
   .text:0x0000000000007335        48D3CB               ror rbx, cl
   .text:0x0000000000007338        8B0F                 mov ecx, dword ptr [rdi]
   .text:0x000000000000733A        E86DE9FFFF           call func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x000000000000733F        488BC3               mov rax, rbx
   .text:0x0000000000007342        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000007347        4883C420             add rsp, 0x20
   .text:0x000000000000734B        5F                   pop rdi
   .text:0x000000000000734C        C3                   ret
   .text:0x000000000000734D data_0x734D:
   .text:0x000000000000734D        db 3 dup(0xCC)
   .text:0x0000000000007350 __acrt_get_sigabrt_handler:
   .text:0x0000000000007350        4C8BDC               mov r11, rsp
   .text:0x0000000000007353        4883EC28             sub rsp, 0x28
   .text:0x0000000000007357        B803000000           mov eax, 0x3
   .text:0x000000000000735C        4D8D4B10             lea r9, [r11+0x10]
   .text:0x0000000000007360        4D8D4308             lea r8, [r11+0x8]
   .text:0x0000000000007364        89442438             mov dword ptr [rsp+0x38], eax
   .text:0x0000000000007368        498D5318             lea rdx, [r11+0x18]
   .text:0x000000000000736C        89442440             mov dword ptr [rsp+0x40], eax
   .text:0x0000000000007370        498D4B08             lea rcx, [r11+0x8]
   .text:0x0000000000007374        E88FFFFFFF           call __crt_seh_guarded_call<void (__cdecl*)(int)>::operator()<<lambda_450d765d439847d4c735a33c368b5fc0>,<lambda_44731a7d0e6d81c3e6aa82d741081786> & __ptr64,<lambda_601a2a7da3b7a96e9554ac7215c4b07c> >; public: void __cdecl( int p1 ) __cdecl( void * __cdecl __crt_seh_guarded_call<void (__cdecl*)(int)>::operator()<class <lambda_450d765d439847d4c735a33c368b5fc0>,class <lambda_44731a7d0e6d81c3e6aa82d741081786> & __ptr64,class <lambda_601a2a7da3b7a96e9554ac7215c4b07c> >( class <lambda_450d765d439847d4c735a33c368b5fc0> && p1, class <lambda_44731a7d0e6d81c3e6aa82d741081786> & p2, class <lambda_601a2a7da3b7a96e9554ac7215c4b07c> && p3 ) )
   .text:0x0000000000007379        4883C428             add rsp, 0x28
   .text:0x000000000000737D        C3                   ret
   .text:0x000000000000737E data_0x737E:
   .text:0x000000000000737E        db 2 dup(0xCC)
   .text:0x0000000000007380 __acrt_initialize_signal_handlers:
   .text:0x0000000000007380        48890D61E20000       mov qword ptr [data_0x155E8], rcx
   .text:0x0000000000007387        48890D62E20000       mov qword ptr [data_0x155F0], rcx
   .text:0x000000000000738E        48890D63E20000       mov qword ptr [data_0x155F8], rcx
   .text:0x0000000000007395        48890D64E20000       mov qword ptr [data_0x15600], rcx
   .text:0x000000000000739C        C3                   ret
   .text:0x000000000000739D data_0x739D:
   .text:0x000000000000739D        db 3 dup(0xCC)
   .text:0x00000000000073A0 raise:
   .text:0x00000000000073A0        48895C2420           mov qword ptr [rsp+0x20], rbx
   .text:0x00000000000073A5        56                   push rsi
   .text:0x00000000000073A6        57                   push rdi
   .text:0x00000000000073A7        4154                 push r12
   .text:0x00000000000073A9        4155                 push r13
   .text:0x00000000000073AB        4156                 push r14
   .text:0x00000000000073AD        4883EC40             sub rsp, 0x40
   .text:0x00000000000073B1        8BD9                 mov ebx, ecx
   .text:0x00000000000073B3        4533ED               xor r13d, r13d
   .text:0x00000000000073B6        44216C2478           and dword ptr [rsp+0x78], r13d
   .text:0x00000000000073BB        41B601               mov r14b, 0x1
   .text:0x00000000000073BE        4488742470           mov byte ptr [rsp+0x70], r14b
   .text:0x00000000000073C3        83F902               cmp ecx, 0x2
   .text:0x00000000000073C6        7421                 jz code_0x73E9
   .text:0x00000000000073C8 code_0x73C8:
   .text:0x00000000000073C8        83F904               cmp ecx, 0x4
   .text:0x00000000000073CB        7444                 jz code_0x7411
   .text:0x00000000000073CD code_0x73CD:
   .text:0x00000000000073CD        83F906               cmp ecx, 0x6
   .text:0x00000000000073D0        7417                 jz code_0x73E9
   .text:0x00000000000073D2 code_0x73D2:
   .text:0x00000000000073D2        83F908               cmp ecx, 0x8
   .text:0x00000000000073D5        743A                 jz code_0x7411
   .text:0x00000000000073D7 code_0x73D7:
   .text:0x00000000000073D7        83F90B               cmp ecx, 0xB
   .text:0x00000000000073DA        7435                 jz code_0x7411
   .text:0x00000000000073DC code_0x73DC:
   .text:0x00000000000073DC        83F90F               cmp ecx, 0xF
   .text:0x00000000000073DF        7408                 jz code_0x73E9
   .text:0x00000000000073E1 code_0x73E1:
   .text:0x00000000000073E1        8D41EB               lea eax, [rcx-0x15]
   .text:0x00000000000073E4        83F801               cmp eax, 0x1
   .text:0x00000000000073E7        7766                 ja code_0x744F
   .text:0x00000000000073E9 code_0x73E9:
   .text:0x00000000000073E9        83E902               sub ecx, 0x2
   .text:0x00000000000073EC        0F8498000000         jz code_0x748A
   .text:0x00000000000073F2 code_0x73F2:
   .text:0x00000000000073F2        83E904               sub ecx, 0x4
   .text:0x00000000000073F5        7478                 jz code_0x746F
   .text:0x00000000000073F7 code_0x73F7:
   .text:0x00000000000073F7        83E909               sub ecx, 0x9
   .text:0x00000000000073FA        0F8481000000         jz code_0x7481
   .text:0x0000000000007400 code_0x7400:
   .text:0x0000000000007400        83E906               sub ecx, 0x6
   .text:0x0000000000007403        7473                 jz code_0x7478
   .text:0x0000000000007405 code_0x7405:
   .text:0x0000000000007405        83F901               cmp ecx, 0x1
   .text:0x0000000000007408        7465                 jz code_0x746F
   .text:0x000000000000740A code_0x740A:
   .text:0x000000000000740A        33FF                 xor edi, edi
   .text:0x000000000000740C        E980000000           jmp code_0x7491
   .text:0x0000000000007411 code_0x7411:
   .text:0x0000000000007411        E8AECFFFFF           call __acrt_getptd_noexit; int64_t __cdecl( void )
   .text:0x0000000000007416        4C8BE8               mov r13, rax
   .text:0x0000000000007419        4885C0               test rax, rax
   .text:0x000000000000741C        7508                 jnz code_0x7426
   .text:0x000000000000741E code_0x741E:
   .text:0x000000000000741E        83C8FF               or eax, 0xFFFFFFFF
   .text:0x0000000000007421        E9CF010000           jmp code_0x75F5
   .text:0x0000000000007426 code_0x7426:
   .text:0x0000000000007426        488B08               mov rcx, qword ptr [rax]
   .text:0x0000000000007429        488B05604A0000       mov rax, qword ptr [data_0xBE90]
   .text:0x0000000000007430        48C1E004             shl rax, 0x4
   .text:0x0000000000007434        488D1408             lea rdx, [rax+rcx]
   .text:0x0000000000007438        EB09                 jmp code_0x7443
   .text:0x000000000000743A code_0x743A:
   .text:0x000000000000743A        395904               cmp dword ptr [rcx+0x4], ebx
   .text:0x000000000000743D        740B                 jz code_0x744A
   .text:0x000000000000743F code_0x743F:
   .text:0x000000000000743F        4883C110             add rcx, 0x10
   .text:0x0000000000007443 code_0x7443:
   .text:0x0000000000007443        483BCA               cmp rcx, rdx
   .text:0x0000000000007446        75F2                 jnz code_0x743A
   .text:0x0000000000007448 code_0x7448:
   .text:0x0000000000007448        33C9                 xor ecx, ecx
   .text:0x000000000000744A code_0x744A:
   .text:0x000000000000744A        4885C9               test rcx, rcx
   .text:0x000000000000744D        7512                 jnz code_0x7461
   .text:0x000000000000744F code_0x744F:
   .text:0x000000000000744F        E828D5FFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000007454        C70016000000         mov dword ptr [rax], 0x16
   .text:0x000000000000745A        E891D2FFFF           call _invalid_parameter_noinfo; void __cdecl( void )
   .text:0x000000000000745F        EBBD                 jmp code_0x741E
   .text:0x0000000000007461 code_0x7461:
   .text:0x0000000000007461        488D7908             lea rdi, [rcx+0x8]
   .text:0x0000000000007465        4532F6               xor r14b, r14b
   .text:0x0000000000007468        4488742470           mov byte ptr [rsp+0x70], r14b
   .text:0x000000000000746D        EB22                 jmp code_0x7491
   .text:0x000000000000746F code_0x746F:
   .text:0x000000000000746F        488D3D82E10000       lea rdi, [data_0x155F8]
   .text:0x0000000000007476        EB19                 jmp code_0x7491
   .text:0x0000000000007478 code_0x7478:
   .text:0x0000000000007478        488D3D71E10000       lea rdi, [data_0x155F0]
   .text:0x000000000000747F        EB10                 jmp code_0x7491
   .text:0x0000000000007481 code_0x7481:
   .text:0x0000000000007481        488D3D78E10000       lea rdi, [data_0x15600]
   .text:0x0000000000007488        EB07                 jmp code_0x7491
   .text:0x000000000000748A code_0x748A:
   .text:0x000000000000748A        488D3D57E10000       lea rdi, [data_0x155E8]
   .text:0x0000000000007491 code_0x7491:
   .text:0x0000000000007491        4883A4248000000000   and qword ptr [rsp+0x80], 0x0
   .text:0x000000000000749A        4584F6               test r14b, r14b
   .text:0x000000000000749D        740B                 jz code_0x74AA
   .text:0x000000000000749F code_0x749F:
   .text:0x000000000000749F        B903000000           mov ecx, 0x3
   .text:0x00000000000074A4        E8AFE7FFFF           call __acrt_lock; void __cdecl( int32_t p1 )
   .text:0x00000000000074A9        90                   nop
   .text:0x00000000000074AA code_0x74AA:
   .text:0x00000000000074AA        488B37               mov rsi, qword ptr [rdi]
   .text:0x00000000000074AD        4584F6               test r14b, r14b
   .text:0x00000000000074B0        7412                 jz code_0x74C4
   .text:0x00000000000074B2 code_0x74B2:
   .text:0x00000000000074B2        488B156FCB0000       mov rdx, qword ptr [__security_cookie]
   .text:0x00000000000074B9        8BCA                 mov ecx, edx
   .text:0x00000000000074BB        83E13F               and ecx, 0x3F
   .text:0x00000000000074BE        4833F2               xor rsi, rdx
   .text:0x00000000000074C1        48D3CE               ror rsi, cl
   .text:0x00000000000074C4 code_0x74C4:
   .text:0x00000000000074C4        4883FE01             cmp rsi, 0x1
   .text:0x00000000000074C8        0F84B2000000         jz code_0x7580
   .text:0x00000000000074CE code_0x74CE:
   .text:0x00000000000074CE        4885F6               test rsi, rsi
   .text:0x00000000000074D1        750E                 jnz code_0x74E1
   .text:0x00000000000074D3 code_0x74D3:
   .text:0x00000000000074D3        4584F6               test r14b, r14b
   .text:0x00000000000074D6        0F852E010000         jnz code_0x760A
   .text:0x00000000000074DC code_0x74DC:
   .text:0x00000000000074DC        E933010000           jmp code_0x7614
   .text:0x00000000000074E1 code_0x74E1:
   .text:0x00000000000074E1        41BC10090000         mov r12d, 0x910
   .text:0x00000000000074E7        83FB0B               cmp ebx, 0xB
   .text:0x00000000000074EA        773D                 ja code_0x7529
   .text:0x00000000000074EC code_0x74EC:
   .text:0x00000000000074EC        410FA3DC             bt r12d, ebx
   .text:0x00000000000074F0        7337                 jae code_0x7529
   .text:0x00000000000074F2 code_0x74F2:
   .text:0x00000000000074F2        498B4508             mov rax, qword ptr [r13+0x8]
   .text:0x00000000000074F6        4889842480000000     mov qword ptr [rsp+0x80], rax
   .text:0x00000000000074FE        4889442430           mov qword ptr [rsp+0x30], rax
   .text:0x0000000000007503        4983650800           and qword ptr [r13+0x8], 0x0
   .text:0x0000000000007508        83FB08               cmp ebx, 0x8
   .text:0x000000000000750B        7553                 jnz code_0x7560
   .text:0x000000000000750D code_0x750D:
   .text:0x000000000000750D        E846CDFFFF           call func_0x4258; int64_t __cdecl( void )
   .text:0x0000000000007512        8B4010               mov eax, dword ptr [rax+0x10]
   .text:0x0000000000007515        89442478             mov dword ptr [rsp+0x78], eax
   .text:0x0000000000007519        89442420             mov dword ptr [rsp+0x20], eax
   .text:0x000000000000751D        E836CDFFFF           call func_0x4258; int64_t __cdecl( void )
   .text:0x0000000000007522        C740108C000000       mov dword ptr [rax+0x10], 0x8C
   .text:0x0000000000007529 code_0x7529:
   .text:0x0000000000007529        83FB08               cmp ebx, 0x8
   .text:0x000000000000752C        7532                 jnz code_0x7560
   .text:0x000000000000752E code_0x752E:
   .text:0x000000000000752E        488B0563490000       mov rax, qword ptr [data_0xBE98]
   .text:0x0000000000007535        48C1E004             shl rax, 0x4
   .text:0x0000000000007539        49034500             add rax, qword ptr [r13+0x0]
   .text:0x000000000000753D        488B0D5C490000       mov rcx, qword ptr [data_0xBEA0]
   .text:0x0000000000007544        48C1E104             shl rcx, 0x4
   .text:0x0000000000007548        4803C8               add rcx, rax
   .text:0x000000000000754B code_0x754B:
   .text:0x000000000000754B        4889442428           mov qword ptr [rsp+0x28], rax
   .text:0x0000000000007550        483BC1               cmp rax, rcx
   .text:0x0000000000007553        7431                 jz code_0x7586
   .text:0x0000000000007555 code_0x7555:
   .text:0x0000000000007555        4883600800           and qword ptr [rax+0x8], 0x0
   .text:0x000000000000755A        4883C010             add rax, 0x10
   .text:0x000000000000755E        EBEB                 jmp code_0x754B
   .text:0x0000000000007560 code_0x7560:
   .text:0x0000000000007560        488B15C1CA0000       mov rdx, qword ptr [__security_cookie]
   .text:0x0000000000007567        8BC2                 mov eax, edx
   .text:0x0000000000007569        83E03F               and eax, 0x3F
   .text:0x000000000000756C        B940000000           mov ecx, 0x40
   .text:0x0000000000007571        2BC8                 sub ecx, eax
   .text:0x0000000000007573        33C0                 xor eax, eax
   .text:0x0000000000007575        48D3C8               ror rax, cl
   .text:0x0000000000007578        4833C2               xor rax, rdx
   .text:0x000000000000757B        488907               mov qword ptr [rdi], rax
   .text:0x000000000000757E        EB06                 jmp code_0x7586
   .text:0x0000000000007580 code_0x7580:
   .text:0x0000000000007580        41BC10090000         mov r12d, 0x910
   .text:0x0000000000007586 code_0x7586:
   .text:0x0000000000007586        4584F6               test r14b, r14b
   .text:0x0000000000007589        740A                 jz code_0x7595
   .text:0x000000000000758B code_0x758B:
   .text:0x000000000000758B        B903000000           mov ecx, 0x3
   .text:0x0000000000007590        E817E7FFFF           call func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x0000000000007595 code_0x7595:
   .text:0x0000000000007595        4883FE01             cmp rsi, 0x1
   .text:0x0000000000007599        7504                 jnz code_0x759F
   .text:0x000000000000759B code_0x759B:
   .text:0x000000000000759B        33C0                 xor eax, eax
   .text:0x000000000000759D        EB56                 jmp code_0x75F5
   .text:0x000000000000759F code_0x759F:
   .text:0x000000000000759F        83FB08               cmp ebx, 0x8
   .text:0x00000000000075A2        7519                 jnz code_0x75BD
   .text:0x00000000000075A4 code_0x75A4:
   .text:0x00000000000075A4        E8AFCCFFFF           call func_0x4258; int64_t __cdecl( void )
   .text:0x00000000000075A9        8B5010               mov edx, dword ptr [rax+0x10]
   .text:0x00000000000075AC        8BCB                 mov ecx, ebx
   .text:0x00000000000075AE        488BC6               mov rax, rsi
   .text:0x00000000000075B1        4C8B05703C0000       mov r8, qword ptr [GuardCFDispatchFunction]
   .text:0x00000000000075B8        41FFD0               call r8; void (__cdecl *)( int32_t p1, int32_t p2 ); 1 indirect reference.
   .text:0x00000000000075BB        EB0E                 jmp code_0x75CB
   .text:0x00000000000075BD code_0x75BD:
   .text:0x00000000000075BD        8BCB                 mov ecx, ebx
   .text:0x00000000000075BF        488BC6               mov rax, rsi
   .text:0x00000000000075C2        488B155F3C0000       mov rdx, qword ptr [GuardCFDispatchFunction]
   .text:0x00000000000075C9        FFD2                 call rdx; void (__cdecl *)( int32_t p1 ); 1 indirect reference.
   .text:0x00000000000075CB code_0x75CB:
   .text:0x00000000000075CB        83FB0B               cmp ebx, 0xB
   .text:0x00000000000075CE        77CB                 ja code_0x759B
   .text:0x00000000000075D0 code_0x75D0:
   .text:0x00000000000075D0        410FA3DC             bt r12d, ebx
   .text:0x00000000000075D4        73C5                 jae code_0x759B
   .text:0x00000000000075D6 code_0x75D6:
   .text:0x00000000000075D6        488B842480000000     mov rax, qword ptr [rsp+0x80]
   .text:0x00000000000075DE        49894508             mov qword ptr [r13+0x8], rax
   .text:0x00000000000075E2        83FB08               cmp ebx, 0x8
   .text:0x00000000000075E5        75B4                 jnz code_0x759B
   .text:0x00000000000075E7 code_0x75E7:
   .text:0x00000000000075E7        E86CCCFFFF           call func_0x4258; int64_t __cdecl( void )
   .text:0x00000000000075EC        8B4C2478             mov ecx, dword ptr [rsp+0x78]
   .text:0x00000000000075F0        894810               mov dword ptr [rax+0x10], ecx
   .text:0x00000000000075F3        EBA6                 jmp code_0x759B
   .text:0x00000000000075F5 code_0x75F5:
   .text:0x00000000000075F5        488B9C2488000000     mov rbx, qword ptr [rsp+0x88]
   .text:0x00000000000075FD        4883C440             add rsp, 0x40
   .text:0x0000000000007601        415E                 pop r14
   .text:0x0000000000007603        415D                 pop r13
   .text:0x0000000000007605        415C                 pop r12
   .text:0x0000000000007607        5F                   pop rdi
   .text:0x0000000000007608        5E                   pop rsi
   .text:0x0000000000007609        C3                   ret
   .text:0x000000000000760A code_0x760A:
   .text:0x000000000000760A        B903000000           mov ecx, 0x3
   .text:0x000000000000760F        E898E6FFFF           call func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x0000000000007614 code_0x7614:
   .text:0x0000000000007614        B903000000           mov ecx, 0x3
   .text:0x0000000000007619        E802BFFFFF           call func_0x3520; void __cdecl( int32_t p1 )
   .text:0x000000000000761E        90                   nop
   .text:0x000000000000761F        CC                   int3
   .text:0x0000000000007620 __crt_seh_guarded_call<void>::operator()<class <lambda_842d9ff0dc9ef11c61343bbaebe7f885>,class <lambda_c5860995281e5c4ce005b3de8f5874ee> & __ptr64,class <lambda_d90129c13df834fdcbf8d2b88dafcf2d> >:
   .text:0x0000000000007620        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000007625        4C894C2420           mov qword ptr [rsp+0x20], r9
   .text:0x000000000000762A        57                   push rdi
   .text:0x000000000000762B        4883EC20             sub rsp, 0x20
   .text:0x000000000000762F        498BF9               mov rdi, r9
   .text:0x0000000000007632        498BD8               mov rbx, r8
   .text:0x0000000000007635        488B0A               mov rcx, qword ptr [rdx]
   .text:0x0000000000007638        E80B040000           call func_0x7A48; void __cdecl( int64_t p1 )
   .text:0x000000000000763D        90                   nop
   .text:0x000000000000763E        488B5308             mov rdx, qword ptr [rbx+0x8]
   .text:0x0000000000007642        488B03               mov rax, qword ptr [rbx]
   .text:0x0000000000007645        488B00               mov rax, qword ptr [rax]
   .text:0x0000000000007648        4885C0               test rax, rax
   .text:0x000000000000764B        745A                 jz code_0x76A7
   .text:0x000000000000764D code_0x764D:
   .text:0x000000000000764D        8B4814               mov ecx, dword ptr [rax+0x14]
   .text:0x0000000000007650        8BC1                 mov eax, ecx
   .text:0x0000000000007652        C1E80D               shr eax, 0xD
   .text:0x0000000000007655        A801                 test al, 0x1
   .text:0x0000000000007657        744E                 jz code_0x76A7
   .text:0x0000000000007659 code_0x7659:
   .text:0x0000000000007659        8BC1                 mov eax, ecx
   .text:0x000000000000765B        2403                 and al, 0x3
   .text:0x000000000000765D        3C02                 cmp al, 0x2
   .text:0x000000000000765F        7505                 jnz code_0x7666
   .text:0x0000000000007661 code_0x7661:
   .text:0x0000000000007661        F6C1C0               test cl, 0xC0
   .text:0x0000000000007664        750A                 jnz code_0x7670
   .text:0x0000000000007666 code_0x7666:
   .text:0x0000000000007666        0FBAE10B             bt ecx, 0xB
   .text:0x000000000000766A        7204                 jb code_0x7670
   .text:0x000000000000766C code_0x766C:
   .text:0x000000000000766C        FF02                 inc dword ptr [rdx]
   .text:0x000000000000766E        EB37                 jmp code_0x76A7
   .text:0x0000000000007670 code_0x7670:
   .text:0x0000000000007670        488B4310             mov rax, qword ptr [rbx+0x10]
   .text:0x0000000000007674        803800               cmp byte ptr [rax], 0x0
   .text:0x0000000000007677        750F                 jnz code_0x7688
   .text:0x0000000000007679 code_0x7679:
   .text:0x0000000000007679        488B03               mov rax, qword ptr [rbx]
   .text:0x000000000000767C        488B08               mov rcx, qword ptr [rax]
   .text:0x000000000000767F        8B4114               mov eax, dword ptr [rcx+0x14]
   .text:0x0000000000007682        D1E8                 shr eax, 1
   .text:0x0000000000007684        A801                 test al, 0x1
   .text:0x0000000000007686        741F                 jz code_0x76A7
   .text:0x0000000000007688 code_0x7688:
   .text:0x0000000000007688        488B03               mov rax, qword ptr [rbx]
   .text:0x000000000000768B        488B08               mov rcx, qword ptr [rax]
   .text:0x000000000000768E        E8E5010000           call func_0x7878; int32_t __cdecl( int64_t p1 )
   .text:0x0000000000007693        83F8FF               cmp eax, 0xFFFFFFFF
   .text:0x0000000000007696        7408                 jz code_0x76A0
   .text:0x0000000000007698 code_0x7698:
   .text:0x0000000000007698        488B4308             mov rax, qword ptr [rbx+0x8]
   .text:0x000000000000769C        FF00                 inc dword ptr [rax]
   .text:0x000000000000769E        EB07                 jmp code_0x76A7
   .text:0x00000000000076A0 code_0x76A0:
   .text:0x00000000000076A0        488B4318             mov rax, qword ptr [rbx+0x18]
   .text:0x00000000000076A4        8308FF               or dword ptr [rax], 0xFFFFFFFF
   .text:0x00000000000076A7 code_0x76A7:
   .text:0x00000000000076A7        488B0F               mov rcx, qword ptr [rdi]
   .text:0x00000000000076AA        E8A5030000           call func_0x7A54; void __cdecl( int64_t p1 )
   .text:0x00000000000076AF        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x00000000000076B4        4883C420             add rsp, 0x20
   .text:0x00000000000076B8        5F                   pop rdi
   .text:0x00000000000076B9        C3                   ret
   .text:0x00000000000076BA data_0x76BA:
   .text:0x00000000000076BA        db 2 dup(0xCC)
   .text:0x00000000000076BC __crt_seh_guarded_call<void>::operator()<class <lambda_886d6c58226a84441f68b9f2b8217b83>,class <lambda_ab61a845afdef5b7c387490eaf3616ee> & __ptr64,class <lambda_f7f22ab5edc0698d5f6905b0d3f44752> >:
   .text:0x00000000000076BC        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x00000000000076C1        4C894C2420           mov qword ptr [rsp+0x20], r9
   .text:0x00000000000076C6        56                   push rsi
   .text:0x00000000000076C7        57                   push rdi
   .text:0x00000000000076C8        4156                 push r14
   .text:0x00000000000076CA        4883EC60             sub rsp, 0x60
   .text:0x00000000000076CE        498BF1               mov rsi, r9
   .text:0x00000000000076D1        498BF8               mov rdi, r8
   .text:0x00000000000076D4        8B0A                 mov ecx, dword ptr [rdx]
   .text:0x00000000000076D6        E87DE5FFFF           call __acrt_lock; void __cdecl( int32_t p1 )
   .text:0x00000000000076DB        90                   nop
   .text:0x00000000000076DC        488B1D2DDF0000       mov rbx, qword ptr [data_0x15610]
   .text:0x00000000000076E3        4863051EDF0000       movsxd rax, dword ptr [data_0x15608]
   .text:0x00000000000076EA        4C8D34C3             lea r14, [rbx+rax*8]
   .text:0x00000000000076EE code_0x76EE:
   .text:0x00000000000076EE        48895C2438           mov qword ptr [rsp+0x38], rbx
   .text:0x00000000000076F3        493BDE               cmp rbx, r14
   .text:0x00000000000076F6        0F8488000000         jz code_0x7784
   .text:0x00000000000076FC code_0x76FC:
   .text:0x00000000000076FC        488B03               mov rax, qword ptr [rbx]
   .text:0x00000000000076FF        4889442420           mov qword ptr [rsp+0x20], rax
   .text:0x0000000000007704        488B17               mov rdx, qword ptr [rdi]
   .text:0x0000000000007707        4885C0               test rax, rax
   .text:0x000000000000770A        7421                 jz code_0x772D
   .text:0x000000000000770C code_0x770C:
   .text:0x000000000000770C        8B4814               mov ecx, dword ptr [rax+0x14]
   .text:0x000000000000770F        8BC1                 mov eax, ecx
   .text:0x0000000000007711        C1E80D               shr eax, 0xD
   .text:0x0000000000007714        A801                 test al, 0x1
   .text:0x0000000000007716        7415                 jz code_0x772D
   .text:0x0000000000007718 code_0x7718:
   .text:0x0000000000007718        8BC1                 mov eax, ecx
   .text:0x000000000000771A        2403                 and al, 0x3
   .text:0x000000000000771C        3C02                 cmp al, 0x2
   .text:0x000000000000771E        7505                 jnz code_0x7725
   .text:0x0000000000007720 code_0x7720:
   .text:0x0000000000007720        F6C1C0               test cl, 0xC0
   .text:0x0000000000007723        750E                 jnz code_0x7733
   .text:0x0000000000007725 code_0x7725:
   .text:0x0000000000007725        0FBAE10B             bt ecx, 0xB
   .text:0x0000000000007729        7208                 jb code_0x7733
   .text:0x000000000000772B code_0x772B:
   .text:0x000000000000772B        FF02                 inc dword ptr [rdx]
   .text:0x000000000000772D code_0x772D:
   .text:0x000000000000772D        4883C308             add rbx, 0x8
   .text:0x0000000000007731        EBBB                 jmp code_0x76EE
   .text:0x0000000000007733 code_0x7733:
   .text:0x0000000000007733        488B5710             mov rdx, qword ptr [rdi+0x10]
   .text:0x0000000000007737        488B4F08             mov rcx, qword ptr [rdi+0x8]
   .text:0x000000000000773B        488B07               mov rax, qword ptr [rdi]
   .text:0x000000000000773E        4C8D442420           lea r8, [rsp+0x20]
   .text:0x0000000000007743        4C89442440           mov qword ptr [rsp+0x40], r8
   .text:0x0000000000007748        4889442448           mov qword ptr [rsp+0x48], rax
   .text:0x000000000000774D        48894C2450           mov qword ptr [rsp+0x50], rcx
   .text:0x0000000000007752        4889542458           mov qword ptr [rsp+0x58], rdx
   .text:0x0000000000007757        488B442420           mov rax, qword ptr [rsp+0x20]
   .text:0x000000000000775C        4889442428           mov qword ptr [rsp+0x28], rax
   .text:0x0000000000007761        4889442430           mov qword ptr [rsp+0x30], rax
   .text:0x0000000000007766        4C8D4C2428           lea r9, [rsp+0x28]
   .text:0x000000000000776B        4C8D442440           lea r8, [rsp+0x40]
   .text:0x0000000000007770        488D542430           lea rdx, [rsp+0x30]
   .text:0x0000000000007775        488D8C2488000000     lea rcx, [rsp+0x88]
   .text:0x000000000000777D        E89EFEFFFF           call __crt_seh_guarded_call<void>::operator()<class <lambda_842d9ff0dc9ef11c61343bbaebe7f885>,class <lambda_c5860995281e5c4ce005b3de8f5874ee> & __ptr64,class <lambda_d90129c13df834fdcbf8d2b88dafcf2d> >; public: void __cdecl( class <lambda_842d9ff0dc9ef11c61343bbaebe7f885> && p1, class <lambda_c5860995281e5c4ce005b3de8f5874ee> & p2, class <lambda_d90129c13df834fdcbf8d2b88dafcf2d> && p3 )
   .text:0x0000000000007782        EBA9                 jmp code_0x772D
   .text:0x0000000000007784 code_0x7784:
   .text:0x0000000000007784        8B0E                 mov ecx, dword ptr [rsi]
   .text:0x0000000000007786        E821E5FFFF           call func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x000000000000778B        488B9C2480000000     mov rbx, qword ptr [rsp+0x80]
   .text:0x0000000000007793        4883C460             add rsp, 0x60
   .text:0x0000000000007797        415E                 pop r14
   .text:0x0000000000007799        5F                   pop rdi
   .text:0x000000000000779A        5E                   pop rsi
   .text:0x000000000000779B        C3                   ret
   .text:0x000000000000779C code_0x779C:
   .text:0x000000000000779C        884C2408             mov byte ptr [rsp+0x8], cl
   .text:0x00000000000077A0        55                   push rbp
   .text:0x00000000000077A1        488BEC               mov rbp, rsp
   .text:0x00000000000077A4        4883EC40             sub rsp, 0x40
   .text:0x00000000000077A8        83652800             and dword ptr [rbp+0x28], 0x0
   .text:0x00000000000077AC        488D4528             lea rax, [rbp+0x28]
   .text:0x00000000000077B0        83652000             and dword ptr [rbp+0x20], 0x0
   .text:0x00000000000077B4        4C8D4DE0             lea r9, [rbp-0x20]
   .text:0x00000000000077B8        488945E8             mov qword ptr [rbp-0x18], rax
   .text:0x00000000000077BC        4C8D45E8             lea r8, [rbp-0x18]
   .text:0x00000000000077C0        488D4510             lea rax, [rbp+0x10]
   .text:0x00000000000077C4        488945F0             mov qword ptr [rbp-0x10], rax
   .text:0x00000000000077C8        488D55E4             lea rdx, [rbp-0x1C]
   .text:0x00000000000077CC        488D4520             lea rax, [rbp+0x20]
   .text:0x00000000000077D0        488945F8             mov qword ptr [rbp-0x8], rax
   .text:0x00000000000077D4        488D4D18             lea rcx, [rbp+0x18]
   .text:0x00000000000077D8        B808000000           mov eax, 0x8
   .text:0x00000000000077DD        8945E0               mov dword ptr [rbp-0x20], eax
   .text:0x00000000000077E0        8945E4               mov dword ptr [rbp-0x1C], eax
   .text:0x00000000000077E3        E8D4FEFFFF           call __crt_seh_guarded_call<void>::operator()<class <lambda_886d6c58226a84441f68b9f2b8217b83>,class <lambda_ab61a845afdef5b7c387490eaf3616ee> & __ptr64,class <lambda_f7f22ab5edc0698d5f6905b0d3f44752> >; public: void __cdecl( class <lambda_886d6c58226a84441f68b9f2b8217b83> && p1, class <lambda_ab61a845afdef5b7c387490eaf3616ee> & p2, class <lambda_f7f22ab5edc0698d5f6905b0d3f44752> && p3 )
   .text:0x00000000000077E8        807D1000             cmp byte ptr [rbp+0x10], 0x0
   .text:0x00000000000077EC        8B4520               mov eax, dword ptr [rbp+0x20]
   .text:0x00000000000077EF        0F454528             cmovne eax, dword ptr [rbp+0x28]
   .text:0x00000000000077F3        4883C440             add rsp, 0x40
   .text:0x00000000000077F7        5D                   pop rbp
   .text:0x00000000000077F8        C3                   ret
   .text:0x00000000000077F9 data_0x77F9:
   .text:0x00000000000077F9        db 3 dup(0xCC)
   .text:0x00000000000077FC __acrt_stdio_flush_nolock:
   .text:0x00000000000077FC        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000007801        4889742410           mov qword ptr [rsp+0x10], rsi
   .text:0x0000000000007806        57                   push rdi
   .text:0x0000000000007807        4883EC20             sub rsp, 0x20
   .text:0x000000000000780B        488BD9               mov rbx, rcx
   .text:0x000000000000780E        8B4914               mov ecx, dword ptr [rcx+0x14]
   .text:0x0000000000007811        8BC1                 mov eax, ecx
   .text:0x0000000000007813        2403                 and al, 0x3
   .text:0x0000000000007815        3C02                 cmp al, 0x2
   .text:0x0000000000007817        754B                 jnz code_0x7864
   .text:0x0000000000007819 code_0x7819:
   .text:0x0000000000007819        F6C1C0               test cl, 0xC0
   .text:0x000000000000781C        7446                 jz code_0x7864
   .text:0x000000000000781E code_0x781E:
   .text:0x000000000000781E        8B3B                 mov edi, dword ptr [rbx]
   .text:0x0000000000007820        2B7B08               sub edi, dword ptr [rbx+0x8]
   .text:0x0000000000007823        83631000             and dword ptr [rbx+0x10], 0x0
   .text:0x0000000000007827        488B7308             mov rsi, qword ptr [rbx+0x8]
   .text:0x000000000000782B        488933               mov qword ptr [rbx], rsi
   .text:0x000000000000782E        85FF                 test edi, edi
   .text:0x0000000000007830        7E32                 jle code_0x7864
   .text:0x0000000000007832 code_0x7832:
   .text:0x0000000000007832        488BCB               mov rcx, rbx
   .text:0x0000000000007835        E812040000           call _fileno; int __cdecl( struct _iobuf * _Stream )
   .text:0x000000000000783A        8BC8                 mov ecx, eax
   .text:0x000000000000783C        448BC7               mov r8d, edi
   .text:0x000000000000783F        488BD6               mov rdx, rsi
   .text:0x0000000000007842        E855140000           call _write; int32_t __cdecl( int32_t p1, int64_t p2, int32_t p3 )
   .text:0x0000000000007847        3BF8                 cmp edi, eax
   .text:0x0000000000007849        740A                 jz code_0x7855
   .text:0x000000000000784B code_0x784B:
   .text:0x000000000000784B        F0834B1410           lock or dword ptr [rbx+0x14], 0x10
   .text:0x0000000000007850        83C8FF               or eax, 0xFFFFFFFF
   .text:0x0000000000007853        EB11                 jmp code_0x7866
   .text:0x0000000000007855 code_0x7855:
   .text:0x0000000000007855        8B4314               mov eax, dword ptr [rbx+0x14]
   .text:0x0000000000007858        C1E802               shr eax, 0x2
   .text:0x000000000000785B        A801                 test al, 0x1
   .text:0x000000000000785D        7405                 jz code_0x7864
   .text:0x000000000000785F code_0x785F:
   .text:0x000000000000785F        F0836314FD           lock and dword ptr [rbx+0x14], 0xFFFFFFFD
   .text:0x0000000000007864 code_0x7864:
   .text:0x0000000000007864        33C0                 xor eax, eax
   .text:0x0000000000007866 code_0x7866:
   .text:0x0000000000007866        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x000000000000786B        488B742438           mov rsi, qword ptr [rsp+0x38]
   .text:0x0000000000007870        4883C420             add rsp, 0x20
   .text:0x0000000000007874        5F                   pop rdi
   .text:0x0000000000007875        C3                   ret
   .text:0x0000000000007876 data_0x7876:
   .text:0x0000000000007876        db 2 dup(0xCC)
   .text:0x0000000000007878 func_0x7878:
   .text:0x0000000000007878        4053                 push rbx
   .text:0x000000000000787A        4883EC20             sub rsp, 0x20
   .text:0x000000000000787E        488BD9               mov rbx, rcx
   .text:0x0000000000007881        4885C9               test rcx, rcx
   .text:0x0000000000007884        750A                 jnz code_0x7890
   .text:0x0000000000007886 code_0x7886:
   .text:0x0000000000007886        4883C420             add rsp, 0x20
   .text:0x000000000000788A        5B                   pop rbx
   .text:0x000000000000788B        E90CFFFFFF           jmp code_0x779C
   .text:0x0000000000007890 code_0x7890:
   .text:0x0000000000007890        E867FFFFFF           call __acrt_stdio_flush_nolock; int32_t __cdecl( int64_t p1 )
   .text:0x0000000000007895        85C0                 test eax, eax
   .text:0x0000000000007897        7405                 jz code_0x789E
   .text:0x0000000000007899 code_0x7899:
   .text:0x0000000000007899        83C8FF               or eax, 0xFFFFFFFF
   .text:0x000000000000789C        EB1F                 jmp code_0x78BD
   .text:0x000000000000789E code_0x789E:
   .text:0x000000000000789E        8B4314               mov eax, dword ptr [rbx+0x14]
   .text:0x00000000000078A1        C1E80B               shr eax, 0xB
   .text:0x00000000000078A4        A801                 test al, 0x1
   .text:0x00000000000078A6        7413                 jz code_0x78BB
   .text:0x00000000000078A8 code_0x78A8:
   .text:0x00000000000078A8        488BCB               mov rcx, rbx
   .text:0x00000000000078AB        E89C030000           call _fileno; int __cdecl( struct _iobuf * _Stream )
   .text:0x00000000000078B0        8BC8                 mov ecx, eax
   .text:0x00000000000078B2        E8A90D0000           call _commit; int32_t __cdecl( int32_t p1 )
   .text:0x00000000000078B7        85C0                 test eax, eax
   .text:0x00000000000078B9        75DE                 jnz code_0x7899
   .text:0x00000000000078BB code_0x78BB:
   .text:0x00000000000078BB        33C0                 xor eax, eax
   .text:0x00000000000078BD code_0x78BD:
   .text:0x00000000000078BD        4883C420             add rsp, 0x20
   .text:0x00000000000078C1        5B                   pop rbx
   .text:0x00000000000078C2        C3                   ret
   .text:0x00000000000078C3 code_0x78C3:
   .text:0x00000000000078C3        CC                   int3
   .text:0x00000000000078C4 func_0x78C4:
   .text:0x00000000000078C4        B101                 mov cl, 0x1
   .text:0x00000000000078C6        E9D1FEFFFF           jmp code_0x779C
   .text:0x00000000000078CB code_0x78CB:
   .text:0x00000000000078CB        CC                   int3
   .text:0x00000000000078CC __acrt_initialize_stdio:
   .text:0x00000000000078CC        488BC4               mov rax, rsp
   .text:0x00000000000078CF        48895808             mov qword ptr [rax+0x8], rbx
   .text:0x00000000000078D3        48896810             mov qword ptr [rax+0x10], rbp
   .text:0x00000000000078D7        48897018             mov qword ptr [rax+0x18], rsi
   .text:0x00000000000078DB        48897820             mov qword ptr [rax+0x20], rdi
   .text:0x00000000000078DF        4156                 push r14
   .text:0x00000000000078E1        4883EC20             sub rsp, 0x20
   .text:0x00000000000078E5        8B051DDD0000         mov eax, dword ptr [data_0x15608]
   .text:0x00000000000078EB        33DB                 xor ebx, ebx
   .text:0x00000000000078ED        BF03000000           mov edi, 0x3
   .text:0x00000000000078F2        85C0                 test eax, eax
   .text:0x00000000000078F4        7507                 jnz code_0x78FD
   .text:0x00000000000078F6 code_0x78F6:
   .text:0x00000000000078F6        B800020000           mov eax, 0x200
   .text:0x00000000000078FB        EB05                 jmp code_0x7902
   .text:0x00000000000078FD code_0x78FD:
   .text:0x00000000000078FD        3BC7                 cmp eax, edi
   .text:0x00000000000078FF        0F4CC7               cmovl eax, edi
   .text:0x0000000000007902 code_0x7902:
   .text:0x0000000000007902        4863C8               movsxd rcx, eax
   .text:0x0000000000007905        BA08000000           mov edx, 0x8
   .text:0x000000000000790A        8905F8DC0000         mov dword ptr [data_0x15608], eax
   .text:0x0000000000007910        E887D0FFFF           call _calloc_base; void * __cdecl( unsigned long long _Count, unsigned long long _Size )
   .text:0x0000000000007915        33C9                 xor ecx, ecx
   .text:0x0000000000007917        488905F2DC0000       mov qword ptr [data_0x15610], rax
   .text:0x000000000000791E        E8F1D0FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000007923        48391DE6DC0000       cmp qword ptr [data_0x15610], rbx
   .text:0x000000000000792A        752F                 jnz code_0x795B
   .text:0x000000000000792C code_0x792C:
   .text:0x000000000000792C        BA08000000           mov edx, 0x8
   .text:0x0000000000007931        893DD1DC0000         mov dword ptr [data_0x15608], edi
   .text:0x0000000000007937        488BCF               mov rcx, rdi
   .text:0x000000000000793A        E85DD0FFFF           call _calloc_base; void * __cdecl( unsigned long long _Count, unsigned long long _Size )
   .text:0x000000000000793F        33C9                 xor ecx, ecx
   .text:0x0000000000007941        488905C8DC0000       mov qword ptr [data_0x15610], rax
   .text:0x0000000000007948        E8C7D0FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x000000000000794D        48391DBCDC0000       cmp qword ptr [data_0x15610], rbx
   .text:0x0000000000007954        7505                 jnz code_0x795B
   .text:0x0000000000007956 code_0x7956:
   .text:0x0000000000007956        83C8FF               or eax, 0xFFFFFFFF
   .text:0x0000000000007959        EB75                 jmp code_0x79D0
   .text:0x000000000000795B code_0x795B:
   .text:0x000000000000795B        488BEB               mov rbp, rbx
   .text:0x000000000000795E        488D3563CE0000       lea rsi, [data_0x147C8]
   .text:0x0000000000007965        4C8D3544CE0000       lea r14, [data_0x147B0]
   .text:0x000000000000796C code_0x796C:
   .text:0x000000000000796C        498D4E30             lea rcx, [r14+0x30]
   .text:0x0000000000007970        4533C0               xor r8d, r8d
   .text:0x0000000000007973        BAA00F0000           mov edx, 0xFA0
   .text:0x0000000000007978        E87FF5FFFF           call __acrt_InitializeCriticalSectionEx; void __cdecl( int64_t p1, int32_t p2, int32_t p3 )
   .text:0x000000000000797D        488B058CDC0000       mov rax, qword ptr [data_0x15610]
   .text:0x0000000000007984        488D1585D60000       lea rdx, [data_0x15010]
   .text:0x000000000000798B        488BCD               mov rcx, rbp
   .text:0x000000000000798E        83E13F               and ecx, 0x3F
   .text:0x0000000000007991        48C1E106             shl rcx, 0x6
   .text:0x0000000000007995        4C893403             mov qword ptr [rbx+rax], r14
   .text:0x0000000000007999        488BC5               mov rax, rbp
   .text:0x000000000000799C        48C1F806             sar rax, 0x6
   .text:0x00000000000079A0        488B04C2             mov rax, qword ptr [rdx+rax*8]
   .text:0x00000000000079A4        488B4C0828           mov rcx, qword ptr [rax+rcx+0x28]
   .text:0x00000000000079A9        4883C102             add rcx, 0x2
   .text:0x00000000000079AD        4883F902             cmp rcx, 0x2
   .text:0x00000000000079B1        7706                 ja code_0x79B9
   .text:0x00000000000079B3 code_0x79B3:
   .text:0x00000000000079B3        C706FEFFFFFF         mov dword ptr [rsi], 0xFFFFFFFE
   .text:0x00000000000079B9 code_0x79B9:
   .text:0x00000000000079B9        48FFC5               inc rbp
   .text:0x00000000000079BC        4983C658             add r14, 0x58
   .text:0x00000000000079C0        4883C308             add rbx, 0x8
   .text:0x00000000000079C4        4883C658             add rsi, 0x58
   .text:0x00000000000079C8        4883EF01             sub rdi, 0x1
   .text:0x00000000000079CC        759E                 jnz code_0x796C
   .text:0x00000000000079CE code_0x79CE:
   .text:0x00000000000079CE        33C0                 xor eax, eax
   .text:0x00000000000079D0 code_0x79D0:
   .text:0x00000000000079D0        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x00000000000079D5        488B6C2438           mov rbp, qword ptr [rsp+0x38]
   .text:0x00000000000079DA        488B742440           mov rsi, qword ptr [rsp+0x40]
   .text:0x00000000000079DF        488B7C2448           mov rdi, qword ptr [rsp+0x48]
   .text:0x00000000000079E4        4883C420             add rsp, 0x20
   .text:0x00000000000079E8        415E                 pop r14
   .text:0x00000000000079EA        C3                   ret
   .text:0x00000000000079EB code_0x79EB:
   .text:0x00000000000079EB        CC                   int3
   .text:0x00000000000079EC __acrt_uninitialize_stdio:
   .text:0x00000000000079EC        4053                 push rbx
   .text:0x00000000000079EE        4883EC20             sub rsp, 0x20
   .text:0x00000000000079F2        E8CDFEFFFF           call func_0x78C4; int32_t __cdecl( void )
   .text:0x00000000000079F7        E86C160000           call _fcloseall; int __cdecl( void )
   .text:0x00000000000079FC        33DB                 xor ebx, ebx
   .text:0x00000000000079FE code_0x79FE:
   .text:0x00000000000079FE        488B0D0BDC0000       mov rcx, qword ptr [data_0x15610]
   .text:0x0000000000007A05        488B0C0B             mov rcx, qword ptr [rbx+rcx]
   .text:0x0000000000007A09        E80E170000           call __acrt_stdio_free_buffer_nolock; void __cdecl( int64_t p1 )
   .text:0x0000000000007A0E        488B05FBDB0000       mov rax, qword ptr [data_0x15610]
   .text:0x0000000000007A15        488B0C03             mov rcx, qword ptr [rbx+rax]
   .text:0x0000000000007A19        4883C130             add rcx, 0x30
   .text:0x0000000000007A1D        FF158D360000         call qword ptr [DeleteCriticalSection]; void (__cdecl *)( struct _RTL_CRITICAL_SECTION * lpCriticalSection )
   .text:0x0000000000007A23        4883C308             add rbx, 0x8
   .text:0x0000000000007A27        4883FB18             cmp rbx, 0x18
   .text:0x0000000000007A2B        75D1                 jnz code_0x79FE
   .text:0x0000000000007A2D code_0x7A2D:
   .text:0x0000000000007A2D        488B0DDCDB0000       mov rcx, qword ptr [data_0x15610]
   .text:0x0000000000007A34        E8DBCFFFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000007A39        488325CFDB000000     and qword ptr [data_0x15610], 0x0
   .text:0x0000000000007A41        4883C420             add rsp, 0x20
   .text:0x0000000000007A45        5B                   pop rbx
   .text:0x0000000000007A46        C3                   ret
   .text:0x0000000000007A47 code_0x7A47:
   .text:0x0000000000007A47        CC                   int3
   .text:0x0000000000007A48 func_0x7A48:
   .text:0x0000000000007A48        4883C130             add rcx, 0x30
   .text:0x0000000000007A4C        48FF254D360000       jmp qword ptr [EnterCriticalSection]; void (__cdecl *)( struct _RTL_CRITICAL_SECTION * lpCriticalSection )
   .text:0x0000000000007A53 code_0x7A53:
   .text:0x0000000000007A53        CC                   int3
   .text:0x0000000000007A54 func_0x7A54:
   .text:0x0000000000007A54        4883C130             add rcx, 0x30
   .text:0x0000000000007A58        48FF2549360000       jmp qword ptr [LeaveCriticalSection]; void (__cdecl *)( struct _RTL_CRITICAL_SECTION * lpCriticalSection )
   .text:0x0000000000007A5F code_0x7A5F:
   .text:0x0000000000007A5F        CC                   int3
   .text:0x0000000000007A60 code_0x7A60:
   .text:0x0000000000007A60        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000007A65        48896C2410           mov qword ptr [rsp+0x10], rbp
   .text:0x0000000000007A6A        4889742418           mov qword ptr [rsp+0x18], rsi
   .text:0x0000000000007A6F        57                   push rdi
   .text:0x0000000000007A70        4883EC50             sub rsp, 0x50
   .text:0x0000000000007A74        33ED                 xor ebp, ebp
   .text:0x0000000000007A76        498BF0               mov rsi, r8
   .text:0x0000000000007A79        488BFA               mov rdi, rdx
   .text:0x0000000000007A7C        488BD9               mov rbx, rcx
   .text:0x0000000000007A7F        4885D2               test rdx, rdx
   .text:0x0000000000007A82        0F8436010000         jz code_0x7BBE
   .text:0x0000000000007A88 code_0x7A88:
   .text:0x0000000000007A88        4D85C0               test r8, r8
   .text:0x0000000000007A8B        0F842D010000         jz code_0x7BBE
   .text:0x0000000000007A91 code_0x7A91:
   .text:0x0000000000007A91        40382A               cmp byte ptr [rdx], bpl
   .text:0x0000000000007A94        750F                 jnz code_0x7AA5
   .text:0x0000000000007A96 code_0x7A96:
   .text:0x0000000000007A96        4885C9               test rcx, rcx
   .text:0x0000000000007A99        7403                 jz code_0x7A9E
   .text:0x0000000000007A9B code_0x7A9B:
   .text:0x0000000000007A9B        668929               mov word ptr [rcx], bp
   .text:0x0000000000007A9E code_0x7A9E:
   .text:0x0000000000007A9E        33C0                 xor eax, eax
   .text:0x0000000000007AA0        E922010000           jmp code_0x7BC7
   .text:0x0000000000007AA5 code_0x7AA5:
   .text:0x0000000000007AA5        498BD1               mov rdx, r9
   .text:0x0000000000007AA8        488D4C2430           lea rcx, [rsp+0x30]
   .text:0x0000000000007AAD        E8FEC2FFFF           call _LocaleUpdate::_LocaleUpdate; public: void __cdecl( const struct __crt_locale_pointers * p1 )
   .text:0x0000000000007AB2        488B442438           mov rax, qword ptr [rsp+0x38]
   .text:0x0000000000007AB7        81780CE9FD0000       cmp dword ptr [rax+0xC], 0xFDE9
   .text:0x0000000000007ABE        7522                 jnz code_0x7AE2
   .text:0x0000000000007AC0 code_0x7AC0:
   .text:0x0000000000007AC0        4C8D0D61DB0000       lea r9, [data_0x15628]
   .text:0x0000000000007AC7        4C8BC6               mov r8, rsi
   .text:0x0000000000007ACA        488BD7               mov rdx, rdi
   .text:0x0000000000007ACD        488BCB               mov rcx, rbx
   .text:0x0000000000007AD0        E827170000           call __crt_mbstring::__mbrtowc_utf8; unsigned __int64 __cdecl( wchar_t * p1, char * p2, unsigned __int64 p3, struct _Mbstatet * p4 )
   .text:0x0000000000007AD5        488BC8               mov rcx, rax
   .text:0x0000000000007AD8        83C8FF               or eax, 0xFFFFFFFF
   .text:0x0000000000007ADB        85C9                 test ecx, ecx
   .text:0x0000000000007ADD        0F48C8               cmovs ecx, eax
   .text:0x0000000000007AE0        EB19                 jmp code_0x7AFB
   .text:0x0000000000007AE2 code_0x7AE2:
   .text:0x0000000000007AE2        4839A838010000       cmp qword ptr [rax+0x138], rbp
   .text:0x0000000000007AE9        752A                 jnz code_0x7B15
   .text:0x0000000000007AEB code_0x7AEB:
   .text:0x0000000000007AEB        4885DB               test rbx, rbx
   .text:0x0000000000007AEE        7406                 jz code_0x7AF6
   .text:0x0000000000007AF0 code_0x7AF0:
   .text:0x0000000000007AF0        0FB607               movzx eax, byte ptr [rdi]
   .text:0x0000000000007AF3        668903               mov word ptr [rbx], ax
   .text:0x0000000000007AF6 code_0x7AF6:
   .text:0x0000000000007AF6        B901000000           mov ecx, 0x1
   .text:0x0000000000007AFB code_0x7AFB:
   .text:0x0000000000007AFB        40386C2448           cmp byte ptr [rsp+0x48], bpl
   .text:0x0000000000007B00        740C                 jz code_0x7B0E
   .text:0x0000000000007B02 code_0x7B02:
   .text:0x0000000000007B02        488B442430           mov rax, qword ptr [rsp+0x30]
   .text:0x0000000000007B07        83A0A8030000FD       and dword ptr [rax+0x3A8], 0xFFFFFFFD
   .text:0x0000000000007B0E code_0x7B0E:
   .text:0x0000000000007B0E        8BC1                 mov eax, ecx
   .text:0x0000000000007B10        E9B2000000           jmp code_0x7BC7
   .text:0x0000000000007B15 code_0x7B15:
   .text:0x0000000000007B15        0FB60F               movzx ecx, byte ptr [rdi]
   .text:0x0000000000007B18        488D542438           lea rdx, [rsp+0x38]
   .text:0x0000000000007B1D        E89A160000           call _isleadbyte_l; int __cdecl( int _C, struct __crt_locale_pointers * _Locale )
   .text:0x0000000000007B22        85C0                 test eax, eax
   .text:0x0000000000007B24        7452                 jz code_0x7B78
   .text:0x0000000000007B26 code_0x7B26:
   .text:0x0000000000007B26        488B4C2438           mov rcx, qword ptr [rsp+0x38]
   .text:0x0000000000007B2B        448B4908             mov r9d, dword ptr [rcx+0x8]
   .text:0x0000000000007B2F        4183F901             cmp r9d, 0x1
   .text:0x0000000000007B33        7E2F                 jle code_0x7B64
   .text:0x0000000000007B35 code_0x7B35:
   .text:0x0000000000007B35        413BF1               cmp esi, r9d
   .text:0x0000000000007B38        7C2A                 jl code_0x7B64
   .text:0x0000000000007B3A code_0x7B3A:
   .text:0x0000000000007B3A        8B490C               mov ecx, dword ptr [rcx+0xC]
   .text:0x0000000000007B3D        8BC5                 mov eax, ebp
   .text:0x0000000000007B3F        4885DB               test rbx, rbx
   .text:0x0000000000007B42        4C8BC7               mov r8, rdi
   .text:0x0000000000007B45        BA09000000           mov edx, 0x9
   .text:0x0000000000007B4A        0F95C0               setne al
   .text:0x0000000000007B4D        89442428             mov dword ptr [rsp+0x28], eax
   .text:0x0000000000007B51        48895C2420           mov qword ptr [rsp+0x20], rbx
   .text:0x0000000000007B56        E821DFFFFF           call __acrt_MultiByteToWideChar; int32_t __cdecl( int32_t p1, int32_t p2 )
   .text:0x0000000000007B5B        488B4C2438           mov rcx, qword ptr [rsp+0x38]
   .text:0x0000000000007B60        85C0                 test eax, eax
   .text:0x0000000000007B62        750F                 jnz code_0x7B73
   .text:0x0000000000007B64 code_0x7B64:
   .text:0x0000000000007B64        48634108             movsxd rax, dword ptr [rcx+0x8]
   .text:0x0000000000007B68        483BF0               cmp rsi, rax
   .text:0x0000000000007B6B        723E                 jb code_0x7BAB
   .text:0x0000000000007B6D code_0x7B6D:
   .text:0x0000000000007B6D        40386F01             cmp byte ptr [rdi+0x1], bpl
   .text:0x0000000000007B71        7438                 jz code_0x7BAB
   .text:0x0000000000007B73 code_0x7B73:
   .text:0x0000000000007B73        8B4908               mov ecx, dword ptr [rcx+0x8]
   .text:0x0000000000007B76        EB83                 jmp code_0x7AFB
   .text:0x0000000000007B78 code_0x7B78:
   .text:0x0000000000007B78        8BC5                 mov eax, ebp
   .text:0x0000000000007B7A        41B901000000         mov r9d, 0x1
   .text:0x0000000000007B80        4885DB               test rbx, rbx
   .text:0x0000000000007B83        4C8BC7               mov r8, rdi
   .text:0x0000000000007B86        0F95C0               setne al
   .text:0x0000000000007B89        89442428             mov dword ptr [rsp+0x28], eax
   .text:0x0000000000007B8D        418D5108             lea edx, [r9+0x8]
   .text:0x0000000000007B91        488B442438           mov rax, qword ptr [rsp+0x38]
   .text:0x0000000000007B96        48895C2420           mov qword ptr [rsp+0x20], rbx
   .text:0x0000000000007B9B        8B480C               mov ecx, dword ptr [rax+0xC]
   .text:0x0000000000007B9E        E8D9DEFFFF           call __acrt_MultiByteToWideChar; int32_t __cdecl( int32_t p1, int32_t p2 )
   .text:0x0000000000007BA3        85C0                 test eax, eax
   .text:0x0000000000007BA5        0F854BFFFFFF         jnz code_0x7AF6
   .text:0x0000000000007BAB code_0x7BAB:
   .text:0x0000000000007BAB        E8CCCDFFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000007BB0        83C9FF               or ecx, 0xFFFFFFFF
   .text:0x0000000000007BB3        C7002A000000         mov dword ptr [rax], 0x2A
   .text:0x0000000000007BB9        E93DFFFFFF           jmp code_0x7AFB
   .text:0x0000000000007BBE code_0x7BBE:
   .text:0x0000000000007BBE        33C0                 xor eax, eax
   .text:0x0000000000007BC0        48890561DA0000       mov qword ptr [data_0x15628], rax
   .text:0x0000000000007BC7 code_0x7BC7:
   .text:0x0000000000007BC7        488B5C2460           mov rbx, qword ptr [rsp+0x60]
   .text:0x0000000000007BCC        488B6C2468           mov rbp, qword ptr [rsp+0x68]
   .text:0x0000000000007BD1        488B742470           mov rsi, qword ptr [rsp+0x70]
   .text:0x0000000000007BD6        4883C450             add rsp, 0x50
   .text:0x0000000000007BDA        5F                   pop rdi
   .text:0x0000000000007BDB        C3                   ret
   .text:0x0000000000007BDC mbtowc:
   .text:0x0000000000007BDC        4533C9               xor r9d, r9d
   .text:0x0000000000007BDF        E97CFEFFFF           jmp code_0x7A60
   .text:0x0000000000007BE4 __acrt_update_locale_info:
   .text:0x0000000000007BE4        4053                 push rbx
   .text:0x0000000000007BE6        4883EC20             sub rsp, 0x20
   .text:0x0000000000007BEA        488B0527D80000       mov rax, qword ptr [data_0x15418]
   .text:0x0000000000007BF1        488BDA               mov rbx, rdx
   .text:0x0000000000007BF4        483902               cmp qword ptr [rdx], rax
   .text:0x0000000000007BF7        7416                 jz code_0x7C0F
   .text:0x0000000000007BF9 code_0x7BF9:
   .text:0x0000000000007BF9        8B81A8030000         mov eax, dword ptr [rcx+0x3A8]
   .text:0x0000000000007BFF        85059BCB0000         test dword ptr [data_0x147A0], eax
   .text:0x0000000000007C05        7508                 jnz code_0x7C0F
   .text:0x0000000000007C07 code_0x7C07:
   .text:0x0000000000007C07        E8C4EEFFFF           call func_0x6AD0; int64_t __cdecl( void )
   .text:0x0000000000007C0C        488903               mov qword ptr [rbx], rax
   .text:0x0000000000007C0F code_0x7C0F:
   .text:0x0000000000007C0F        4883C420             add rsp, 0x20
   .text:0x0000000000007C13        5B                   pop rbx
   .text:0x0000000000007C14        C3                   ret
   .text:0x0000000000007C15 data_0x7C15:
   .text:0x0000000000007C15        db 3 dup(0xCC)
   .text:0x0000000000007C18 __acrt_update_multibyte_info:
   .text:0x0000000000007C18        4053                 push rbx
   .text:0x0000000000007C1A        4883EC20             sub rsp, 0x20
   .text:0x0000000000007C1E        488B0553D10000       mov rax, qword ptr [data_0x14D78]
   .text:0x0000000000007C25        488BDA               mov rbx, rdx
   .text:0x0000000000007C28        483902               cmp qword ptr [rdx], rax
   .text:0x0000000000007C2B        7416                 jz code_0x7C43
   .text:0x0000000000007C2D code_0x7C2D:
   .text:0x0000000000007C2D        8B81A8030000         mov eax, dword ptr [rcx+0x3A8]
   .text:0x0000000000007C33        850567CB0000         test dword ptr [data_0x147A0], eax
   .text:0x0000000000007C39        7508                 jnz code_0x7C43
   .text:0x0000000000007C3B code_0x7C3B:
   .text:0x0000000000007C3B        E840DBFFFF           call __acrt_update_thread_multibyte_data; int64_t __cdecl( void )
   .text:0x0000000000007C40        488903               mov qword ptr [rbx], rax
   .text:0x0000000000007C43 code_0x7C43:
   .text:0x0000000000007C43        4883C420             add rsp, 0x20
   .text:0x0000000000007C47        5B                   pop rbx
   .text:0x0000000000007C48        C3                   ret
   .text:0x0000000000007C49 data_0x7C49:
   .text:0x0000000000007C49        db 3 dup(0xCC)
   .text:0x0000000000007C4C _fileno:
   .text:0x0000000000007C4C        4883EC28             sub rsp, 0x28
   .text:0x0000000000007C50        4885C9               test rcx, rcx
   .text:0x0000000000007C53        7515                 jnz code_0x7C6A
   .text:0x0000000000007C55 code_0x7C55:
   .text:0x0000000000007C55        E822CDFFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000007C5A        C70016000000         mov dword ptr [rax], 0x16
   .text:0x0000000000007C60        E88BCAFFFF           call _invalid_parameter_noinfo; void __cdecl( void )
   .text:0x0000000000007C65        83C8FF               or eax, 0xFFFFFFFF
   .text:0x0000000000007C68        EB03                 jmp code_0x7C6D
   .text:0x0000000000007C6A code_0x7C6A:
   .text:0x0000000000007C6A        8B4118               mov eax, dword ptr [rcx+0x18]
   .text:0x0000000000007C6D code_0x7C6D:
   .text:0x0000000000007C6D        4883C428             add rsp, 0x28
   .text:0x0000000000007C71        C3                   ret
   .text:0x0000000000007C72 data_0x7C72:
   .text:0x0000000000007C72        db 14 dup(0xCC)
   .text:0x0000000000007C80 qsort:
   .text:0x0000000000007C80        4154                 push r12
   .text:0x0000000000007C82        4155                 push r13
   .text:0x0000000000007C84        4156                 push r14
   .text:0x0000000000007C86        4881EC50040000       sub rsp, 0x450
   .text:0x0000000000007C8D        488B0594C30000       mov rax, qword ptr [__security_cookie]
   .text:0x0000000000007C94        4833C4               xor rax, rsp
   .text:0x0000000000007C97        4889842410040000     mov qword ptr [rsp+0x410], rax
   .text:0x0000000000007C9F        4D8BE1               mov r12, r9
   .text:0x0000000000007CA2        4D8BF0               mov r14, r8
   .text:0x0000000000007CA5        4C8BE9               mov r13, rcx
   .text:0x0000000000007CA8        4885C9               test rcx, rcx
   .text:0x0000000000007CAB        751A                 jnz code_0x7CC7
   .text:0x0000000000007CAD code_0x7CAD:
   .text:0x0000000000007CAD        4885D2               test rdx, rdx
   .text:0x0000000000007CB0        7415                 jz code_0x7CC7
   .text:0x0000000000007CB2 code_0x7CB2:
   .text:0x0000000000007CB2        E8C5CCFFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000007CB7        C70016000000         mov dword ptr [rax], 0x16
   .text:0x0000000000007CBD        E82ECAFFFF           call _invalid_parameter_noinfo; void __cdecl( void )
   .text:0x0000000000007CC2        E948030000           jmp code_0x800F
   .text:0x0000000000007CC7 code_0x7CC7:
   .text:0x0000000000007CC7        4D85F6               test r14, r14
   .text:0x0000000000007CCA        74E6                 jz code_0x7CB2
   .text:0x0000000000007CCC code_0x7CCC:
   .text:0x0000000000007CCC        4D85E4               test r12, r12
   .text:0x0000000000007CCF        74E1                 jz code_0x7CB2
   .text:0x0000000000007CD1 code_0x7CD1:
   .text:0x0000000000007CD1        4883FA02             cmp rdx, 0x2
   .text:0x0000000000007CD5        0F8234030000         jb code_0x800F
   .text:0x0000000000007CDB code_0x7CDB:
   .text:0x0000000000007CDB        48899C2448040000     mov qword ptr [rsp+0x448], rbx
   .text:0x0000000000007CE3        4889AC2440040000     mov qword ptr [rsp+0x440], rbp
   .text:0x0000000000007CEB        4889B42438040000     mov qword ptr [rsp+0x438], rsi
   .text:0x0000000000007CF3        4889BC2430040000     mov qword ptr [rsp+0x430], rdi
   .text:0x0000000000007CFB        4C89BC2428040000     mov qword ptr [rsp+0x428], r15
   .text:0x0000000000007D03        4C8D7AFF             lea r15, [rdx-0x1]
   .text:0x0000000000007D07        4D0FAFFE             imul r15, r14
   .text:0x0000000000007D0B        4C03F9               add r15, rcx
   .text:0x0000000000007D0E        33C9                 xor ecx, ecx
   .text:0x0000000000007D10        48894C2420           mov qword ptr [rsp+0x20], rcx
   .text:0x0000000000007D15        6666660F1F840000000000 o16 nop [rax+rax+0x0]
   .text:0x0000000000007D20 code_0x7D20:
   .text:0x0000000000007D20        33D2                 xor edx, edx
   .text:0x0000000000007D22        498BC7               mov rax, r15
   .text:0x0000000000007D25        492BC5               sub rax, r13
   .text:0x0000000000007D28        49F7F6               div r14
   .text:0x0000000000007D2B        488D5801             lea rbx, [rax+0x1]
   .text:0x0000000000007D2F        4883FB08             cmp rbx, 0x8
   .text:0x0000000000007D33        0F878B000000         ja code_0x7DC4
   .text:0x0000000000007D39 code_0x7D39:
   .text:0x0000000000007D39        4D3BFD               cmp r15, r13
   .text:0x0000000000007D3C        7665                 jbe code_0x7DA3
   .text:0x0000000000007D3E code_0x7D3E:
   .text:0x0000000000007D3E        4B8D342E             lea rsi, [r14+r13]
   .text:0x0000000000007D42 code_0x7D42:
   .text:0x0000000000007D42        498BDD               mov rbx, r13
   .text:0x0000000000007D45        488BFE               mov rdi, rsi
   .text:0x0000000000007D48        493BF7               cmp rsi, r15
   .text:0x0000000000007D4B        7720                 ja code_0x7D6D
   .text:0x0000000000007D4D code_0x7D4D:
   .text:0x0000000000007D4D        0F1F00               nop [rax]
   .text:0x0000000000007D50 code_0x7D50:
   .text:0x0000000000007D50        488BD3               mov rdx, rbx
   .text:0x0000000000007D53        488BCF               mov rcx, rdi
   .text:0x0000000000007D56        498BC4               mov rax, r12
   .text:0x0000000000007D59        FF15C9340000         call qword ptr [GuardCFDispatchFunction]; int32_t (__cdecl *)( int64_t p1, int64_t p2 )
   .text:0x0000000000007D5F        85C0                 test eax, eax
   .text:0x0000000000007D61        480F4FDF             cmovg rbx, rdi
   .text:0x0000000000007D65        4903FE               add rdi, r14
   .text:0x0000000000007D68        493BFF               cmp rdi, r15
   .text:0x0000000000007D6B        76E3                 jbe code_0x7D50
   .text:0x0000000000007D6D code_0x7D6D:
   .text:0x0000000000007D6D        4D8BC6               mov r8, r14
   .text:0x0000000000007D70        498BD7               mov rdx, r15
   .text:0x0000000000007D73        493BDF               cmp rbx, r15
   .text:0x0000000000007D76        741E                 jz code_0x7D96
   .text:0x0000000000007D78 code_0x7D78:
   .text:0x0000000000007D78        492BDF               sub rbx, r15
   .text:0x0000000000007D7B        0F1F440000           nop [rax+rax+0x0]
   .text:0x0000000000007D80 code_0x7D80:
   .text:0x0000000000007D80        0FB602               movzx eax, byte ptr [rdx]
   .text:0x0000000000007D83        0FB60C13             movzx ecx, byte ptr [rbx+rdx]
   .text:0x0000000000007D87        880413               mov byte ptr [rbx+rdx], al
   .text:0x0000000000007D8A        880A                 mov byte ptr [rdx], cl
   .text:0x0000000000007D8C        488D5201             lea rdx, [rdx+0x1]
   .text:0x0000000000007D90        4983E801             sub r8, 0x1
   .text:0x0000000000007D94        75EA                 jnz code_0x7D80
   .text:0x0000000000007D96 code_0x7D96:
   .text:0x0000000000007D96        4D2BFE               sub r15, r14
   .text:0x0000000000007D99        4D3BFD               cmp r15, r13
   .text:0x0000000000007D9C        77A4                 ja code_0x7D42
   .text:0x0000000000007D9E code_0x7D9E:
   .text:0x0000000000007D9E        488B4C2420           mov rcx, qword ptr [rsp+0x20]
   .text:0x0000000000007DA3 code_0x7DA3:
   .text:0x0000000000007DA3        4883E901             sub rcx, 0x1
   .text:0x0000000000007DA7        48894C2420           mov qword ptr [rsp+0x20], rcx
   .text:0x0000000000007DAC        0F8835020000         js code_0x7FE7
   .text:0x0000000000007DB2 code_0x7DB2:
   .text:0x0000000000007DB2        4C8B6CCC30           mov r13, qword ptr [rsp+rcx*8+0x30]
   .text:0x0000000000007DB7        4C8BBCCC20020000     mov r15, qword ptr [rsp+rcx*8+0x220]
   .text:0x0000000000007DBF        E95CFFFFFF           jmp code_0x7D20
   .text:0x0000000000007DC4 code_0x7DC4:
   .text:0x0000000000007DC4        48D1EB               shr rbx, 1
   .text:0x0000000000007DC7        498BCD               mov rcx, r13
   .text:0x0000000000007DCA        490FAFDE             imul rbx, r14
   .text:0x0000000000007DCE        498BC4               mov rax, r12
   .text:0x0000000000007DD1        4A8D3C2B             lea rdi, [rbx+r13]
   .text:0x0000000000007DD5        488BD7               mov rdx, rdi
   .text:0x0000000000007DD8        FF154A340000         call qword ptr [GuardCFDispatchFunction]; int32_t (__cdecl *)( int64_t p1, int64_t p2 )
   .text:0x0000000000007DDE        85C0                 test eax, eax
   .text:0x0000000000007DE0        7E29                 jle code_0x7E0B
   .text:0x0000000000007DE2 code_0x7DE2:
   .text:0x0000000000007DE2        4D8BCE               mov r9, r14
   .text:0x0000000000007DE5        4C8BC7               mov r8, rdi
   .text:0x0000000000007DE8        4C3BEF               cmp r13, rdi
   .text:0x0000000000007DEB        741E                 jz code_0x7E0B
   .text:0x0000000000007DED code_0x7DED:
   .text:0x0000000000007DED        0F1F00               nop [rax]
   .text:0x0000000000007DF0 code_0x7DF0:
   .text:0x0000000000007DF0        410FB600             movzx eax, byte ptr [r8]
   .text:0x0000000000007DF4        498BD0               mov rdx, r8
   .text:0x0000000000007DF7        482BD3               sub rdx, rbx
   .text:0x0000000000007DFA        0FB60A               movzx ecx, byte ptr [rdx]
   .text:0x0000000000007DFD        8802                 mov byte ptr [rdx], al
   .text:0x0000000000007DFF        418808               mov byte ptr [r8], cl
   .text:0x0000000000007E02        49FFC0               inc r8
   .text:0x0000000000007E05        4983E901             sub r9, 0x1
   .text:0x0000000000007E09        75E5                 jnz code_0x7DF0
   .text:0x0000000000007E0B code_0x7E0B:
   .text:0x0000000000007E0B        498BD7               mov rdx, r15
   .text:0x0000000000007E0E        498BCD               mov rcx, r13
   .text:0x0000000000007E11        498BC4               mov rax, r12
   .text:0x0000000000007E14        FF150E340000         call qword ptr [GuardCFDispatchFunction]; int32_t (__cdecl *)( int64_t p1, int64_t p2, int64_t p3, int64_t p4 )
   .text:0x0000000000007E1A        85C0                 test eax, eax
   .text:0x0000000000007E1C        7E2A                 jle code_0x7E48
   .text:0x0000000000007E1E code_0x7E1E:
   .text:0x0000000000007E1E        4D8BC6               mov r8, r14
   .text:0x0000000000007E21        498BD7               mov rdx, r15
   .text:0x0000000000007E24        4D3BEF               cmp r13, r15
   .text:0x0000000000007E27        741F                 jz code_0x7E48
   .text:0x0000000000007E29 code_0x7E29:
   .text:0x0000000000007E29        4D8BCD               mov r9, r13
   .text:0x0000000000007E2C        4D2BCF               sub r9, r15
   .text:0x0000000000007E2F        90                   nop
   .text:0x0000000000007E30 code_0x7E30:
   .text:0x0000000000007E30        0FB602               movzx eax, byte ptr [rdx]
   .text:0x0000000000007E33        410FB60C11           movzx ecx, byte ptr [r9+rdx]
   .text:0x0000000000007E38        41880411             mov byte ptr [r9+rdx], al
   .text:0x0000000000007E3C        880A                 mov byte ptr [rdx], cl
   .text:0x0000000000007E3E        488D5201             lea rdx, [rdx+0x1]
   .text:0x0000000000007E42        4983E801             sub r8, 0x1
   .text:0x0000000000007E46        75E8                 jnz code_0x7E30
   .text:0x0000000000007E48 code_0x7E48:
   .text:0x0000000000007E48        498BD7               mov rdx, r15
   .text:0x0000000000007E4B        488BCF               mov rcx, rdi
   .text:0x0000000000007E4E        498BC4               mov rax, r12
   .text:0x0000000000007E51        FF15D1330000         call qword ptr [GuardCFDispatchFunction]; int32_t (__cdecl *)( int64_t p1, int64_t p2, int64_t p3 )
   .text:0x0000000000007E57        85C0                 test eax, eax
   .text:0x0000000000007E59        7E2D                 jle code_0x7E88
   .text:0x0000000000007E5B code_0x7E5B:
   .text:0x0000000000007E5B        4D8BC6               mov r8, r14
   .text:0x0000000000007E5E        498BD7               mov rdx, r15
   .text:0x0000000000007E61        493BFF               cmp rdi, r15
   .text:0x0000000000007E64        7422                 jz code_0x7E88
   .text:0x0000000000007E66 code_0x7E66:
   .text:0x0000000000007E66        4C8BCF               mov r9, rdi
   .text:0x0000000000007E69        4D2BCF               sub r9, r15
   .text:0x0000000000007E6C        0F1F4000             nop [rax+0x0]
   .text:0x0000000000007E70 code_0x7E70:
   .text:0x0000000000007E70        0FB602               movzx eax, byte ptr [rdx]
   .text:0x0000000000007E73        410FB60C11           movzx ecx, byte ptr [r9+rdx]
   .text:0x0000000000007E78        41880411             mov byte ptr [r9+rdx], al
   .text:0x0000000000007E7C        880A                 mov byte ptr [rdx], cl
   .text:0x0000000000007E7E        488D5201             lea rdx, [rdx+0x1]
   .text:0x0000000000007E82        4983E801             sub r8, 0x1
   .text:0x0000000000007E86        75E8                 jnz code_0x7E70
   .text:0x0000000000007E88 code_0x7E88:
   .text:0x0000000000007E88        498BDD               mov rbx, r13
   .text:0x0000000000007E8B        498BF7               mov rsi, r15
   .text:0x0000000000007E8E        6690                 nop
   .text:0x0000000000007E90 code_0x7E90:
   .text:0x0000000000007E90        483BFB               cmp rdi, rbx
   .text:0x0000000000007E93        7620                 jbe code_0x7EB5
   .text:0x0000000000007E95 code_0x7E95:
   .text:0x0000000000007E95        4903DE               add rbx, r14
   .text:0x0000000000007E98        483BDF               cmp rbx, rdi
   .text:0x0000000000007E9B        7318                 jae code_0x7EB5
   .text:0x0000000000007E9D code_0x7E9D:
   .text:0x0000000000007E9D        488BD7               mov rdx, rdi
   .text:0x0000000000007EA0        488BCB               mov rcx, rbx
   .text:0x0000000000007EA3        498BC4               mov rax, r12
   .text:0x0000000000007EA6        FF157C330000         call qword ptr [GuardCFDispatchFunction]; int32_t (__cdecl *)( int64_t p1, int64_t p2, int64_t p3 )
   .text:0x0000000000007EAC        85C0                 test eax, eax
   .text:0x0000000000007EAE        7EE5                 jle code_0x7E95
   .text:0x0000000000007EB0 code_0x7EB0:
   .text:0x0000000000007EB0        483BFB               cmp rdi, rbx
   .text:0x0000000000007EB3        771B                 ja code_0x7ED0
   .text:0x0000000000007EB5 code_0x7EB5:
   .text:0x0000000000007EB5        4903DE               add rbx, r14
   .text:0x0000000000007EB8        493BDF               cmp rbx, r15
   .text:0x0000000000007EBB        7713                 ja code_0x7ED0
   .text:0x0000000000007EBD code_0x7EBD:
   .text:0x0000000000007EBD        488BD7               mov rdx, rdi
   .text:0x0000000000007EC0        488BCB               mov rcx, rbx
   .text:0x0000000000007EC3        498BC4               mov rax, r12
   .text:0x0000000000007EC6        FF155C330000         call qword ptr [GuardCFDispatchFunction]; int32_t (__cdecl *)( int64_t p1, int64_t p2 )
   .text:0x0000000000007ECC        85C0                 test eax, eax
   .text:0x0000000000007ECE        7EE5                 jle code_0x7EB5
   .text:0x0000000000007ED0 code_0x7ED0:
   .text:0x0000000000007ED0        488BEE               mov rbp, rsi
   .text:0x0000000000007ED3        492BF6               sub rsi, r14
   .text:0x0000000000007ED6        483BF7               cmp rsi, rdi
   .text:0x0000000000007ED9        7613                 jbe code_0x7EEE
   .text:0x0000000000007EDB code_0x7EDB:
   .text:0x0000000000007EDB        488BD7               mov rdx, rdi
   .text:0x0000000000007EDE        488BCE               mov rcx, rsi
   .text:0x0000000000007EE1        498BC4               mov rax, r12
   .text:0x0000000000007EE4        FF153E330000         call qword ptr [GuardCFDispatchFunction]; int32_t (__cdecl *)( int64_t p1, int64_t p2 )
   .text:0x0000000000007EEA        85C0                 test eax, eax
   .text:0x0000000000007EEC        7FE2                 jg code_0x7ED0
   .text:0x0000000000007EEE code_0x7EEE:
   .text:0x0000000000007EEE        483BF3               cmp rsi, rbx
   .text:0x0000000000007EF1        7247                 jb code_0x7F3A
   .text:0x0000000000007EF3 code_0x7EF3:
   .text:0x0000000000007EF3        4D8BC6               mov r8, r14
   .text:0x0000000000007EF6        488BD6               mov rdx, rsi
   .text:0x0000000000007EF9        483BDE               cmp rbx, rsi
   .text:0x0000000000007EFC        742A                 jz code_0x7F28
   .text:0x0000000000007EFE code_0x7EFE:
   .text:0x0000000000007EFE        4C8BCB               mov r9, rbx
   .text:0x0000000000007F01        4C2BCE               sub r9, rsi
   .text:0x0000000000007F04        0F1F4000             nop [rax+0x0]
   .text:0x0000000000007F08        0F1F840000000000     nop [rax+rax+0x0]
   .text:0x0000000000007F10 code_0x7F10:
   .text:0x0000000000007F10        0FB602               movzx eax, byte ptr [rdx]
   .text:0x0000000000007F13        410FB60C11           movzx ecx, byte ptr [r9+rdx]
   .text:0x0000000000007F18        41880411             mov byte ptr [r9+rdx], al
   .text:0x0000000000007F1C        880A                 mov byte ptr [rdx], cl
   .text:0x0000000000007F1E        488D5201             lea rdx, [rdx+0x1]
   .text:0x0000000000007F22        4983E801             sub r8, 0x1
   .text:0x0000000000007F26        75E8                 jnz code_0x7F10
   .text:0x0000000000007F28 code_0x7F28:
   .text:0x0000000000007F28        483BFE               cmp rdi, rsi
   .text:0x0000000000007F2B        488BC3               mov rax, rbx
   .text:0x0000000000007F2E        480F45C7             cmovne rax, rdi
   .text:0x0000000000007F32        488BF8               mov rdi, rax
   .text:0x0000000000007F35        E956FFFFFF           jmp code_0x7E90
   .text:0x0000000000007F3A code_0x7F3A:
   .text:0x0000000000007F3A        483BFD               cmp rdi, rbp
   .text:0x0000000000007F3D        7321                 jae code_0x7F60
   .text:0x0000000000007F3F code_0x7F3F:
   .text:0x0000000000007F3F        90                   nop
   .text:0x0000000000007F40 code_0x7F40:
   .text:0x0000000000007F40        492BEE               sub rbp, r14
   .text:0x0000000000007F43        483BEF               cmp rbp, rdi
   .text:0x0000000000007F46        7618                 jbe code_0x7F60
   .text:0x0000000000007F48 code_0x7F48:
   .text:0x0000000000007F48        488BD7               mov rdx, rdi
   .text:0x0000000000007F4B        488BCD               mov rcx, rbp
   .text:0x0000000000007F4E        498BC4               mov rax, r12
   .text:0x0000000000007F51        FF15D1320000         call qword ptr [GuardCFDispatchFunction]; int32_t (__cdecl *)( int64_t p1, int64_t p2 )
   .text:0x0000000000007F57        85C0                 test eax, eax
   .text:0x0000000000007F59        74E5                 jz code_0x7F40
   .text:0x0000000000007F5B code_0x7F5B:
   .text:0x0000000000007F5B        483BFD               cmp rdi, rbp
   .text:0x0000000000007F5E        721B                 jb code_0x7F7B
   .text:0x0000000000007F60 code_0x7F60:
   .text:0x0000000000007F60        492BEE               sub rbp, r14
   .text:0x0000000000007F63        493BED               cmp rbp, r13
   .text:0x0000000000007F66        7613                 jbe code_0x7F7B
   .text:0x0000000000007F68 code_0x7F68:
   .text:0x0000000000007F68        488BD7               mov rdx, rdi
   .text:0x0000000000007F6B        488BCD               mov rcx, rbp
   .text:0x0000000000007F6E        498BC4               mov rax, r12
   .text:0x0000000000007F71        FF15B1320000         call qword ptr [GuardCFDispatchFunction]; int32_t (__cdecl *)( int64_t p1, int64_t p2 )
   .text:0x0000000000007F77        85C0                 test eax, eax
   .text:0x0000000000007F79        74E5                 jz code_0x7F60
   .text:0x0000000000007F7B code_0x7F7B:
   .text:0x0000000000007F7B        498BCF               mov rcx, r15
   .text:0x0000000000007F7E        488BC5               mov rax, rbp
   .text:0x0000000000007F81        482BCB               sub rcx, rbx
   .text:0x0000000000007F84        492BC5               sub rax, r13
   .text:0x0000000000007F87        483BC1               cmp rax, rcx
   .text:0x0000000000007F8A        488B4C2420           mov rcx, qword ptr [rsp+0x20]
   .text:0x0000000000007F8F        7C2B                 jl code_0x7FBC
   .text:0x0000000000007F91 code_0x7F91:
   .text:0x0000000000007F91        4C3BED               cmp r13, rbp
   .text:0x0000000000007F94        7315                 jae code_0x7FAB
   .text:0x0000000000007F96 code_0x7F96:
   .text:0x0000000000007F96        4C896CCC30           mov qword ptr [rsp+rcx*8+0x30], r13
   .text:0x0000000000007F9B        4889ACCC20020000     mov qword ptr [rsp+rcx*8+0x220], rbp
   .text:0x0000000000007FA3        48FFC1               inc rcx
   .text:0x0000000000007FA6        48894C2420           mov qword ptr [rsp+0x20], rcx
   .text:0x0000000000007FAB code_0x7FAB:
   .text:0x0000000000007FAB        493BDF               cmp rbx, r15
   .text:0x0000000000007FAE        0F83EFFDFFFF         jae code_0x7DA3
   .text:0x0000000000007FB4 code_0x7FB4:
   .text:0x0000000000007FB4        4C8BEB               mov r13, rbx
   .text:0x0000000000007FB7        E964FDFFFF           jmp code_0x7D20
   .text:0x0000000000007FBC code_0x7FBC:
   .text:0x0000000000007FBC        493BDF               cmp rbx, r15
   .text:0x0000000000007FBF        7315                 jae code_0x7FD6
   .text:0x0000000000007FC1 code_0x7FC1:
   .text:0x0000000000007FC1        48895CCC30           mov qword ptr [rsp+rcx*8+0x30], rbx
   .text:0x0000000000007FC6        4C89BCCC20020000     mov qword ptr [rsp+rcx*8+0x220], r15
   .text:0x0000000000007FCE        48FFC1               inc rcx
   .text:0x0000000000007FD1        48894C2420           mov qword ptr [rsp+0x20], rcx
   .text:0x0000000000007FD6 code_0x7FD6:
   .text:0x0000000000007FD6        4C3BED               cmp r13, rbp
   .text:0x0000000000007FD9        0F83C4FDFFFF         jae code_0x7DA3
   .text:0x0000000000007FDF code_0x7FDF:
   .text:0x0000000000007FDF        4C8BFD               mov r15, rbp
   .text:0x0000000000007FE2        E939FDFFFF           jmp code_0x7D20
   .text:0x0000000000007FE7 code_0x7FE7:
   .text:0x0000000000007FE7        488BBC2430040000     mov rdi, qword ptr [rsp+0x430]
   .text:0x0000000000007FEF        488BB42438040000     mov rsi, qword ptr [rsp+0x438]
   .text:0x0000000000007FF7        488BAC2440040000     mov rbp, qword ptr [rsp+0x440]
   .text:0x0000000000007FFF        488B9C2448040000     mov rbx, qword ptr [rsp+0x448]
   .text:0x0000000000008007        4C8BBC2428040000     mov r15, qword ptr [rsp+0x428]
   .text:0x000000000000800F code_0x800F:
   .text:0x000000000000800F        488B8C2410040000     mov rcx, qword ptr [rsp+0x410]
   .text:0x0000000000008017        4833CC               xor rcx, rsp
   .text:0x000000000000801A        E831280000           call __security_check_cookie; noclobber void __cdecl( uint64_t p1 )
   .text:0x000000000000801F        4881C450040000       add rsp, 0x450
   .text:0x0000000000008026        415E                 pop r14
   .text:0x0000000000008028        415D                 pop r13
   .text:0x000000000000802A        415C                 pop r12
   .text:0x000000000000802C        C3                   ret
   .text:0x000000000000802D data_0x802D:
   .text:0x000000000000802D        db 3 dup(0xCC)
   .text:0x0000000000008030 __acrt_LCMapStringA_stat:
   .text:0x0000000000008030        4055                 push rbp
   .text:0x0000000000008032        4154                 push r12
   .text:0x0000000000008034        4155                 push r13
   .text:0x0000000000008036        4156                 push r14
   .text:0x0000000000008038        4157                 push r15
   .text:0x000000000000803A        4883EC60             sub rsp, 0x60
   .text:0x000000000000803E        488D6C2450           lea rbp, [rsp+0x50]
   .text:0x0000000000008043        48895D40             mov qword ptr [rbp+0x40], rbx
   .text:0x0000000000008047        48897548             mov qword ptr [rbp+0x48], rsi
   .text:0x000000000000804B        48897D50             mov qword ptr [rbp+0x50], rdi
   .text:0x000000000000804F        488B05D2BF0000       mov rax, qword ptr [__security_cookie]
   .text:0x0000000000008056        4833C5               xor rax, rbp
   .text:0x0000000000008059        48894508             mov qword ptr [rbp+0x8], rax
   .text:0x000000000000805D        48635D60             movsxd rbx, dword ptr [rbp+0x60]
   .text:0x0000000000008061        4D8BF9               mov r15, r9
   .text:0x0000000000008064        48895500             mov qword ptr [rbp+0x0], rdx
   .text:0x0000000000008068        458BE8               mov r13d, r8d
   .text:0x000000000000806B        488BF9               mov rdi, rcx
   .text:0x000000000000806E        85DB                 test ebx, ebx
   .text:0x0000000000008070        7E14                 jle code_0x8086
   .text:0x0000000000008072 code_0x8072:
   .text:0x0000000000008072        488BD3               mov rdx, rbx
   .text:0x0000000000008075        498BC9               mov rcx, r9
   .text:0x0000000000008078        E8BB110000           call __strncnt; unsigned long long __cdecl( char * _String, unsigned long long _Count )
   .text:0x000000000000807D        3BC3                 cmp eax, ebx
   .text:0x000000000000807F        8D5801               lea ebx, [rax+0x1]
   .text:0x0000000000008082        7C02                 jl code_0x8086
   .text:0x0000000000008084 code_0x8084:
   .text:0x0000000000008084        8BD8                 mov ebx, eax
   .text:0x0000000000008086 code_0x8086:
   .text:0x0000000000008086        448B7578             mov r14d, dword ptr [rbp+0x78]
   .text:0x000000000000808A        4585F6               test r14d, r14d
   .text:0x000000000000808D        7507                 jnz code_0x8096
   .text:0x000000000000808F code_0x808F:
   .text:0x000000000000808F        488B07               mov rax, qword ptr [rdi]
   .text:0x0000000000008092        448B700C             mov r14d, dword ptr [rax+0xC]
   .text:0x0000000000008096 code_0x8096:
   .text:0x0000000000008096        F79D80000000         neg dword ptr [rbp+0x80]
   .text:0x000000000000809C        448BCB               mov r9d, ebx
   .text:0x000000000000809F        4D8BC7               mov r8, r15
   .text:0x00000000000080A2        418BCE               mov ecx, r14d
   .text:0x00000000000080A5        1BD2                 sbb edx, edx
   .text:0x00000000000080A7        8364242800           and dword ptr [rsp+0x28], 0x0
   .text:0x00000000000080AC        488364242000         and qword ptr [rsp+0x20], 0x0
   .text:0x00000000000080B2        83E208               and edx, 0x8
   .text:0x00000000000080B5        FFC2                 inc edx
   .text:0x00000000000080B7        E8C0D9FFFF           call __acrt_MultiByteToWideChar; int32_t __cdecl( int32_t p1, int32_t p2 )
   .text:0x00000000000080BC        4C63E0               movsxd r12, eax
   .text:0x00000000000080BF        85C0                 test eax, eax
   .text:0x00000000000080C1        0F8436020000         jz code_0x82FD
   .text:0x00000000000080C7 code_0x80C7:
   .text:0x00000000000080C7        498BC4               mov rax, r12
   .text:0x00000000000080CA        49B8F0FFFFFFFFFFFF0F mov r8, 0xFFFFFFFFFFFFFF0
   .text:0x00000000000080D4        4803C0               add rax, rax
   .text:0x00000000000080D7        488D4810             lea rcx, [rax+0x10]
   .text:0x00000000000080DB        483BC1               cmp rax, rcx
   .text:0x00000000000080DE        481BD2               sbb rdx, rdx
   .text:0x00000000000080E1        4823D1               and rdx, rcx
   .text:0x00000000000080E4        7453                 jz code_0x8139
   .text:0x00000000000080E6 code_0x80E6:
   .text:0x00000000000080E6        4881FA00040000       cmp rdx, 0x400
   .text:0x00000000000080ED        772E                 ja code_0x811D
   .text:0x00000000000080EF code_0x80EF:
   .text:0x00000000000080EF        488D420F             lea rax, [rdx+0xF]
   .text:0x00000000000080F3        483BC2               cmp rax, rdx
   .text:0x00000000000080F6        7703                 ja code_0x80FB
   .text:0x00000000000080F8 code_0x80F8:
   .text:0x00000000000080F8        498BC0               mov rax, r8
   .text:0x00000000000080FB code_0x80FB:
   .text:0x00000000000080FB        4883E0F0             and rax, 0xFFFFFFFFFFFFFFF0
   .text:0x00000000000080FF        E8FC280000           call _alloca_probe; int64_t __cdecl( void )
   .text:0x0000000000008104        482BE0               sub rsp, rax
   .text:0x0000000000008107        488D742450           lea rsi, [rsp+0x50]
   .text:0x000000000000810C        4885F6               test rsi, rsi
   .text:0x000000000000810F        0F84CE010000         jz code_0x82E3
   .text:0x0000000000008115 code_0x8115:
   .text:0x0000000000008115        C706CCCC0000         mov dword ptr [rsi], 0xCCCC
   .text:0x000000000000811B        EB16                 jmp code_0x8133
   .text:0x000000000000811D code_0x811D:
   .text:0x000000000000811D        488BCA               mov rcx, rdx
   .text:0x0000000000008120        E853E4FFFF           call _malloc_base; void * __cdecl( unsigned long long _Size )
   .text:0x0000000000008125        488BF0               mov rsi, rax
   .text:0x0000000000008128        4885C0               test rax, rax
   .text:0x000000000000812B        740E                 jz code_0x813B
   .text:0x000000000000812D code_0x812D:
   .text:0x000000000000812D        C700DDDD0000         mov dword ptr [rax], 0xDDDD
   .text:0x0000000000008133 code_0x8133:
   .text:0x0000000000008133        4883C610             add rsi, 0x10
   .text:0x0000000000008137        EB02                 jmp code_0x813B
   .text:0x0000000000008139 code_0x8139:
   .text:0x0000000000008139        33F6                 xor esi, esi
   .text:0x000000000000813B code_0x813B:
   .text:0x000000000000813B        4885F6               test rsi, rsi
   .text:0x000000000000813E        0F849F010000         jz code_0x82E3
   .text:0x0000000000008144 code_0x8144:
   .text:0x0000000000008144        4489642428           mov dword ptr [rsp+0x28], r12d
   .text:0x0000000000008149        448BCB               mov r9d, ebx
   .text:0x000000000000814C        4D8BC7               mov r8, r15
   .text:0x000000000000814F        4889742420           mov qword ptr [rsp+0x20], rsi
   .text:0x0000000000008154        BA01000000           mov edx, 0x1
   .text:0x0000000000008159        418BCE               mov ecx, r14d
   .text:0x000000000000815C        E81BD9FFFF           call __acrt_MultiByteToWideChar; int32_t __cdecl( int32_t p1, int32_t p2 )
   .text:0x0000000000008161        85C0                 test eax, eax
   .text:0x0000000000008163        0F847A010000         jz code_0x82E3
   .text:0x0000000000008169 code_0x8169:
   .text:0x0000000000008169        488364244000         and qword ptr [rsp+0x40], 0x0
   .text:0x000000000000816F        458BCC               mov r9d, r12d
   .text:0x0000000000008172        488364243800         and qword ptr [rsp+0x38], 0x0
   .text:0x0000000000008178        4C8BC6               mov r8, rsi
   .text:0x000000000000817B        488364243000         and qword ptr [rsp+0x30], 0x0
   .text:0x0000000000008181        418BD5               mov edx, r13d
   .text:0x0000000000008184        4C8B7D00             mov r15, qword ptr [rbp+0x0]
   .text:0x0000000000008188        8364242800           and dword ptr [rsp+0x28], 0x0
   .text:0x000000000000818D        498BCF               mov rcx, r15
   .text:0x0000000000008190        488364242000         and qword ptr [rsp+0x20], 0x0
   .text:0x0000000000008196        E8C5EDFFFF           call __acrt_LCMapStringEx; int32_t __cdecl( int64_t p1, int32_t p2, int64_t p3, int32_t p4, int64_t p5, int32_t p6, int64_t p7, int64_t p8, int64_t p9 )
   .text:0x000000000000819B        4863F8               movsxd rdi, eax
   .text:0x000000000000819E        85C0                 test eax, eax
   .text:0x00000000000081A0        0F843D010000         jz code_0x82E3
   .text:0x00000000000081A6 code_0x81A6:
   .text:0x00000000000081A6        BA00040000           mov edx, 0x400
   .text:0x00000000000081AB        4485EA               test edx, r13d
   .text:0x00000000000081AE        7452                 jz code_0x8202
   .text:0x00000000000081B0 code_0x81B0:
   .text:0x00000000000081B0        8B4570               mov eax, dword ptr [rbp+0x70]
   .text:0x00000000000081B3        85C0                 test eax, eax
   .text:0x00000000000081B5        0F842A010000         jz code_0x82E5
   .text:0x00000000000081BB code_0x81BB:
   .text:0x00000000000081BB        3BF8                 cmp edi, eax
   .text:0x00000000000081BD        0F8F20010000         jg code_0x82E3
   .text:0x00000000000081C3 code_0x81C3:
   .text:0x00000000000081C3        488364244000         and qword ptr [rsp+0x40], 0x0
   .text:0x00000000000081C9        458BCC               mov r9d, r12d
   .text:0x00000000000081CC        488364243800         and qword ptr [rsp+0x38], 0x0
   .text:0x00000000000081D2        4C8BC6               mov r8, rsi
   .text:0x00000000000081D5        488364243000         and qword ptr [rsp+0x30], 0x0
   .text:0x00000000000081DB        418BD5               mov edx, r13d
   .text:0x00000000000081DE        89442428             mov dword ptr [rsp+0x28], eax
   .text:0x00000000000081E2        498BCF               mov rcx, r15
   .text:0x00000000000081E5        488B4568             mov rax, qword ptr [rbp+0x68]
   .text:0x00000000000081E9        4889442420           mov qword ptr [rsp+0x20], rax
   .text:0x00000000000081EE        E86DEDFFFF           call __acrt_LCMapStringEx; int32_t __cdecl( int64_t p1, int32_t p2, int64_t p3, int32_t p4, int64_t p5, int32_t p6, int64_t p7, int64_t p8, int64_t p9 )
   .text:0x00000000000081F3        8BF8                 mov edi, eax
   .text:0x00000000000081F5        85C0                 test eax, eax
   .text:0x00000000000081F7        0F85E8000000         jnz code_0x82E5
   .text:0x00000000000081FD code_0x81FD:
   .text:0x00000000000081FD        E9E1000000           jmp code_0x82E3
   .text:0x0000000000008202 code_0x8202:
   .text:0x0000000000008202        488BCF               mov rcx, rdi
   .text:0x0000000000008205        4803C9               add rcx, rcx
   .text:0x0000000000008208        488D4110             lea rax, [rcx+0x10]
   .text:0x000000000000820C        483BC8               cmp rcx, rax
   .text:0x000000000000820F        481BC9               sbb rcx, rcx
   .text:0x0000000000008212        4823C8               and rcx, rax
   .text:0x0000000000008215        7453                 jz code_0x826A
   .text:0x0000000000008217 code_0x8217:
   .text:0x0000000000008217        483BCA               cmp rcx, rdx
   .text:0x000000000000821A        7735                 ja code_0x8251
   .text:0x000000000000821C code_0x821C:
   .text:0x000000000000821C        488D410F             lea rax, [rcx+0xF]
   .text:0x0000000000008220        483BC1               cmp rax, rcx
   .text:0x0000000000008223        770A                 ja code_0x822F
   .text:0x0000000000008225 code_0x8225:
   .text:0x0000000000008225        48B8F0FFFFFFFFFFFF0F mov rax, 0xFFFFFFFFFFFFFF0
   .text:0x000000000000822F code_0x822F:
   .text:0x000000000000822F        4883E0F0             and rax, 0xFFFFFFFFFFFFFFF0
   .text:0x0000000000008233        E8C8270000           call _alloca_probe; int64_t __cdecl( void )
   .text:0x0000000000008238        482BE0               sub rsp, rax
   .text:0x000000000000823B        488D5C2450           lea rbx, [rsp+0x50]
   .text:0x0000000000008240        4885DB               test rbx, rbx
   .text:0x0000000000008243        0F849A000000         jz code_0x82E3
   .text:0x0000000000008249 code_0x8249:
   .text:0x0000000000008249        C703CCCC0000         mov dword ptr [rbx], 0xCCCC
   .text:0x000000000000824F        EB13                 jmp code_0x8264
   .text:0x0000000000008251 code_0x8251:
   .text:0x0000000000008251        E822E3FFFF           call _malloc_base; void * __cdecl( unsigned long long _Size )
   .text:0x0000000000008256        488BD8               mov rbx, rax
   .text:0x0000000000008259        4885C0               test rax, rax
   .text:0x000000000000825C        740E                 jz code_0x826C
   .text:0x000000000000825E code_0x825E:
   .text:0x000000000000825E        C700DDDD0000         mov dword ptr [rax], 0xDDDD
   .text:0x0000000000008264 code_0x8264:
   .text:0x0000000000008264        4883C310             add rbx, 0x10
   .text:0x0000000000008268        EB02                 jmp code_0x826C
   .text:0x000000000000826A code_0x826A:
   .text:0x000000000000826A        33DB                 xor ebx, ebx
   .text:0x000000000000826C code_0x826C:
   .text:0x000000000000826C        4885DB               test rbx, rbx
   .text:0x000000000000826F        7472                 jz code_0x82E3
   .text:0x0000000000008271 code_0x8271:
   .text:0x0000000000008271        488364244000         and qword ptr [rsp+0x40], 0x0
   .text:0x0000000000008277        458BCC               mov r9d, r12d
   .text:0x000000000000827A        488364243800         and qword ptr [rsp+0x38], 0x0
   .text:0x0000000000008280        4C8BC6               mov r8, rsi
   .text:0x0000000000008283        488364243000         and qword ptr [rsp+0x30], 0x0
   .text:0x0000000000008289        418BD5               mov edx, r13d
   .text:0x000000000000828C        897C2428             mov dword ptr [rsp+0x28], edi
   .text:0x0000000000008290        498BCF               mov rcx, r15
   .text:0x0000000000008293        48895C2420           mov qword ptr [rsp+0x20], rbx
   .text:0x0000000000008298        E8C3ECFFFF           call __acrt_LCMapStringEx; int32_t __cdecl( int64_t p1, int32_t p2, int64_t p3, int32_t p4, int64_t p5, int32_t p6, int64_t p7, int64_t p8, int64_t p9 )
   .text:0x000000000000829D        85C0                 test eax, eax
   .text:0x000000000000829F        7431                 jz code_0x82D2
   .text:0x00000000000082A1 code_0x82A1:
   .text:0x00000000000082A1        488364243800         and qword ptr [rsp+0x38], 0x0
   .text:0x00000000000082A7        33D2                 xor edx, edx
   .text:0x00000000000082A9        4821542430           and qword ptr [rsp+0x30], rdx
   .text:0x00000000000082AE        448BCF               mov r9d, edi
   .text:0x00000000000082B1        8B4570               mov eax, dword ptr [rbp+0x70]
   .text:0x00000000000082B4        4C8BC3               mov r8, rbx
   .text:0x00000000000082B7        418BCE               mov ecx, r14d
   .text:0x00000000000082BA        85C0                 test eax, eax
   .text:0x00000000000082BC        7565                 jnz code_0x8323
   .text:0x00000000000082BE code_0x82BE:
   .text:0x00000000000082BE        21542428             and dword ptr [rsp+0x28], edx
   .text:0x00000000000082C2        4821542420           and qword ptr [rsp+0x20], rdx
   .text:0x00000000000082C7 code_0x82C7:
   .text:0x00000000000082C7        E80CD8FFFF           call __acrt_WideCharToMultiByte; int32_t __cdecl( int64_t p1, int32_t p2 )
   .text:0x00000000000082CC        8BF8                 mov edi, eax
   .text:0x00000000000082CE        85C0                 test eax, eax
   .text:0x00000000000082D0        7560                 jnz code_0x8332
   .text:0x00000000000082D2 code_0x82D2:
   .text:0x00000000000082D2        488D4BF0             lea rcx, [rbx-0x10]
   .text:0x00000000000082D6        8139DDDD0000         cmp dword ptr [rcx], 0xDDDD
   .text:0x00000000000082DC        7505                 jnz code_0x82E3
   .text:0x00000000000082DE code_0x82DE:
   .text:0x00000000000082DE        E831C7FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000082E3 code_0x82E3:
   .text:0x00000000000082E3        33FF                 xor edi, edi
   .text:0x00000000000082E5 code_0x82E5:
   .text:0x00000000000082E5        4885F6               test rsi, rsi
   .text:0x00000000000082E8        7411                 jz code_0x82FB
   .text:0x00000000000082EA code_0x82EA:
   .text:0x00000000000082EA        488D4EF0             lea rcx, [rsi-0x10]
   .text:0x00000000000082EE        8139DDDD0000         cmp dword ptr [rcx], 0xDDDD
   .text:0x00000000000082F4        7505                 jnz code_0x82FB
   .text:0x00000000000082F6 code_0x82F6:
   .text:0x00000000000082F6        E819C7FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000082FB code_0x82FB:
   .text:0x00000000000082FB        8BC7                 mov eax, edi
   .text:0x00000000000082FD code_0x82FD:
   .text:0x00000000000082FD        488B4D08             mov rcx, qword ptr [rbp+0x8]
   .text:0x0000000000008301        4833CD               xor rcx, rbp
   .text:0x0000000000008304        E847250000           call __security_check_cookie; noclobber void __cdecl( uint64_t p1 )
   .text:0x0000000000008309        488B5D40             mov rbx, qword ptr [rbp+0x40]
   .text:0x000000000000830D        488B7548             mov rsi, qword ptr [rbp+0x48]
   .text:0x0000000000008311        488B7D50             mov rdi, qword ptr [rbp+0x50]
   .text:0x0000000000008315        488D6510             lea rsp, [rbp+0x10]
   .text:0x0000000000008319        415F                 pop r15
   .text:0x000000000000831B        415E                 pop r14
   .text:0x000000000000831D        415D                 pop r13
   .text:0x000000000000831F        415C                 pop r12
   .text:0x0000000000008321        5D                   pop rbp
   .text:0x0000000000008322        C3                   ret
   .text:0x0000000000008323 code_0x8323:
   .text:0x0000000000008323        89442428             mov dword ptr [rsp+0x28], eax
   .text:0x0000000000008327        488B4568             mov rax, qword ptr [rbp+0x68]
   .text:0x000000000000832B        4889442420           mov qword ptr [rsp+0x20], rax
   .text:0x0000000000008330        EB95                 jmp code_0x82C7
   .text:0x0000000000008332 code_0x8332:
   .text:0x0000000000008332        488D4BF0             lea rcx, [rbx-0x10]
   .text:0x0000000000008336        8139DDDD0000         cmp dword ptr [rcx], 0xDDDD
   .text:0x000000000000833C        75A7                 jnz code_0x82E5
   .text:0x000000000000833E code_0x833E:
   .text:0x000000000000833E        E8D1C6FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000008343        EBA0                 jmp code_0x82E5
   .text:0x0000000000008345 data_0x8345:
   .text:0x0000000000008345        db 3 dup(0xCC)
   .text:0x0000000000008348 __acrt_LCMapStringA:
   .text:0x0000000000008348        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x000000000000834D        4889742410           mov qword ptr [rsp+0x10], rsi
   .text:0x0000000000008352        57                   push rdi
   .text:0x0000000000008353        4883EC70             sub rsp, 0x70
   .text:0x0000000000008357        488BF2               mov rsi, rdx
   .text:0x000000000000835A        498BD9               mov rbx, r9
   .text:0x000000000000835D        488BD1               mov rdx, rcx
   .text:0x0000000000008360        418BF8               mov edi, r8d
   .text:0x0000000000008363        488D4C2450           lea rcx, [rsp+0x50]
   .text:0x0000000000008368        E843BAFFFF           call _LocaleUpdate::_LocaleUpdate; public: void __cdecl( const struct __crt_locale_pointers * p1 )
   .text:0x000000000000836D        8B8424C0000000       mov eax, dword ptr [rsp+0xC0]
   .text:0x0000000000008374        488D4C2458           lea rcx, [rsp+0x58]
   .text:0x0000000000008379        89442440             mov dword ptr [rsp+0x40], eax
   .text:0x000000000000837D        4C8BCB               mov r9, rbx
   .text:0x0000000000008380        8B8424B8000000       mov eax, dword ptr [rsp+0xB8]
   .text:0x0000000000008387        448BC7               mov r8d, edi
   .text:0x000000000000838A        89442438             mov dword ptr [rsp+0x38], eax
   .text:0x000000000000838E        488BD6               mov rdx, rsi
   .text:0x0000000000008391        8B8424B0000000       mov eax, dword ptr [rsp+0xB0]
   .text:0x0000000000008398        89442430             mov dword ptr [rsp+0x30], eax
   .text:0x000000000000839C        488B8424A8000000     mov rax, qword ptr [rsp+0xA8]
   .text:0x00000000000083A4        4889442428           mov qword ptr [rsp+0x28], rax
   .text:0x00000000000083A9        8B8424A0000000       mov eax, dword ptr [rsp+0xA0]
   .text:0x00000000000083B0        89442420             mov dword ptr [rsp+0x20], eax
   .text:0x00000000000083B4        E877FCFFFF           call __acrt_LCMapStringA_stat; int __cdecl( struct __crt_locale_pointers * p1, wchar_t * p2, unsigned long p3, char * p4, int p5, char * p6, int p7, int p8, int p9 )
   .text:0x00000000000083B9        807C246800           cmp byte ptr [rsp+0x68], 0x0
   .text:0x00000000000083BE        740C                 jz code_0x83CC
   .text:0x00000000000083C0 code_0x83C0:
   .text:0x00000000000083C0        488B4C2450           mov rcx, qword ptr [rsp+0x50]
   .text:0x00000000000083C5        83A1A8030000FD       and dword ptr [rcx+0x3A8], 0xFFFFFFFD
   .text:0x00000000000083CC code_0x83CC:
   .text:0x00000000000083CC        4C8D5C2470           lea r11, [rsp+0x70]
   .text:0x00000000000083D1        498B5B10             mov rbx, qword ptr [r11+0x10]
   .text:0x00000000000083D5        498B7318             mov rsi, qword ptr [r11+0x18]
   .text:0x00000000000083D9        498BE3               mov rsp, r11
   .text:0x00000000000083DC        5F                   pop rdi
   .text:0x00000000000083DD        C3                   ret
   .text:0x00000000000083DE data_0x83DE:
   .text:0x00000000000083DE        db 2 dup(0xCC)
   .text:0x00000000000083E0 initialize_multibyte:
   .text:0x00000000000083E0        4883EC28             sub rsp, 0x28
   .text:0x00000000000083E4        E837D3FFFF           call __acrt_initialize_multibyte; int8_t __cdecl( void )
   .text:0x00000000000083E9        33C9                 xor ecx, ecx
   .text:0x00000000000083EB        84C0                 test al, al
   .text:0x00000000000083ED        0F94C1               sete cl
   .text:0x00000000000083F0        8BC1                 mov eax, ecx
   .text:0x00000000000083F2        4883C428             add rsp, 0x28
   .text:0x00000000000083F6        C3                   ret
   .text:0x00000000000083F7 code_0x83F7:
   .text:0x00000000000083F7        CC                   int3
   .text:0x00000000000083F8 GetTableIndexFromLocaleName:
   .text:0x00000000000083F8        488BC4               mov rax, rsp
   .text:0x00000000000083FB        48895808             mov qword ptr [rax+0x8], rbx
   .text:0x00000000000083FF        48896810             mov qword ptr [rax+0x10], rbp
   .text:0x0000000000008403        48897018             mov qword ptr [rax+0x18], rsi
   .text:0x0000000000008407        48897820             mov qword ptr [rax+0x20], rdi
   .text:0x000000000000840B        4156                 push r14
   .text:0x000000000000840D        4157                 push r15
   .text:0x000000000000840F        4533F6               xor r14d, r14d
   .text:0x0000000000008412        4C8D3DF76A0000       lea r15, [data_0xEF10]
   .text:0x0000000000008419        458BC6               mov r8d, r14d
   .text:0x000000000000841C        488BF1               mov rsi, rcx
   .text:0x000000000000841F        41B9E3000000         mov r9d, 0xE3
   .text:0x0000000000008425 code_0x8425:
   .text:0x0000000000008425        438D0401             lea eax, [r9+r8]
   .text:0x0000000000008429        488BFE               mov rdi, rsi
   .text:0x000000000000842C        99                   cdq
   .text:0x000000000000842D        BD55000000           mov ebp, 0x55
   .text:0x0000000000008432        2BC2                 sub eax, edx
   .text:0x0000000000008434        D1F8                 sar eax, 1
   .text:0x0000000000008436        4C63D8               movsxd r11, eax
   .text:0x0000000000008439        498BCB               mov rcx, r11
   .text:0x000000000000843C        498BD3               mov rdx, r11
   .text:0x000000000000843F        48C1E104             shl rcx, 0x4
   .text:0x0000000000008443        4A8B1C39             mov rbx, qword ptr [rcx+r15]
   .text:0x0000000000008447        482BFB               sub rdi, rbx
   .text:0x000000000000844A code_0x844A:
   .text:0x000000000000844A        0FB7041F             movzx eax, word ptr [rdi+rbx]
   .text:0x000000000000844E        0FB70C1F             movzx ecx, word ptr [rdi+rbx]
   .text:0x0000000000008452        6683E841             sub ax, 0x41
   .text:0x0000000000008456        440FB713             movzx r10d, word ptr [rbx]
   .text:0x000000000000845A        6683C120             add cx, 0x20
   .text:0x000000000000845E        6683F819             cmp ax, 0x19
   .text:0x0000000000008462        0FB703               movzx eax, word ptr [rbx]
   .text:0x0000000000008465        660F470C1F           cmova cx, word ptr [rdi+rbx]
   .text:0x000000000000846A        664183C220           add r10w, 0x20
   .text:0x000000000000846F        6683E841             sub ax, 0x41
   .text:0x0000000000008473        6683F819             cmp ax, 0x19
   .text:0x0000000000008477        66440F4713           cmova r10w, word ptr [rbx]
   .text:0x000000000000847C        488D5B02             lea rbx, [rbx+0x2]
   .text:0x0000000000008480        4883ED01             sub rbp, 0x1
   .text:0x0000000000008484        740B                 jz code_0x8491
   .text:0x0000000000008486 code_0x8486:
   .text:0x0000000000008486        6685C9               test cx, cx
   .text:0x0000000000008489        7406                 jz code_0x8491
   .text:0x000000000000848B code_0x848B:
   .text:0x000000000000848B        66413BCA             cmp cx, r10w
   .text:0x000000000000848F        74B9                 jz code_0x844A
   .text:0x0000000000008491 code_0x8491:
   .text:0x0000000000008491        410FB7C2             movzx eax, r10w
   .text:0x0000000000008495        0FB7C9               movzx ecx, cx
   .text:0x0000000000008498        2BC8                 sub ecx, eax
   .text:0x000000000000849A        7423                 jz code_0x84BF
   .text:0x000000000000849C code_0x849C:
   .text:0x000000000000849C        85C9                 test ecx, ecx
   .text:0x000000000000849E        418D43FF             lea eax, [r11-0x1]
   .text:0x00000000000084A2        410F49C1             cmovns eax, r9d
   .text:0x00000000000084A6        448BC8               mov r9d, eax
   .text:0x00000000000084A9        418D4301             lea eax, [r11+0x1]
   .text:0x00000000000084AD        440F49C0             cmovns r8d, eax
   .text:0x00000000000084B1        453BC1               cmp r8d, r9d
   .text:0x00000000000084B4        0F8E6BFFFFFF         jle code_0x8425
   .text:0x00000000000084BA code_0x84BA:
   .text:0x00000000000084BA        83C8FF               or eax, 0xFFFFFFFF
   .text:0x00000000000084BD        EB08                 jmp code_0x84C7
   .text:0x00000000000084BF code_0x84BF:
   .text:0x00000000000084BF        4803D2               add rdx, rdx
   .text:0x00000000000084C2        418B44D708           mov eax, dword ptr [r15+rdx*8+0x8]
   .text:0x00000000000084C7 code_0x84C7:
   .text:0x00000000000084C7        488B5C2418           mov rbx, qword ptr [rsp+0x18]
   .text:0x00000000000084CC        488B6C2420           mov rbp, qword ptr [rsp+0x20]
   .text:0x00000000000084D1        488B742428           mov rsi, qword ptr [rsp+0x28]
   .text:0x00000000000084D6        488B7C2430           mov rdi, qword ptr [rsp+0x30]
   .text:0x00000000000084DB        415F                 pop r15
   .text:0x00000000000084DD        415E                 pop r14
   .text:0x00000000000084DF        C3                   ret
   .text:0x00000000000084E0 __crtDownlevelLocaleNameToLCID:
   .text:0x00000000000084E0        4883EC28             sub rsp, 0x28
   .text:0x00000000000084E4        4885C9               test rcx, rcx
   .text:0x00000000000084E7        7421                 jz code_0x850A
   .text:0x00000000000084E9 code_0x84E9:
   .text:0x00000000000084E9        E80AFFFFFF           call GetTableIndexFromLocaleName; int __cdecl( wchar_t * p1 )
   .text:0x00000000000084EE        85C0                 test eax, eax
   .text:0x00000000000084F0        7818                 js code_0x850A
   .text:0x00000000000084F2 code_0x84F2:
   .text:0x00000000000084F2        3DE4000000           cmp eax, 0xE4
   .text:0x00000000000084F7        7311                 jae code_0x850A
   .text:0x00000000000084F9 code_0x84F9:
   .text:0x00000000000084F9        4898                 cdqe
   .text:0x00000000000084FB        488D0DAE4F0000       lea rcx, [data_0xD4B0]
   .text:0x0000000000008502        4803C0               add rax, rax
   .text:0x0000000000008505        8B04C1               mov eax, dword ptr [rcx+rax*8]
   .text:0x0000000000008508        EB02                 jmp code_0x850C
   .text:0x000000000000850A code_0x850A:
   .text:0x000000000000850A        33C0                 xor eax, eax
   .text:0x000000000000850C code_0x850C:
   .text:0x000000000000850C        4883C428             add rsp, 0x28
   .text:0x0000000000008510        C3                   ret
   .text:0x0000000000008511 data_0x8511:
   .text:0x0000000000008511        db 3 dup(0xCC)
   .text:0x0000000000008514 _msize_base_1:
   .text:0x0000000000008514        E903000000           jmp _msize_base; unsigned long long __cdecl( void * _Block )
   .text:0x0000000000008519 data_0x8519:
   .text:0x0000000000008519        db 3 dup(0xCC)
   .text:0x000000000000851C _msize_base:
   .text:0x000000000000851C        4883EC28             sub rsp, 0x28
   .text:0x0000000000008520        4885C9               test rcx, rcx
   .text:0x0000000000008523        7519                 jnz code_0x853E
   .text:0x0000000000008525 code_0x8525:
   .text:0x0000000000008525        E852C4FFFF           call _errno; int * __cdecl( void )
   .text:0x000000000000852A        C70016000000         mov dword ptr [rax], 0x16
   .text:0x0000000000008530        E8BBC1FFFF           call _invalid_parameter_noinfo; void __cdecl( void )
   .text:0x0000000000008535        4883C8FF             or rax, 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000008539        4883C428             add rsp, 0x28
   .text:0x000000000000853D        C3                   ret
   .text:0x000000000000853E code_0x853E:
   .text:0x000000000000853E        4C8BC1               mov r8, rcx
   .text:0x0000000000008541        33D2                 xor edx, edx
   .text:0x0000000000008543        488B0D8ED00000       mov rcx, qword ptr [data_0x155D8]
   .text:0x000000000000854A        4883C428             add rsp, 0x28
   .text:0x000000000000854E        48FF257B2C0000       jmp qword ptr [HeapSize]; unsigned long long (__cdecl *)( void * hHeap, unsigned long dwFlags, void * lpMem )
   .text:0x0000000000008555 data_0x8555:
   .text:0x0000000000008555        db 3 dup(0xCC)
   .text:0x0000000000008558 _realloc_base:
   .text:0x0000000000008558        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x000000000000855D        57                   push rdi
   .text:0x000000000000855E        4883EC20             sub rsp, 0x20
   .text:0x0000000000008562        488BDA               mov rbx, rdx
   .text:0x0000000000008565        488BF9               mov rdi, rcx
   .text:0x0000000000008568        4885C9               test rcx, rcx
   .text:0x000000000000856B        750A                 jnz code_0x8577
   .text:0x000000000000856D code_0x856D:
   .text:0x000000000000856D        488BCA               mov rcx, rdx
   .text:0x0000000000008570        E803E0FFFF           call _malloc_base; void * __cdecl( unsigned long long _Size )
   .text:0x0000000000008575        EB1F                 jmp code_0x8596
   .text:0x0000000000008577 code_0x8577:
   .text:0x0000000000008577        4885DB               test rbx, rbx
   .text:0x000000000000857A        7507                 jnz code_0x8583
   .text:0x000000000000857C code_0x857C:
   .text:0x000000000000857C        E893C4FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000008581        EB11                 jmp code_0x8594
   .text:0x0000000000008583 code_0x8583:
   .text:0x0000000000008583        4883FBE0             cmp rbx, 0xFFFFFFFFFFFFFFE0
   .text:0x0000000000008587        762D                 jbe code_0x85B6
   .text:0x0000000000008589 code_0x8589:
   .text:0x0000000000008589        E8EEC3FFFF           call _errno; int * __cdecl( void )
   .text:0x000000000000858E        C7000C000000         mov dword ptr [rax], 0xC
   .text:0x0000000000008594 code_0x8594:
   .text:0x0000000000008594        33C0                 xor eax, eax
   .text:0x0000000000008596 code_0x8596:
   .text:0x0000000000008596        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x000000000000859B        4883C420             add rsp, 0x20
   .text:0x000000000000859F        5F                   pop rdi
   .text:0x00000000000085A0        C3                   ret
   .text:0x00000000000085A1 code_0x85A1:
   .text:0x00000000000085A1        E82EB1FFFF           call _query_new_mode; inline int32_t __cdecl( void )
   .text:0x00000000000085A6        85C0                 test eax, eax
   .text:0x00000000000085A8        74DF                 jz code_0x8589
   .text:0x00000000000085AA code_0x85AA:
   .text:0x00000000000085AA        488BCB               mov rcx, rbx
   .text:0x00000000000085AD        E8F2ECFFFF           call _callnewh; int __cdecl( unsigned long long _Size )
   .text:0x00000000000085B2        85C0                 test eax, eax
   .text:0x00000000000085B4        74D3                 jz code_0x8589
   .text:0x00000000000085B6 code_0x85B6:
   .text:0x00000000000085B6        488B0D1BD00000       mov rcx, qword ptr [data_0x155D8]
   .text:0x00000000000085BD        4C8BCB               mov r9, rbx
   .text:0x00000000000085C0        4C8BC7               mov r8, rdi
   .text:0x00000000000085C3        33D2                 xor edx, edx
   .text:0x00000000000085C5        FF150D2C0000         call qword ptr [HeapReAlloc]; void * (__cdecl *)( void * hHeap, unsigned long dwFlags, void * lpMem, unsigned long long dwBytes )
   .text:0x00000000000085CB        4885C0               test rax, rax
   .text:0x00000000000085CE        74D1                 jz code_0x85A1
   .text:0x00000000000085D0 code_0x85D0:
   .text:0x00000000000085D0        EBC4                 jmp code_0x8596
   .text:0x00000000000085D2 data_0x85D2:
   .text:0x00000000000085D2        db 2 dup(0xCC)
   .text:0x00000000000085D4 __crt_seh_guarded_call<int>::operator()<class <lambda_a37b2b86f63e897a80ea819b0eb08c01>,class <lambda_38ce7e780aa69e748d6df282ebc68efe> & __ptr64,class <lambda_99fb1378e971ab6e7edea83e3a7a83a2> >:
   .text:0x00000000000085D4        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x00000000000085D9        4C894C2420           mov qword ptr [rsp+0x20], r9
   .text:0x00000000000085DE        57                   push rdi
   .text:0x00000000000085DF        4883EC20             sub rsp, 0x20
   .text:0x00000000000085E3        498BF9               mov rdi, r9
   .text:0x00000000000085E6        498BD8               mov rbx, r8
   .text:0x00000000000085E9        8B0A                 mov ecx, dword ptr [rdx]
   .text:0x00000000000085EB        E8A4D8FFFF           call __acrt_lowio_lock_fh; void __cdecl( int32_t p1 )
   .text:0x00000000000085F0        90                   nop
   .text:0x00000000000085F1        488B03               mov rax, qword ptr [rbx]
   .text:0x00000000000085F4        486308               movsxd rcx, dword ptr [rax]
   .text:0x00000000000085F7        488BD1               mov rdx, rcx
   .text:0x00000000000085FA        488BC1               mov rax, rcx
   .text:0x00000000000085FD        48C1F806             sar rax, 0x6
   .text:0x0000000000008601        4C8D0508CA0000       lea r8, [data_0x15010]
   .text:0x0000000000008608        83E23F               and edx, 0x3F
   .text:0x000000000000860B        48C1E206             shl rdx, 0x6
   .text:0x000000000000860F        498B04C0             mov rax, qword ptr [r8+rax*8]
   .text:0x0000000000008613        F644103801           test byte ptr [rax+rdx+0x38], 0x1
   .text:0x0000000000008618        7424                 jz code_0x863E
   .text:0x000000000000861A code_0x861A:
   .text:0x000000000000861A        E879D9FFFF           call _get_osfhandle; int64_t __cdecl( int32_t p1 )
   .text:0x000000000000861F        488BC8               mov rcx, rax
   .text:0x0000000000008622        FF15B82B0000         call qword ptr [FlushFileBuffers]; int (__cdecl *)( void * hFile )
   .text:0x0000000000008628        33DB                 xor ebx, ebx
   .text:0x000000000000862A        85C0                 test eax, eax
   .text:0x000000000000862C        751E                 jnz code_0x864C
   .text:0x000000000000862E code_0x862E:
   .text:0x000000000000862E        E829C3FFFF           call __doserrno; unsigned long * __cdecl( void )
   .text:0x0000000000008633        488BD8               mov rbx, rax
   .text:0x0000000000008636        FF15542A0000         call qword ptr [GetLastError]; unsigned long (__cdecl *)( void )
   .text:0x000000000000863C        8903                 mov dword ptr [rbx], eax
   .text:0x000000000000863E code_0x863E:
   .text:0x000000000000863E        E839C3FFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000008643        C70009000000         mov dword ptr [rax], 0x9
   .text:0x0000000000008649        83CBFF               or ebx, 0xFFFFFFFF
   .text:0x000000000000864C code_0x864C:
   .text:0x000000000000864C        8B0F                 mov ecx, dword ptr [rdi]
   .text:0x000000000000864E        E865D8FFFF           call func_0x5EB8; void __cdecl( int32_t p1 )
   .text:0x0000000000008653        8BC3                 mov eax, ebx
   .text:0x0000000000008655        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x000000000000865A        4883C420             add rsp, 0x20
   .text:0x000000000000865E        5F                   pop rdi
   .text:0x000000000000865F        C3                   ret
   .text:0x0000000000008660 _commit:
   .text:0x0000000000008660        894C2408             mov dword ptr [rsp+0x8], ecx
   .text:0x0000000000008664        4883EC38             sub rsp, 0x38
   .text:0x0000000000008668        4863D1               movsxd rdx, ecx
   .text:0x000000000000866B        83FAFE               cmp edx, 0xFFFFFFFE
   .text:0x000000000000866E        750D                 jnz code_0x867D
   .text:0x0000000000008670 code_0x8670:
   .text:0x0000000000008670        E807C3FFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000008675        C70009000000         mov dword ptr [rax], 0x9
   .text:0x000000000000867B        EB6C                 jmp code_0x86E9
   .text:0x000000000000867D code_0x867D:
   .text:0x000000000000867D        85C9                 test ecx, ecx
   .text:0x000000000000867F        7858                 js code_0x86D9
   .text:0x0000000000008681 code_0x8681:
   .text:0x0000000000008681        3B1589CD0000         cmp edx, dword ptr [data_0x15410]
   .text:0x0000000000008687        7350                 jae code_0x86D9
   .text:0x0000000000008689 code_0x8689:
   .text:0x0000000000008689        488BCA               mov rcx, rdx
   .text:0x000000000000868C        4C8D057DC90000       lea r8, [data_0x15010]
   .text:0x0000000000008693        83E13F               and ecx, 0x3F
   .text:0x0000000000008696        488BC2               mov rax, rdx
   .text:0x0000000000008699        48C1F806             sar rax, 0x6
   .text:0x000000000000869D        48C1E106             shl rcx, 0x6
   .text:0x00000000000086A1        498B04C0             mov rax, qword ptr [r8+rax*8]
   .text:0x00000000000086A5        F644083801           test byte ptr [rax+rcx+0x38], 0x1
   .text:0x00000000000086AA        742D                 jz code_0x86D9
   .text:0x00000000000086AC code_0x86AC:
   .text:0x00000000000086AC        488D442440           lea rax, [rsp+0x40]
   .text:0x00000000000086B1        89542450             mov dword ptr [rsp+0x50], edx
   .text:0x00000000000086B5        89542458             mov dword ptr [rsp+0x58], edx
   .text:0x00000000000086B9        4C8D4C2450           lea r9, [rsp+0x50]
   .text:0x00000000000086BE        488D542458           lea rdx, [rsp+0x58]
   .text:0x00000000000086C3        4889442420           mov qword ptr [rsp+0x20], rax
   .text:0x00000000000086C8        4C8D442420           lea r8, [rsp+0x20]
   .text:0x00000000000086CD        488D4C2448           lea rcx, [rsp+0x48]
   .text:0x00000000000086D2        E8FDFEFFFF           call __crt_seh_guarded_call<int>::operator()<class <lambda_a37b2b86f63e897a80ea819b0eb08c01>,class <lambda_38ce7e780aa69e748d6df282ebc68efe> & __ptr64,class <lambda_99fb1378e971ab6e7edea83e3a7a83a2> >; public: int __cdecl( class <lambda_a37b2b86f63e897a80ea819b0eb08c01> && p1, class <lambda_38ce7e780aa69e748d6df282ebc68efe> & p2, class <lambda_99fb1378e971ab6e7edea83e3a7a83a2> && p3 )
   .text:0x00000000000086D7        EB13                 jmp code_0x86EC
   .text:0x00000000000086D9 code_0x86D9:
   .text:0x00000000000086D9        E89EC2FFFF           call _errno; int * __cdecl( void )
   .text:0x00000000000086DE        C70009000000         mov dword ptr [rax], 0x9
   .text:0x00000000000086E4        E807C0FFFF           call _invalid_parameter_noinfo; void __cdecl( void )
   .text:0x00000000000086E9 code_0x86E9:
   .text:0x00000000000086E9        83C8FF               or eax, 0xFFFFFFFF
   .text:0x00000000000086EC code_0x86EC:
   .text:0x00000000000086EC        4883C438             add rsp, 0x38
   .text:0x00000000000086F0        C3                   ret
   .text:0x00000000000086F1 data_0x86F1:
   .text:0x00000000000086F1        db 3 dup(0xCC)
   .text:0x00000000000086F4 write_double_translated_ansi_nolock:
   .text:0x00000000000086F4        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x00000000000086F9        55                   push rbp
   .text:0x00000000000086FA        56                   push rsi
   .text:0x00000000000086FB        57                   push rdi
   .text:0x00000000000086FC        4154                 push r12
   .text:0x00000000000086FE        4155                 push r13
   .text:0x0000000000008700        4156                 push r14
   .text:0x0000000000008702        4157                 push r15
   .text:0x0000000000008704        488BEC               mov rbp, rsp
   .text:0x0000000000008707        4881EC80000000       sub rsp, 0x80
   .text:0x000000000000870E        488B0513B90000       mov rax, qword ptr [__security_cookie]
   .text:0x0000000000008715        4833C4               xor rax, rsp
   .text:0x0000000000008718        488945F0             mov qword ptr [rbp-0x10], rax
   .text:0x000000000000871C        4863F2               movsxd rsi, edx
   .text:0x000000000000871F        488D05EAC80000       lea rax, [data_0x15010]
   .text:0x0000000000008726        4C8BFE               mov r15, rsi
   .text:0x0000000000008729        458BE9               mov r13d, r9d
   .text:0x000000000000872C        49C1FF06             sar r15, 0x6
   .text:0x0000000000008730        83E63F               and esi, 0x3F
   .text:0x0000000000008733        48C1E606             shl rsi, 0x6
   .text:0x0000000000008737        4D8BF0               mov r14, r8
   .text:0x000000000000873A        4C8945D8             mov qword ptr [rbp-0x28], r8
   .text:0x000000000000873E        488BD9               mov rbx, rcx
   .text:0x0000000000008741        4D03E8               add r13, r8
   .text:0x0000000000008744        4A8B04F8             mov rax, qword ptr [rax+r15*8]
   .text:0x0000000000008748        488B443028           mov rax, qword ptr [rax+rsi+0x28]
   .text:0x000000000000874D        488945D0             mov qword ptr [rbp-0x30], rax
   .text:0x0000000000008751        FF15912A0000         call qword ptr [GetConsoleCP]; unsigned int (__cdecl *)( void )
   .text:0x0000000000008757        8945CC               mov dword ptr [rbp-0x34], eax
   .text:0x000000000000875A        498BFE               mov rdi, r14
   .text:0x000000000000875D        33C0                 xor eax, eax
   .text:0x000000000000875F        488903               mov qword ptr [rbx], rax
   .text:0x0000000000008762        894308               mov dword ptr [rbx+0x8], eax
   .text:0x0000000000008765        4D3BF5               cmp r14, r13
   .text:0x0000000000008768        0F8371010000         jae code_0x88DF
   .text:0x000000000000876E code_0x876E:
   .text:0x000000000000876E        4533F6               xor r14d, r14d
   .text:0x0000000000008771 code_0x8771:
   .text:0x0000000000008771        448A27               mov r12b, byte ptr [rdi]
   .text:0x0000000000008774        488D0595C80000       lea rax, [data_0x15010]
   .text:0x000000000000877B        4A8B14F8             mov rdx, qword ptr [rax+r15*8]
   .text:0x000000000000877F        66448975C0           mov word ptr [rbp-0x40], r14w
   .text:0x0000000000008784        8A4C163D             mov cl, byte ptr [rsi+rdx+0x3D]
   .text:0x0000000000008788        F6C104               test cl, 0x4
   .text:0x000000000000878B        741E                 jz code_0x87AB
   .text:0x000000000000878D code_0x878D:
   .text:0x000000000000878D        8A44323E             mov al, byte ptr [rdx+rsi+0x3E]
   .text:0x0000000000008791        80E1FB               and cl, 0xFB
   .text:0x0000000000008794        884C163D             mov byte ptr [rsi+rdx+0x3D], cl
   .text:0x0000000000008798        41B802000000         mov r8d, 0x2
   .text:0x000000000000879E        488D55E0             lea rdx, [rbp-0x20]
   .text:0x00000000000087A2        8845E0               mov byte ptr [rbp-0x20], al
   .text:0x00000000000087A5        448865E1             mov byte ptr [rbp-0x1F], r12b
   .text:0x00000000000087A9        EB48                 jmp code_0x87F3
   .text:0x00000000000087AB code_0x87AB:
   .text:0x00000000000087AB        E898DDFFFF           call __pctype_func; unsigned short * __cdecl( void )
   .text:0x00000000000087B0        0FB60F               movzx ecx, byte ptr [rdi]
   .text:0x00000000000087B3        6644393448           cmp word ptr [rax+rcx*2], r14w
   .text:0x00000000000087B8        7D30                 jge code_0x87EA
   .text:0x00000000000087BA code_0x87BA:
   .text:0x00000000000087BA        4C8D7701             lea r14, [rdi+0x1]
   .text:0x00000000000087BE        4D3BF5               cmp r14, r13
   .text:0x00000000000087C1        0F83F1000000         jae code_0x88B8
   .text:0x00000000000087C7 code_0x87C7:
   .text:0x00000000000087C7        41B802000000         mov r8d, 0x2
   .text:0x00000000000087CD        488D4DC0             lea rcx, [rbp-0x40]
   .text:0x00000000000087D1        488BD7               mov rdx, rdi
   .text:0x00000000000087D4        E803F4FFFF           call mbtowc; int __cdecl( unsigned short * _DstCh, char * _SrcCh, unsigned long long _SrcSizeInBytes )
   .text:0x00000000000087D9        83F8FF               cmp eax, 0xFFFFFFFF
   .text:0x00000000000087DC        0F84FD000000         jz code_0x88DF
   .text:0x00000000000087E2 code_0x87E2:
   .text:0x00000000000087E2        498BFE               mov rdi, r14
   .text:0x00000000000087E5        4533F6               xor r14d, r14d
   .text:0x00000000000087E8        EB1B                 jmp code_0x8805
   .text:0x00000000000087EA code_0x87EA:
   .text:0x00000000000087EA        41B801000000         mov r8d, 0x1
   .text:0x00000000000087F0        488BD7               mov rdx, rdi
   .text:0x00000000000087F3 code_0x87F3:
   .text:0x00000000000087F3        488D4DC0             lea rcx, [rbp-0x40]
   .text:0x00000000000087F7        E8E0F3FFFF           call mbtowc; int __cdecl( unsigned short * _DstCh, char * _SrcCh, unsigned long long _SrcSizeInBytes )
   .text:0x00000000000087FC        83F8FF               cmp eax, 0xFFFFFFFF
   .text:0x00000000000087FF        0F84DA000000         jz code_0x88DF
   .text:0x0000000000008805 code_0x8805:
   .text:0x0000000000008805        8B4DCC               mov ecx, dword ptr [rbp-0x34]
   .text:0x0000000000008808        488D45E8             lea rax, [rbp-0x18]
   .text:0x000000000000880C        4C89742438           mov qword ptr [rsp+0x38], r14
   .text:0x0000000000008811        4C8D45C0             lea r8, [rbp-0x40]
   .text:0x0000000000008815        4C89742430           mov qword ptr [rsp+0x30], r14
   .text:0x000000000000881A        41B901000000         mov r9d, 0x1
   .text:0x0000000000008820        C744242805000000     mov dword ptr [rsp+0x28], 0x5
   .text:0x0000000000008828        33D2                 xor edx, edx
   .text:0x000000000000882A        4889442420           mov qword ptr [rsp+0x20], rax
   .text:0x000000000000882F        48FFC7               inc rdi
   .text:0x0000000000008832        E8A1D2FFFF           call __acrt_WideCharToMultiByte; int32_t __cdecl( int64_t p1, int32_t p2 )
   .text:0x0000000000008837        448BF0               mov r14d, eax
   .text:0x000000000000883A        85C0                 test eax, eax
   .text:0x000000000000883C        0F849D000000         jz code_0x88DF
   .text:0x0000000000008842 code_0x8842:
   .text:0x0000000000008842        488B4DD0             mov rcx, qword ptr [rbp-0x30]
   .text:0x0000000000008846        4C8D4DC8             lea r9, [rbp-0x38]
   .text:0x000000000000884A        488364242000         and qword ptr [rsp+0x20], 0x0
   .text:0x0000000000008850        488D55E8             lea rdx, [rbp-0x18]
   .text:0x0000000000008854        448BC0               mov r8d, eax
   .text:0x0000000000008857        FF15AB280000         call qword ptr [WriteFile]; int (__cdecl *)( void * hFile, void * lpBuffer, unsigned long nNumberOfBytesToWrite, unsigned long * lpNumberOfBytesWritten, struct _OVERLAPPED * lpOverlapped )
   .text:0x000000000000885D        85C0                 test eax, eax
   .text:0x000000000000885F        7476                 jz code_0x88D7
   .text:0x0000000000008861 code_0x8861:
   .text:0x0000000000008861        8B4308               mov eax, dword ptr [rbx+0x8]
   .text:0x0000000000008864        2B45D8               sub eax, dword ptr [rbp-0x28]
   .text:0x0000000000008867        03C7                 add eax, edi
   .text:0x0000000000008869        894304               mov dword ptr [rbx+0x4], eax
   .text:0x000000000000886C        443975C8             cmp dword ptr [rbp-0x38], r14d
   .text:0x0000000000008870        726D                 jb code_0x88DF
   .text:0x0000000000008872 code_0x8872:
   .text:0x0000000000008872        4533F6               xor r14d, r14d
   .text:0x0000000000008875        4180FC0A             cmp r12b, 0xA
   .text:0x0000000000008879        7533                 jnz code_0x88AE
   .text:0x000000000000887B code_0x887B:
   .text:0x000000000000887B        488B4DD0             mov rcx, qword ptr [rbp-0x30]
   .text:0x000000000000887F        418D460D             lea eax, [r14+0xD]
   .text:0x0000000000008883        4C8D4DC8             lea r9, [rbp-0x38]
   .text:0x0000000000008887        668945C4             mov word ptr [rbp-0x3C], ax
   .text:0x000000000000888B        458D4601             lea r8d, [r14+0x1]
   .text:0x000000000000888F        4C89742420           mov qword ptr [rsp+0x20], r14
   .text:0x0000000000008894        488D55C4             lea rdx, [rbp-0x3C]
   .text:0x0000000000008898        FF156A280000         call qword ptr [WriteFile]; int (__cdecl *)( void * hFile, void * lpBuffer, unsigned long nNumberOfBytesToWrite, unsigned long * lpNumberOfBytesWritten, struct _OVERLAPPED * lpOverlapped )
   .text:0x000000000000889E        85C0                 test eax, eax
   .text:0x00000000000088A0        7435                 jz code_0x88D7
   .text:0x00000000000088A2 code_0x88A2:
   .text:0x00000000000088A2        837DC801             cmp dword ptr [rbp-0x38], 0x1
   .text:0x00000000000088A6        7237                 jb code_0x88DF
   .text:0x00000000000088A8 code_0x88A8:
   .text:0x00000000000088A8        FF4308               inc dword ptr [rbx+0x8]
   .text:0x00000000000088AB        FF4304               inc dword ptr [rbx+0x4]
   .text:0x00000000000088AE code_0x88AE:
   .text:0x00000000000088AE        493BFD               cmp rdi, r13
   .text:0x00000000000088B1        732C                 jae code_0x88DF
   .text:0x00000000000088B3 code_0x88B3:
   .text:0x00000000000088B3        E9B9FEFFFF           jmp code_0x8771
   .text:0x00000000000088B8 code_0x88B8:
   .text:0x00000000000088B8        8A07                 mov al, byte ptr [rdi]
   .text:0x00000000000088BA        488D154FC70000       lea rdx, [data_0x15010]
   .text:0x00000000000088C1        4A8B0CFA             mov rcx, qword ptr [rdx+r15*8]
   .text:0x00000000000088C5        8844313E             mov byte ptr [rcx+rsi+0x3E], al
   .text:0x00000000000088C9        4A8B04FA             mov rax, qword ptr [rdx+r15*8]
   .text:0x00000000000088CD        804C303D04           or byte ptr [rax+rsi+0x3D], 0x4
   .text:0x00000000000088D2        FF4304               inc dword ptr [rbx+0x4]
   .text:0x00000000000088D5        EB08                 jmp code_0x88DF
   .text:0x00000000000088D7 code_0x88D7:
   .text:0x00000000000088D7        FF15B3270000         call qword ptr [GetLastError]; unsigned long (__cdecl *)( void )
   .text:0x00000000000088DD        8903                 mov dword ptr [rbx], eax
   .text:0x00000000000088DF code_0x88DF:
   .text:0x00000000000088DF        488BC3               mov rax, rbx
   .text:0x00000000000088E2        488B4DF0             mov rcx, qword ptr [rbp-0x10]
   .text:0x00000000000088E6        4833CC               xor rcx, rsp
   .text:0x00000000000088E9        E8621F0000           call __security_check_cookie; noclobber void __cdecl( uint64_t p1 )
   .text:0x00000000000088EE        488B9C24C0000000     mov rbx, qword ptr [rsp+0xC0]
   .text:0x00000000000088F6        4881C480000000       add rsp, 0x80
   .text:0x00000000000088FD        415F                 pop r15
   .text:0x00000000000088FF        415E                 pop r14
   .text:0x0000000000008901        415D                 pop r13
   .text:0x0000000000008903        415C                 pop r12
   .text:0x0000000000008905        5F                   pop rdi
   .text:0x0000000000008906        5E                   pop rsi
   .text:0x0000000000008907        5D                   pop rbp
   .text:0x0000000000008908        C3                   ret
   .text:0x0000000000008909 data_0x8909:
   .text:0x0000000000008909        db 3 dup(0xCC)
   .text:0x000000000000890C write_text_ansi_nolock:
   .text:0x000000000000890C        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000008911        48896C2418           mov qword ptr [rsp+0x18], rbp
   .text:0x0000000000008916        56                   push rsi
   .text:0x0000000000008917        57                   push rdi
   .text:0x0000000000008918        4156                 push r14
   .text:0x000000000000891A        B850140000           mov eax, 0x1450
   .text:0x000000000000891F        E8DC200000           call _alloca_probe; int64_t __cdecl( void )
   .text:0x0000000000008924        482BE0               sub rsp, rax
   .text:0x0000000000008927        488B05FAB60000       mov rax, qword ptr [__security_cookie]
   .text:0x000000000000892E        4833C4               xor rax, rsp
   .text:0x0000000000008931        4889842440140000     mov qword ptr [rsp+0x1440], rax
   .text:0x0000000000008939        4C63D2               movsxd r10, edx
   .text:0x000000000000893C        488BF9               mov rdi, rcx
   .text:0x000000000000893F        498BC2               mov rax, r10
   .text:0x0000000000008942        418BE9               mov ebp, r9d
   .text:0x0000000000008945        48C1F806             sar rax, 0x6
   .text:0x0000000000008949        488D0DC0C60000       lea rcx, [data_0x15010]
   .text:0x0000000000008950        4183E23F             and r10d, 0x3F
   .text:0x0000000000008954        4903E8               add rbp, r8
   .text:0x0000000000008957        49C1E206             shl r10, 0x6
   .text:0x000000000000895B        498BF0               mov rsi, r8
   .text:0x000000000000895E        488B04C1             mov rax, qword ptr [rcx+rax*8]
   .text:0x0000000000008962        4E8B741028           mov r14, qword ptr [rax+r10+0x28]
   .text:0x0000000000008967        33C0                 xor eax, eax
   .text:0x0000000000008969        488907               mov qword ptr [rdi], rax
   .text:0x000000000000896C        894708               mov dword ptr [rdi+0x8], eax
   .text:0x000000000000896F        4C3BC5               cmp r8, rbp
   .text:0x0000000000008972        736F                 jae code_0x89E3
   .text:0x0000000000008974 code_0x8974:
   .text:0x0000000000008974        488D5C2440           lea rbx, [rsp+0x40]
   .text:0x0000000000008979 code_0x8979:
   .text:0x0000000000008979        483BF5               cmp rsi, rbp
   .text:0x000000000000897C        7324                 jae code_0x89A2
   .text:0x000000000000897E code_0x897E:
   .text:0x000000000000897E        8A06                 mov al, byte ptr [rsi]
   .text:0x0000000000008980        48FFC6               inc rsi
   .text:0x0000000000008983        3C0A                 cmp al, 0xA
   .text:0x0000000000008985        7509                 jnz code_0x8990
   .text:0x0000000000008987 code_0x8987:
   .text:0x0000000000008987        FF4708               inc dword ptr [rdi+0x8]
   .text:0x000000000000898A        C6030D               mov byte ptr [rbx], 0xD
   .text:0x000000000000898D        48FFC3               inc rbx
   .text:0x0000000000008990 code_0x8990:
   .text:0x0000000000008990        8803                 mov byte ptr [rbx], al
   .text:0x0000000000008992        48FFC3               inc rbx
   .text:0x0000000000008995        488D84243F140000     lea rax, [rsp+0x143F]
   .text:0x000000000000899D        483BD8               cmp rbx, rax
   .text:0x00000000000089A0        72D7                 jb code_0x8979
   .text:0x00000000000089A2 code_0x89A2:
   .text:0x00000000000089A2        488364242000         and qword ptr [rsp+0x20], 0x0
   .text:0x00000000000089A8        488D442440           lea rax, [rsp+0x40]
   .text:0x00000000000089AD        2BD8                 sub ebx, eax
   .text:0x00000000000089AF        4C8D4C2430           lea r9, [rsp+0x30]
   .text:0x00000000000089B4        448BC3               mov r8d, ebx
   .text:0x00000000000089B7        488D542440           lea rdx, [rsp+0x40]
   .text:0x00000000000089BC        498BCE               mov rcx, r14
   .text:0x00000000000089BF        FF1543270000         call qword ptr [WriteFile]; int (__cdecl *)( void * hFile, void * lpBuffer, unsigned long nNumberOfBytesToWrite, unsigned long * lpNumberOfBytesWritten, struct _OVERLAPPED * lpOverlapped )
   .text:0x00000000000089C5        85C0                 test eax, eax
   .text:0x00000000000089C7        7412                 jz code_0x89DB
   .text:0x00000000000089C9 code_0x89C9:
   .text:0x00000000000089C9        8B442430             mov eax, dword ptr [rsp+0x30]
   .text:0x00000000000089CD        014704               add dword ptr [rdi+0x4], eax
   .text:0x00000000000089D0        3BC3                 cmp eax, ebx
   .text:0x00000000000089D2        720F                 jb code_0x89E3
   .text:0x00000000000089D4 code_0x89D4:
   .text:0x00000000000089D4        483BF5               cmp rsi, rbp
   .text:0x00000000000089D7        729B                 jb code_0x8974
   .text:0x00000000000089D9 code_0x89D9:
   .text:0x00000000000089D9        EB08                 jmp code_0x89E3
   .text:0x00000000000089DB code_0x89DB:
   .text:0x00000000000089DB        FF15AF260000         call qword ptr [GetLastError]; unsigned long (__cdecl *)( void )
   .text:0x00000000000089E1        8907                 mov dword ptr [rdi], eax
   .text:0x00000000000089E3 code_0x89E3:
   .text:0x00000000000089E3        488BC7               mov rax, rdi
   .text:0x00000000000089E6        488B8C2440140000     mov rcx, qword ptr [rsp+0x1440]
   .text:0x00000000000089EE        4833CC               xor rcx, rsp
   .text:0x00000000000089F1        E85A1E0000           call __security_check_cookie; noclobber void __cdecl( uint64_t p1 )
   .text:0x00000000000089F6        4C8D9C2450140000     lea r11, [rsp+0x1450]
   .text:0x00000000000089FE        498B5B20             mov rbx, qword ptr [r11+0x20]
   .text:0x0000000000008A02        498B6B30             mov rbp, qword ptr [r11+0x30]
   .text:0x0000000000008A06        498BE3               mov rsp, r11
   .text:0x0000000000008A09        415E                 pop r14
   .text:0x0000000000008A0B        5F                   pop rdi
   .text:0x0000000000008A0C        5E                   pop rsi
   .text:0x0000000000008A0D        C3                   ret
   .text:0x0000000000008A0E data_0x8A0E:
   .text:0x0000000000008A0E        db 2 dup(0xCC)
   .text:0x0000000000008A10 write_text_utf16le_nolock:
   .text:0x0000000000008A10        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000008A15        48896C2418           mov qword ptr [rsp+0x18], rbp
   .text:0x0000000000008A1A        56                   push rsi
   .text:0x0000000000008A1B        57                   push rdi
   .text:0x0000000000008A1C        4156                 push r14
   .text:0x0000000000008A1E        B850140000           mov eax, 0x1450
   .text:0x0000000000008A23        E8D81F0000           call _alloca_probe; int64_t __cdecl( void )
   .text:0x0000000000008A28        482BE0               sub rsp, rax
   .text:0x0000000000008A2B        488B05F6B50000       mov rax, qword ptr [__security_cookie]
   .text:0x0000000000008A32        4833C4               xor rax, rsp
   .text:0x0000000000008A35        4889842440140000     mov qword ptr [rsp+0x1440], rax
   .text:0x0000000000008A3D        4C63D2               movsxd r10, edx
   .text:0x0000000000008A40        488BF9               mov rdi, rcx
   .text:0x0000000000008A43        498BC2               mov rax, r10
   .text:0x0000000000008A46        418BE9               mov ebp, r9d
   .text:0x0000000000008A49        48C1F806             sar rax, 0x6
   .text:0x0000000000008A4D        488D0DBCC50000       lea rcx, [data_0x15010]
   .text:0x0000000000008A54        4183E23F             and r10d, 0x3F
   .text:0x0000000000008A58        4903E8               add rbp, r8
   .text:0x0000000000008A5B        49C1E206             shl r10, 0x6
   .text:0x0000000000008A5F        498BF0               mov rsi, r8
   .text:0x0000000000008A62        488B04C1             mov rax, qword ptr [rcx+rax*8]
   .text:0x0000000000008A66        4E8B741028           mov r14, qword ptr [rax+r10+0x28]
   .text:0x0000000000008A6B        33C0                 xor eax, eax
   .text:0x0000000000008A6D        488907               mov qword ptr [rdi], rax
   .text:0x0000000000008A70        894708               mov dword ptr [rdi+0x8], eax
   .text:0x0000000000008A73        4C3BC5               cmp r8, rbp
   .text:0x0000000000008A76        0F8382000000         jae code_0x8AFE
   .text:0x0000000000008A7C code_0x8A7C:
   .text:0x0000000000008A7C        488D5C2440           lea rbx, [rsp+0x40]
   .text:0x0000000000008A81 code_0x8A81:
   .text:0x0000000000008A81        483BF5               cmp rsi, rbp
   .text:0x0000000000008A84        7331                 jae code_0x8AB7
   .text:0x0000000000008A86 code_0x8A86:
   .text:0x0000000000008A86        0FB706               movzx eax, word ptr [rsi]
   .text:0x0000000000008A89        4883C602             add rsi, 0x2
   .text:0x0000000000008A8D        6683F80A             cmp ax, 0xA
   .text:0x0000000000008A91        7510                 jnz code_0x8AA3
   .text:0x0000000000008A93 code_0x8A93:
   .text:0x0000000000008A93        83470802             add dword ptr [rdi+0x8], 0x2
   .text:0x0000000000008A97        B90D000000           mov ecx, 0xD
   .text:0x0000000000008A9C        66890B               mov word ptr [rbx], cx
   .text:0x0000000000008A9F        4883C302             add rbx, 0x2
   .text:0x0000000000008AA3 code_0x8AA3:
   .text:0x0000000000008AA3        668903               mov word ptr [rbx], ax
   .text:0x0000000000008AA6        4883C302             add rbx, 0x2
   .text:0x0000000000008AAA        488D84243E140000     lea rax, [rsp+0x143E]
   .text:0x0000000000008AB2        483BD8               cmp rbx, rax
   .text:0x0000000000008AB5        72CA                 jb code_0x8A81
   .text:0x0000000000008AB7 code_0x8AB7:
   .text:0x0000000000008AB7        488364242000         and qword ptr [rsp+0x20], 0x0
   .text:0x0000000000008ABD        488D442440           lea rax, [rsp+0x40]
   .text:0x0000000000008AC2        482BD8               sub rbx, rax
   .text:0x0000000000008AC5        4C8D4C2430           lea r9, [rsp+0x30]
   .text:0x0000000000008ACA        48D1FB               sar rbx, 1
   .text:0x0000000000008ACD        488D542440           lea rdx, [rsp+0x40]
   .text:0x0000000000008AD2        03DB                 add ebx, ebx
   .text:0x0000000000008AD4        498BCE               mov rcx, r14
   .text:0x0000000000008AD7        448BC3               mov r8d, ebx
   .text:0x0000000000008ADA        FF1528260000         call qword ptr [WriteFile]; int (__cdecl *)( void * hFile, void * lpBuffer, unsigned long nNumberOfBytesToWrite, unsigned long * lpNumberOfBytesWritten, struct _OVERLAPPED * lpOverlapped )
   .text:0x0000000000008AE0        85C0                 test eax, eax
   .text:0x0000000000008AE2        7412                 jz code_0x8AF6
   .text:0x0000000000008AE4 code_0x8AE4:
   .text:0x0000000000008AE4        8B442430             mov eax, dword ptr [rsp+0x30]
   .text:0x0000000000008AE8        014704               add dword ptr [rdi+0x4], eax
   .text:0x0000000000008AEB        3BC3                 cmp eax, ebx
   .text:0x0000000000008AED        720F                 jb code_0x8AFE
   .text:0x0000000000008AEF code_0x8AEF:
   .text:0x0000000000008AEF        483BF5               cmp rsi, rbp
   .text:0x0000000000008AF2        7288                 jb code_0x8A7C
   .text:0x0000000000008AF4 code_0x8AF4:
   .text:0x0000000000008AF4        EB08                 jmp code_0x8AFE
   .text:0x0000000000008AF6 code_0x8AF6:
   .text:0x0000000000008AF6        FF1594250000         call qword ptr [GetLastError]; unsigned long (__cdecl *)( void )
   .text:0x0000000000008AFC        8907                 mov dword ptr [rdi], eax
   .text:0x0000000000008AFE code_0x8AFE:
   .text:0x0000000000008AFE        488BC7               mov rax, rdi
   .text:0x0000000000008B01        488B8C2440140000     mov rcx, qword ptr [rsp+0x1440]
   .text:0x0000000000008B09        4833CC               xor rcx, rsp
   .text:0x0000000000008B0C        E83F1D0000           call __security_check_cookie; noclobber void __cdecl( uint64_t p1 )
   .text:0x0000000000008B11        4C8D9C2450140000     lea r11, [rsp+0x1450]
   .text:0x0000000000008B19        498B5B20             mov rbx, qword ptr [r11+0x20]
   .text:0x0000000000008B1D        498B6B30             mov rbp, qword ptr [r11+0x30]
   .text:0x0000000000008B21        498BE3               mov rsp, r11
   .text:0x0000000000008B24        415E                 pop r14
   .text:0x0000000000008B26        5F                   pop rdi
   .text:0x0000000000008B27        5E                   pop rsi
   .text:0x0000000000008B28        C3                   ret
   .text:0x0000000000008B29 data_0x8B29:
   .text:0x0000000000008B29        db 3 dup(0xCC)
   .text:0x0000000000008B2C write_text_utf8_nolock:
   .text:0x0000000000008B2C        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000008B31        48896C2418           mov qword ptr [rsp+0x18], rbp
   .text:0x0000000000008B36        56                   push rsi
   .text:0x0000000000008B37        57                   push rdi
   .text:0x0000000000008B38        4154                 push r12
   .text:0x0000000000008B3A        4156                 push r14
   .text:0x0000000000008B3C        4157                 push r15
   .text:0x0000000000008B3E        B870140000           mov eax, 0x1470
   .text:0x0000000000008B43        E8B81E0000           call _alloca_probe; int64_t __cdecl( void )
   .text:0x0000000000008B48        482BE0               sub rsp, rax
   .text:0x0000000000008B4B        488B05D6B40000       mov rax, qword ptr [__security_cookie]
   .text:0x0000000000008B52        4833C4               xor rax, rsp
   .text:0x0000000000008B55        4889842460140000     mov qword ptr [rsp+0x1460], rax
   .text:0x0000000000008B5D        4C63D2               movsxd r10, edx
   .text:0x0000000000008B60        488BD9               mov rbx, rcx
   .text:0x0000000000008B63        498BC2               mov rax, r10
   .text:0x0000000000008B66        458BF1               mov r14d, r9d
   .text:0x0000000000008B69        48C1F806             sar rax, 0x6
   .text:0x0000000000008B6D        488D0D9CC40000       lea rcx, [data_0x15010]
   .text:0x0000000000008B74        4183E23F             and r10d, 0x3F
   .text:0x0000000000008B78        4D03F0               add r14, r8
   .text:0x0000000000008B7B        49C1E206             shl r10, 0x6
   .text:0x0000000000008B7F        4D8BF8               mov r15, r8
   .text:0x0000000000008B82        498BF8               mov rdi, r8
   .text:0x0000000000008B85        488B04C1             mov rax, qword ptr [rcx+rax*8]
   .text:0x0000000000008B89        4E8B641028           mov r12, qword ptr [rax+r10+0x28]
   .text:0x0000000000008B8E        33C0                 xor eax, eax
   .text:0x0000000000008B90        488903               mov qword ptr [rbx], rax
   .text:0x0000000000008B93        4D3BC6               cmp r8, r14
   .text:0x0000000000008B96        894308               mov dword ptr [rbx+0x8], eax
   .text:0x0000000000008B99 code_0x8B99:
   .text:0x0000000000008B99        0F83CE000000         jae code_0x8C6D
   .text:0x0000000000008B9F code_0x8B9F:
   .text:0x0000000000008B9F        488D442450           lea rax, [rsp+0x50]
   .text:0x0000000000008BA4 code_0x8BA4:
   .text:0x0000000000008BA4        493BFE               cmp rdi, r14
   .text:0x0000000000008BA7        732D                 jae code_0x8BD6
   .text:0x0000000000008BA9 code_0x8BA9:
   .text:0x0000000000008BA9        0FB70F               movzx ecx, word ptr [rdi]
   .text:0x0000000000008BAC        4883C702             add rdi, 0x2
   .text:0x0000000000008BB0        6683F90A             cmp cx, 0xA
   .text:0x0000000000008BB4        750C                 jnz code_0x8BC2
   .text:0x0000000000008BB6 code_0x8BB6:
   .text:0x0000000000008BB6        BA0D000000           mov edx, 0xD
   .text:0x0000000000008BBB        668910               mov word ptr [rax], dx
   .text:0x0000000000008BBE        4883C002             add rax, 0x2
   .text:0x0000000000008BC2 code_0x8BC2:
   .text:0x0000000000008BC2        668908               mov word ptr [rax], cx
   .text:0x0000000000008BC5        4883C002             add rax, 0x2
   .text:0x0000000000008BC9        488D8C24F8060000     lea rcx, [rsp+0x6F8]
   .text:0x0000000000008BD1        483BC1               cmp rax, rcx
   .text:0x0000000000008BD4        72CE                 jb code_0x8BA4
   .text:0x0000000000008BD6 code_0x8BD6:
   .text:0x0000000000008BD6        488364243800         and qword ptr [rsp+0x38], 0x0
   .text:0x0000000000008BDC        488D4C2450           lea rcx, [rsp+0x50]
   .text:0x0000000000008BE1        488364243000         and qword ptr [rsp+0x30], 0x0
   .text:0x0000000000008BE7        4C8D442450           lea r8, [rsp+0x50]
   .text:0x0000000000008BEC        482BC1               sub rax, rcx
   .text:0x0000000000008BEF        C7442428550D0000     mov dword ptr [rsp+0x28], 0xD55
   .text:0x0000000000008BF7        488D8C2400070000     lea rcx, [rsp+0x700]
   .text:0x0000000000008BFF        48D1F8               sar rax, 1
   .text:0x0000000000008C02        48894C2420           mov qword ptr [rsp+0x20], rcx
   .text:0x0000000000008C07        448BC8               mov r9d, eax
   .text:0x0000000000008C0A        B9E9FD0000           mov ecx, 0xFDE9
   .text:0x0000000000008C0F        33D2                 xor edx, edx
   .text:0x0000000000008C11        E8C2CEFFFF           call __acrt_WideCharToMultiByte; int32_t __cdecl( int64_t p1, int32_t p2 )
   .text:0x0000000000008C16        8BE8                 mov ebp, eax
   .text:0x0000000000008C18        85C0                 test eax, eax
   .text:0x0000000000008C1A        7449                 jz code_0x8C65
   .text:0x0000000000008C1C code_0x8C1C:
   .text:0x0000000000008C1C        33F6                 xor esi, esi
   .text:0x0000000000008C1E        85C0                 test eax, eax
   .text:0x0000000000008C20        7433                 jz code_0x8C55
   .text:0x0000000000008C22 code_0x8C22:
   .text:0x0000000000008C22        488364242000         and qword ptr [rsp+0x20], 0x0
   .text:0x0000000000008C28        488D942400070000     lea rdx, [rsp+0x700]
   .text:0x0000000000008C30        8BCE                 mov ecx, esi
   .text:0x0000000000008C32        4C8D4C2440           lea r9, [rsp+0x40]
   .text:0x0000000000008C37        448BC5               mov r8d, ebp
   .text:0x0000000000008C3A        4803D1               add rdx, rcx
   .text:0x0000000000008C3D        498BCC               mov rcx, r12
   .text:0x0000000000008C40        442BC6               sub r8d, esi
   .text:0x0000000000008C43        FF15BF240000         call qword ptr [WriteFile]; int (__cdecl *)( void * hFile, void * lpBuffer, unsigned long nNumberOfBytesToWrite, unsigned long * lpNumberOfBytesWritten, struct _OVERLAPPED * lpOverlapped )
   .text:0x0000000000008C49        85C0                 test eax, eax
   .text:0x0000000000008C4B        7418                 jz code_0x8C65
   .text:0x0000000000008C4D code_0x8C4D:
   .text:0x0000000000008C4D        03742440             add esi, dword ptr [rsp+0x40]
   .text:0x0000000000008C51        3BF5                 cmp esi, ebp
   .text:0x0000000000008C53        72CD                 jb code_0x8C22
   .text:0x0000000000008C55 code_0x8C55:
   .text:0x0000000000008C55        8BC7                 mov eax, edi
   .text:0x0000000000008C57        412BC7               sub eax, r15d
   .text:0x0000000000008C5A        894304               mov dword ptr [rbx+0x4], eax
   .text:0x0000000000008C5D        493BFE               cmp rdi, r14
   .text:0x0000000000008C60        E934FFFFFF           jmp code_0x8B99
   .text:0x0000000000008C65 code_0x8C65:
   .text:0x0000000000008C65        FF1525240000         call qword ptr [GetLastError]; unsigned long (__cdecl *)( void )
   .text:0x0000000000008C6B        8903                 mov dword ptr [rbx], eax
   .text:0x0000000000008C6D code_0x8C6D:
   .text:0x0000000000008C6D        488BC3               mov rax, rbx
   .text:0x0000000000008C70        488B8C2460140000     mov rcx, qword ptr [rsp+0x1460]
   .text:0x0000000000008C78        4833CC               xor rcx, rsp
   .text:0x0000000000008C7B        E8D01B0000           call __security_check_cookie; noclobber void __cdecl( uint64_t p1 )
   .text:0x0000000000008C80        4C8D9C2470140000     lea r11, [rsp+0x1470]
   .text:0x0000000000008C88        498B5B30             mov rbx, qword ptr [r11+0x30]
   .text:0x0000000000008C8C        498B6B40             mov rbp, qword ptr [r11+0x40]
   .text:0x0000000000008C90        498BE3               mov rsp, r11
   .text:0x0000000000008C93        415F                 pop r15
   .text:0x0000000000008C95        415E                 pop r14
   .text:0x0000000000008C97        415C                 pop r12
   .text:0x0000000000008C99        5F                   pop rdi
   .text:0x0000000000008C9A        5E                   pop rsi
   .text:0x0000000000008C9B        C3                   ret
   .text:0x0000000000008C9C _write:
   .text:0x0000000000008C9C        48895C2410           mov qword ptr [rsp+0x10], rbx
   .text:0x0000000000008CA1        4889742418           mov qword ptr [rsp+0x18], rsi
   .text:0x0000000000008CA6        894C2408             mov dword ptr [rsp+0x8], ecx
   .text:0x0000000000008CAA        57                   push rdi
   .text:0x0000000000008CAB        4154                 push r12
   .text:0x0000000000008CAD        4155                 push r13
   .text:0x0000000000008CAF        4156                 push r14
   .text:0x0000000000008CB1        4157                 push r15
   .text:0x0000000000008CB3        4883EC20             sub rsp, 0x20
   .text:0x0000000000008CB7        458BF8               mov r15d, r8d
   .text:0x0000000000008CBA        4C8BE2               mov r12, rdx
   .text:0x0000000000008CBD        4863D9               movsxd rbx, ecx
   .text:0x0000000000008CC0        83FBFE               cmp ebx, 0xFFFFFFFE
   .text:0x0000000000008CC3        7518                 jnz code_0x8CDD
   .text:0x0000000000008CC5 code_0x8CC5:
   .text:0x0000000000008CC5        E892BCFFFF           call __doserrno; unsigned long * __cdecl( void )
   .text:0x0000000000008CCA        832000               and dword ptr [rax], 0x0
   .text:0x0000000000008CCD        E8AABCFFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000008CD2        C70009000000         mov dword ptr [rax], 0x9
   .text:0x0000000000008CD8        E98D000000           jmp code_0x8D6A
   .text:0x0000000000008CDD code_0x8CDD:
   .text:0x0000000000008CDD        85C9                 test ecx, ecx
   .text:0x0000000000008CDF        7871                 js code_0x8D52
   .text:0x0000000000008CE1 code_0x8CE1:
   .text:0x0000000000008CE1        3B1D29C70000         cmp ebx, dword ptr [data_0x15410]
   .text:0x0000000000008CE7        7369                 jae code_0x8D52
   .text:0x0000000000008CE9 code_0x8CE9:
   .text:0x0000000000008CE9        488BF3               mov rsi, rbx
   .text:0x0000000000008CEC        4C8BF3               mov r14, rbx
   .text:0x0000000000008CEF        49C1FE06             sar r14, 0x6
   .text:0x0000000000008CF3        4C8D2D16C30000       lea r13, [data_0x15010]
   .text:0x0000000000008CFA        83E63F               and esi, 0x3F
   .text:0x0000000000008CFD        48C1E606             shl rsi, 0x6
   .text:0x0000000000008D01        4B8B44F500           mov rax, qword ptr [r13+r14*8+0x0]
   .text:0x0000000000008D06        F644063801           test byte ptr [rsi+rax+0x38], 0x1
   .text:0x0000000000008D0B        7445                 jz code_0x8D52
   .text:0x0000000000008D0D code_0x8D0D:
   .text:0x0000000000008D0D        8BCB                 mov ecx, ebx
   .text:0x0000000000008D0F        E880D1FFFF           call __acrt_lowio_lock_fh; void __cdecl( int32_t p1 )
   .text:0x0000000000008D14        83CFFF               or edi, 0xFFFFFFFF
   .text:0x0000000000008D17        4B8B44F500           mov rax, qword ptr [r13+r14*8+0x0]
   .text:0x0000000000008D1C        F644063801           test byte ptr [rsi+rax+0x38], 0x1
   .text:0x0000000000008D21        7515                 jnz code_0x8D38
   .text:0x0000000000008D23 code_0x8D23:
   .text:0x0000000000008D23        E854BCFFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000008D28        C70009000000         mov dword ptr [rax], 0x9
   .text:0x0000000000008D2E        E829BCFFFF           call __doserrno; unsigned long * __cdecl( void )
   .text:0x0000000000008D33        832000               and dword ptr [rax], 0x0
   .text:0x0000000000008D36        EB0F                 jmp code_0x8D47
   .text:0x0000000000008D38 code_0x8D38:
   .text:0x0000000000008D38        458BC7               mov r8d, r15d
   .text:0x0000000000008D3B        498BD4               mov rdx, r12
   .text:0x0000000000008D3E        8BCB                 mov ecx, ebx
   .text:0x0000000000008D40        E843000000           call _write_nolock; int32_t __cdecl( int32_t p1, int64_t p2, int32_t p3 )
   .text:0x0000000000008D45        8BF8                 mov edi, eax
   .text:0x0000000000008D47 code_0x8D47:
   .text:0x0000000000008D47        8BCB                 mov ecx, ebx
   .text:0x0000000000008D49        E86AD1FFFF           call func_0x5EB8; void __cdecl( int32_t p1 )
   .text:0x0000000000008D4E        8BC7                 mov eax, edi
   .text:0x0000000000008D50        EB1B                 jmp code_0x8D6D
   .text:0x0000000000008D52 code_0x8D52:
   .text:0x0000000000008D52        E805BCFFFF           call __doserrno; unsigned long * __cdecl( void )
   .text:0x0000000000008D57        832000               and dword ptr [rax], 0x0
   .text:0x0000000000008D5A        E81DBCFFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000008D5F        C70009000000         mov dword ptr [rax], 0x9
   .text:0x0000000000008D65        E886B9FFFF           call _invalid_parameter_noinfo; void __cdecl( void )
   .text:0x0000000000008D6A code_0x8D6A:
   .text:0x0000000000008D6A        83C8FF               or eax, 0xFFFFFFFF
   .text:0x0000000000008D6D code_0x8D6D:
   .text:0x0000000000008D6D        488B5C2458           mov rbx, qword ptr [rsp+0x58]
   .text:0x0000000000008D72        488B742460           mov rsi, qword ptr [rsp+0x60]
   .text:0x0000000000008D77        4883C420             add rsp, 0x20
   .text:0x0000000000008D7B        415F                 pop r15
   .text:0x0000000000008D7D        415E                 pop r14
   .text:0x0000000000008D7F        415D                 pop r13
   .text:0x0000000000008D81        415C                 pop r12
   .text:0x0000000000008D83        5F                   pop rdi
   .text:0x0000000000008D84        C3                   ret
   .text:0x0000000000008D85 data_0x8D85:
   .text:0x0000000000008D85        db 3 dup(0xCC)
   .text:0x0000000000008D88 _write_nolock:
   .text:0x0000000000008D88        48895C2420           mov qword ptr [rsp+0x20], rbx
   .text:0x0000000000008D8D        55                   push rbp
   .text:0x0000000000008D8E        56                   push rsi
   .text:0x0000000000008D8F        57                   push rdi
   .text:0x0000000000008D90        4154                 push r12
   .text:0x0000000000008D92        4155                 push r13
   .text:0x0000000000008D94        4156                 push r14
   .text:0x0000000000008D96        4157                 push r15
   .text:0x0000000000008D98        488BEC               mov rbp, rsp
   .text:0x0000000000008D9B        4883EC60             sub rsp, 0x60
   .text:0x0000000000008D9F        458BF8               mov r15d, r8d
   .text:0x0000000000008DA2        488BF2               mov rsi, rdx
   .text:0x0000000000008DA5        4C63E1               movsxd r12, ecx
   .text:0x0000000000008DA8        4585C0               test r8d, r8d
   .text:0x0000000000008DAB        7507                 jnz code_0x8DB4
   .text:0x0000000000008DAD code_0x8DAD:
   .text:0x0000000000008DAD        33C0                 xor eax, eax
   .text:0x0000000000008DAF        E99C020000           jmp code_0x9050
   .text:0x0000000000008DB4 code_0x8DB4:
   .text:0x0000000000008DB4        4885F6               test rsi, rsi
   .text:0x0000000000008DB7        7520                 jnz code_0x8DD9
   .text:0x0000000000008DB9 code_0x8DB9:
   .text:0x0000000000008DB9        E89EBBFFFF           call __doserrno; unsigned long * __cdecl( void )
   .text:0x0000000000008DBE        832000               and dword ptr [rax], 0x0
   .text:0x0000000000008DC1        E8B6BBFFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000008DC6        C70016000000         mov dword ptr [rax], 0x16
   .text:0x0000000000008DCC        E81FB9FFFF           call _invalid_parameter_noinfo; void __cdecl( void )
   .text:0x0000000000008DD1 code_0x8DD1:
   .text:0x0000000000008DD1        83C8FF               or eax, 0xFFFFFFFF
   .text:0x0000000000008DD4        E977020000           jmp code_0x9050
   .text:0x0000000000008DD9 code_0x8DD9:
   .text:0x0000000000008DD9        498BFC               mov rdi, r12
   .text:0x0000000000008DDC        488D052DC20000       lea rax, [data_0x15010]
   .text:0x0000000000008DE3        83E73F               and edi, 0x3F
   .text:0x0000000000008DE6        4D8BEC               mov r13, r12
   .text:0x0000000000008DE9        49C1FD06             sar r13, 0x6
   .text:0x0000000000008DED        48C1E706             shl rdi, 0x6
   .text:0x0000000000008DF1        4A8B0CE8             mov rcx, qword ptr [rax+r13*8]
   .text:0x0000000000008DF5        448A740F39           mov r14b, byte ptr [rdi+rcx+0x39]
   .text:0x0000000000008DFA        418D46FF             lea eax, [r14-0x1]
   .text:0x0000000000008DFE        3C01                 cmp al, 0x1
   .text:0x0000000000008E00        7709                 ja code_0x8E0B
   .text:0x0000000000008E02 code_0x8E02:
   .text:0x0000000000008E02        418BC7               mov eax, r15d
   .text:0x0000000000008E05        F7D0                 not eax
   .text:0x0000000000008E07        A801                 test al, 0x1
   .text:0x0000000000008E09        74AE                 jz code_0x8DB9
   .text:0x0000000000008E0B code_0x8E0B:
   .text:0x0000000000008E0B        F6440F3820           test byte ptr [rdi+rcx+0x38], 0x20
   .text:0x0000000000008E10        740E                 jz code_0x8E20
   .text:0x0000000000008E12 code_0x8E12:
   .text:0x0000000000008E12        33D2                 xor edx, edx
   .text:0x0000000000008E14        418BCC               mov ecx, r12d
   .text:0x0000000000008E17        448D4202             lea r8d, [rdx+0x2]
   .text:0x0000000000008E1B        E8CC040000           call common_lseek_nolock<__int64>_1; __int64 __cdecl( int p1, __int64 p2, int p3 )
   .text:0x0000000000008E20 code_0x8E20:
   .text:0x0000000000008E20        33DB                 xor ebx, ebx
   .text:0x0000000000008E22        418BCC               mov ecx, r12d
   .text:0x0000000000008E25        48895DE0             mov qword ptr [rbp-0x20], rbx
   .text:0x0000000000008E29        E82E030000           call _isatty; int32_t __cdecl( int32_t p1 )
   .text:0x0000000000008E2E        85C0                 test eax, eax
   .text:0x0000000000008E30        0F8408010000         jz code_0x8F3E
   .text:0x0000000000008E36 code_0x8E36:
   .text:0x0000000000008E36        488D05D3C10000       lea rax, [data_0x15010]
   .text:0x0000000000008E3D        4A8B04E8             mov rax, qword ptr [rax+r13*8]
   .text:0x0000000000008E41        385C0738             cmp byte ptr [rdi+rax+0x38], bl
   .text:0x0000000000008E45        0F8DF3000000         jge code_0x8F3E
   .text:0x0000000000008E4B code_0x8E4B:
   .text:0x0000000000008E4B        E808B4FFFF           call func_0x4258; int64_t __cdecl( void )
   .text:0x0000000000008E50        488B8890000000       mov rcx, qword ptr [rax+0x90]
   .text:0x0000000000008E57        48399938010000       cmp qword ptr [rcx+0x138], rbx
   .text:0x0000000000008E5E        7515                 jnz code_0x8E75
   .text:0x0000000000008E60 code_0x8E60:
   .text:0x0000000000008E60        488D05A9C10000       lea rax, [data_0x15010]
   .text:0x0000000000008E67        4A8B04E8             mov rax, qword ptr [rax+r13*8]
   .text:0x0000000000008E6B        385C0739             cmp byte ptr [rdi+rax+0x39], bl
   .text:0x0000000000008E6F        0F84C9000000         jz code_0x8F3E
   .text:0x0000000000008E75 code_0x8E75:
   .text:0x0000000000008E75        488D0594C10000       lea rax, [data_0x15010]
   .text:0x0000000000008E7C        4A8B0CE8             mov rcx, qword ptr [rax+r13*8]
   .text:0x0000000000008E80        488D55F0             lea rdx, [rbp-0x10]
   .text:0x0000000000008E84        488B4C0F28           mov rcx, qword ptr [rdi+rcx+0x28]
   .text:0x0000000000008E89        FF1561230000         call qword ptr [GetConsoleMode]; int (__cdecl *)( void * hConsoleHandle, unsigned long * lpMode )
   .text:0x0000000000008E8F        85C0                 test eax, eax
   .text:0x0000000000008E91        0F84A7000000         jz code_0x8F3E
   .text:0x0000000000008E97 code_0x8E97:
   .text:0x0000000000008E97        4584F6               test r14b, r14b
   .text:0x0000000000008E9A        0F8480000000         jz code_0x8F20
   .text:0x0000000000008EA0 code_0x8EA0:
   .text:0x0000000000008EA0        41FECE               dec r14b
   .text:0x0000000000008EA3        4180FE01             cmp r14b, 0x1
   .text:0x0000000000008EA7        0F872E010000         ja code_0x8FDB
   .text:0x0000000000008EAD code_0x8EAD:
   .text:0x0000000000008EAD        4533F6               xor r14d, r14d
   .text:0x0000000000008EB0        4E8D243E             lea r12, [rsi+r15]
   .text:0x0000000000008EB4        4C8975D0             mov qword ptr [rbp-0x30], r14
   .text:0x0000000000008EB8        4C8BFE               mov r15, rsi
   .text:0x0000000000008EBB        493BF4               cmp rsi, r12
   .text:0x0000000000008EBE        7358                 jae code_0x8F18
   .text:0x0000000000008EC0 code_0x8EC0:
   .text:0x0000000000008EC0        8B5DD4               mov ebx, dword ptr [rbp-0x2C]
   .text:0x0000000000008EC3 code_0x8EC3:
   .text:0x0000000000008EC3        410FB707             movzx eax, word ptr [r15]
   .text:0x0000000000008EC7        0FB7C8               movzx ecx, ax
   .text:0x0000000000008ECA        668945F0             mov word ptr [rbp-0x10], ax
   .text:0x0000000000008ECE        E821040000           call _putwch_nolock; unsigned short __cdecl( unsigned short _Character )
   .text:0x0000000000008ED3        0FB74DF0             movzx ecx, word ptr [rbp-0x10]
   .text:0x0000000000008ED7        663BC1               cmp ax, cx
   .text:0x0000000000008EDA        7533                 jnz code_0x8F0F
   .text:0x0000000000008EDC code_0x8EDC:
   .text:0x0000000000008EDC        83C302               add ebx, 0x2
   .text:0x0000000000008EDF        895DD4               mov dword ptr [rbp-0x2C], ebx
   .text:0x0000000000008EE2        6683F90A             cmp cx, 0xA
   .text:0x0000000000008EE6        751C                 jnz code_0x8F04
   .text:0x0000000000008EE8 code_0x8EE8:
   .text:0x0000000000008EE8        B90D000000           mov ecx, 0xD
   .text:0x0000000000008EED        E802040000           call _putwch_nolock; unsigned short __cdecl( unsigned short _Character )
   .text:0x0000000000008EF2        B90D000000           mov ecx, 0xD
   .text:0x0000000000008EF7        663BC1               cmp ax, cx
   .text:0x0000000000008EFA        7513                 jnz code_0x8F0F
   .text:0x0000000000008EFC code_0x8EFC:
   .text:0x0000000000008EFC        FFC3                 inc ebx
   .text:0x0000000000008EFE        895DD4               mov dword ptr [rbp-0x2C], ebx
   .text:0x0000000000008F01        41FFC6               inc r14d
   .text:0x0000000000008F04 code_0x8F04:
   .text:0x0000000000008F04        4983C702             add r15, 0x2
   .text:0x0000000000008F08        4D3BFC               cmp r15, r12
   .text:0x0000000000008F0B        730B                 jae code_0x8F18
   .text:0x0000000000008F0D code_0x8F0D:
   .text:0x0000000000008F0D        EBB4                 jmp code_0x8EC3
   .text:0x0000000000008F0F code_0x8F0F:
   .text:0x0000000000008F0F        FF157B210000         call qword ptr [GetLastError]; unsigned long (__cdecl *)( void )
   .text:0x0000000000008F15        8945D0               mov dword ptr [rbp-0x30], eax
   .text:0x0000000000008F18 code_0x8F18:
   .text:0x0000000000008F18        418BDE               mov ebx, r14d
   .text:0x0000000000008F1B        E9B1000000           jmp code_0x8FD1
   .text:0x0000000000008F20 code_0x8F20:
   .text:0x0000000000008F20        458BCF               mov r9d, r15d
   .text:0x0000000000008F23        488D4DD0             lea rcx, [rbp-0x30]
   .text:0x0000000000008F27        4C8BC6               mov r8, rsi
   .text:0x0000000000008F2A        418BD4               mov edx, r12d
   .text:0x0000000000008F2D        E8C2F7FFFF           call write_double_translated_ansi_nolock; uint64_t __cdecl( int p1, const char * p2, unsigned int p3 )
   .text:0x0000000000008F32 code_0x8F32:
   .text:0x0000000000008F32        F20F1000             movsd xmm0, qword ptr [rax]
   .text:0x0000000000008F36        8B5808               mov ebx, dword ptr [rax+0x8]
   .text:0x0000000000008F39        E998000000           jmp code_0x8FD6
   .text:0x0000000000008F3E code_0x8F3E:
   .text:0x0000000000008F3E        488D05CBC00000       lea rax, [data_0x15010]
   .text:0x0000000000008F45        4A8B0CE8             mov rcx, qword ptr [rax+r13*8]
   .text:0x0000000000008F49        385C0F38             cmp byte ptr [rdi+rcx+0x38], bl
   .text:0x0000000000008F4D        7D4F                 jge code_0x8F9E
   .text:0x0000000000008F4F code_0x8F4F:
   .text:0x0000000000008F4F        410FBECE             movsx ecx, r14b
   .text:0x0000000000008F53        4584F6               test r14b, r14b
   .text:0x0000000000008F56        7432                 jz code_0x8F8A
   .text:0x0000000000008F58 code_0x8F58:
   .text:0x0000000000008F58        83E901               sub ecx, 0x1
   .text:0x0000000000008F5B        7419                 jz code_0x8F76
   .text:0x0000000000008F5D code_0x8F5D:
   .text:0x0000000000008F5D        83F901               cmp ecx, 0x1
   .text:0x0000000000008F60        7579                 jnz code_0x8FDB
   .text:0x0000000000008F62 code_0x8F62:
   .text:0x0000000000008F62        458BCF               mov r9d, r15d
   .text:0x0000000000008F65        488D4DD0             lea rcx, [rbp-0x30]
   .text:0x0000000000008F69        4C8BC6               mov r8, rsi
   .text:0x0000000000008F6C        418BD4               mov edx, r12d
   .text:0x0000000000008F6F        E89CFAFFFF           call write_text_utf16le_nolock; uint64_t __cdecl( int p1, const char * p2, unsigned int p3 )
   .text:0x0000000000008F74        EBBC                 jmp code_0x8F32
   .text:0x0000000000008F76 code_0x8F76:
   .text:0x0000000000008F76        458BCF               mov r9d, r15d
   .text:0x0000000000008F79        488D4DD0             lea rcx, [rbp-0x30]
   .text:0x0000000000008F7D        4C8BC6               mov r8, rsi
   .text:0x0000000000008F80        418BD4               mov edx, r12d
   .text:0x0000000000008F83        E8A4FBFFFF           call write_text_utf8_nolock; uint64_t __cdecl( int p1, const char * p2, unsigned int p3 )
   .text:0x0000000000008F88        EBA8                 jmp code_0x8F32
   .text:0x0000000000008F8A code_0x8F8A:
   .text:0x0000000000008F8A        458BCF               mov r9d, r15d
   .text:0x0000000000008F8D        488D4DD0             lea rcx, [rbp-0x30]
   .text:0x0000000000008F91        4C8BC6               mov r8, rsi
   .text:0x0000000000008F94        418BD4               mov edx, r12d
   .text:0x0000000000008F97        E870F9FFFF           call write_text_ansi_nolock; uint64_t __cdecl( int p1, const char * p2, unsigned int p3 )
   .text:0x0000000000008F9C        EB94                 jmp code_0x8F32
   .text:0x0000000000008F9E code_0x8F9E:
   .text:0x0000000000008F9E        488B4C0F28           mov rcx, qword ptr [rdi+rcx+0x28]
   .text:0x0000000000008FA3        4C8D4DD4             lea r9, [rbp-0x2C]
   .text:0x0000000000008FA7        33C0                 xor eax, eax
   .text:0x0000000000008FA9        458BC7               mov r8d, r15d
   .text:0x0000000000008FAC        4821442420           and qword ptr [rsp+0x20], rax
   .text:0x0000000000008FB1        488BD6               mov rdx, rsi
   .text:0x0000000000008FB4        488945D0             mov qword ptr [rbp-0x30], rax
   .text:0x0000000000008FB8        8945D8               mov dword ptr [rbp-0x28], eax
   .text:0x0000000000008FBB        FF1547210000         call qword ptr [WriteFile]; int (__cdecl *)( void * hFile, void * lpBuffer, unsigned long nNumberOfBytesToWrite, unsigned long * lpNumberOfBytesWritten, struct _OVERLAPPED * lpOverlapped )
   .text:0x0000000000008FC1        85C0                 test eax, eax
   .text:0x0000000000008FC3        7509                 jnz code_0x8FCE
   .text:0x0000000000008FC5 code_0x8FC5:
   .text:0x0000000000008FC5        FF15C5200000         call qword ptr [GetLastError]; unsigned long (__cdecl *)( void )
   .text:0x0000000000008FCB        8945D0               mov dword ptr [rbp-0x30], eax
   .text:0x0000000000008FCE code_0x8FCE:
   .text:0x0000000000008FCE        8B5DD8               mov ebx, dword ptr [rbp-0x28]
   .text:0x0000000000008FD1 code_0x8FD1:
   .text:0x0000000000008FD1        F20F1045D0           movsd xmm0, qword ptr [rbp-0x30]
   .text:0x0000000000008FD6 code_0x8FD6:
   .text:0x0000000000008FD6        F20F1145E0           movsd qword ptr [rbp-0x20], xmm0
   .text:0x0000000000008FDB code_0x8FDB:
   .text:0x0000000000008FDB        488B45E0             mov rax, qword ptr [rbp-0x20]
   .text:0x0000000000008FDF        48C1E820             shr rax, 0x20
   .text:0x0000000000008FE3        85C0                 test eax, eax
   .text:0x0000000000008FE5        7564                 jnz code_0x904B
   .text:0x0000000000008FE7 code_0x8FE7:
   .text:0x0000000000008FE7        8B4DE0               mov ecx, dword ptr [rbp-0x20]
   .text:0x0000000000008FEA        85C9                 test ecx, ecx
   .text:0x0000000000008FEC        742A                 jz code_0x9018
   .text:0x0000000000008FEE code_0x8FEE:
   .text:0x0000000000008FEE        83F905               cmp ecx, 0x5
   .text:0x0000000000008FF1        751B                 jnz code_0x900E
   .text:0x0000000000008FF3 code_0x8FF3:
   .text:0x0000000000008FF3        E884B9FFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000008FF8        C70009000000         mov dword ptr [rax], 0x9
   .text:0x0000000000008FFE        E859B9FFFF           call __doserrno; unsigned long * __cdecl( void )
   .text:0x0000000000009003        C70005000000         mov dword ptr [rax], 0x5
   .text:0x0000000000009009        E9C3FDFFFF           jmp code_0x8DD1
   .text:0x000000000000900E code_0x900E:
   .text:0x000000000000900E        E8F9B8FFFF           call __acrt_errno_map_os_error; void __cdecl( int32_t p1 )
   .text:0x0000000000009013        E9B9FDFFFF           jmp code_0x8DD1
   .text:0x0000000000009018 code_0x9018:
   .text:0x0000000000009018        488D05F1BF0000       lea rax, [data_0x15010]
   .text:0x000000000000901F        4A8B04E8             mov rax, qword ptr [rax+r13*8]
   .text:0x0000000000009023        F644073840           test byte ptr [rdi+rax+0x38], 0x40
   .text:0x0000000000009028        7409                 jz code_0x9033
   .text:0x000000000000902A code_0x902A:
   .text:0x000000000000902A        803E1A               cmp byte ptr [rsi], 0x1A
   .text:0x000000000000902D        0F847AFDFFFF         jz code_0x8DAD
   .text:0x0000000000009033 code_0x9033:
   .text:0x0000000000009033        E844B9FFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000009038        C7001C000000         mov dword ptr [rax], 0x1C
   .text:0x000000000000903E        E819B9FFFF           call __doserrno; unsigned long * __cdecl( void )
   .text:0x0000000000009043        832000               and dword ptr [rax], 0x0
   .text:0x0000000000009046        E986FDFFFF           jmp code_0x8DD1
   .text:0x000000000000904B code_0x904B:
   .text:0x000000000000904B        8B45E4               mov eax, dword ptr [rbp-0x1C]
   .text:0x000000000000904E        2BC3                 sub eax, ebx
   .text:0x0000000000009050 code_0x9050:
   .text:0x0000000000009050        488B9C24B8000000     mov rbx, qword ptr [rsp+0xB8]
   .text:0x0000000000009058        4883C460             add rsp, 0x60
   .text:0x000000000000905C        415F                 pop r15
   .text:0x000000000000905E        415E                 pop r14
   .text:0x0000000000009060        415D                 pop r13
   .text:0x0000000000009062        415C                 pop r12
   .text:0x0000000000009064        5F                   pop rdi
   .text:0x0000000000009065        5E                   pop rsi
   .text:0x0000000000009066        5D                   pop rbp
   .text:0x0000000000009067        C3                   ret
   .text:0x0000000000009068 _fcloseall:
   .text:0x0000000000009068        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x000000000000906D        57                   push rdi
   .text:0x000000000000906E        4883EC30             sub rsp, 0x30
   .text:0x0000000000009072        8364242000           and dword ptr [rsp+0x20], 0x0
   .text:0x0000000000009077        B908000000           mov ecx, 0x8
   .text:0x000000000000907C        E8D7CBFFFF           call __acrt_lock; void __cdecl( int32_t p1 )
   .text:0x0000000000009081        90                   nop
   .text:0x0000000000009082        BB03000000           mov ebx, 0x3
   .text:0x0000000000009087 code_0x9087:
   .text:0x0000000000009087        895C2424             mov dword ptr [rsp+0x24], ebx
   .text:0x000000000000908B        3B1D77C50000         cmp ebx, dword ptr [data_0x15608]
   .text:0x0000000000009091        746D                 jz code_0x9100
   .text:0x0000000000009093 code_0x9093:
   .text:0x0000000000009093        4863FB               movsxd rdi, ebx
   .text:0x0000000000009096        488B0573C50000       mov rax, qword ptr [data_0x15610]
   .text:0x000000000000909D        488B0CF8             mov rcx, qword ptr [rax+rdi*8]
   .text:0x00000000000090A1        4885C9               test rcx, rcx
   .text:0x00000000000090A4        7502                 jnz code_0x90A8
   .text:0x00000000000090A6 code_0x90A6:
   .text:0x00000000000090A6        EB54                 jmp code_0x90FC
   .text:0x00000000000090A8 code_0x90A8:
   .text:0x00000000000090A8        8B4114               mov eax, dword ptr [rcx+0x14]
   .text:0x00000000000090AB        C1E80D               shr eax, 0xD
   .text:0x00000000000090AE        A801                 test al, 0x1
   .text:0x00000000000090B0        7419                 jz code_0x90CB
   .text:0x00000000000090B2 code_0x90B2:
   .text:0x00000000000090B2        488B0D57C50000       mov rcx, qword ptr [data_0x15610]
   .text:0x00000000000090B9        488B0CF9             mov rcx, qword ptr [rcx+rdi*8]
   .text:0x00000000000090BD        E8F2020000           call fclose; int __cdecl( struct _iobuf * _Stream )
   .text:0x00000000000090C2        83F8FF               cmp eax, 0xFFFFFFFF
   .text:0x00000000000090C5        7404                 jz code_0x90CB
   .text:0x00000000000090C7 code_0x90C7:
   .text:0x00000000000090C7        FF442420             inc dword ptr [rsp+0x20]
   .text:0x00000000000090CB code_0x90CB:
   .text:0x00000000000090CB        488B053EC50000       mov rax, qword ptr [data_0x15610]
   .text:0x00000000000090D2        488B0CF8             mov rcx, qword ptr [rax+rdi*8]
   .text:0x00000000000090D6        4883C130             add rcx, 0x30
   .text:0x00000000000090DA        FF15D01F0000         call qword ptr [DeleteCriticalSection]; void (__cdecl *)( struct _RTL_CRITICAL_SECTION * lpCriticalSection )
   .text:0x00000000000090E0        488B0D29C50000       mov rcx, qword ptr [data_0x15610]
   .text:0x00000000000090E7        488B0CF9             mov rcx, qword ptr [rcx+rdi*8]
   .text:0x00000000000090EB        E824B9FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x00000000000090F0        488B0519C50000       mov rax, qword ptr [data_0x15610]
   .text:0x00000000000090F7        488324F800           and qword ptr [rax+rdi*8], 0x0
   .text:0x00000000000090FC code_0x90FC:
   .text:0x00000000000090FC        FFC3                 inc ebx
   .text:0x00000000000090FE        EB87                 jmp code_0x9087
   .text:0x0000000000009100 code_0x9100:
   .text:0x0000000000009100        B908000000           mov ecx, 0x8
   .text:0x0000000000009105        E8A2CBFFFF           call func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x000000000000910A        8B442420             mov eax, dword ptr [rsp+0x20]
   .text:0x000000000000910E        488B5C2440           mov rbx, qword ptr [rsp+0x40]
   .text:0x0000000000009113        4883C430             add rsp, 0x30
   .text:0x0000000000009117        5F                   pop rdi
   .text:0x0000000000009118        C3                   ret
   .text:0x0000000000009119 data_0x9119:
   .text:0x0000000000009119        db 3 dup(0xCC)
   .text:0x000000000000911C __acrt_stdio_free_buffer_nolock:
   .text:0x000000000000911C        4053                 push rbx
   .text:0x000000000000911E        4883EC20             sub rsp, 0x20
   .text:0x0000000000009122        488BD9               mov rbx, rcx
   .text:0x0000000000009125        8B4114               mov eax, dword ptr [rcx+0x14]
   .text:0x0000000000009128        C1E80D               shr eax, 0xD
   .text:0x000000000000912B        A801                 test al, 0x1
   .text:0x000000000000912D        7427                 jz code_0x9156
   .text:0x000000000000912F code_0x912F:
   .text:0x000000000000912F        8B4114               mov eax, dword ptr [rcx+0x14]
   .text:0x0000000000009132        C1E806               shr eax, 0x6
   .text:0x0000000000009135        A801                 test al, 0x1
   .text:0x0000000000009137        741D                 jz code_0x9156
   .text:0x0000000000009139 code_0x9139:
   .text:0x0000000000009139        488B4908             mov rcx, qword ptr [rcx+0x8]
   .text:0x000000000000913D        E8D2B8FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000009142        F0816314BFFEFFFF     lock and dword ptr [rbx+0x14], 0xFFFFFEBF
   .text:0x000000000000914A        33C0                 xor eax, eax
   .text:0x000000000000914C        48894308             mov qword ptr [rbx+0x8], rax
   .text:0x0000000000009150        488903               mov qword ptr [rbx], rax
   .text:0x0000000000009153        894310               mov dword ptr [rbx+0x10], eax
   .text:0x0000000000009156 code_0x9156:
   .text:0x0000000000009156        4883C420             add rsp, 0x20
   .text:0x000000000000915A        5B                   pop rbx
   .text:0x000000000000915B        C3                   ret
   .text:0x000000000000915C _isatty:
   .text:0x000000000000915C        4883EC28             sub rsp, 0x28
   .text:0x0000000000009160        83F9FE               cmp ecx, 0xFFFFFFFE
   .text:0x0000000000009163        750D                 jnz code_0x9172
   .text:0x0000000000009165 code_0x9165:
   .text:0x0000000000009165        E812B8FFFF           call _errno; int * __cdecl( void )
   .text:0x000000000000916A        C70009000000         mov dword ptr [rax], 0x9
   .text:0x0000000000009170        EB42                 jmp code_0x91B4
   .text:0x0000000000009172 code_0x9172:
   .text:0x0000000000009172        85C9                 test ecx, ecx
   .text:0x0000000000009174        782E                 js code_0x91A4
   .text:0x0000000000009176 code_0x9176:
   .text:0x0000000000009176        3B0D94C20000         cmp ecx, dword ptr [data_0x15410]
   .text:0x000000000000917C        7326                 jae code_0x91A4
   .text:0x000000000000917E code_0x917E:
   .text:0x000000000000917E        4863C9               movsxd rcx, ecx
   .text:0x0000000000009181        488D1588BE0000       lea rdx, [data_0x15010]
   .text:0x0000000000009188        488BC1               mov rax, rcx
   .text:0x000000000000918B        83E13F               and ecx, 0x3F
   .text:0x000000000000918E        48C1F806             sar rax, 0x6
   .text:0x0000000000009192        48C1E106             shl rcx, 0x6
   .text:0x0000000000009196        488B04C2             mov rax, qword ptr [rdx+rax*8]
   .text:0x000000000000919A        0FB6440838           movzx eax, byte ptr [rax+rcx+0x38]
   .text:0x000000000000919F        83E040               and eax, 0x40
   .text:0x00000000000091A2        EB12                 jmp code_0x91B6
   .text:0x00000000000091A4 code_0x91A4:
   .text:0x00000000000091A4        E8D3B7FFFF           call _errno; int * __cdecl( void )
   .text:0x00000000000091A9        C70009000000         mov dword ptr [rax], 0x9
   .text:0x00000000000091AF        E83CB5FFFF           call _invalid_parameter_noinfo; void __cdecl( void )
   .text:0x00000000000091B4 code_0x91B4:
   .text:0x00000000000091B4        33C0                 xor eax, eax
   .text:0x00000000000091B6 code_0x91B6:
   .text:0x00000000000091B6        4883C428             add rsp, 0x28
   .text:0x00000000000091BA        C3                   ret
   .text:0x00000000000091BB code_0x91BB:
   .text:0x00000000000091BB        CC                   int3
   .text:0x00000000000091BC _isleadbyte_l:
   .text:0x00000000000091BC        4053                 push rbx
   .text:0x00000000000091BE        4883EC40             sub rsp, 0x40
   .text:0x00000000000091C2        8BD9                 mov ebx, ecx
   .text:0x00000000000091C4        488D4C2420           lea rcx, [rsp+0x20]
   .text:0x00000000000091C9        E8E2ABFFFF           call _LocaleUpdate::_LocaleUpdate; public: void __cdecl( const struct __crt_locale_pointers * p1 )
   .text:0x00000000000091CE        488B442428           mov rax, qword ptr [rsp+0x28]
   .text:0x00000000000091D3        0FB6D3               movzx edx, bl
   .text:0x00000000000091D6        488B08               mov rcx, qword ptr [rax]
   .text:0x00000000000091D9        0FB70451             movzx eax, word ptr [rcx+rdx*2]
   .text:0x00000000000091DD        2500800000           and eax, 0x8000
   .text:0x00000000000091E2        807C243800           cmp byte ptr [rsp+0x38], 0x0
   .text:0x00000000000091E7        740C                 jz code_0x91F5
   .text:0x00000000000091E9 code_0x91E9:
   .text:0x00000000000091E9        488B4C2420           mov rcx, qword ptr [rsp+0x20]
   .text:0x00000000000091EE        83A1A8030000FD       and dword ptr [rcx+0x3A8], 0xFFFFFFFD
   .text:0x00000000000091F5 code_0x91F5:
   .text:0x00000000000091F5        4883C440             add rsp, 0x40
   .text:0x00000000000091F9        5B                   pop rbx
   .text:0x00000000000091FA        C3                   ret
   .text:0x00000000000091FB code_0x91FB:
   .text:0x00000000000091FB        CC                   int3
   .text:0x00000000000091FC __crt_mbstring::__mbrtowc_utf8:
   .text:0x00000000000091FC        4053                 push rbx
   .text:0x00000000000091FE        4883EC30             sub rsp, 0x30
   .text:0x0000000000009202        488BD9               mov rbx, rcx
   .text:0x0000000000009205        488D4C2420           lea rcx, [rsp+0x20]
   .text:0x000000000000920A        E809020000           call __crt_mbstring::__mbrtoc32_utf8; unsigned __int64 __cdecl( char32_t * p1, char * p2, unsigned __int64 p3, struct _Mbstatet * p4 )
   .text:0x000000000000920F        4883F804             cmp rax, 0x4
   .text:0x0000000000009213        771A                 ja code_0x922F
   .text:0x0000000000009215 code_0x9215:
   .text:0x0000000000009215        8B542420             mov edx, dword ptr [rsp+0x20]
   .text:0x0000000000009219        B9FDFF0000           mov ecx, 0xFFFD
   .text:0x000000000000921E        81FAFFFF0000         cmp edx, 0xFFFF
   .text:0x0000000000009224        0F47D1               cmova edx, ecx
   .text:0x0000000000009227        4885DB               test rbx, rbx
   .text:0x000000000000922A        7403                 jz code_0x922F
   .text:0x000000000000922C code_0x922C:
   .text:0x000000000000922C        668913               mov word ptr [rbx], dx
   .text:0x000000000000922F code_0x922F:
   .text:0x000000000000922F        4883C430             add rsp, 0x30
   .text:0x0000000000009233        5B                   pop rbx
   .text:0x0000000000009234        C3                   ret
   .text:0x0000000000009235 data_0x9235:
   .text:0x0000000000009235        db 3 dup(0xCC)
   .text:0x0000000000009238 __strncnt:
   .text:0x0000000000009238        33C0                 xor eax, eax
   .text:0x000000000000923A        3801                 cmp byte ptr [rcx], al
   .text:0x000000000000923C        740E                 jz code_0x924C
   .text:0x000000000000923E code_0x923E:
   .text:0x000000000000923E        483BC2               cmp rax, rdx
   .text:0x0000000000009241        7409                 jz code_0x924C
   .text:0x0000000000009243 code_0x9243:
   .text:0x0000000000009243        48FFC0               inc rax
   .text:0x0000000000009246        803C0800             cmp byte ptr [rax+rcx], 0x0
   .text:0x000000000000924A        75F2                 jnz code_0x923E
   .text:0x000000000000924C code_0x924C:
   .text:0x000000000000924C        C3                   ret
   .text:0x000000000000924D data_0x924D:
   .text:0x000000000000924D        db 3 dup(0xCC)
   .text:0x0000000000009250 common_lseek_nolock<__int64>:
   .text:0x0000000000009250        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000009255        4889742410           mov qword ptr [rsp+0x10], rsi
   .text:0x000000000000925A        57                   push rdi
   .text:0x000000000000925B        4883EC20             sub rsp, 0x20
   .text:0x000000000000925F        4863D9               movsxd rbx, ecx
   .text:0x0000000000009262        418BF8               mov edi, r8d
   .text:0x0000000000009265        8BCB                 mov ecx, ebx
   .text:0x0000000000009267        488BF2               mov rsi, rdx
   .text:0x000000000000926A        E829CDFFFF           call _get_osfhandle; int64_t __cdecl( int32_t p1 )
   .text:0x000000000000926F        4883F8FF             cmp rax, 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000009273        7511                 jnz code_0x9286
   .text:0x0000000000009275 code_0x9275:
   .text:0x0000000000009275        E802B7FFFF           call _errno; int * __cdecl( void )
   .text:0x000000000000927A        C70009000000         mov dword ptr [rax], 0x9
   .text:0x0000000000009280 code_0x9280:
   .text:0x0000000000009280        4883C8FF             or rax, 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000009284        EB53                 jmp code_0x92D9
   .text:0x0000000000009286 code_0x9286:
   .text:0x0000000000009286        448BCF               mov r9d, edi
   .text:0x0000000000009289        4C8D442448           lea r8, [rsp+0x48]
   .text:0x000000000000928E        488BD6               mov rdx, rsi
   .text:0x0000000000009291        488BC8               mov rcx, rax
   .text:0x0000000000009294        FF155E1F0000         call qword ptr [SetFilePointerEx]; int (__cdecl *)( void * hFile, union _LARGE_INTEGER liDistanceToMove, union _LARGE_INTEGER * lpNewFilePointer, unsigned long dwMoveMethod )
   .text:0x000000000000929A        85C0                 test eax, eax
   .text:0x000000000000929C        750F                 jnz code_0x92AD
   .text:0x000000000000929E code_0x929E:
   .text:0x000000000000929E        FF15EC1D0000         call qword ptr [GetLastError]; unsigned long (__cdecl *)( void )
   .text:0x00000000000092A4        8BC8                 mov ecx, eax
   .text:0x00000000000092A6        E861B6FFFF           call __acrt_errno_map_os_error; void __cdecl( int32_t p1 )
   .text:0x00000000000092AB        EBD3                 jmp code_0x9280
   .text:0x00000000000092AD code_0x92AD:
   .text:0x00000000000092AD        488B442448           mov rax, qword ptr [rsp+0x48]
   .text:0x00000000000092B2        4883F8FF             cmp rax, 0xFFFFFFFFFFFFFFFF
   .text:0x00000000000092B6        74C8                 jz code_0x9280
   .text:0x00000000000092B8 code_0x92B8:
   .text:0x00000000000092B8        488BD3               mov rdx, rbx
   .text:0x00000000000092BB        4C8D054EBD0000       lea r8, [data_0x15010]
   .text:0x00000000000092C2        83E23F               and edx, 0x3F
   .text:0x00000000000092C5        488BCB               mov rcx, rbx
   .text:0x00000000000092C8        48C1F906             sar rcx, 0x6
   .text:0x00000000000092CC        48C1E206             shl rdx, 0x6
   .text:0x00000000000092D0        498B0CC8             mov rcx, qword ptr [r8+rcx*8]
   .text:0x00000000000092D4        80641138FD           and byte ptr [rcx+rdx+0x38], 0xFD
   .text:0x00000000000092D9 code_0x92D9:
   .text:0x00000000000092D9        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x00000000000092DE        488B742438           mov rsi, qword ptr [rsp+0x38]
   .text:0x00000000000092E3        4883C420             add rsp, 0x20
   .text:0x00000000000092E7        5F                   pop rdi
   .text:0x00000000000092E8        C3                   ret
   .text:0x00000000000092E9 data_0x92E9:
   .text:0x00000000000092E9        db 3 dup(0xCC)
   .text:0x00000000000092EC common_lseek_nolock<__int64>_1:
   .text:0x00000000000092EC        E95FFFFFFF           jmp common_lseek_nolock<__int64>; __int64 __cdecl( int p1, __int64 p2, int p3 )
   .text:0x00000000000092F1 data_0x92F1:
   .text:0x00000000000092F1        db 3 dup(0xCC)
   .text:0x00000000000092F4 _putwch_nolock:
   .text:0x00000000000092F4        66894C2408           mov word ptr [rsp+0x8], cx
   .text:0x00000000000092F9        4883EC28             sub rsp, 0x28
   .text:0x00000000000092FD        E8AA080000           call __dcrt_lowio_ensure_console_output_initialized; int32_t __cdecl( void )
   .text:0x0000000000009302        85C0                 test eax, eax
   .text:0x0000000000009304        7507                 jnz code_0x930D
   .text:0x0000000000009306 code_0x9306:
   .text:0x0000000000009306        B8FFFF0000           mov eax, 0xFFFF
   .text:0x000000000000930B        EB1D                 jmp code_0x932A
   .text:0x000000000000930D code_0x930D:
   .text:0x000000000000930D        4C8D442438           lea r8, [rsp+0x38]
   .text:0x0000000000009312        BA01000000           mov edx, 0x1
   .text:0x0000000000009317        488D4C2430           lea rcx, [rsp+0x30]
   .text:0x000000000000931C        E8FB080000           call __dcrt_write_console; int32_t __cdecl( int64_t p1, int32_t p2, int64_t p3 )
   .text:0x0000000000009321        85C0                 test eax, eax
   .text:0x0000000000009323        74E1                 jz code_0x9306
   .text:0x0000000000009325 code_0x9325:
   .text:0x0000000000009325        0FB7442430           movzx eax, word ptr [rsp+0x30]
   .text:0x000000000000932A code_0x932A:
   .text:0x000000000000932A        4883C428             add rsp, 0x28
   .text:0x000000000000932E        C3                   ret
   .text:0x000000000000932F code_0x932F:
   .text:0x000000000000932F        CC                   int3
   .text:0x0000000000009330 _fclose_nolock:
   .text:0x0000000000009330        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000009335        57                   push rdi
   .text:0x0000000000009336        4883EC20             sub rsp, 0x20
   .text:0x000000000000933A        488BD9               mov rbx, rcx
   .text:0x000000000000933D        4885C9               test rcx, rcx
   .text:0x0000000000009340        7515                 jnz code_0x9357
   .text:0x0000000000009342 code_0x9342:
   .text:0x0000000000009342        E835B6FFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000009347        C70016000000         mov dword ptr [rax], 0x16
   .text:0x000000000000934D        E89EB3FFFF           call _invalid_parameter_noinfo; void __cdecl( void )
   .text:0x0000000000009352        83C8FF               or eax, 0xFFFFFFFF
   .text:0x0000000000009355        EB51                 jmp code_0x93A8
   .text:0x0000000000009357 code_0x9357:
   .text:0x0000000000009357        83CFFF               or edi, 0xFFFFFFFF
   .text:0x000000000000935A        8B4114               mov eax, dword ptr [rcx+0x14]
   .text:0x000000000000935D        C1E80D               shr eax, 0xD
   .text:0x0000000000009360        A801                 test al, 0x1
   .text:0x0000000000009362        743A                 jz code_0x939E
   .text:0x0000000000009364 code_0x9364:
   .text:0x0000000000009364        E893E4FFFF           call __acrt_stdio_flush_nolock; int32_t __cdecl( int64_t p1 )
   .text:0x0000000000009369        488BCB               mov rcx, rbx
   .text:0x000000000000936C        8BF8                 mov edi, eax
   .text:0x000000000000936E        E8A9FDFFFF           call __acrt_stdio_free_buffer_nolock; void __cdecl( int64_t p1 )
   .text:0x0000000000009373        488BCB               mov rcx, rbx
   .text:0x0000000000009376        E8D1E8FFFF           call _fileno; int __cdecl( struct _iobuf * _Stream )
   .text:0x000000000000937B        8BC8                 mov ecx, eax
   .text:0x000000000000937D        E8CE090000           call _close; int32_t __cdecl( int32_t p1 )
   .text:0x0000000000009382        85C0                 test eax, eax
   .text:0x0000000000009384        7905                 jns code_0x938B
   .text:0x0000000000009386 code_0x9386:
   .text:0x0000000000009386        83CFFF               or edi, 0xFFFFFFFF
   .text:0x0000000000009389        EB13                 jmp code_0x939E
   .text:0x000000000000938B code_0x938B:
   .text:0x000000000000938B        488B4B28             mov rcx, qword ptr [rbx+0x28]
   .text:0x000000000000938F        4885C9               test rcx, rcx
   .text:0x0000000000009392        740A                 jz code_0x939E
   .text:0x0000000000009394 code_0x9394:
   .text:0x0000000000009394        E87BB6FFFF           call _free_base; void __cdecl( void * _Block )
   .text:0x0000000000009399        4883632800           and qword ptr [rbx+0x28], 0x0
   .text:0x000000000000939E code_0x939E:
   .text:0x000000000000939E        488BCB               mov rcx, rbx
   .text:0x00000000000093A1        E80A0B0000           call __acrt_stdio_free_stream; void __cdecl( uint64_t p1 )
   .text:0x00000000000093A6        8BC7                 mov eax, edi
   .text:0x00000000000093A8 code_0x93A8:
   .text:0x00000000000093A8        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x00000000000093AD        4883C420             add rsp, 0x20
   .text:0x00000000000093B1        5F                   pop rdi
   .text:0x00000000000093B2        C3                   ret
   .text:0x00000000000093B3 code_0x93B3:
   .text:0x00000000000093B3        CC                   int3
   .text:0x00000000000093B4 fclose:
   .text:0x00000000000093B4        48895C2410           mov qword ptr [rsp+0x10], rbx
   .text:0x00000000000093B9        48894C2408           mov qword ptr [rsp+0x8], rcx
   .text:0x00000000000093BE        57                   push rdi
   .text:0x00000000000093BF        4883EC20             sub rsp, 0x20
   .text:0x00000000000093C3        488BD9               mov rbx, rcx
   .text:0x00000000000093C6        4885C9               test rcx, rcx
   .text:0x00000000000093C9        7515                 jnz code_0x93E0
   .text:0x00000000000093CB code_0x93CB:
   .text:0x00000000000093CB        E8ACB5FFFF           call _errno; int * __cdecl( void )
   .text:0x00000000000093D0        C70016000000         mov dword ptr [rax], 0x16
   .text:0x00000000000093D6        E815B3FFFF           call _invalid_parameter_noinfo; void __cdecl( void )
   .text:0x00000000000093DB code_0x93DB:
   .text:0x00000000000093DB        83C8FF               or eax, 0xFFFFFFFF
   .text:0x00000000000093DE        EB2B                 jmp code_0x940B
   .text:0x00000000000093E0 code_0x93E0:
   .text:0x00000000000093E0        8B4114               mov eax, dword ptr [rcx+0x14]
   .text:0x00000000000093E3        C1E80C               shr eax, 0xC
   .text:0x00000000000093E6        A801                 test al, 0x1
   .text:0x00000000000093E8        7407                 jz code_0x93F1
   .text:0x00000000000093EA code_0x93EA:
   .text:0x00000000000093EA        E8C10A0000           call __acrt_stdio_free_stream; void __cdecl( uint64_t p1 )
   .text:0x00000000000093EF        EBEA                 jmp code_0x93DB
   .text:0x00000000000093F1 code_0x93F1:
   .text:0x00000000000093F1        E852E6FFFF           call func_0x7A48; void __cdecl( int64_t p1 )
   .text:0x00000000000093F6        90                   nop
   .text:0x00000000000093F7        488BCB               mov rcx, rbx
   .text:0x00000000000093FA        E831FFFFFF           call _fclose_nolock; int __cdecl( struct _iobuf * _Stream )
   .text:0x00000000000093FF        8BF8                 mov edi, eax
   .text:0x0000000000009401        488BCB               mov rcx, rbx
   .text:0x0000000000009404        E84BE6FFFF           call func_0x7A54; void __cdecl( int64_t p1 )
   .text:0x0000000000009409        8BC7                 mov eax, edi
   .text:0x000000000000940B code_0x940B:
   .text:0x000000000000940B        488B5C2438           mov rbx, qword ptr [rsp+0x38]
   .text:0x0000000000009410        4883C420             add rsp, 0x20
   .text:0x0000000000009414        5F                   pop rdi
   .text:0x0000000000009415        C3                   ret
   .text:0x0000000000009416 data_0x9416:
   .text:0x0000000000009416        db 2 dup(0xCC)
   .text:0x0000000000009418 __crt_mbstring::__mbrtoc32_utf8:
   .text:0x0000000000009418        48895C2410           mov qword ptr [rsp+0x10], rbx
   .text:0x000000000000941D        55                   push rbp
   .text:0x000000000000941E        56                   push rsi
   .text:0x000000000000941F        57                   push rdi
   .text:0x0000000000009420        4156                 push r14
   .text:0x0000000000009422        4157                 push r15
   .text:0x0000000000009424        4883EC40             sub rsp, 0x40
   .text:0x0000000000009428        488B05F9AB0000       mov rax, qword ptr [__security_cookie]
   .text:0x000000000000942F        4833C4               xor rax, rsp
   .text:0x0000000000009432        4889442430           mov qword ptr [rsp+0x30], rax
   .text:0x0000000000009437        4533DB               xor r11d, r11d
   .text:0x000000000000943A        4C8D15EFC10000       lea r10, [data_0x15630]
   .text:0x0000000000009441        4D85C9               test r9, r9
   .text:0x0000000000009444        488D3D59730000       lea rdi, [data_0x107A4]
   .text:0x000000000000944B        488BC2               mov rax, rdx
   .text:0x000000000000944E        4C8BFA               mov r15, rdx
   .text:0x0000000000009451        4D0F45D1             cmovne r10, r9
   .text:0x0000000000009455        4885D2               test rdx, rdx
   .text:0x0000000000009458        418D6B01             lea ebp, [r11+0x1]
   .text:0x000000000000945C        480F45FA             cmovne rdi, rdx
   .text:0x0000000000009460        448BF5               mov r14d, ebp
   .text:0x0000000000009463        4D0F45F0             cmovne r14, r8
   .text:0x0000000000009467        48F7D8               neg rax
   .text:0x000000000000946A        481BF6               sbb rsi, rsi
   .text:0x000000000000946D        4823F1               and rsi, rcx
   .text:0x0000000000009470        4D85F6               test r14, r14
   .text:0x0000000000009473        750C                 jnz code_0x9481
   .text:0x0000000000009475 code_0x9475:
   .text:0x0000000000009475        48C7C0FEFFFFFF       mov rax, 0xFFFFFFFFFFFFFFFE
   .text:0x000000000000947C        E954010000           jmp code_0x95D5
   .text:0x0000000000009481 code_0x9481:
   .text:0x0000000000009481        450FB74206           movzx r8d, word ptr [r10+0x6]
   .text:0x0000000000009486        664585C0             test r8w, r8w
   .text:0x000000000000948A        7565                 jnz code_0x94F1
   .text:0x000000000000948C code_0x948C:
   .text:0x000000000000948C        8A1F                 mov bl, byte ptr [rdi]
   .text:0x000000000000948E        48FFC7               inc rdi
   .text:0x0000000000009491        84DB                 test bl, bl
   .text:0x0000000000009493        7818                 js code_0x94AD
   .text:0x0000000000009495 code_0x9495:
   .text:0x0000000000009495        4885F6               test rsi, rsi
   .text:0x0000000000009498        7405                 jz code_0x949F
   .text:0x000000000000949A code_0x949A:
   .text:0x000000000000949A        0FB6CB               movzx ecx, bl
   .text:0x000000000000949D        890E                 mov dword ptr [rsi], ecx
   .text:0x000000000000949F code_0x949F:
   .text:0x000000000000949F        84DB                 test bl, bl
   .text:0x00000000000094A1        410F95C3             setne r11b
   .text:0x00000000000094A5        498BC3               mov rax, r11
   .text:0x00000000000094A8        E928010000           jmp code_0x95D5
   .text:0x00000000000094AD code_0x94AD:
   .text:0x00000000000094AD        8AC3                 mov al, bl
   .text:0x00000000000094AF        24E0                 and al, 0xE0
   .text:0x00000000000094B1        3CC0                 cmp al, 0xC0
   .text:0x00000000000094B3        7505                 jnz code_0x94BA
   .text:0x00000000000094B5 code_0x94B5:
   .text:0x00000000000094B5        41B102               mov r9b, 0x2
   .text:0x00000000000094B8        EB1C                 jmp code_0x94D6
   .text:0x00000000000094BA code_0x94BA:
   .text:0x00000000000094BA        8AC3                 mov al, bl
   .text:0x00000000000094BC        24F0                 and al, 0xF0
   .text:0x00000000000094BE        3CE0                 cmp al, 0xE0
   .text:0x00000000000094C0        7505                 jnz code_0x94C7
   .text:0x00000000000094C2 code_0x94C2:
   .text:0x00000000000094C2        41B103               mov r9b, 0x3
   .text:0x00000000000094C5        EB0F                 jmp code_0x94D6
   .text:0x00000000000094C7 code_0x94C7:
   .text:0x00000000000094C7        8AC3                 mov al, bl
   .text:0x00000000000094C9        24F8                 and al, 0xF8
   .text:0x00000000000094CB        3CF0                 cmp al, 0xF0
   .text:0x00000000000094CD        0F85EE000000         jnz code_0x95C1
   .text:0x00000000000094D3 code_0x94D3:
   .text:0x00000000000094D3        41B104               mov r9b, 0x4
   .text:0x00000000000094D6 code_0x94D6:
   .text:0x00000000000094D6        410FB6C1             movzx eax, r9b
   .text:0x00000000000094DA        B907000000           mov ecx, 0x7
   .text:0x00000000000094DF        2BC8                 sub ecx, eax
   .text:0x00000000000094E1        8BD5                 mov edx, ebp
   .text:0x00000000000094E3        D3E2                 shl edx, cl
   .text:0x00000000000094E5        458AC1               mov r8b, r9b
   .text:0x00000000000094E8        2BD5                 sub edx, ebp
   .text:0x00000000000094EA        0FB6C3               movzx eax, bl
   .text:0x00000000000094ED        23D0                 and edx, eax
   .text:0x00000000000094EF        EB25                 jmp code_0x9516
   .text:0x00000000000094F1 code_0x94F1:
   .text:0x00000000000094F1        458A4A04             mov r9b, byte ptr [r10+0x4]
   .text:0x00000000000094F5        418B12               mov edx, dword ptr [r10]
   .text:0x00000000000094F8        418D41FE             lea eax, [r9-0x2]
   .text:0x00000000000094FC        3C02                 cmp al, 0x2
   .text:0x00000000000094FE        0F87BD000000         ja code_0x95C1
   .text:0x0000000000009504 code_0x9504:
   .text:0x0000000000009504        443AC5               cmp r8b, bpl
   .text:0x0000000000009507        0F82B4000000         jb code_0x95C1
   .text:0x000000000000950D code_0x950D:
   .text:0x000000000000950D        453AC1               cmp r8b, r9b
   .text:0x0000000000009510        0F83AB000000         jae code_0x95C1
   .text:0x0000000000009516 code_0x9516:
   .text:0x0000000000009516        410FB6E8             movzx ebp, r8b
   .text:0x000000000000951A        493BEE               cmp rbp, r14
   .text:0x000000000000951D        8BDD                 mov ebx, ebp
   .text:0x000000000000951F        490F43DE             cmovae rbx, r14
   .text:0x0000000000009523        EB20                 jmp code_0x9545
   .text:0x0000000000009525 code_0x9525:
   .text:0x0000000000009525        8A0F                 mov cl, byte ptr [rdi]
   .text:0x0000000000009527        48FFC7               inc rdi
   .text:0x000000000000952A        8AC1                 mov al, cl
   .text:0x000000000000952C        24C0                 and al, 0xC0
   .text:0x000000000000952E        3C80                 cmp al, 0x80
   .text:0x0000000000009530        0F858B000000         jnz code_0x95C1
   .text:0x0000000000009536 code_0x9536:
   .text:0x0000000000009536        8BC2                 mov eax, edx
   .text:0x0000000000009538        0FB6C9               movzx ecx, cl
   .text:0x000000000000953B        83E13F               and ecx, 0x3F
   .text:0x000000000000953E        C1E006               shl eax, 0x6
   .text:0x0000000000009541        8BD1                 mov edx, ecx
   .text:0x0000000000009543        0BD0                 or edx, eax
   .text:0x0000000000009545 code_0x9545:
   .text:0x0000000000009545        488BC7               mov rax, rdi
   .text:0x0000000000009548        492BC7               sub rax, r15
   .text:0x000000000000954B        483BC3               cmp rax, rbx
   .text:0x000000000000954E        72D5                 jb code_0x9525
   .text:0x0000000000009550 code_0x9550:
   .text:0x0000000000009550        483BDD               cmp rbx, rbp
   .text:0x0000000000009553        731D                 jae code_0x9572
   .text:0x0000000000009555 code_0x9555:
   .text:0x0000000000009555        410FB6C1             movzx eax, r9b
   .text:0x0000000000009559        442AC3               sub r8b, bl
   .text:0x000000000000955C        6641894204           mov word ptr [r10+0x4], ax
   .text:0x0000000000009561        410FB6C0             movzx eax, r8b
   .text:0x0000000000009565        6641894206           mov word ptr [r10+0x6], ax
   .text:0x000000000000956A        418912               mov dword ptr [r10], edx
   .text:0x000000000000956D        E903FFFFFF           jmp code_0x9475
   .text:0x0000000000009572 code_0x9572:
   .text:0x0000000000009572        8D820028FFFF         lea eax, [rdx-0xD800]
   .text:0x0000000000009578        3DFF070000           cmp eax, 0x7FF
   .text:0x000000000000957D        7642                 jbe code_0x95C1
   .text:0x000000000000957F code_0x957F:
   .text:0x000000000000957F        81FA00001100         cmp edx, 0x110000
   .text:0x0000000000009585        733A                 jae code_0x95C1
   .text:0x0000000000009587 code_0x9587:
   .text:0x0000000000009587        410FB6C1             movzx eax, r9b
   .text:0x000000000000958B        C744242080000000     mov dword ptr [rsp+0x20], 0x80
   .text:0x0000000000009593        C744242400080000     mov dword ptr [rsp+0x24], 0x800
   .text:0x000000000000959B        C744242800000100     mov dword ptr [rsp+0x28], 0x10000
   .text:0x00000000000095A3        3B548418             cmp edx, dword ptr [rsp+rax*4+0x18]
   .text:0x00000000000095A7        7218                 jb code_0x95C1
   .text:0x00000000000095A9 code_0x95A9:
   .text:0x00000000000095A9        4885F6               test rsi, rsi
   .text:0x00000000000095AC        7402                 jz code_0x95B0
   .text:0x00000000000095AE code_0x95AE:
   .text:0x00000000000095AE        8916                 mov dword ptr [rsi], edx
   .text:0x00000000000095B0 code_0x95B0:
   .text:0x00000000000095B0        33C0                 xor eax, eax
   .text:0x00000000000095B2        410FB6C8             movzx ecx, r8b
   .text:0x00000000000095B6        F7DA                 neg edx
   .text:0x00000000000095B8        498902               mov qword ptr [r10], rax
   .text:0x00000000000095BB        1BC0                 sbb eax, eax
   .text:0x00000000000095BD        23C1                 and eax, ecx
   .text:0x00000000000095BF        EB14                 jmp code_0x95D5
   .text:0x00000000000095C1 code_0x95C1:
   .text:0x00000000000095C1        33C0                 xor eax, eax
   .text:0x00000000000095C3        498902               mov qword ptr [r10], rax
   .text:0x00000000000095C6        E8B1B3FFFF           call _errno; int * __cdecl( void )
   .text:0x00000000000095CB        C7002A000000         mov dword ptr [rax], 0x2A
   .text:0x00000000000095D1        4883C8FF             or rax, 0xFFFFFFFFFFFFFFFF
   .text:0x00000000000095D5 code_0x95D5:
   .text:0x00000000000095D5        488B4C2430           mov rcx, qword ptr [rsp+0x30]
   .text:0x00000000000095DA        4833CC               xor rcx, rsp
   .text:0x00000000000095DD        E86E120000           call __security_check_cookie; noclobber void __cdecl( uint64_t p1 )
   .text:0x00000000000095E2        488B5C2478           mov rbx, qword ptr [rsp+0x78]
   .text:0x00000000000095E7        4883C440             add rsp, 0x40
   .text:0x00000000000095EB        415F                 pop r15
   .text:0x00000000000095ED        415E                 pop r14
   .text:0x00000000000095EF        5F                   pop rdi
   .text:0x00000000000095F0        5E                   pop rsi
   .text:0x00000000000095F1        5D                   pop rbp
   .text:0x00000000000095F2        C3                   ret
   .text:0x00000000000095F3 data_0x95F3:
   .text:0x00000000000095F3        db 13 dup(0xCC)
   .text:0x0000000000009600 log10:
   .text:0x0000000000009600        4883EC58             sub rsp, 0x58
   .text:0x0000000000009604        660F7F742420         movdqa xmmword ptr [rsp+0x20], xmm6
   .text:0x000000000000960A        833D2BC0000000       cmp dword ptr [data_0x1563C], 0x0
   .text:0x0000000000009611        0F85E9020000         jnz code_0x9900
   .text:0x0000000000009617 code_0x9617:
   .text:0x0000000000009617        660F28D8             movapd xmm3, xmm0
   .text:0x000000000000961B        660F28E0             movapd xmm4, xmm0
   .text:0x000000000000961F        660F73D334           psrlq xmm3, 0x34
   .text:0x0000000000009624        66480F7EC0           movq rax, xmm0
   .text:0x0000000000009629        660FFB1DBF710000     psubq xmm3, xmmword ptr [data_0x107F0]
   .text:0x0000000000009631        660F28E8             movapd xmm5, xmm0
   .text:0x0000000000009635        660F542D83710000     andpd xmm5, xmmword ptr [data_0x107C0]
   .text:0x000000000000963D        660F2F2D7B710000     comisd xmm5, qword ptr [data_0x107C0]
   .text:0x0000000000009645        0F8485020000         jz code_0x98D0
   .text:0x000000000000964B code_0x964B:
   .text:0x000000000000964B        660F28D0             movapd xmm2, xmm0
   .text:0x000000000000964F        F30FE6F3             cvtdq2pd xmm6, xmm3
   .text:0x0000000000009653        660F57ED             xorpd xmm5, xmm5
   .text:0x0000000000009657        660F2FC5             comisd xmm0, xmm5
   .text:0x000000000000965B        0F862F020000         jbe code_0x9890
   .text:0x0000000000009661 code_0x9661:
   .text:0x0000000000009661        660FDB15A7710000     pand xmm2, xmmword ptr [data_0x10810]
   .text:0x0000000000009669        F20F5C252F720000     subsd xmm4, qword ptr [data_0x108A0]
   .text:0x0000000000009671        660F2F35B7720000     comisd xmm6, qword ptr [data_0x10930]
   .text:0x0000000000009679        0F84D8010000         jz code_0x9857
   .text:0x000000000000967F code_0x967F:
   .text:0x000000000000967F        660F542509730000     andpd xmm4, xmmword ptr [data_0x10990]
   .text:0x0000000000009687        4C8BC8               mov r9, rax
   .text:0x000000000000968A        4823058F710000       and rax, qword ptr [data_0x10820]
   .text:0x0000000000009691        4C230D98710000       and r9, qword ptr [data_0x10830]
   .text:0x0000000000009698        49D1E1               shl r9, 1
   .text:0x000000000000969B        4903C1               add rax, r9
   .text:0x000000000000969E        66480F6EC8           movq xmm1, rax
   .text:0x00000000000096A3        660F2F25A5720000     comisd xmm4, qword ptr [data_0x10950]
   .text:0x00000000000096AB        0F82DF000000         jb code_0x9790
   .text:0x00000000000096B1 code_0x96B1:
   .text:0x00000000000096B1        48C1E82C             shr rax, 0x2C
   .text:0x00000000000096B5        660FEB15F3710000     por xmm2, xmmword ptr [data_0x108B0]
   .text:0x00000000000096BD        660FEB0DEB710000     por xmm1, xmmword ptr [data_0x108B0]
   .text:0x00000000000096C5        4C8D0D64830000       lea r9, [data_0x11A30]
   .text:0x00000000000096CC        F20F5CCA             subsd xmm1, xmm2
   .text:0x00000000000096D0        F2410F590CC1         mulsd xmm1, qword ptr [r9+rax*8]
   .text:0x00000000000096D6        660F28D1             movapd xmm2, xmm1
   .text:0x00000000000096DA        660F28C1             movapd xmm0, xmm1
   .text:0x00000000000096DE        4C8D0D2B730000       lea r9, [data_0x10A10]
   .text:0x00000000000096E5        F20F101D33720000     movsd xmm3, qword ptr [data_0x10920]
   .text:0x00000000000096ED        F20F100DFB710000     movsd xmm1, qword ptr [data_0x108F0]
   .text:0x00000000000096F5        F20F59DA             mulsd xmm3, xmm2
   .text:0x00000000000096F9        F20F59CA             mulsd xmm1, xmm2
   .text:0x00000000000096FD        F20F59C2             mulsd xmm0, xmm2
   .text:0x0000000000009701        660F28E0             movapd xmm4, xmm0
   .text:0x0000000000009705        F20F581D03720000     addsd xmm3, qword ptr [data_0x10910]
   .text:0x000000000000970D        F20F580DCB710000     addsd xmm1, qword ptr [data_0x108E0]
   .text:0x0000000000009715        F20F59E0             mulsd xmm4, xmm0
   .text:0x0000000000009719        F20F59DA             mulsd xmm3, xmm2
   .text:0x000000000000971D        F20F59C8             mulsd xmm1, xmm0
   .text:0x0000000000009721        F20F581DD7710000     addsd xmm3, qword ptr [data_0x10900]
   .text:0x0000000000009729        F20F58CA             addsd xmm1, xmm2
   .text:0x000000000000972D        F20F59DC             mulsd xmm3, xmm4
   .text:0x0000000000009731        F20F58CB             addsd xmm1, xmm3
   .text:0x0000000000009735        F20F102D43710000     movsd xmm5, qword ptr [data_0x10880]
   .text:0x000000000000973D        F20F590DFB700000     mulsd xmm1, qword ptr [data_0x10840]
   .text:0x0000000000009745        F20F59EE             mulsd xmm5, xmm6
   .text:0x0000000000009749        F20F5CE9             subsd xmm5, xmm1
   .text:0x000000000000974D        F2410F1004C1         movsd xmm0, qword ptr [r9+rax*8]
   .text:0x0000000000009753        488D15C67A0000       lea rdx, [data_0x11220]
   .text:0x000000000000975A        F20F1014C2           movsd xmm2, qword ptr [rdx+rax*8]
   .text:0x000000000000975F        F20F102509710000     movsd xmm4, qword ptr [data_0x10870]
   .text:0x0000000000009767        F20F59E6             mulsd xmm4, xmm6
   .text:0x000000000000976B        F20F58C4             addsd xmm0, xmm4
   .text:0x000000000000976F        F20F58D5             addsd xmm2, xmm5
   .text:0x0000000000009773        F20F58C2             addsd xmm0, xmm2
   .text:0x0000000000009777        660F6F742420         movdqa xmm6, xmmword ptr [rsp+0x20]
   .text:0x000000000000977D        4883C458             add rsp, 0x58
   .text:0x0000000000009781        C3                   ret
   .text:0x0000000000009782 data_0x9782:
   .text:0x0000000000009782        dq 0x1F0F666666666666
   .text:0x000000000000978A        dd 0x00000084
   .text:0x000000000000978E        dw 0x0000
   .text:0x0000000000009790 code_0x9790:
   .text:0x0000000000009790        F20F1015F8700000     movsd xmm2, qword ptr [data_0x10890]
   .text:0x0000000000009798        F20F5C0500710000     subsd xmm0, qword ptr [data_0x108A0]
   .text:0x00000000000097A0        F20F58D0             addsd xmm2, xmm0
   .text:0x00000000000097A4        660F28C8             movapd xmm1, xmm0
   .text:0x00000000000097A8        F20F5ECA             divsd xmm1, xmm2
   .text:0x00000000000097AC        F20F1025FC710000     movsd xmm4, qword ptr [data_0x109B0]
   .text:0x00000000000097B4        F20F102D14720000     movsd xmm5, qword ptr [data_0x109D0]
   .text:0x00000000000097BC        660F28F0             movapd xmm6, xmm0
   .text:0x00000000000097C0        F20F59F1             mulsd xmm6, xmm1
   .text:0x00000000000097C4        F20F58C9             addsd xmm1, xmm1
   .text:0x00000000000097C8        660F28D1             movapd xmm2, xmm1
   .text:0x00000000000097CC        F20F59D1             mulsd xmm2, xmm1
   .text:0x00000000000097D0        F20F59E2             mulsd xmm4, xmm2
   .text:0x00000000000097D4        F20F59EA             mulsd xmm5, xmm2
   .text:0x00000000000097D8        F20F5825C0710000     addsd xmm4, qword ptr [data_0x109A0]
   .text:0x00000000000097E0        F20F582DD8710000     addsd xmm5, qword ptr [data_0x109C0]
   .text:0x00000000000097E8        F20F59D1             mulsd xmm2, xmm1
   .text:0x00000000000097EC        F20F59E2             mulsd xmm4, xmm2
   .text:0x00000000000097F0        F20F59D2             mulsd xmm2, xmm2
   .text:0x00000000000097F4        F20F59D1             mulsd xmm2, xmm1
   .text:0x00000000000097F8        F20F59EA             mulsd xmm5, xmm2
   .text:0x00000000000097FC        F20F10155C700000     movsd xmm2, qword ptr [data_0x10860]
   .text:0x0000000000009804        F20F58E5             addsd xmm4, xmm5
   .text:0x0000000000009808        F20F5CE6             subsd xmm4, xmm6
   .text:0x000000000000980C        F20F10353C700000     movsd xmm6, qword ptr [data_0x10850]
   .text:0x0000000000009814        660F28D8             movapd xmm3, xmm0
   .text:0x0000000000009818        660FDB1DC0710000     pand xmm3, xmmword ptr [data_0x109E0]
   .text:0x0000000000009820        F20F5CC3             subsd xmm0, xmm3
   .text:0x0000000000009824        F20F58E0             addsd xmm4, xmm0
   .text:0x0000000000009828        660F28C3             movapd xmm0, xmm3
   .text:0x000000000000982C        660F28CC             movapd xmm1, xmm4
   .text:0x0000000000009830        F20F59E2             mulsd xmm4, xmm2
   .text:0x0000000000009834        F20F59C2             mulsd xmm0, xmm2
   .text:0x0000000000009838        F20F59CE             mulsd xmm1, xmm6
   .text:0x000000000000983C        F20F59DE             mulsd xmm3, xmm6
   .text:0x0000000000009840        F20F58C4             addsd xmm0, xmm4
   .text:0x0000000000009844        F20F58C1             addsd xmm0, xmm1
   .text:0x0000000000009848        F20F58C3             addsd xmm0, xmm3
   .text:0x000000000000984C        660F6F742420         movdqa xmm6, xmmword ptr [rsp+0x20]
   .text:0x0000000000009852        4883C458             add rsp, 0x58
   .text:0x0000000000009856        C3                   ret
   .text:0x0000000000009857 code_0x9857:
   .text:0x0000000000009857        660FEB1541700000     por xmm2, xmmword ptr [data_0x108A0]
   .text:0x000000000000985F        F20F5C1539700000     subsd xmm2, qword ptr [data_0x108A0]
   .text:0x0000000000009867        F20F10EA             movsd xmm5, xmm2
   .text:0x000000000000986B        660FDB159D6F0000     pand xmm2, xmmword ptr [data_0x10810]
   .text:0x0000000000009873        66480F7ED0           movq rax, xmm2
   .text:0x0000000000009878        660F73D534           psrlq xmm5, 0x34
   .text:0x000000000000987D        660FFA2DBB700000     psubd xmm5, xmmword ptr [data_0x10940]
   .text:0x0000000000009885        F30FE6F5             cvtdq2pd xmm6, xmm5
   .text:0x0000000000009889        E9F1FDFFFF           jmp code_0x967F
   .text:0x000000000000988E data_0x988E:
   .text:0x000000000000988E        dw 0x9066
   .text:0x0000000000009890 code_0x9890:
   .text:0x0000000000009890        751E                 jnz code_0x98B0
   .text:0x0000000000009892 code_0x9892:
   .text:0x0000000000009892        F20F100D166F0000     movsd xmm1, qword ptr [data_0x107B0]
   .text:0x000000000000989A        448B054F710000       mov r8d, dword ptr [data_0x109F0]
   .text:0x00000000000098A1        E8EA080000           call _log10_special; void __cdecl( void )
   .text:0x00000000000098A6        EB48                 jmp code_0x98F0
   .text:0x00000000000098A8 data_0x98A8:
   .text:0x00000000000098A8        dq 0x0000000000841F0F
   .text:0x00000000000098B0 code_0x98B0:
   .text:0x00000000000098B0        F20F100D186F0000     movsd xmm1, qword ptr [data_0x107D0]
   .text:0x00000000000098B8        448B0535710000       mov r8d, dword ptr [data_0x109F4]
   .text:0x00000000000098BF        E8CC080000           call _log10_special; void __cdecl( void )
   .text:0x00000000000098C4        EB2A                 jmp code_0x98F0
   .text:0x00000000000098C6 data_0x98C6:
   .text:0x00000000000098C6        dq 0x000000841F0F6666
   .text:0x00000000000098CE        dw 0x0000
   .text:0x00000000000098D0 code_0x98D0:
   .text:0x00000000000098D0        483B05E96E0000       cmp rax, qword ptr [data_0x107C0]
   .text:0x00000000000098D7        7417                 jz code_0x98F0
   .text:0x00000000000098D9 code_0x98D9:
   .text:0x00000000000098D9        483B05D06E0000       cmp rax, qword ptr [data_0x107B0]
   .text:0x00000000000098E0        74CE                 jz code_0x98B0
   .text:0x00000000000098E2 code_0x98E2:
   .text:0x00000000000098E2        480B05F76E0000       or rax, qword ptr [data_0x107E0]
   .text:0x00000000000098E9        66480F6EC0           movq xmm0, rax
   .text:0x00000000000098EE        6690                 nop
   .text:0x00000000000098F0 code_0x98F0:
   .text:0x00000000000098F0        660F6F742420         movdqa xmm6, xmmword ptr [rsp+0x20]
   .text:0x00000000000098F6        4883C458             add rsp, 0x58
   .text:0x00000000000098FA        C3                   ret
   .text:0x00000000000098FB data_0x98FB:
   .text:0x00000000000098FB        dw 0x1F0F
   .text:0x00000000000098FD        db "D\x00"
   .text:0x00000000000098FF        db 0x00
   .text:0x0000000000009900 code_0x9900:
   .text:0x0000000000009900        4833C0               xor rax, rax
   .text:0x0000000000009903        C5E173D034           vpsrlq xmm3, xmm0, 0x34
   .text:0x0000000000009908        C4E1F97EC0           vmovd rax, xmm0
   .text:0x000000000000990D        C5E1FB1DDB6E0000     vpsubq xmm3, xmm3, xmmword ptr [data_0x107F0]
   .text:0x0000000000009915        C5FAE6F3             vcvtdq2pd xmm6, xmm3
   .text:0x0000000000009919        C5F9DB2D9F6E0000     vpand xmm5, xmm0, xmmword ptr [data_0x107C0]
   .text:0x0000000000009921        C5F92F2D976E0000     vcomisd xmm5, qword ptr [data_0x107C0]
   .text:0x0000000000009929        0F8441020000         jz code_0x9B70
   .text:0x000000000000992F code_0x992F:
   .text:0x000000000000992F        C5D1EFED             vpxor xmm5, xmm5, xmm5
   .text:0x0000000000009933        C5F92FC5             vcomisd xmm0, xmm5
   .text:0x0000000000009937        0F86E3010000         jbe code_0x9B20
   .text:0x000000000000993D code_0x993D:
   .text:0x000000000000993D        C5F9DB15CB6E0000     vpand xmm2, xmm0, xmmword ptr [data_0x10810]
   .text:0x0000000000009945        C5FB5C25536F0000     vsubsd xmm4, xmm0, qword ptr [data_0x108A0]
   .text:0x000000000000994D        C5F92F35DB6F0000     vcomisd xmm6, qword ptr [data_0x10930]
   .text:0x0000000000009955        0F848E010000         jz code_0x9AE9
   .text:0x000000000000995B code_0x995B:
   .text:0x000000000000995B        C5F9DB0DBD6E0000     vpand xmm1, xmm0, xmmword ptr [data_0x10820]
   .text:0x0000000000009963        C5F9DB1DC56E0000     vpand xmm3, xmm0, xmmword ptr [data_0x10830]
   .text:0x000000000000996B        C5E173F301           vpsllq xmm3, xmm3, 0x1
   .text:0x0000000000009970        C5E1D4C9             vpaddq xmm1, xmm3, xmm1
   .text:0x0000000000009974        C4E1F97EC8           vmovd rax, xmm1
   .text:0x0000000000009979        C5D9DB250F700000     vpand xmm4, xmm4, xmmword ptr [data_0x10990]
   .text:0x0000000000009981        C5F92F25C76F0000     vcomisd xmm4, qword ptr [data_0x10950]
   .text:0x0000000000009989        0F82B1000000         jb code_0x9A40
   .text:0x000000000000998F code_0x998F:
   .text:0x000000000000998F        48C1E82C             shr rax, 0x2C
   .text:0x0000000000009993        C5E9EB15156F0000     vpor xmm2, xmm2, xmmword ptr [data_0x108B0]
   .text:0x000000000000999B        C5F1EB0D0D6F0000     vpor xmm1, xmm1, xmmword ptr [data_0x108B0]
   .text:0x00000000000099A3        4C8D0D86800000       lea r9, [data_0x11A30]
   .text:0x00000000000099AA        C5F35CCA             vsubsd xmm1, xmm1, xmm2
   .text:0x00000000000099AE        C4C173590CC1         vmulsd xmm1, xmm1, qword ptr [r9+rax*8]
   .text:0x00000000000099B4        4C8D0D55700000       lea r9, [data_0x10A10]
   .text:0x00000000000099BB        C5F359C1             vmulsd xmm0, xmm1, xmm1
   .text:0x00000000000099BF        C5FB101D596F0000     vmovsd xmm3, qword ptr [data_0x10920]
   .text:0x00000000000099C7        C5FB102D216F0000     vmovsd xmm5, qword ptr [data_0x108F0]
   .text:0x00000000000099CF        C4E2F1A91D386F0000   vfmadd213sd xmm3, xmm1, qword ptr [data_0x10910]
   .text:0x00000000000099D8        C4E2F1A92DCF6E0000   vfmadd213sd xmm5, xmm1, qword ptr [data_0x108B0]
   .text:0x00000000000099E1        F20F10E0             movsd xmm4, xmm0
   .text:0x00000000000099E5        C4E2F1A91D126F0000   vfmadd213sd xmm3, xmm1, qword ptr [data_0x10900]
   .text:0x00000000000099EE        C5FB59E0             vmulsd xmm4, xmm0, xmm0
   .text:0x00000000000099F2        C4E2D1B9C8           vfmadd231sd xmm1, xmm5, xmm0
   .text:0x00000000000099F7        C4E2E1B9CC           vfmadd231sd xmm1, xmm3, xmm4
   .text:0x00000000000099FC        C5F3590D3C6E0000     vmulsd xmm1, xmm1, qword ptr [data_0x10840]
   .text:0x0000000000009A04        C5FB102D746E0000     vmovsd xmm5, qword ptr [data_0x10880]
   .text:0x0000000000009A0C        C4E2C9ABE9           vfmsub213sd xmm5, xmm6, xmm1
   .text:0x0000000000009A11        F2410F1004C1         movsd xmm0, qword ptr [r9+rax*8]
   .text:0x0000000000009A17        488D1502780000       lea rdx, [data_0x11220]
   .text:0x0000000000009A1E        F20F1014C2           movsd xmm2, qword ptr [rdx+rax*8]
   .text:0x0000000000009A23        C5EB58D5             vaddsd xmm2, xmm2, xmm5
   .text:0x0000000000009A27        C4E2C9B905406E0000   vfmadd231sd xmm0, xmm6, qword ptr [data_0x10870]
   .text:0x0000000000009A30        C5FB58C2             vaddsd xmm0, xmm0, xmm2
   .text:0x0000000000009A34        C5F96F742420         vmovdqa xmm6, xmmword ptr [rsp+0x20]
   .text:0x0000000000009A3A        4883C458             add rsp, 0x58
   .text:0x0000000000009A3E        C3                   ret
   .text:0x0000000000009A3F data_0x9A3F:
   .text:0x0000000000009A3F        db 0x90
   .text:0x0000000000009A40 code_0x9A40:
   .text:0x0000000000009A40        C5FB1015486E0000     vmovsd xmm2, qword ptr [data_0x10890]
   .text:0x0000000000009A48        C5FB5C05506E0000     vsubsd xmm0, xmm0, qword ptr [data_0x108A0]
   .text:0x0000000000009A50        C5EB58D0             vaddsd xmm2, xmm2, xmm0
   .text:0x0000000000009A54        C5FB5ECA             vdivsd xmm1, xmm0, xmm2
   .text:0x0000000000009A58        C5FB1025506F0000     vmovsd xmm4, qword ptr [data_0x109B0]
   .text:0x0000000000009A60        C5FB102D686F0000     vmovsd xmm5, qword ptr [data_0x109D0]
   .text:0x0000000000009A68        C5FB59F1             vmulsd xmm6, xmm0, xmm1
   .text:0x0000000000009A6C        C5F358C9             vaddsd xmm1, xmm1, xmm1
   .text:0x0000000000009A70        C5F359D1             vmulsd xmm2, xmm1, xmm1
   .text:0x0000000000009A74        C4E2E9A925236F0000   vfmadd213sd xmm4, xmm2, qword ptr [data_0x109A0]
   .text:0x0000000000009A7D        C4E2E9A92D3A6F0000   vfmadd213sd xmm5, xmm2, qword ptr [data_0x109C0]
   .text:0x0000000000009A86        C5EB59D1             vmulsd xmm2, xmm2, xmm1
   .text:0x0000000000009A8A        C5DB59E2             vmulsd xmm4, xmm4, xmm2
   .text:0x0000000000009A8E        C5EB59D2             vmulsd xmm2, xmm2, xmm2
   .text:0x0000000000009A92        C5EB59D1             vmulsd xmm2, xmm2, xmm1
   .text:0x0000000000009A96        C5D359EA             vmulsd xmm5, xmm5, xmm2
   .text:0x0000000000009A9A        C5DB58E5             vaddsd xmm4, xmm4, xmm5
   .text:0x0000000000009A9E        C5DB5CE6             vsubsd xmm4, xmm4, xmm6
   .text:0x0000000000009AA2        C5F9DB1D366F0000     vpand xmm3, xmm0, xmmword ptr [data_0x109E0]
   .text:0x0000000000009AAA        C5FB5CC3             vsubsd xmm0, xmm0, xmm3
   .text:0x0000000000009AAE        C5DB58E0             vaddsd xmm4, xmm4, xmm0
   .text:0x0000000000009AB2        C5DB590D966D0000     vmulsd xmm1, xmm4, qword ptr [data_0x10850]
   .text:0x0000000000009ABA        C5DB59259E6D0000     vmulsd xmm4, xmm4, qword ptr [data_0x10860]
   .text:0x0000000000009AC2        C5E35905966D0000     vmulsd xmm0, xmm3, qword ptr [data_0x10860]
   .text:0x0000000000009ACA        C5E3591D7E6D0000     vmulsd xmm3, xmm3, qword ptr [data_0x10850]
   .text:0x0000000000009AD2        C5FB58C4             vaddsd xmm0, xmm0, xmm4
   .text:0x0000000000009AD6        C5FB58C1             vaddsd xmm0, xmm0, xmm1
   .text:0x0000000000009ADA        C5FB58C3             vaddsd xmm0, xmm0, xmm3
   .text:0x0000000000009ADE        C5F96F742420         vmovdqa xmm6, xmmword ptr [rsp+0x20]
   .text:0x0000000000009AE4        4883C458             add rsp, 0x58
   .text:0x0000000000009AE8        C3                   ret
   .text:0x0000000000009AE9 code_0x9AE9:
   .text:0x0000000000009AE9        C5E9EB15AF6D0000     vpor xmm2, xmm2, xmmword ptr [data_0x108A0]
   .text:0x0000000000009AF1        C5EB5C15A76D0000     vsubsd xmm2, xmm2, qword ptr [data_0x108A0]
   .text:0x0000000000009AF9        C5D173D234           vpsrlq xmm5, xmm2, 0x34
   .text:0x0000000000009AFE        C5E9DB150A6D0000     vpand xmm2, xmm2, xmmword ptr [data_0x10810]
   .text:0x0000000000009B06        C5F928C2             vmovapd xmm0, xmm2
   .text:0x0000000000009B0A        C5D1FA2D2E6E0000     vpsubd xmm5, xmm5, xmmword ptr [data_0x10940]
   .text:0x0000000000009B12        C5FAE6F5             vcvtdq2pd xmm6, xmm5
   .text:0x0000000000009B16        E940FEFFFF           jmp code_0x995B
   .text:0x0000000000009B1B data_0x9B1B:
   .text:0x0000000000009B1B        dw 0x1F0F
   .text:0x0000000000009B1D        db "D\x00"
   .text:0x0000000000009B1F        db 0x00
   .text:0x0000000000009B20 code_0x9B20:
   .text:0x0000000000009B20        752E                 jnz code_0x9B50
   .text:0x0000000000009B22 code_0x9B22:
   .text:0x0000000000009B22        C5FB100D866C0000     vmovsd xmm1, qword ptr [data_0x107B0]
   .text:0x0000000000009B2A        448B05BF6E0000       mov r8d, dword ptr [data_0x109F0]
   .text:0x0000000000009B31        E85A060000           call _log10_special; void __cdecl( void )
   .text:0x0000000000009B36        C5F96F742420         vmovdqa xmm6, xmmword ptr [rsp+0x20]
   .text:0x0000000000009B3C        4883C458             add rsp, 0x58
   .text:0x0000000000009B40        C3                   ret
   .text:0x0000000000009B41 data_0x9B41:
   .text:0x0000000000009B41        dq 0x0F66666666666666
   .text:0x0000000000009B49        dd 0x0000841F
   .text:0x0000000000009B4D        dw 0x0000
   .text:0x0000000000009B4F        db 0x00
   .text:0x0000000000009B50 code_0x9B50:
   .text:0x0000000000009B50        C5FB100D786C0000     vmovsd xmm1, qword ptr [data_0x107D0]
   .text:0x0000000000009B58        448B05956E0000       mov r8d, dword ptr [data_0x109F4]
   .text:0x0000000000009B5F        E82C060000           call _log10_special; void __cdecl( void )
   .text:0x0000000000009B64        C5F96F742420         vmovdqa xmm6, xmmword ptr [rsp+0x20]
   .text:0x0000000000009B6A        4883C458             add rsp, 0x58
   .text:0x0000000000009B6E        C3                   ret
   .text:0x0000000000009B6F data_0x9B6F:
   .text:0x0000000000009B6F        db 0x90
   .text:0x0000000000009B70 code_0x9B70:
   .text:0x0000000000009B70        483B05496C0000       cmp rax, qword ptr [data_0x107C0]
   .text:0x0000000000009B77        7427                 jz code_0x9BA0
   .text:0x0000000000009B79 code_0x9B79:
   .text:0x0000000000009B79        483B05306C0000       cmp rax, qword ptr [data_0x107B0]
   .text:0x0000000000009B80        74CE                 jz code_0x9B50
   .text:0x0000000000009B82 code_0x9B82:
   .text:0x0000000000009B82        480B05576C0000       or rax, qword ptr [data_0x107E0]
   .text:0x0000000000009B89        66480F6EC8           movq xmm1, rax
   .text:0x0000000000009B8E        448B05636E0000       mov r8d, dword ptr [data_0x109F8]
   .text:0x0000000000009B95        E8F6050000           call _log10_special; void __cdecl( void )
   .text:0x0000000000009B9A        EB04                 jmp code_0x9BA0
   .text:0x0000000000009B9C data_0x9B9C:
   .text:0x0000000000009B9C        dd 0x00401F0F
   .text:0x0000000000009BA0 code_0x9BA0:
   .text:0x0000000000009BA0        C5F96F742420         vmovdqa xmm6, xmmword ptr [rsp+0x20]
   .text:0x0000000000009BA6        4883C458             add rsp, 0x58
   .text:0x0000000000009BAA        C3                   ret
   .text:0x0000000000009BAB code_0x9BAB:
   .text:0x0000000000009BAB        CC                   int3
   .text:0x0000000000009BAC __dcrt_lowio_ensure_console_output_initialized:
   .text:0x0000000000009BAC        4053                 push rbx
   .text:0x0000000000009BAE        4883EC40             sub rsp, 0x40
   .text:0x0000000000009BB2        488B0507AD0000       mov rax, qword ptr [data_0x148C0]
   .text:0x0000000000009BB9        33DB                 xor ebx, ebx
   .text:0x0000000000009BBB        4883F8FE             cmp rax, 0xFFFFFFFFFFFFFFFE
   .text:0x0000000000009BBF        752E                 jnz code_0x9BEF
   .text:0x0000000000009BC1 code_0x9BC1:
   .text:0x0000000000009BC1        48895C2430           mov qword ptr [rsp+0x30], rbx
   .text:0x0000000000009BC6        448D4303             lea r8d, [rbx+0x3]
   .text:0x0000000000009BCA        895C2428             mov dword ptr [rsp+0x28], ebx
   .text:0x0000000000009BCE        488D0D2B6E0000       lea rcx, [string_CONOUT]; "CONOUT$"
   .text:0x0000000000009BD5        4533C9               xor r9d, r9d
   .text:0x0000000000009BD8        4489442420           mov dword ptr [rsp+0x20], r8d
   .text:0x0000000000009BDD        BA00000040           mov edx, 0x40000000
   .text:0x0000000000009BE2        FF1518160000         call qword ptr [CreateFileW]; void * (__cdecl *)( unsigned short * lpFileName, unsigned long dwDesiredAccess, unsigned long dwShareMode, struct _SECURITY_ATTRIBUTES * lpSecurityAttributes, unsigned long dwCreationDisposition, unsigned long dwFlagsAndAttributes, void * hTemplateFile )
   .text:0x0000000000009BE8        488905D1AC0000       mov qword ptr [data_0x148C0], rax
   .text:0x0000000000009BEF code_0x9BEF:
   .text:0x0000000000009BEF        4883F8FF             cmp rax, 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000009BF3        0F95C3               setne bl
   .text:0x0000000000009BF6        8BC3                 mov eax, ebx
   .text:0x0000000000009BF8        4883C440             add rsp, 0x40
   .text:0x0000000000009BFC        5B                   pop rbx
   .text:0x0000000000009BFD        C3                   ret
   .text:0x0000000000009BFE data_0x9BFE:
   .text:0x0000000000009BFE        db 2 dup(0xCC)
   .text:0x0000000000009C00 __dcrt_terminate_console_output:
   .text:0x0000000000009C00        4883EC28             sub rsp, 0x28
   .text:0x0000000000009C04        488B0DB5AC0000       mov rcx, qword ptr [data_0x148C0]
   .text:0x0000000000009C0B        4883F9FD             cmp rcx, 0xFFFFFFFFFFFFFFFD
   .text:0x0000000000009C0F        7706                 ja code_0x9C17
   .text:0x0000000000009C11 code_0x9C11:
   .text:0x0000000000009C11        FF1569140000         call qword ptr [CloseHandle]; int (__cdecl *)( void * hObject )
   .text:0x0000000000009C17 code_0x9C17:
   .text:0x0000000000009C17        4883C428             add rsp, 0x28
   .text:0x0000000000009C1B        C3                   ret
   .text:0x0000000000009C1C __dcrt_write_console:
   .text:0x0000000000009C1C        488BC4               mov rax, rsp
   .text:0x0000000000009C1F        48895808             mov qword ptr [rax+0x8], rbx
   .text:0x0000000000009C23        48896810             mov qword ptr [rax+0x10], rbp
   .text:0x0000000000009C27        48897018             mov qword ptr [rax+0x18], rsi
   .text:0x0000000000009C2B        57                   push rdi
   .text:0x0000000000009C2C        4883EC40             sub rsp, 0x40
   .text:0x0000000000009C30        488360D800           and qword ptr [rax-0x28], 0x0
   .text:0x0000000000009C35        498BF8               mov rdi, r8
   .text:0x0000000000009C38        4D8BC8               mov r9, r8
   .text:0x0000000000009C3B        8BF2                 mov esi, edx
   .text:0x0000000000009C3D        448BC2               mov r8d, edx
   .text:0x0000000000009C40        488BE9               mov rbp, rcx
   .text:0x0000000000009C43        488BD1               mov rdx, rcx
   .text:0x0000000000009C46        488B0D73AC0000       mov rcx, qword ptr [data_0x148C0]
   .text:0x0000000000009C4D        FF15B5130000         call qword ptr [WriteConsoleW]; int (__cdecl *)( void * hConsoleOutput, void * lpBuffer, unsigned long nNumberOfCharsToWrite, unsigned long * lpNumberOfCharsWritten, void * lpReserved )
   .text:0x0000000000009C53        8BD8                 mov ebx, eax
   .text:0x0000000000009C55        85C0                 test eax, eax
   .text:0x0000000000009C57        756A                 jnz code_0x9CC3
   .text:0x0000000000009C59 code_0x9C59:
   .text:0x0000000000009C59        FF1531140000         call qword ptr [GetLastError]; unsigned long (__cdecl *)( void )
   .text:0x0000000000009C5F        83F806               cmp eax, 0x6
   .text:0x0000000000009C62        755F                 jnz code_0x9CC3
   .text:0x0000000000009C64 code_0x9C64:
   .text:0x0000000000009C64        488B0D55AC0000       mov rcx, qword ptr [data_0x148C0]
   .text:0x0000000000009C6B        4883F9FD             cmp rcx, 0xFFFFFFFFFFFFFFFD
   .text:0x0000000000009C6F        7706                 ja code_0x9C77
   .text:0x0000000000009C71 code_0x9C71:
   .text:0x0000000000009C71        FF1509140000         call qword ptr [CloseHandle]; int (__cdecl *)( void * hObject )
   .text:0x0000000000009C77 code_0x9C77:
   .text:0x0000000000009C77        488364243000         and qword ptr [rsp+0x30], 0x0
   .text:0x0000000000009C7D        488D0D7C6D0000       lea rcx, [string_CONOUT]; "CONOUT$"
   .text:0x0000000000009C84        8364242800           and dword ptr [rsp+0x28], 0x0
   .text:0x0000000000009C89        41B803000000         mov r8d, 0x3
   .text:0x0000000000009C8F        4533C9               xor r9d, r9d
   .text:0x0000000000009C92        4489442420           mov dword ptr [rsp+0x20], r8d
   .text:0x0000000000009C97        BA00000040           mov edx, 0x40000000
   .text:0x0000000000009C9C        FF155E150000         call qword ptr [CreateFileW]; void * (__cdecl *)( unsigned short * lpFileName, unsigned long dwDesiredAccess, unsigned long dwShareMode, struct _SECURITY_ATTRIBUTES * lpSecurityAttributes, unsigned long dwCreationDisposition, unsigned long dwFlagsAndAttributes, void * hTemplateFile )
   .text:0x0000000000009CA2        488364242000         and qword ptr [rsp+0x20], 0x0
   .text:0x0000000000009CA8        4C8BCF               mov r9, rdi
   .text:0x0000000000009CAB        488BC8               mov rcx, rax
   .text:0x0000000000009CAE        4889050BAC0000       mov qword ptr [data_0x148C0], rax
   .text:0x0000000000009CB5        448BC6               mov r8d, esi
   .text:0x0000000000009CB8        488BD5               mov rdx, rbp
   .text:0x0000000000009CBB        FF1547130000         call qword ptr [WriteConsoleW]; int (__cdecl *)( void * hConsoleOutput, void * lpBuffer, unsigned long nNumberOfCharsToWrite, unsigned long * lpNumberOfCharsWritten, void * lpReserved )
   .text:0x0000000000009CC1        8BD8                 mov ebx, eax
   .text:0x0000000000009CC3 code_0x9CC3:
   .text:0x0000000000009CC3        488B6C2458           mov rbp, qword ptr [rsp+0x58]
   .text:0x0000000000009CC8        8BC3                 mov eax, ebx
   .text:0x0000000000009CCA        488B5C2450           mov rbx, qword ptr [rsp+0x50]
   .text:0x0000000000009CCF        488B742460           mov rsi, qword ptr [rsp+0x60]
   .text:0x0000000000009CD4        4883C440             add rsp, 0x40
   .text:0x0000000000009CD8        5F                   pop rdi
   .text:0x0000000000009CD9        C3                   ret
   .text:0x0000000000009CDA data_0x9CDA:
   .text:0x0000000000009CDA        db 2 dup(0xCC)
   .text:0x0000000000009CDC __crt_seh_guarded_call<int>::operator()<class <lambda_751a882b2c74d4b022dec766aa51a29a>,class <lambda_628dfdc04ba53c8bfc02c9951375f3f5> & __ptr64,class <lambda_f6c7be5f7998530c34de24c7437d6b54> >:
   .text:0x0000000000009CDC        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000009CE1        4C894C2420           mov qword ptr [rsp+0x20], r9
   .text:0x0000000000009CE6        57                   push rdi
   .text:0x0000000000009CE7        4883EC20             sub rsp, 0x20
   .text:0x0000000000009CEB        498BF9               mov rdi, r9
   .text:0x0000000000009CEE        498BD8               mov rbx, r8
   .text:0x0000000000009CF1        8B0A                 mov ecx, dword ptr [rdx]
   .text:0x0000000000009CF3        E89CC1FFFF           call __acrt_lowio_lock_fh; void __cdecl( int32_t p1 )
   .text:0x0000000000009CF8        90                   nop
   .text:0x0000000000009CF9        488B03               mov rax, qword ptr [rbx]
   .text:0x0000000000009CFC        486308               movsxd rcx, dword ptr [rax]
   .text:0x0000000000009CFF        488BD1               mov rdx, rcx
   .text:0x0000000000009D02        488BC1               mov rax, rcx
   .text:0x0000000000009D05        48C1F806             sar rax, 0x6
   .text:0x0000000000009D09        4C8D0500B30000       lea r8, [data_0x15010]
   .text:0x0000000000009D10        83E23F               and edx, 0x3F
   .text:0x0000000000009D13        48C1E206             shl rdx, 0x6
   .text:0x0000000000009D17        498B04C0             mov rax, qword ptr [r8+rax*8]
   .text:0x0000000000009D1B        F644103801           test byte ptr [rax+rdx+0x38], 0x1
   .text:0x0000000000009D20        7409                 jz code_0x9D2B
   .text:0x0000000000009D22 code_0x9D22:
   .text:0x0000000000009D22        E8CD000000           call _close_nolock; int32_t __cdecl( int32_t p1 )
   .text:0x0000000000009D27        8BD8                 mov ebx, eax
   .text:0x0000000000009D29        EB0E                 jmp code_0x9D39
   .text:0x0000000000009D2B code_0x9D2B:
   .text:0x0000000000009D2B        E84CACFFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000009D30        C70009000000         mov dword ptr [rax], 0x9
   .text:0x0000000000009D36        83CBFF               or ebx, 0xFFFFFFFF
   .text:0x0000000000009D39 code_0x9D39:
   .text:0x0000000000009D39        8B0F                 mov ecx, dword ptr [rdi]
   .text:0x0000000000009D3B        E878C1FFFF           call func_0x5EB8; void __cdecl( int32_t p1 )
   .text:0x0000000000009D40        8BC3                 mov eax, ebx
   .text:0x0000000000009D42        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000009D47        4883C420             add rsp, 0x20
   .text:0x0000000000009D4B        5F                   pop rdi
   .text:0x0000000000009D4C        C3                   ret
   .text:0x0000000000009D4D data_0x9D4D:
   .text:0x0000000000009D4D        db 3 dup(0xCC)
   .text:0x0000000000009D50 _close:
   .text:0x0000000000009D50        894C2408             mov dword ptr [rsp+0x8], ecx
   .text:0x0000000000009D54        4883EC38             sub rsp, 0x38
   .text:0x0000000000009D58        4863D1               movsxd rdx, ecx
   .text:0x0000000000009D5B        83FAFE               cmp edx, 0xFFFFFFFE
   .text:0x0000000000009D5E        7515                 jnz code_0x9D75
   .text:0x0000000000009D60 code_0x9D60:
   .text:0x0000000000009D60        E8F7ABFFFF           call __doserrno; unsigned long * __cdecl( void )
   .text:0x0000000000009D65        832000               and dword ptr [rax], 0x0
   .text:0x0000000000009D68        E80FACFFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000009D6D        C70009000000         mov dword ptr [rax], 0x9
   .text:0x0000000000009D73        EB74                 jmp code_0x9DE9
   .text:0x0000000000009D75 code_0x9D75:
   .text:0x0000000000009D75        85C9                 test ecx, ecx
   .text:0x0000000000009D77        7858                 js code_0x9DD1
   .text:0x0000000000009D79 code_0x9D79:
   .text:0x0000000000009D79        3B1591B60000         cmp edx, dword ptr [data_0x15410]
   .text:0x0000000000009D7F        7350                 jae code_0x9DD1
   .text:0x0000000000009D81 code_0x9D81:
   .text:0x0000000000009D81        488BCA               mov rcx, rdx
   .text:0x0000000000009D84        4C8D0585B20000       lea r8, [data_0x15010]
   .text:0x0000000000009D8B        83E13F               and ecx, 0x3F
   .text:0x0000000000009D8E        488BC2               mov rax, rdx
   .text:0x0000000000009D91        48C1F806             sar rax, 0x6
   .text:0x0000000000009D95        48C1E106             shl rcx, 0x6
   .text:0x0000000000009D99        498B04C0             mov rax, qword ptr [r8+rax*8]
   .text:0x0000000000009D9D        F644083801           test byte ptr [rax+rcx+0x38], 0x1
   .text:0x0000000000009DA2        742D                 jz code_0x9DD1
   .text:0x0000000000009DA4 code_0x9DA4:
   .text:0x0000000000009DA4        488D442440           lea rax, [rsp+0x40]
   .text:0x0000000000009DA9        89542450             mov dword ptr [rsp+0x50], edx
   .text:0x0000000000009DAD        89542458             mov dword ptr [rsp+0x58], edx
   .text:0x0000000000009DB1        4C8D4C2450           lea r9, [rsp+0x50]
   .text:0x0000000000009DB6        488D542458           lea rdx, [rsp+0x58]
   .text:0x0000000000009DBB        4889442420           mov qword ptr [rsp+0x20], rax
   .text:0x0000000000009DC0        4C8D442420           lea r8, [rsp+0x20]
   .text:0x0000000000009DC5        488D4C2448           lea rcx, [rsp+0x48]
   .text:0x0000000000009DCA        E80DFFFFFF           call __crt_seh_guarded_call<int>::operator()<class <lambda_751a882b2c74d4b022dec766aa51a29a>,class <lambda_628dfdc04ba53c8bfc02c9951375f3f5> & __ptr64,class <lambda_f6c7be5f7998530c34de24c7437d6b54> >; public: int __cdecl( class <lambda_751a882b2c74d4b022dec766aa51a29a> && p1, class <lambda_628dfdc04ba53c8bfc02c9951375f3f5> & p2, class <lambda_f6c7be5f7998530c34de24c7437d6b54> && p3 )
   .text:0x0000000000009DCF        EB1B                 jmp code_0x9DEC
   .text:0x0000000000009DD1 code_0x9DD1:
   .text:0x0000000000009DD1        E886ABFFFF           call __doserrno; unsigned long * __cdecl( void )
   .text:0x0000000000009DD6        832000               and dword ptr [rax], 0x0
   .text:0x0000000000009DD9        E89EABFFFF           call _errno; int * __cdecl( void )
   .text:0x0000000000009DDE        C70009000000         mov dword ptr [rax], 0x9
   .text:0x0000000000009DE4        E807A9FFFF           call _invalid_parameter_noinfo; void __cdecl( void )
   .text:0x0000000000009DE9 code_0x9DE9:
   .text:0x0000000000009DE9        83C8FF               or eax, 0xFFFFFFFF
   .text:0x0000000000009DEC code_0x9DEC:
   .text:0x0000000000009DEC        4883C438             add rsp, 0x38
   .text:0x0000000000009DF0        C3                   ret
   .text:0x0000000000009DF1 data_0x9DF1:
   .text:0x0000000000009DF1        db 3 dup(0xCC)
   .text:0x0000000000009DF4 _close_nolock:
   .text:0x0000000000009DF4        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000009DF9        57                   push rdi
   .text:0x0000000000009DFA        4883EC20             sub rsp, 0x20
   .text:0x0000000000009DFE        4863F9               movsxd rdi, ecx
   .text:0x0000000000009E01        8BCF                 mov ecx, edi
   .text:0x0000000000009E03        E890C1FFFF           call _get_osfhandle; int64_t __cdecl( int32_t p1 )
   .text:0x0000000000009E08        4883F8FF             cmp rax, 0xFFFFFFFFFFFFFFFF
   .text:0x0000000000009E0C        7504                 jnz code_0x9E12
   .text:0x0000000000009E0E code_0x9E0E:
   .text:0x0000000000009E0E        33DB                 xor ebx, ebx
   .text:0x0000000000009E10        EB57                 jmp code_0x9E69
   .text:0x0000000000009E12 code_0x9E12:
   .text:0x0000000000009E12        488B05F7B10000       mov rax, qword ptr [data_0x15010]
   .text:0x0000000000009E19        B902000000           mov ecx, 0x2
   .text:0x0000000000009E1E        83FF01               cmp edi, 0x1
   .text:0x0000000000009E21        7509                 jnz code_0x9E2C
   .text:0x0000000000009E23 code_0x9E23:
   .text:0x0000000000009E23        4084B8B8000000       test byte ptr [rax+0xB8], dil
   .text:0x0000000000009E2A        750A                 jnz code_0x9E36
   .text:0x0000000000009E2C code_0x9E2C:
   .text:0x0000000000009E2C        3BF9                 cmp edi, ecx
   .text:0x0000000000009E2E        751D                 jnz code_0x9E4D
   .text:0x0000000000009E30 code_0x9E30:
   .text:0x0000000000009E30        F6407801             test byte ptr [rax+0x78], 0x1
   .text:0x0000000000009E34        7417                 jz code_0x9E4D
   .text:0x0000000000009E36 code_0x9E36:
   .text:0x0000000000009E36        E85DC1FFFF           call _get_osfhandle; int64_t __cdecl( int32_t p1 )
   .text:0x0000000000009E3B        B901000000           mov ecx, 0x1
   .text:0x0000000000009E40        488BD8               mov rbx, rax
   .text:0x0000000000009E43        E850C1FFFF           call _get_osfhandle; int64_t __cdecl( int32_t p1 )
   .text:0x0000000000009E48        483BC3               cmp rax, rbx
   .text:0x0000000000009E4B        74C1                 jz code_0x9E0E
   .text:0x0000000000009E4D code_0x9E4D:
   .text:0x0000000000009E4D        8BCF                 mov ecx, edi
   .text:0x0000000000009E4F        E844C1FFFF           call _get_osfhandle; int64_t __cdecl( int32_t p1 )
   .text:0x0000000000009E54        488BC8               mov rcx, rax
   .text:0x0000000000009E57        FF1523120000         call qword ptr [CloseHandle]; int (__cdecl *)( void * hObject )
   .text:0x0000000000009E5D        85C0                 test eax, eax
   .text:0x0000000000009E5F        75AD                 jnz code_0x9E0E
   .text:0x0000000000009E61 code_0x9E61:
   .text:0x0000000000009E61        FF1529120000         call qword ptr [GetLastError]; unsigned long (__cdecl *)( void )
   .text:0x0000000000009E67        8BD8                 mov ebx, eax
   .text:0x0000000000009E69 code_0x9E69:
   .text:0x0000000000009E69        8BCF                 mov ecx, edi
   .text:0x0000000000009E6B        E86CC0FFFF           call _free_osfhnd; int32_t __cdecl( int32_t p1 )
   .text:0x0000000000009E70        488BD7               mov rdx, rdi
   .text:0x0000000000009E73        4C8D0596B10000       lea r8, [data_0x15010]
   .text:0x0000000000009E7A        83E23F               and edx, 0x3F
   .text:0x0000000000009E7D        488BCF               mov rcx, rdi
   .text:0x0000000000009E80        48C1F906             sar rcx, 0x6
   .text:0x0000000000009E84        48C1E206             shl rdx, 0x6
   .text:0x0000000000009E88        498B0CC8             mov rcx, qword ptr [r8+rcx*8]
   .text:0x0000000000009E8C        C644113800           mov byte ptr [rcx+rdx+0x38], 0x0
   .text:0x0000000000009E91        85DB                 test ebx, ebx
   .text:0x0000000000009E93        740C                 jz code_0x9EA1
   .text:0x0000000000009E95 code_0x9E95:
   .text:0x0000000000009E95        8BCB                 mov ecx, ebx
   .text:0x0000000000009E97        E870AAFFFF           call __acrt_errno_map_os_error; void __cdecl( int32_t p1 )
   .text:0x0000000000009E9C        83C8FF               or eax, 0xFFFFFFFF
   .text:0x0000000000009E9F        EB02                 jmp code_0x9EA3
   .text:0x0000000000009EA1 code_0x9EA1:
   .text:0x0000000000009EA1        33C0                 xor eax, eax
   .text:0x0000000000009EA3 code_0x9EA3:
   .text:0x0000000000009EA3        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000009EA8        4883C420             add rsp, 0x20
   .text:0x0000000000009EAC        5F                   pop rdi
   .text:0x0000000000009EAD        C3                   ret
   .text:0x0000000000009EAE data_0x9EAE:
   .text:0x0000000000009EAE        db 2 dup(0xCC)
   .text:0x0000000000009EB0 __acrt_stdio_free_stream:
   .text:0x0000000000009EB0        834918FF             or dword ptr [rcx+0x18], 0xFFFFFFFF
   .text:0x0000000000009EB4        33C0                 xor eax, eax
   .text:0x0000000000009EB6        488901               mov qword ptr [rcx], rax
   .text:0x0000000000009EB9        48894108             mov qword ptr [rcx+0x8], rax
   .text:0x0000000000009EBD        894110               mov dword ptr [rcx+0x10], eax
   .text:0x0000000000009EC0        4889411C             mov qword ptr [rcx+0x1C], rax
   .text:0x0000000000009EC4        48894128             mov qword ptr [rcx+0x28], rax
   .text:0x0000000000009EC8        874114               xchg dword ptr [rcx+0x14], eax
   .text:0x0000000000009ECB        C3                   ret
   .text:0x0000000000009ECC _call_matherr:
   .text:0x0000000000009ECC        488BC4               mov rax, rsp
   .text:0x0000000000009ECF        53                   push rbx
   .text:0x0000000000009ED0        4883EC50             sub rsp, 0x50
   .text:0x0000000000009ED4        F20F10842480000000   movsd xmm0, qword ptr [rsp+0x80]
   .text:0x0000000000009EDD        8BD9                 mov ebx, ecx
   .text:0x0000000000009EDF        F20F108C2488000000   movsd xmm1, qword ptr [rsp+0x88]
   .text:0x0000000000009EE8        BAC0FF0000           mov edx, 0xFFC0
   .text:0x0000000000009EED        8948C8               mov dword ptr [rax-0x38], ecx
   .text:0x0000000000009EF0        488B8C2490000000     mov rcx, qword ptr [rsp+0x90]
   .text:0x0000000000009EF8        F20F1140E0           movsd qword ptr [rax-0x20], xmm0
   .text:0x0000000000009EFD        F20F1148E8           movsd qword ptr [rax-0x18], xmm1
   .text:0x0000000000009F02        F20F1158D8           movsd qword ptr [rax-0x28], xmm3
   .text:0x0000000000009F07        4C8940D0             mov qword ptr [rax-0x30], r8
   .text:0x0000000000009F0B        E828070000           call func_0xA638; int32_t __cdecl( int64_t p1, int64_t p2 )
   .text:0x0000000000009F10        488D4C2420           lea rcx, [rsp+0x20]
   .text:0x0000000000009F15        E84E8CFFFF           call __acrt_invoke_user_matherr; int32_t __cdecl( int64_t p1 )
   .text:0x0000000000009F1A        85C0                 test eax, eax
   .text:0x0000000000009F1C        7507                 jnz code_0x9F25
   .text:0x0000000000009F1E code_0x9F1E:
   .text:0x0000000000009F1E        8BCB                 mov ecx, ebx
   .text:0x0000000000009F20        E8C3060000           call _set_errno_from_matherr; void __cdecl( int32_t p1 )
   .text:0x0000000000009F25 code_0x9F25:
   .text:0x0000000000009F25        F20F10442440         movsd xmm0, qword ptr [rsp+0x40]
   .text:0x0000000000009F2B        4883C450             add rsp, 0x50
   .text:0x0000000000009F2F        5B                   pop rbx
   .text:0x0000000000009F30        C3                   ret
   .text:0x0000000000009F31 data_0x9F31:
   .text:0x0000000000009F31        db 3 dup(0xCC)
   .text:0x0000000000009F34 _exception_enabled:
   .text:0x0000000000009F34        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x0000000000009F39        4889742410           mov qword ptr [rsp+0x10], rsi
   .text:0x0000000000009F3E        57                   push rdi
   .text:0x0000000000009F3F        4883EC20             sub rsp, 0x20
   .text:0x0000000000009F43        8BD9                 mov ebx, ecx
   .text:0x0000000000009F45        488BF2               mov rsi, rdx
   .text:0x0000000000009F48        83E31F               and ebx, 0x1F
   .text:0x0000000000009F4B        8BF9                 mov edi, ecx
   .text:0x0000000000009F4D        F6C108               test cl, 0x8
   .text:0x0000000000009F50        7414                 jz code_0x9F66
   .text:0x0000000000009F52 code_0x9F52:
   .text:0x0000000000009F52        4084F6               test sil, sil
   .text:0x0000000000009F55        790F                 jns code_0x9F66
   .text:0x0000000000009F57 code_0x9F57:
   .text:0x0000000000009F57        B901000000           mov ecx, 0x1
   .text:0x0000000000009F5C        E853070000           call _set_statfp; void __cdecl( int64_t p1 )
   .text:0x0000000000009F61        83E3F7               and ebx, 0xFFFFFFF7
   .text:0x0000000000009F64        EB57                 jmp code_0x9FBD
   .text:0x0000000000009F66 code_0x9F66:
   .text:0x0000000000009F66        B904000000           mov ecx, 0x4
   .text:0x0000000000009F6B        4084F9               test cl, dil
   .text:0x0000000000009F6E        7411                 jz code_0x9F81
   .text:0x0000000000009F70 code_0x9F70:
   .text:0x0000000000009F70        480FBAE609           bt rsi, 0x9
   .text:0x0000000000009F75        730A                 jae code_0x9F81
   .text:0x0000000000009F77 code_0x9F77:
   .text:0x0000000000009F77        E838070000           call _set_statfp; void __cdecl( int64_t p1 )
   .text:0x0000000000009F7C        83E3FB               and ebx, 0xFFFFFFFB
   .text:0x0000000000009F7F        EB3C                 jmp code_0x9FBD
   .text:0x0000000000009F81 code_0x9F81:
   .text:0x0000000000009F81        40F6C701             test dil, 0x1
   .text:0x0000000000009F85        7416                 jz code_0x9F9D
   .text:0x0000000000009F87 code_0x9F87:
   .text:0x0000000000009F87        480FBAE60A           bt rsi, 0xA
   .text:0x0000000000009F8C        730F                 jae code_0x9F9D
   .text:0x0000000000009F8E code_0x9F8E:
   .text:0x0000000000009F8E        B908000000           mov ecx, 0x8
   .text:0x0000000000009F93        E81C070000           call _set_statfp; void __cdecl( int64_t p1 )
   .text:0x0000000000009F98        83E3FE               and ebx, 0xFFFFFFFE
   .text:0x0000000000009F9B        EB20                 jmp code_0x9FBD
   .text:0x0000000000009F9D code_0x9F9D:
   .text:0x0000000000009F9D        40F6C702             test dil, 0x2
   .text:0x0000000000009FA1        741A                 jz code_0x9FBD
   .text:0x0000000000009FA3 code_0x9FA3:
   .text:0x0000000000009FA3        480FBAE60B           bt rsi, 0xB
   .text:0x0000000000009FA8        7313                 jae code_0x9FBD
   .text:0x0000000000009FAA code_0x9FAA:
   .text:0x0000000000009FAA        40F6C710             test dil, 0x10
   .text:0x0000000000009FAE        740A                 jz code_0x9FBA
   .text:0x0000000000009FB0 code_0x9FB0:
   .text:0x0000000000009FB0        B910000000           mov ecx, 0x10
   .text:0x0000000000009FB5        E8FA060000           call _set_statfp; void __cdecl( int64_t p1 )
   .text:0x0000000000009FBA code_0x9FBA:
   .text:0x0000000000009FBA        83E3FD               and ebx, 0xFFFFFFFD
   .text:0x0000000000009FBD code_0x9FBD:
   .text:0x0000000000009FBD        40F6C710             test dil, 0x10
   .text:0x0000000000009FC1        7414                 jz code_0x9FD7
   .text:0x0000000000009FC3 code_0x9FC3:
   .text:0x0000000000009FC3        480FBAE60C           bt rsi, 0xC
   .text:0x0000000000009FC8        730D                 jae code_0x9FD7
   .text:0x0000000000009FCA code_0x9FCA:
   .text:0x0000000000009FCA        B920000000           mov ecx, 0x20
   .text:0x0000000000009FCF        E8E0060000           call _set_statfp; void __cdecl( int64_t p1 )
   .text:0x0000000000009FD4        83E3EF               and ebx, 0xFFFFFFEF
   .text:0x0000000000009FD7 code_0x9FD7:
   .text:0x0000000000009FD7        488B742438           mov rsi, qword ptr [rsp+0x38]
   .text:0x0000000000009FDC        33C0                 xor eax, eax
   .text:0x0000000000009FDE        85DB                 test ebx, ebx
   .text:0x0000000000009FE0        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x0000000000009FE5        0F94C0               sete al
   .text:0x0000000000009FE8        4883C420             add rsp, 0x20
   .text:0x0000000000009FEC        5F                   pop rdi
   .text:0x0000000000009FED        C3                   ret
   .text:0x0000000000009FEE data_0x9FEE:
   .text:0x0000000000009FEE        db 2 dup(0xCC)
   .text:0x0000000000009FF0 _handle_error:
   .text:0x0000000000009FF0        488BC4               mov rax, rsp
   .text:0x0000000000009FF3        55                   push rbp
   .text:0x0000000000009FF4        53                   push rbx
   .text:0x0000000000009FF5        56                   push rsi
   .text:0x0000000000009FF6        57                   push rdi
   .text:0x0000000000009FF7        4156                 push r14
   .text:0x0000000000009FF9        488D68C9             lea rbp, [rax-0x37]
   .text:0x0000000000009FFD        4881ECF0000000       sub rsp, 0xF0
   .text:0x000000000000A004        0F2970C8             movaps xmmword ptr [rax-0x38], xmm6
   .text:0x000000000000A008        488B0519A00000       mov rax, qword ptr [__security_cookie]
   .text:0x000000000000A00F        4833C4               xor rax, rsp
   .text:0x000000000000A012        488945EF             mov qword ptr [rbp-0x11], rax
   .text:0x000000000000A016        8BF2                 mov esi, edx
   .text:0x000000000000A018        4C8BF1               mov r14, rcx
   .text:0x000000000000A01B        BAC0FF0000           mov edx, 0xFFC0
   .text:0x000000000000A020        B9801F0000           mov ecx, 0x1F80
   .text:0x000000000000A025        418BF9               mov edi, r9d
   .text:0x000000000000A028        498BD8               mov rbx, r8
   .text:0x000000000000A02B        E808060000           call func_0xA638; int32_t __cdecl( int64_t p1, int64_t p2 )
   .text:0x000000000000A030        8B4D5F               mov ecx, dword ptr [rbp+0x5F]
   .text:0x000000000000A033        4889442440           mov qword ptr [rsp+0x40], rax
   .text:0x000000000000A038        48895C2450           mov qword ptr [rsp+0x50], rbx
   .text:0x000000000000A03D        F20F10442450         movsd xmm0, qword ptr [rsp+0x50]
   .text:0x000000000000A043        488B542440           mov rdx, qword ptr [rsp+0x40]
   .text:0x000000000000A048        F20F11442448         movsd qword ptr [rsp+0x48], xmm0
   .text:0x000000000000A04E        E8E1FEFFFF           call _exception_enabled; int32_t __cdecl( int32_t p1, int64_t p2 )
   .text:0x000000000000A053        F20F107577           movsd xmm6, qword ptr [rbp+0x77]
   .text:0x000000000000A058        85C0                 test eax, eax
   .text:0x000000000000A05A        7540                 jnz code_0xA09C
   .text:0x000000000000A05C code_0xA05C:
   .text:0x000000000000A05C        837D7F02             cmp dword ptr [rbp+0x7F], 0x2
   .text:0x000000000000A060        7511                 jnz code_0xA073
   .text:0x000000000000A062 code_0xA062:
   .text:0x000000000000A062        8B45BF               mov eax, dword ptr [rbp-0x41]
   .text:0x000000000000A065        83E0E3               and eax, 0xFFFFFFE3
   .text:0x000000000000A068        F20F1175AF           movsd qword ptr [rbp-0x51], xmm6
   .text:0x000000000000A06D        83C803               or eax, 0x3
   .text:0x000000000000A070        8945BF               mov dword ptr [rbp-0x41], eax
   .text:0x000000000000A073 code_0xA073:
   .text:0x000000000000A073        448B455F             mov r8d, dword ptr [rbp+0x5F]
   .text:0x000000000000A077        488D442448           lea rax, [rsp+0x48]
   .text:0x000000000000A07C        4889442428           mov qword ptr [rsp+0x28], rax
   .text:0x000000000000A081        488D542440           lea rdx, [rsp+0x40]
   .text:0x000000000000A086        488D456F             lea rax, [rbp+0x6F]
   .text:0x000000000000A08A        448BCE               mov r9d, esi
   .text:0x000000000000A08D        488D4C2460           lea rcx, [rsp+0x60]
   .text:0x000000000000A092        4889442420           mov qword ptr [rsp+0x20], rax
   .text:0x000000000000A097        E814020000           call _raise_exc; void __cdecl( int64_t p1, int64_t p2, int64_t p3, int64_t p4, int64_t p5, int64_t p6 )
   .text:0x000000000000A09C code_0xA09C:
   .text:0x000000000000A09C        E89F8AFFFF           call __acrt_has_user_matherr; inline int8_t __cdecl( void )
   .text:0x000000000000A0A1        84C0                 test al, al
   .text:0x000000000000A0A3        7434                 jz code_0xA0D9
   .text:0x000000000000A0A5 code_0xA0A5:
   .text:0x000000000000A0A5        85FF                 test edi, edi
   .text:0x000000000000A0A7        7430                 jz code_0xA0D9
   .text:0x000000000000A0A9 code_0xA0A9:
   .text:0x000000000000A0A9        488B442440           mov rax, qword ptr [rsp+0x40]
   .text:0x000000000000A0AE        4D8BC6               mov r8, r14
   .text:0x000000000000A0B1        F20F10442448         movsd xmm0, qword ptr [rsp+0x48]
   .text:0x000000000000A0B7        8BCF                 mov ecx, edi
   .text:0x000000000000A0B9        F20F105D6F           movsd xmm3, qword ptr [rbp+0x6F]
   .text:0x000000000000A0BE        8B5567               mov edx, dword ptr [rbp+0x67]
   .text:0x000000000000A0C1        4889442430           mov qword ptr [rsp+0x30], rax
   .text:0x000000000000A0C6        F20F11442428         movsd qword ptr [rsp+0x28], xmm0
   .text:0x000000000000A0CC        F20F11742420         movsd qword ptr [rsp+0x20], xmm6
   .text:0x000000000000A0D2        E8F5FDFFFF           call _call_matherr; void __cdecl( int32_t p1, int64_t p2, int64_t p3, int64_t p4, int64_t p5, int64_t p6, int64_t p7 )
   .text:0x000000000000A0D7        EB1C                 jmp code_0xA0F5
   .text:0x000000000000A0D9 code_0xA0D9:
   .text:0x000000000000A0D9        8BCF                 mov ecx, edi
   .text:0x000000000000A0DB        E808050000           call _set_errno_from_matherr; void __cdecl( int32_t p1 )
   .text:0x000000000000A0E0        488B4C2440           mov rcx, qword ptr [rsp+0x40]
   .text:0x000000000000A0E5        BAC0FF0000           mov edx, 0xFFC0
   .text:0x000000000000A0EA        E849050000           call func_0xA638; int32_t __cdecl( int64_t p1, int64_t p2 )
   .text:0x000000000000A0EF        F20F10442448         movsd xmm0, qword ptr [rsp+0x48]
   .text:0x000000000000A0F5 code_0xA0F5:
   .text:0x000000000000A0F5        488B4DEF             mov rcx, qword ptr [rbp-0x11]
   .text:0x000000000000A0F9        4833CC               xor rcx, rsp
   .text:0x000000000000A0FC        E84F070000           call __security_check_cookie; noclobber void __cdecl( uint64_t p1 )
   .text:0x000000000000A101        0F28B424E0000000     movaps xmm6, xmmword ptr [rsp+0xE0]
   .text:0x000000000000A109        4881C4F0000000       add rsp, 0xF0
   .text:0x000000000000A110        415E                 pop r14
   .text:0x000000000000A112        5F                   pop rdi
   .text:0x000000000000A113        5E                   pop rsi
   .text:0x000000000000A114        5B                   pop rbx
   .text:0x000000000000A115        5D                   pop rbp
   .text:0x000000000000A116        C3                   ret
   .text:0x000000000000A117 data_0xA117:
   .text:0x000000000000A117        db 9 dup(0xCC)
   .text:0x000000000000A120 __acrt_initialize_fma3:
   .text:0x000000000000A120        4053                 push rbx
   .text:0x000000000000A122        4883EC10             sub rsp, 0x10
   .text:0x000000000000A126        4533C0               xor r8d, r8d
   .text:0x000000000000A129        33C9                 xor ecx, ecx
   .text:0x000000000000A12B        44890506B50000       mov dword ptr [data_0x15638], r8d
   .text:0x000000000000A132        458D4801             lea r9d, [r8+0x1]
   .text:0x000000000000A136        418BC1               mov eax, r9d
   .text:0x000000000000A139        0FA2                 cpuid
   .text:0x000000000000A13B        890424               mov dword ptr [rsp], eax
   .text:0x000000000000A13E        B800100018           mov eax, 0x18001000
   .text:0x000000000000A143        894C2408             mov dword ptr [rsp+0x8], ecx
   .text:0x000000000000A147        23C8                 and ecx, eax
   .text:0x000000000000A149        895C2404             mov dword ptr [rsp+0x4], ebx
   .text:0x000000000000A14D        8954240C             mov dword ptr [rsp+0xC], edx
   .text:0x000000000000A151        3BC8                 cmp ecx, eax
   .text:0x000000000000A153        752C                 jnz code_0xA181
   .text:0x000000000000A155 code_0xA155:
   .text:0x000000000000A155        33C9                 xor ecx, ecx
   .text:0x000000000000A157        0F01D0               xgetbv
   .text:0x000000000000A15A        48C1E220             shl rdx, 0x20
   .text:0x000000000000A15E        480BD0               or rdx, rax
   .text:0x000000000000A161        4889542420           mov qword ptr [rsp+0x20], rdx
   .text:0x000000000000A166        488B442420           mov rax, qword ptr [rsp+0x20]
   .text:0x000000000000A16B        448B05C6B40000       mov r8d, dword ptr [data_0x15638]
   .text:0x000000000000A172        2406                 and al, 0x6
   .text:0x000000000000A174        3C06                 cmp al, 0x6
   .text:0x000000000000A176        450F44C1             cmove r8d, r9d
   .text:0x000000000000A17A        448905B7B40000       mov dword ptr [data_0x15638], r8d
   .text:0x000000000000A181 code_0xA181:
   .text:0x000000000000A181        448905B4B40000       mov dword ptr [data_0x1563C], r8d
   .text:0x000000000000A188        33C0                 xor eax, eax
   .text:0x000000000000A18A        4883C410             add rsp, 0x10
   .text:0x000000000000A18E        5B                   pop rbx
   .text:0x000000000000A18F        C3                   ret
   .text:0x000000000000A190 _log10_special:
   .text:0x000000000000A190        4883EC38             sub rsp, 0x38
   .text:0x000000000000A194        488D05A5800000       lea rax, [string_log10]; "log10"
   .text:0x000000000000A19B        41B91B000000         mov r9d, 0x1B
   .text:0x000000000000A1A1        4889442420           mov qword ptr [rsp+0x20], rax
   .text:0x000000000000A1A6        E805000000           call _log_special_common; void __cdecl( void )
   .text:0x000000000000A1AB        4883C438             add rsp, 0x38
   .text:0x000000000000A1AF        C3                   ret
   .text:0x000000000000A1B0 _log_special_common:
   .text:0x000000000000A1B0        488BC4               mov rax, rsp
   .text:0x000000000000A1B3        4883EC68             sub rsp, 0x68
   .text:0x000000000000A1B7        0F2970E8             movaps xmmword ptr [rax-0x18], xmm6
   .text:0x000000000000A1BB        0F28F1               movaps xmm6, xmm1
   .text:0x000000000000A1BE        418BD1               mov edx, r9d
   .text:0x000000000000A1C1        0F28D8               movaps xmm3, xmm0
   .text:0x000000000000A1C4        4183E801             sub r8d, 0x1
   .text:0x000000000000A1C8        742A                 jz code_0xA1F4
   .text:0x000000000000A1CA code_0xA1CA:
   .text:0x000000000000A1CA        4183F801             cmp r8d, 0x1
   .text:0x000000000000A1CE        7569                 jnz code_0xA239
   .text:0x000000000000A1D0 code_0xA1D0:
   .text:0x000000000000A1D0        448940D8             mov dword ptr [rax-0x28], r8d
   .text:0x000000000000A1D4        0F57D2               xorps xmm2, xmm2
   .text:0x000000000000A1D7        F20F1150D0           movsd qword ptr [rax-0x30], xmm2
   .text:0x000000000000A1DC        458BC8               mov r9d, r8d
   .text:0x000000000000A1DF        F20F1140C8           movsd qword ptr [rax-0x38], xmm0
   .text:0x000000000000A1E4        C740C021000000       mov dword ptr [rax-0x40], 0x21
   .text:0x000000000000A1EB        C740B808000000       mov dword ptr [rax-0x48], 0x8
   .text:0x000000000000A1F2        EB2D                 jmp code_0xA221
   .text:0x000000000000A1F4 code_0xA1F4:
   .text:0x000000000000A1F4        C744244001000000     mov dword ptr [rsp+0x40], 0x1
   .text:0x000000000000A1FC        0F57C0               xorps xmm0, xmm0
   .text:0x000000000000A1FF        F20F11442438         movsd qword ptr [rsp+0x38], xmm0
   .text:0x000000000000A205        41B902000000         mov r9d, 0x2
   .text:0x000000000000A20B        F20F115C2430         movsd qword ptr [rsp+0x30], xmm3
   .text:0x000000000000A211        C744242822000000     mov dword ptr [rsp+0x28], 0x22
   .text:0x000000000000A219        C744242004000000     mov dword ptr [rsp+0x20], 0x4
   .text:0x000000000000A221 code_0xA221:
   .text:0x000000000000A221        488B8C2490000000     mov rcx, qword ptr [rsp+0x90]
   .text:0x000000000000A229        F20F11742478         movsd qword ptr [rsp+0x78], xmm6
   .text:0x000000000000A22F        4C8B442478           mov r8, qword ptr [rsp+0x78]
   .text:0x000000000000A234        E8B7FDFFFF           call _handle_error; void __cdecl( int64_t p1, int32_t p2, int64_t p3, int32_t p4, int32_t p5, int32_t p6, int64_t p7, int64_t p8, int32_t p9 )
   .text:0x000000000000A239 code_0xA239:
   .text:0x000000000000A239        0F28C6               movaps xmm0, xmm6
   .text:0x000000000000A23C        0F28742450           movaps xmm6, xmmword ptr [rsp+0x50]
   .text:0x000000000000A241        4883C468             add rsp, 0x68
   .text:0x000000000000A245        C3                   ret
   .text:0x000000000000A246 data_0xA246:
   .text:0x000000000000A246        db 16 dup(0xCC)
   .text:0x000000000000A256 data_0xA256:
   .text:0x000000000000A256        dq 0x000000841F0F6666
   .text:0x000000000000A25E        dw 0x0000
   .text:0x000000000000A260 _get_fpsr:
   .text:0x000000000000A260        4883EC08             sub rsp, 0x8
   .text:0x000000000000A264        0FAE1C24             stmxcsr dword ptr [rsp]
   .text:0x000000000000A268        8B0424               mov eax, dword ptr [rsp]
   .text:0x000000000000A26B        4883C408             add rsp, 0x8
   .text:0x000000000000A26F        C3                   ret
   .text:0x000000000000A270 _set_fpsr:
   .text:0x000000000000A270        894C2408             mov dword ptr [rsp+0x8], ecx
   .text:0x000000000000A274        0FAE542408           ldmxcsr dword ptr [rsp+0x8]
   .text:0x000000000000A279        C3                   ret
   .text:0x000000000000A27A _fclrf:
   .text:0x000000000000A27A        0FAE5C2408           stmxcsr dword ptr [rsp+0x8]
   .text:0x000000000000A27F        B9C0FFFFFF           mov ecx, 0xFFFFFFC0
   .text:0x000000000000A284        214C2408             and dword ptr [rsp+0x8], ecx
   .text:0x000000000000A288        0FAE542408           ldmxcsr dword ptr [rsp+0x8]
   .text:0x000000000000A28D        C3                   ret
   .text:0x000000000000A28E _frnd:
   .text:0x000000000000A28E        660F2E05BA7F0000     ucomisd xmm0, qword ptr [data_0x12250]
   .text:0x000000000000A296        7314                 jae code_0xA2AC
   .text:0x000000000000A298 code_0xA298:
   .text:0x000000000000A298        660F2E05B87F0000     ucomisd xmm0, qword ptr [data_0x12258]
   .text:0x000000000000A2A0        760A                 jbe code_0xA2AC
   .text:0x000000000000A2A2 code_0xA2A2:
   .text:0x000000000000A2A2        F2480F2DC8           cvtsd2si rcx, xmm0
   .text:0x000000000000A2A7        F2480F2AC1           cvtsi2sd xmm0, rcx
   .text:0x000000000000A2AC code_0xA2AC:
   .text:0x000000000000A2AC        C3                   ret
   .text:0x000000000000A2AD data_0xA2AD:
   .text:0x000000000000A2AD        db 3 dup(0xCC)
   .text:0x000000000000A2B0 _raise_exc:
   .text:0x000000000000A2B0        4883EC48             sub rsp, 0x48
   .text:0x000000000000A2B4        8364243000           and dword ptr [rsp+0x30], 0x0
   .text:0x000000000000A2B9        488B442478           mov rax, qword ptr [rsp+0x78]
   .text:0x000000000000A2BE        4889442428           mov qword ptr [rsp+0x28], rax
   .text:0x000000000000A2C3        488B442470           mov rax, qword ptr [rsp+0x70]
   .text:0x000000000000A2C8        4889442420           mov qword ptr [rsp+0x20], rax
   .text:0x000000000000A2CD        E806000000           call _raise_exc_ex; void __cdecl( int64_t p1, int64_t p2, int8_t p3, int32_t p4, int64_t p5, int64_t p6, int32_t p7 )
   .text:0x000000000000A2D2        4883C448             add rsp, 0x48
   .text:0x000000000000A2D6        C3                   ret
   .text:0x000000000000A2D7 code_0xA2D7:
   .text:0x000000000000A2D7        CC                   int3
   .text:0x000000000000A2D8 _raise_exc_ex:
   .text:0x000000000000A2D8        488BC4               mov rax, rsp
   .text:0x000000000000A2DB        48895810             mov qword ptr [rax+0x10], rbx
   .text:0x000000000000A2DF        48897018             mov qword ptr [rax+0x18], rsi
   .text:0x000000000000A2E3        48897820             mov qword ptr [rax+0x20], rdi
   .text:0x000000000000A2E7        48894808             mov qword ptr [rax+0x8], rcx
   .text:0x000000000000A2EB        55                   push rbp
   .text:0x000000000000A2EC        488BEC               mov rbp, rsp
   .text:0x000000000000A2EF        4883EC20             sub rsp, 0x20
   .text:0x000000000000A2F3        488BDA               mov rbx, rdx
   .text:0x000000000000A2F6        418BF1               mov esi, r9d
   .text:0x000000000000A2F9        33D2                 xor edx, edx
   .text:0x000000000000A2FB        BF0D0000C0           mov edi, 0xC000000D
   .text:0x000000000000A300        895104               mov dword ptr [rcx+0x4], edx
   .text:0x000000000000A303        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A307        895008               mov dword ptr [rax+0x8], edx
   .text:0x000000000000A30A        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A30E        89500C               mov dword ptr [rax+0xC], edx
   .text:0x000000000000A311        41F6C010             test r8b, 0x10
   .text:0x000000000000A315        740D                 jz code_0xA324
   .text:0x000000000000A317 code_0xA317:
   .text:0x000000000000A317        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A31B        BF8F0000C0           mov edi, 0xC000008F
   .text:0x000000000000A320        83480401             or dword ptr [rax+0x4], 0x1
   .text:0x000000000000A324 code_0xA324:
   .text:0x000000000000A324        41F6C002             test r8b, 0x2
   .text:0x000000000000A328        740D                 jz code_0xA337
   .text:0x000000000000A32A code_0xA32A:
   .text:0x000000000000A32A        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A32E        BF930000C0           mov edi, 0xC0000093
   .text:0x000000000000A333        83480402             or dword ptr [rax+0x4], 0x2
   .text:0x000000000000A337 code_0xA337:
   .text:0x000000000000A337        41F6C001             test r8b, 0x1
   .text:0x000000000000A33B        740D                 jz code_0xA34A
   .text:0x000000000000A33D code_0xA33D:
   .text:0x000000000000A33D        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A341        BF910000C0           mov edi, 0xC0000091
   .text:0x000000000000A346        83480404             or dword ptr [rax+0x4], 0x4
   .text:0x000000000000A34A code_0xA34A:
   .text:0x000000000000A34A        41F6C004             test r8b, 0x4
   .text:0x000000000000A34E        740D                 jz code_0xA35D
   .text:0x000000000000A350 code_0xA350:
   .text:0x000000000000A350        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A354        BF8E0000C0           mov edi, 0xC000008E
   .text:0x000000000000A359        83480408             or dword ptr [rax+0x4], 0x8
   .text:0x000000000000A35D code_0xA35D:
   .text:0x000000000000A35D        41F6C008             test r8b, 0x8
   .text:0x000000000000A361        740D                 jz code_0xA370
   .text:0x000000000000A363 code_0xA363:
   .text:0x000000000000A363        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A367        BF900000C0           mov edi, 0xC0000090
   .text:0x000000000000A36C        83480410             or dword ptr [rax+0x4], 0x10
   .text:0x000000000000A370 code_0xA370:
   .text:0x000000000000A370        488B4D10             mov rcx, qword ptr [rbp+0x10]
   .text:0x000000000000A374        488B03               mov rax, qword ptr [rbx]
   .text:0x000000000000A377        48C1E807             shr rax, 0x7
   .text:0x000000000000A37B        C1E004               shl eax, 0x4
   .text:0x000000000000A37E        F7D0                 not eax
   .text:0x000000000000A380        334108               xor eax, dword ptr [rcx+0x8]
   .text:0x000000000000A383        83E010               and eax, 0x10
   .text:0x000000000000A386        314108               xor dword ptr [rcx+0x8], eax
   .text:0x000000000000A389        488B4D10             mov rcx, qword ptr [rbp+0x10]
   .text:0x000000000000A38D        488B03               mov rax, qword ptr [rbx]
   .text:0x000000000000A390        48C1E809             shr rax, 0x9
   .text:0x000000000000A394        C1E003               shl eax, 0x3
   .text:0x000000000000A397        F7D0                 not eax
   .text:0x000000000000A399        334108               xor eax, dword ptr [rcx+0x8]
   .text:0x000000000000A39C        83E008               and eax, 0x8
   .text:0x000000000000A39F        314108               xor dword ptr [rcx+0x8], eax
   .text:0x000000000000A3A2        488B4D10             mov rcx, qword ptr [rbp+0x10]
   .text:0x000000000000A3A6        488B03               mov rax, qword ptr [rbx]
   .text:0x000000000000A3A9        48C1E80A             shr rax, 0xA
   .text:0x000000000000A3AD        C1E002               shl eax, 0x2
   .text:0x000000000000A3B0        F7D0                 not eax
   .text:0x000000000000A3B2        334108               xor eax, dword ptr [rcx+0x8]
   .text:0x000000000000A3B5        83E004               and eax, 0x4
   .text:0x000000000000A3B8        314108               xor dword ptr [rcx+0x8], eax
   .text:0x000000000000A3BB        488B4D10             mov rcx, qword ptr [rbp+0x10]
   .text:0x000000000000A3BF        488B03               mov rax, qword ptr [rbx]
   .text:0x000000000000A3C2        48C1E80B             shr rax, 0xB
   .text:0x000000000000A3C6        03C0                 add eax, eax
   .text:0x000000000000A3C8        F7D0                 not eax
   .text:0x000000000000A3CA        334108               xor eax, dword ptr [rcx+0x8]
   .text:0x000000000000A3CD        83E002               and eax, 0x2
   .text:0x000000000000A3D0        314108               xor dword ptr [rcx+0x8], eax
   .text:0x000000000000A3D3        8B03                 mov eax, dword ptr [rbx]
   .text:0x000000000000A3D5        488B4D10             mov rcx, qword ptr [rbp+0x10]
   .text:0x000000000000A3D9        48C1E80C             shr rax, 0xC
   .text:0x000000000000A3DD        F7D0                 not eax
   .text:0x000000000000A3DF        334108               xor eax, dword ptr [rcx+0x8]
   .text:0x000000000000A3E2        83E001               and eax, 0x1
   .text:0x000000000000A3E5        314108               xor dword ptr [rcx+0x8], eax
   .text:0x000000000000A3E8        E8E7020000           call _statfp; int32_t __cdecl( void )
   .text:0x000000000000A3ED        488BD0               mov rdx, rax
   .text:0x000000000000A3F0        A801                 test al, 0x1
   .text:0x000000000000A3F2        7408                 jz code_0xA3FC
   .text:0x000000000000A3F4 code_0xA3F4:
   .text:0x000000000000A3F4        488B4D10             mov rcx, qword ptr [rbp+0x10]
   .text:0x000000000000A3F8        83490C10             or dword ptr [rcx+0xC], 0x10
   .text:0x000000000000A3FC code_0xA3FC:
   .text:0x000000000000A3FC        F6C204               test dl, 0x4
   .text:0x000000000000A3FF        7408                 jz code_0xA409
   .text:0x000000000000A401 code_0xA401:
   .text:0x000000000000A401        488B4D10             mov rcx, qword ptr [rbp+0x10]
   .text:0x000000000000A405        83490C08             or dword ptr [rcx+0xC], 0x8
   .text:0x000000000000A409 code_0xA409:
   .text:0x000000000000A409        F6C208               test dl, 0x8
   .text:0x000000000000A40C        7408                 jz code_0xA416
   .text:0x000000000000A40E code_0xA40E:
   .text:0x000000000000A40E        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A412        83480C04             or dword ptr [rax+0xC], 0x4
   .text:0x000000000000A416 code_0xA416:
   .text:0x000000000000A416        F6C210               test dl, 0x10
   .text:0x000000000000A419        7408                 jz code_0xA423
   .text:0x000000000000A41B code_0xA41B:
   .text:0x000000000000A41B        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A41F        83480C02             or dword ptr [rax+0xC], 0x2
   .text:0x000000000000A423 code_0xA423:
   .text:0x000000000000A423        F6C220               test dl, 0x20
   .text:0x000000000000A426        7408                 jz code_0xA430
   .text:0x000000000000A428 code_0xA428:
   .text:0x000000000000A428        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A42C        83480C01             or dword ptr [rax+0xC], 0x1
   .text:0x000000000000A430 code_0xA430:
   .text:0x000000000000A430        8B03                 mov eax, dword ptr [rbx]
   .text:0x000000000000A432        B900600000           mov ecx, 0x6000
   .text:0x000000000000A437        4823C1               and rax, rcx
   .text:0x000000000000A43A        743E                 jz code_0xA47A
   .text:0x000000000000A43C code_0xA43C:
   .text:0x000000000000A43C        483D00200000         cmp rax, 0x2000
   .text:0x000000000000A442        7426                 jz code_0xA46A
   .text:0x000000000000A444 code_0xA444:
   .text:0x000000000000A444        483D00400000         cmp rax, 0x4000
   .text:0x000000000000A44A        740E                 jz code_0xA45A
   .text:0x000000000000A44C code_0xA44C:
   .text:0x000000000000A44C        483BC1               cmp rax, rcx
   .text:0x000000000000A44F        7530                 jnz code_0xA481
   .text:0x000000000000A451 code_0xA451:
   .text:0x000000000000A451        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A455        830803               or dword ptr [rax], 0x3
   .text:0x000000000000A458        EB27                 jmp code_0xA481
   .text:0x000000000000A45A code_0xA45A:
   .text:0x000000000000A45A        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A45E        8320FE               and dword ptr [rax], 0xFFFFFFFE
   .text:0x000000000000A461        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A465        830802               or dword ptr [rax], 0x2
   .text:0x000000000000A468        EB17                 jmp code_0xA481
   .text:0x000000000000A46A code_0xA46A:
   .text:0x000000000000A46A        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A46E        8320FD               and dword ptr [rax], 0xFFFFFFFD
   .text:0x000000000000A471        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A475        830801               or dword ptr [rax], 0x1
   .text:0x000000000000A478        EB07                 jmp code_0xA481
   .text:0x000000000000A47A code_0xA47A:
   .text:0x000000000000A47A        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A47E        8320FC               and dword ptr [rax], 0xFFFFFFFC
   .text:0x000000000000A481 code_0xA481:
   .text:0x000000000000A481        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A485        81E6FF0F0000         and esi, 0xFFF
   .text:0x000000000000A48B        C1E605               shl esi, 0x5
   .text:0x000000000000A48E        81201F00FEFF         and dword ptr [rax], 0xFFFE001F
   .text:0x000000000000A494        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A498        0930                 or dword ptr [rax], esi
   .text:0x000000000000A49A        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A49E        488B7538             mov rsi, qword ptr [rbp+0x38]
   .text:0x000000000000A4A2        83482001             or dword ptr [rax+0x20], 0x1
   .text:0x000000000000A4A6        837D4000             cmp dword ptr [rbp+0x40], 0x0
   .text:0x000000000000A4AA        7433                 jz code_0xA4DF
   .text:0x000000000000A4AC code_0xA4AC:
   .text:0x000000000000A4AC        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A4B0        BAE1FFFFFF           mov edx, 0xFFFFFFE1
   .text:0x000000000000A4B5        215020               and dword ptr [rax+0x20], edx
   .text:0x000000000000A4B8        488B4530             mov rax, qword ptr [rbp+0x30]
   .text:0x000000000000A4BC        8B08                 mov ecx, dword ptr [rax]
   .text:0x000000000000A4BE        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A4C2        894810               mov dword ptr [rax+0x10], ecx
   .text:0x000000000000A4C5        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A4C9        83486001             or dword ptr [rax+0x60], 0x1
   .text:0x000000000000A4CD        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A4D1        215060               and dword ptr [rax+0x60], edx
   .text:0x000000000000A4D4        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A4D8        8B0E                 mov ecx, dword ptr [rsi]
   .text:0x000000000000A4DA        894850               mov dword ptr [rax+0x50], ecx
   .text:0x000000000000A4DD        EB48                 jmp code_0xA527
   .text:0x000000000000A4DF code_0xA4DF:
   .text:0x000000000000A4DF        488B4D10             mov rcx, qword ptr [rbp+0x10]
   .text:0x000000000000A4E3        41B8E3FFFFFF         mov r8d, 0xFFFFFFE3
   .text:0x000000000000A4E9        8B4120               mov eax, dword ptr [rcx+0x20]
   .text:0x000000000000A4EC        4123C0               and eax, r8d
   .text:0x000000000000A4EF        83C802               or eax, 0x2
   .text:0x000000000000A4F2        894120               mov dword ptr [rcx+0x20], eax
   .text:0x000000000000A4F5        488B4530             mov rax, qword ptr [rbp+0x30]
   .text:0x000000000000A4F9        488B08               mov rcx, qword ptr [rax]
   .text:0x000000000000A4FC        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A500        48894810             mov qword ptr [rax+0x10], rcx
   .text:0x000000000000A504        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A508        83486001             or dword ptr [rax+0x60], 0x1
   .text:0x000000000000A50C        488B5510             mov rdx, qword ptr [rbp+0x10]
   .text:0x000000000000A510        8B4260               mov eax, dword ptr [rdx+0x60]
   .text:0x000000000000A513        4123C0               and eax, r8d
   .text:0x000000000000A516        83C802               or eax, 0x2
   .text:0x000000000000A519        894260               mov dword ptr [rdx+0x60], eax
   .text:0x000000000000A51C        488B4510             mov rax, qword ptr [rbp+0x10]
   .text:0x000000000000A520        488B16               mov rdx, qword ptr [rsi]
   .text:0x000000000000A523        48895050             mov qword ptr [rax+0x50], rdx
   .text:0x000000000000A527 code_0xA527:
   .text:0x000000000000A527        E8EC000000           call _clrfp; int32_t __cdecl( void )
   .text:0x000000000000A52C        33D2                 xor edx, edx
   .text:0x000000000000A52E        4C8D4D10             lea r9, [rbp+0x10]
   .text:0x000000000000A532        8BCF                 mov ecx, edi
   .text:0x000000000000A534        448D4201             lea r8d, [rdx+0x1]
   .text:0x000000000000A538        FF15BA0B0000         call qword ptr [RaiseException]; void (__cdecl *)( unsigned long dwExceptionCode, unsigned long dwExceptionFlags, unsigned long nNumberOfArguments, unsigned long long * lpArguments )
   .text:0x000000000000A53E        488B4D10             mov rcx, qword ptr [rbp+0x10]
   .text:0x000000000000A542        8B4108               mov eax, dword ptr [rcx+0x8]
   .text:0x000000000000A545        A810                 test al, 0x10
   .text:0x000000000000A547        7408                 jz code_0xA551
   .text:0x000000000000A549 code_0xA549:
   .text:0x000000000000A549        480FBA3307           btr qword ptr [rbx], 0x7
   .text:0x000000000000A54E        8B4108               mov eax, dword ptr [rcx+0x8]
   .text:0x000000000000A551 code_0xA551:
   .text:0x000000000000A551        A808                 test al, 0x8
   .text:0x000000000000A553        7408                 jz code_0xA55D
   .text:0x000000000000A555 code_0xA555:
   .text:0x000000000000A555        480FBA3309           btr qword ptr [rbx], 0x9
   .text:0x000000000000A55A        8B4108               mov eax, dword ptr [rcx+0x8]
   .text:0x000000000000A55D code_0xA55D:
   .text:0x000000000000A55D        A804                 test al, 0x4
   .text:0x000000000000A55F        7408                 jz code_0xA569
   .text:0x000000000000A561 code_0xA561:
   .text:0x000000000000A561        480FBA330A           btr qword ptr [rbx], 0xA
   .text:0x000000000000A566        8B4108               mov eax, dword ptr [rcx+0x8]
   .text:0x000000000000A569 code_0xA569:
   .text:0x000000000000A569        A802                 test al, 0x2
   .text:0x000000000000A56B        7408                 jz code_0xA575
   .text:0x000000000000A56D code_0xA56D:
   .text:0x000000000000A56D        480FBA330B           btr qword ptr [rbx], 0xB
   .text:0x000000000000A572        8B4108               mov eax, dword ptr [rcx+0x8]
   .text:0x000000000000A575 code_0xA575:
   .text:0x000000000000A575        A801                 test al, 0x1
   .text:0x000000000000A577        7405                 jz code_0xA57E
   .text:0x000000000000A579 code_0xA579:
   .text:0x000000000000A579        480FBA330C           btr qword ptr [rbx], 0xC
   .text:0x000000000000A57E code_0xA57E:
   .text:0x000000000000A57E        8B01                 mov eax, dword ptr [rcx]
   .text:0x000000000000A580        83E003               and eax, 0x3
   .text:0x000000000000A583        7430                 jz code_0xA5B5
   .text:0x000000000000A585 code_0xA585:
   .text:0x000000000000A585        83E801               sub eax, 0x1
   .text:0x000000000000A588        741F                 jz code_0xA5A9
   .text:0x000000000000A58A code_0xA58A:
   .text:0x000000000000A58A        83E801               sub eax, 0x1
   .text:0x000000000000A58D        740E                 jz code_0xA59D
   .text:0x000000000000A58F code_0xA58F:
   .text:0x000000000000A58F        83F801               cmp eax, 0x1
   .text:0x000000000000A592        7528                 jnz code_0xA5BC
   .text:0x000000000000A594 code_0xA594:
   .text:0x000000000000A594        48810B00600000       or qword ptr [rbx], 0x6000
   .text:0x000000000000A59B        EB1F                 jmp code_0xA5BC
   .text:0x000000000000A59D code_0xA59D:
   .text:0x000000000000A59D        480FBA330D           btr qword ptr [rbx], 0xD
   .text:0x000000000000A5A2        480FBA2B0E           bts qword ptr [rbx], 0xE
   .text:0x000000000000A5A7        EB13                 jmp code_0xA5BC
   .text:0x000000000000A5A9 code_0xA5A9:
   .text:0x000000000000A5A9        480FBA330E           btr qword ptr [rbx], 0xE
   .text:0x000000000000A5AE        480FBA2B0D           bts qword ptr [rbx], 0xD
   .text:0x000000000000A5B3        EB07                 jmp code_0xA5BC
   .text:0x000000000000A5B5 code_0xA5B5:
   .text:0x000000000000A5B5        488123FF9FFFFF       and qword ptr [rbx], 0xFFFFFFFFFFFF9FFF
   .text:0x000000000000A5BC code_0xA5BC:
   .text:0x000000000000A5BC        837D4000             cmp dword ptr [rbp+0x40], 0x0
   .text:0x000000000000A5C0        7407                 jz code_0xA5C9
   .text:0x000000000000A5C2 code_0xA5C2:
   .text:0x000000000000A5C2        8B4150               mov eax, dword ptr [rcx+0x50]
   .text:0x000000000000A5C5        8906                 mov dword ptr [rsi], eax
   .text:0x000000000000A5C7        EB07                 jmp code_0xA5D0
   .text:0x000000000000A5C9 code_0xA5C9:
   .text:0x000000000000A5C9        488B4150             mov rax, qword ptr [rcx+0x50]
   .text:0x000000000000A5CD        488906               mov qword ptr [rsi], rax
   .text:0x000000000000A5D0 code_0xA5D0:
   .text:0x000000000000A5D0        488B5C2438           mov rbx, qword ptr [rsp+0x38]
   .text:0x000000000000A5D5        488B742440           mov rsi, qword ptr [rsp+0x40]
   .text:0x000000000000A5DA        488B7C2448           mov rdi, qword ptr [rsp+0x48]
   .text:0x000000000000A5DF        4883C420             add rsp, 0x20
   .text:0x000000000000A5E3        5D                   pop rbp
   .text:0x000000000000A5E4        C3                   ret
   .text:0x000000000000A5E5 data_0xA5E5:
   .text:0x000000000000A5E5        db 3 dup(0xCC)
   .text:0x000000000000A5E8 _set_errno_from_matherr:
   .text:0x000000000000A5E8        4883EC28             sub rsp, 0x28
   .text:0x000000000000A5EC        83F901               cmp ecx, 0x1
   .text:0x000000000000A5EF        7415                 jz code_0xA606
   .text:0x000000000000A5F1 code_0xA5F1:
   .text:0x000000000000A5F1        8D41FE               lea eax, [rcx-0x2]
   .text:0x000000000000A5F4        83F801               cmp eax, 0x1
   .text:0x000000000000A5F7        7718                 ja code_0xA611
   .text:0x000000000000A5F9 code_0xA5F9:
   .text:0x000000000000A5F9        E87EA3FFFF           call _errno; int * __cdecl( void )
   .text:0x000000000000A5FE        C70022000000         mov dword ptr [rax], 0x22
   .text:0x000000000000A604        EB0B                 jmp code_0xA611
   .text:0x000000000000A606 code_0xA606:
   .text:0x000000000000A606        E871A3FFFF           call _errno; int * __cdecl( void )
   .text:0x000000000000A60B        C70021000000         mov dword ptr [rax], 0x21
   .text:0x000000000000A611 code_0xA611:
   .text:0x000000000000A611        4883C428             add rsp, 0x28
   .text:0x000000000000A615        C3                   ret
   .text:0x000000000000A616 data_0xA616:
   .text:0x000000000000A616        db 2 dup(0xCC)
   .text:0x000000000000A618 _clrfp:
   .text:0x000000000000A618        4053                 push rbx
   .text:0x000000000000A61A        4883EC20             sub rsp, 0x20
   .text:0x000000000000A61E        E83DFCFFFF           call _get_fpsr; inline int32_t __cdecl( void )
   .text:0x000000000000A623        8BD8                 mov ebx, eax
   .text:0x000000000000A625        83E33F               and ebx, 0x3F
   .text:0x000000000000A628        E84DFCFFFF           call _fclrf; inline void __cdecl( void )
   .text:0x000000000000A62D        8BC3                 mov eax, ebx
   .text:0x000000000000A62F        4883C420             add rsp, 0x20
   .text:0x000000000000A633        5B                   pop rbx
   .text:0x000000000000A634        C3                   ret
   .text:0x000000000000A635 data_0xA635:
   .text:0x000000000000A635        db 3 dup(0xCC)
   .text:0x000000000000A638 func_0xA638:
   .text:0x000000000000A638        48895C2418           mov qword ptr [rsp+0x18], rbx
   .text:0x000000000000A63D        4889742420           mov qword ptr [rsp+0x20], rsi
   .text:0x000000000000A642        57                   push rdi
   .text:0x000000000000A643        4883EC20             sub rsp, 0x20
   .text:0x000000000000A647        488BDA               mov rbx, rdx
   .text:0x000000000000A64A        488BF9               mov rdi, rcx
   .text:0x000000000000A64D        E80EFCFFFF           call _get_fpsr; inline int32_t __cdecl( void )
   .text:0x000000000000A652        8BF0                 mov esi, eax
   .text:0x000000000000A654        89442438             mov dword ptr [rsp+0x38], eax
   .text:0x000000000000A658        8BCB                 mov ecx, ebx
   .text:0x000000000000A65A        F7D1                 not ecx
   .text:0x000000000000A65C        81C97F80FFFF         or ecx, 0xFFFF807F
   .text:0x000000000000A662        23C8                 and ecx, eax
   .text:0x000000000000A664        23FB                 and edi, ebx
   .text:0x000000000000A666        0BCF                 or ecx, edi
   .text:0x000000000000A668        894C2430             mov dword ptr [rsp+0x30], ecx
   .text:0x000000000000A66C        803D5DA2000000       cmp byte ptr [data_0x148D0], 0x0
   .text:0x000000000000A673        7425                 jz code_0xA69A
   .text:0x000000000000A675 code_0xA675:
   .text:0x000000000000A675        F6C140               test cl, 0x40
   .text:0x000000000000A678        7420                 jz code_0xA69A
   .text:0x000000000000A67A code_0xA67A:
   .text:0x000000000000A67A        E8F1FBFFFF           call _set_fpsr; inline void __cdecl( int32_t p1 )
   .text:0x000000000000A67F        EB21                 jmp code_0xA6A2
   .text:0x000000000000A681 code_0xA681:
   .text:0x000000000000A681        C60548A2000000       mov byte ptr [data_0x148D0], 0x0
   .text:0x000000000000A688        8B4C2430             mov ecx, dword ptr [rsp+0x30]
   .text:0x000000000000A68C        83E1BF               and ecx, 0xFFFFFFBF
   .text:0x000000000000A68F        E8DCFBFFFF           call _set_fpsr; inline void __cdecl( int32_t p1 )
   .text:0x000000000000A694        8B742438             mov esi, dword ptr [rsp+0x38]
   .text:0x000000000000A698        EB08                 jmp code_0xA6A2
   .text:0x000000000000A69A code_0xA69A:
   .text:0x000000000000A69A        83E1BF               and ecx, 0xFFFFFFBF
   .text:0x000000000000A69D        E8CEFBFFFF           call _set_fpsr; inline void __cdecl( int32_t p1 )
   .text:0x000000000000A6A2 code_0xA6A2:
   .text:0x000000000000A6A2        8BC6                 mov eax, esi
   .text:0x000000000000A6A4        488B5C2440           mov rbx, qword ptr [rsp+0x40]
   .text:0x000000000000A6A9        488B742448           mov rsi, qword ptr [rsp+0x48]
   .text:0x000000000000A6AE        4883C420             add rsp, 0x20
   .text:0x000000000000A6B2        5F                   pop rdi
   .text:0x000000000000A6B3        C3                   ret
   .text:0x000000000000A6B4 _set_statfp:
   .text:0x000000000000A6B4        4053                 push rbx
   .text:0x000000000000A6B6        4883EC20             sub rsp, 0x20
   .text:0x000000000000A6BA        488BD9               mov rbx, rcx
   .text:0x000000000000A6BD        E89EFBFFFF           call _get_fpsr; inline int32_t __cdecl( void )
   .text:0x000000000000A6C2        83E33F               and ebx, 0x3F
   .text:0x000000000000A6C5        0BC3                 or eax, ebx
   .text:0x000000000000A6C7        8BC8                 mov ecx, eax
   .text:0x000000000000A6C9        4883C420             add rsp, 0x20
   .text:0x000000000000A6CD        5B                   pop rbx
   .text:0x000000000000A6CE        E99DFBFFFF           jmp _set_fpsr; inline void __cdecl( int32_t p1 )
   .text:0x000000000000A6D3 code_0xA6D3:
   .text:0x000000000000A6D3        CC                   int3
   .text:0x000000000000A6D4 _statfp:
   .text:0x000000000000A6D4        4883EC28             sub rsp, 0x28
   .text:0x000000000000A6D8        E883FBFFFF           call _get_fpsr; inline int32_t __cdecl( void )
   .text:0x000000000000A6DD        83E03F               and eax, 0x3F
   .text:0x000000000000A6E0        4883C428             add rsp, 0x28
   .text:0x000000000000A6E4        C3                   ret
   .text:0x000000000000A6E5 data_0xA6E5:
   .text:0x000000000000A6E5        db 11 dup(0xCC)
   .text:0x000000000000A6F0 _FindPESection:
   .text:0x000000000000A6F0        4C63413C             movsxd r8, dword ptr [rcx+0x3C]
   .text:0x000000000000A6F4        4533C9               xor r9d, r9d
   .text:0x000000000000A6F7        4C03C1               add r8, rcx
   .text:0x000000000000A6FA        4C8BD2               mov r10, rdx
   .text:0x000000000000A6FD        410FB74014           movzx eax, word ptr [r8+0x14]
   .text:0x000000000000A702        450FB75806           movzx r11d, word ptr [r8+0x6]
   .text:0x000000000000A707        4883C018             add rax, 0x18
   .text:0x000000000000A70B        4903C0               add rax, r8
   .text:0x000000000000A70E        4585DB               test r11d, r11d
   .text:0x000000000000A711        741E                 jz code_0xA731
   .text:0x000000000000A713 code_0xA713:
   .text:0x000000000000A713        8B500C               mov edx, dword ptr [rax+0xC]
   .text:0x000000000000A716        4C3BD2               cmp r10, rdx
   .text:0x000000000000A719        720A                 jb code_0xA725
   .text:0x000000000000A71B code_0xA71B:
   .text:0x000000000000A71B        8B4808               mov ecx, dword ptr [rax+0x8]
   .text:0x000000000000A71E        03CA                 add ecx, edx
   .text:0x000000000000A720        4C3BD1               cmp r10, rcx
   .text:0x000000000000A723        720E                 jb code_0xA733
   .text:0x000000000000A725 code_0xA725:
   .text:0x000000000000A725        41FFC1               inc r9d
   .text:0x000000000000A728        4883C028             add rax, 0x28
   .text:0x000000000000A72C        453BCB               cmp r9d, r11d
   .text:0x000000000000A72F        72E2                 jb code_0xA713
   .text:0x000000000000A731 code_0xA731:
   .text:0x000000000000A731        33C0                 xor eax, eax
   .text:0x000000000000A733 code_0xA733:
   .text:0x000000000000A733        C3                   ret
   .text:0x000000000000A734 data_0xA734:
   .text:0x000000000000A734        db 12 dup(0xCC)
   .text:0x000000000000A740 func_0xA740:
   .text:0x000000000000A740        48895C2408           mov qword ptr [rsp+0x8], rbx
   .text:0x000000000000A745        57                   push rdi
   .text:0x000000000000A746        4883EC20             sub rsp, 0x20
   .text:0x000000000000A74A        488BD9               mov rbx, rcx
   .text:0x000000000000A74D code_0xA74D:
   .text:0x000000000000A74D        488D3DAC58FFFF       lea rdi, [data_0x0]
   .text:0x000000000000A754        488BCF               mov rcx, rdi
   .text:0x000000000000A757        E834000000           call _ValidateImageBase; int32_t __cdecl( int64_t p1 )
   .text:0x000000000000A75C        85C0                 test eax, eax
   .text:0x000000000000A75E        7422                 jz code_0xA782
   .text:0x000000000000A760 code_0xA760:
   .text:0x000000000000A760        482BDF               sub rbx, rdi
   .text:0x000000000000A763        488BD3               mov rdx, rbx
   .text:0x000000000000A766        488BCF               mov rcx, rdi
   .text:0x000000000000A769        E882FFFFFF           call _FindPESection; int64_t __cdecl( int64_t p1, int64_t p2 )
   .text:0x000000000000A76E        4885C0               test rax, rax
   .text:0x000000000000A771        740F                 jz code_0xA782
   .text:0x000000000000A773 code_0xA773:
   .text:0x000000000000A773        8B4024               mov eax, dword ptr [rax+0x24]
   .text:0x000000000000A776        C1E81F               shr eax, 0x1F
   .text:0x000000000000A779        F7D0                 not eax
   .text:0x000000000000A77B        83E001               and eax, 0x1
   .text:0x000000000000A77E        EB02                 jmp code_0xA782
   .text:0x000000000000A780 code_0xA780:
   .text:0x000000000000A780        33C0                 xor eax, eax
   .text:0x000000000000A782 code_0xA782:
   .text:0x000000000000A782        488B5C2430           mov rbx, qword ptr [rsp+0x30]
   .text:0x000000000000A787        4883C420             add rsp, 0x20
   .text:0x000000000000A78B        5F                   pop rdi
   .text:0x000000000000A78C        C3                   ret
   .text:0x000000000000A78D data_0xA78D:
   .text:0x000000000000A78D        db 3 dup(0xCC)
   .text:0x000000000000A790 _ValidateImageBase:
   .text:0x000000000000A790        B84D5A0000           mov eax, 0x5A4D
   .text:0x000000000000A795        663901               cmp word ptr [rcx], ax
   .text:0x000000000000A798        7520                 jnz code_0xA7BA
   .text:0x000000000000A79A code_0xA79A:
   .text:0x000000000000A79A        4863413C             movsxd rax, dword ptr [rcx+0x3C]
   .text:0x000000000000A79E        4803C1               add rax, rcx
   .text:0x000000000000A7A1        813850450000         cmp dword ptr [rax], 0x4550
   .text:0x000000000000A7A7        7511                 jnz code_0xA7BA
   .text:0x000000000000A7A9 code_0xA7A9:
   .text:0x000000000000A7A9        B90B020000           mov ecx, 0x20B
   .text:0x000000000000A7AE        66394818             cmp word ptr [rax+0x18], cx
   .text:0x000000000000A7B2        7506                 jnz code_0xA7BA
   .text:0x000000000000A7B4 code_0xA7B4:
   .text:0x000000000000A7B4        B801000000           mov eax, 0x1
   .text:0x000000000000A7B9        C3                   ret
   .text:0x000000000000A7BA code_0xA7BA:
   .text:0x000000000000A7BA        33C0                 xor eax, eax
   .text:0x000000000000A7BC        C3                   ret
   .text:0x000000000000A7BD data_0xA7BD:
   .text:0x000000000000A7BD        db 3 dup(0xCC)
   .text:0x000000000000A7C0 __GSHandlerCheck:
   .text:0x000000000000A7C0        4883EC28             sub rsp, 0x28
   .text:0x000000000000A7C4        4D8B4138             mov r8, qword ptr [r9+0x38]
   .text:0x000000000000A7C8        488BCA               mov rcx, rdx
   .text:0x000000000000A7CB        498BD1               mov rdx, r9
   .text:0x000000000000A7CE        E80D000000           call func_0xA7E0; void __cdecl( int64_t p1, int64_t p2, int64_t p3 )
   .text:0x000000000000A7D3        B801000000           mov eax, 0x1
   .text:0x000000000000A7D8        4883C428             add rsp, 0x28
   .text:0x000000000000A7DC        C3                   ret
   .text:0x000000000000A7DD data_0xA7DD:
   .text:0x000000000000A7DD        db 3 dup(0xCC)
   .text:0x000000000000A7E0 func_0xA7E0:
   .text:0x000000000000A7E0        4053                 push rbx
   .text:0x000000000000A7E2        458B18               mov r11d, dword ptr [r8]
   .text:0x000000000000A7E5        488BDA               mov rbx, rdx
   .text:0x000000000000A7E8        4183E3F8             and r11d, 0xFFFFFFF8
   .text:0x000000000000A7EC        4C8BC9               mov r9, rcx
   .text:0x000000000000A7EF        41F60004             test byte ptr [r8], 0x4
   .text:0x000000000000A7F3        4C8BD1               mov r10, rcx
   .text:0x000000000000A7F6        7413                 jz code_0xA80B
   .text:0x000000000000A7F8 code_0xA7F8:
   .text:0x000000000000A7F8        418B4008             mov eax, dword ptr [r8+0x8]
   .text:0x000000000000A7FC        4D635004             movsxd r10, dword ptr [r8+0x4]
   .text:0x000000000000A800        F7D8                 neg eax
   .text:0x000000000000A802        4C03D1               add r10, rcx
   .text:0x000000000000A805        4863C8               movsxd rcx, eax
   .text:0x000000000000A808        4C23D1               and r10, rcx
   .text:0x000000000000A80B code_0xA80B:
   .text:0x000000000000A80B        4963C3               movsxd rax, r11d
   .text:0x000000000000A80E        4A8B1410             mov rdx, qword ptr [rax+r10]
   .text:0x000000000000A812        488B4310             mov rax, qword ptr [rbx+0x10]
   .text:0x000000000000A816        8B4808               mov ecx, dword ptr [rax+0x8]
   .text:0x000000000000A819        488B4308             mov rax, qword ptr [rbx+0x8]
   .text:0x000000000000A81D        F64401030F           test byte ptr [rcx+rax+0x3], 0xF
   .text:0x000000000000A822        740B                 jz code_0xA82F
   .text:0x000000000000A824 code_0xA824:
   .text:0x000000000000A824        0FB6440103           movzx eax, byte ptr [rcx+rax+0x3]
   .text:0x000000000000A829        83E0F0               and eax, 0xFFFFFFF0
   .text:0x000000000000A82C        4C03C8               add r9, rax
   .text:0x000000000000A82F code_0xA82F:
   .text:0x000000000000A82F        4C33CA               xor r9, rdx
   .text:0x000000000000A832        498BC9               mov rcx, r9
   .text:0x000000000000A835        5B                   pop rbx
   .text:0x000000000000A836        E915000000           jmp __security_check_cookie; noclobber void __cdecl( uint64_t p1 )
   .text:0x000000000000A83B data_0xA83B:
   .text:0x000000000000A83B        db 11 dup(0xCC)
   .text:0x000000000000A846 data_0xA846:
   .text:0x000000000000A846        dq 0x000000841F0F6666
   .text:0x000000000000A84E        dw 0x0000
   .text:0x000000000000A850 __security_check_cookie:
   .text:0x000000000000A850        483B0DD1970000       cmp rcx, qword ptr [__security_cookie]
   .text:0x000000000000A857        F27512               bnd jnz code_0xA86C
   .text:0x000000000000A85A code_0xA85A:
   .text:0x000000000000A85A        48C1C110             rol rcx, 0x10
   .text:0x000000000000A85E        66F7C1FFFF           test cx, 0xFFFF
   .text:0x000000000000A863        F27502               bnd jnz code_0xA868
   .text:0x000000000000A866 code_0xA866:
   .text:0x000000000000A866        F2C3                 bnd ret
   .text:0x000000000000A868 code_0xA868:
   .text:0x000000000000A868        48C1C910             ror rcx, 0x10
   .text:0x000000000000A86C code_0xA86C:
   .text:0x000000000000A86C        E937000000           jmp code_0xA8A8
   .text:0x000000000000A871 data_0xA871:
   .text:0x000000000000A871        db 3 dup(0xCC)
   .text:0x000000000000A874 __raise_securityfailure:
   .text:0x000000000000A874        4053                 push rbx
   .text:0x000000000000A876        4883EC20             sub rsp, 0x20
   .text:0x000000000000A87A        488BD9               mov rbx, rcx
   .text:0x000000000000A87D        33C9                 xor ecx, ecx
   .text:0x000000000000A87F        FF15DB070000         call qword ptr [SetUnhandledExceptionFilter]; long (__cdecl *)( struct _EXCEPTION_POINTERS * p1 ) (__cdecl *)( long (__cdecl * lpTopLevelExceptionFilter)( struct _EXCEPTION_POINTERS * p1 ) )
   .text:0x000000000000A885        488BCB               mov rcx, rbx
   .text:0x000000000000A888        FF15CA070000         call qword ptr [UnhandledExceptionFilter]; long (__cdecl *)( struct _EXCEPTION_POINTERS * ExceptionInfo )
   .text:0x000000000000A88E        FF1584080000         call qword ptr [GetCurrentProcess]; void * (__cdecl *)( void )
   .text:0x000000000000A894        488BC8               mov rcx, rax
   .text:0x000000000000A897        BA090400C0           mov edx, 0xC0000409
   .text:0x000000000000A89C        4883C420             add rsp, 0x20
   .text:0x000000000000A8A0        5B                   pop rbx
   .text:0x000000000000A8A1        48FF2580080000       jmp qword ptr [TerminateProcess]; int (__cdecl *)( void * hProcess, unsigned int uExitCode )
   .text:0x000000000000A8A8 code_0xA8A8:
   .text:0x000000000000A8A8        48894C2408           mov qword ptr [rsp+0x8], rcx
   .text:0x000000000000A8AD        4883EC38             sub rsp, 0x38
   .text:0x000000000000A8B1        B917000000           mov ecx, 0x17
   .text:0x000000000000A8B6        E80572FFFF           call IsProcessorFeaturePresent_1; int __cdecl( unsigned long ProcessorFeature )
   .text:0x000000000000A8BB        85C0                 test eax, eax
   .text:0x000000000000A8BD        7407                 jz code_0xA8C6
   .text:0x000000000000A8BF code_0xA8BF:
   .text:0x000000000000A8BF        B902000000           mov ecx, 0x2
   .text:0x000000000000A8C4        CD29                 int 0x29
   .text:0x000000000000A8C6 code_0xA8C6:
   .text:0x000000000000A8C6        488D0D13AE0000       lea rcx, [data_0x156E0]
   .text:0x000000000000A8CD        E8AA000000           call capture_previous_context; void __cdecl( int64_t p1 )
   .text:0x000000000000A8D2        488B442438           mov rax, qword ptr [rsp+0x38]
   .text:0x000000000000A8D7        488905FAAE0000       mov qword ptr [data_0x157D8], rax
   .text:0x000000000000A8DE        488D442438           lea rax, [rsp+0x38]
   .text:0x000000000000A8E3        4883C008             add rax, 0x8
   .text:0x000000000000A8E7        4889058AAE0000       mov qword ptr [data_0x15778], rax
   .text:0x000000000000A8EE        488B05E3AE0000       mov rax, qword ptr [data_0x157D8]
   .text:0x000000000000A8F5        48890554AD0000       mov qword ptr [data_0x15650], rax
   .text:0x000000000000A8FC        488B442440           mov rax, qword ptr [rsp+0x40]
   .text:0x000000000000A901        48890558AE0000       mov qword ptr [data_0x15760], rax
   .text:0x000000000000A908        C7052EAD0000090400C0 mov dword ptr [data_0x15640], 0xC0000409
   .text:0x000000000000A912        C70528AD000001000000 mov dword ptr [data_0x15644], 0x1
   .text:0x000000000000A91C        C70532AD000001000000 mov dword ptr [data_0x15658], 0x1
   .text:0x000000000000A926        B808000000           mov eax, 0x8
   .text:0x000000000000A92B        486BC000             imul rax, rax, 0x0
   .text:0x000000000000A92F        488D0D2AAD0000       lea rcx, [data_0x15660]
   .text:0x000000000000A936        48C7040102000000     mov qword ptr [rcx+rax], 0x2
   .text:0x000000000000A93E        B808000000           mov eax, 0x8
   .text:0x000000000000A943        486BC000             imul rax, rax, 0x0
   .text:0x000000000000A947        488B0DDA960000       mov rcx, qword ptr [__security_cookie]
   .text:0x000000000000A94E        48894C0420           mov qword ptr [rsp+rax+0x20], rcx
   .text:0x000000000000A953        B808000000           mov eax, 0x8
   .text:0x000000000000A958        486BC001             imul rax, rax, 0x1
   .text:0x000000000000A95C        488B0DBD960000       mov rcx, qword ptr [__security_cookie_complement]
   .text:0x000000000000A963        48894C0420           mov qword ptr [rsp+rax+0x20], rcx
   .text:0x000000000000A968        488D0DF1780000       lea rcx, [data_0x12260]
   .text:0x000000000000A96F        E800FFFFFF           call __raise_securityfailure; void __cdecl( int64_t p1 )
   .text:0x000000000000A974        4883C438             add rsp, 0x38
   .text:0x000000000000A978        C3                   ret
   .text:0x000000000000A979 data_0xA979:
   .text:0x000000000000A979        db 3 dup(0xCC)
   .text:0x000000000000A97C capture_previous_context:
   .text:0x000000000000A97C        4053                 push rbx
   .text:0x000000000000A97E        56                   push rsi
   .text:0x000000000000A97F        57                   push rdi
   .text:0x000000000000A980        4883EC40             sub rsp, 0x40
   .text:0x000000000000A984        488BD9               mov rbx, rcx
   .text:0x000000000000A987        FF15AB060000         call qword ptr [RtlCaptureContext]; void (__cdecl *)( struct _CONTEXT * ContextRecord )
   .text:0x000000000000A98D        488BB3F8000000       mov rsi, qword ptr [rbx+0xF8]
   .text:0x000000000000A994        33FF                 xor edi, edi
   .text:0x000000000000A996 code_0xA996:
   .text:0x000000000000A996        4533C0               xor r8d, r8d
   .text:0x000000000000A999        488D542460           lea rdx, [rsp+0x60]
   .text:0x000000000000A99E        488BCE               mov rcx, rsi
   .text:0x000000000000A9A1        FF1599060000         call qword ptr [RtlLookupFunctionEntry]; struct _IMAGE_RUNTIME_FUNCTION_ENTRY * (__cdecl *)( unsigned long long ControlPc, unsigned long long * ImageBase, struct _UNWIND_HISTORY_TABLE * HistoryTable )
   .text:0x000000000000A9A7        4885C0               test rax, rax
   .text:0x000000000000A9AA        7439                 jz code_0xA9E5
   .text:0x000000000000A9AC code_0xA9AC:
   .text:0x000000000000A9AC        488364243800         and qword ptr [rsp+0x38], 0x0
   .text:0x000000000000A9B2        488D4C2468           lea rcx, [rsp+0x68]
   .text:0x000000000000A9B7        488B542460           mov rdx, qword ptr [rsp+0x60]
   .text:0x000000000000A9BC        4C8BC8               mov r9, rax
   .text:0x000000000000A9BF        48894C2430           mov qword ptr [rsp+0x30], rcx
   .text:0x000000000000A9C4        4C8BC6               mov r8, rsi
   .text:0x000000000000A9C7        488D4C2470           lea rcx, [rsp+0x70]
   .text:0x000000000000A9CC        48894C2428           mov qword ptr [rsp+0x28], rcx
   .text:0x000000000000A9D1        33C9                 xor ecx, ecx
   .text:0x000000000000A9D3        48895C2420           mov qword ptr [rsp+0x20], rbx
   .text:0x000000000000A9D8        FF156A060000         call qword ptr [RtlVirtualUnwind]; enum _EXCEPTION_DISPOSITION (__cdecl *)( struct _EXCEPTION_RECORD * p1, void * p2, struct _CONTEXT * p3, void * p4 ) (__cdecl *)( unsigned long HandlerType, unsigned long long ImageBase, unsigned long long ControlPc, struct _IMAGE_RUNTIME_FUNCTION_ENTRY * FunctionEntry, struct _CONTEXT * ContextRecord, void ** HandlerData, unsigned long long * EstablisherFrame, struct _KNONVOLATILE_CONTEXT_POINTERS * ContextPointers )
   .text:0x000000000000A9DE        FFC7                 inc edi
   .text:0x000000000000A9E0        83FF02               cmp edi, 0x2
   .text:0x000000000000A9E3        7CB1                 jl code_0xA996
   .text:0x000000000000A9E5 code_0xA9E5:
   .text:0x000000000000A9E5        4883C440             add rsp, 0x40
   .text:0x000000000000A9E9        5F                   pop rdi
   .text:0x000000000000A9EA        5E                   pop rsi
   .text:0x000000000000A9EB        5B                   pop rbx
   .text:0x000000000000A9EC        C3                   ret
   .text:0x000000000000A9ED data_0xA9ED:
   .text:0x000000000000A9ED        db 9 dup(0xCC)
   .text:0x000000000000A9F6 data_0xA9F6:
   .text:0x000000000000A9F6        dq 0x000000841F0F6666
   .text:0x000000000000A9FE        dw 0x0000
   .text:0x000000000000AA00 _alloca_probe:
   .text:0x000000000000AA00        4883EC10             sub rsp, 0x10
   .text:0x000000000000AA04        4C891424             mov qword ptr [rsp], r10
   .text:0x000000000000AA08        4C895C2408           mov qword ptr [rsp+0x8], r11
   .text:0x000000000000AA0D        4D33DB               xor r11, r11
   .text:0x000000000000AA10        4C8D542418           lea r10, [rsp+0x18]
   .text:0x000000000000AA15        4C2BD0               sub r10, rax
   .text:0x000000000000AA18        4D0F42D3             cmovb r10, r11
   .text:0x000000000000AA1C        654C8B1C2510000000   mov r11, qword ptr gs:[0x10]
   .text:0x000000000000AA25        4D3BD3               cmp r10, r11
   .text:0x000000000000AA28        F27317               bnd jae code_0xAA42
   .text:0x000000000000AA2B code_0xAA2B:
   .text:0x000000000000AA2B        664181E200F0         and r10w, 0xF000
   .text:0x000000000000AA31 code_0xAA31:
   .text:0x000000000000AA31        4D8D9B00F0FFFF       lea r11, [r11-0x1000]
   .text:0x000000000000AA38        41C60300             mov byte ptr [r11], 0x0
   .text:0x000000000000AA3C        4D3BD3               cmp r10, r11
   .text:0x000000000000AA3F        F275EF               bnd jnz code_0xAA31
   .text:0x000000000000AA42 code_0xAA42:
   .text:0x000000000000AA42        4C8B1424             mov r10, qword ptr [rsp]
   .text:0x000000000000AA46        4C8B5C2408           mov r11, qword ptr [rsp+0x8]
   .text:0x000000000000AA4B        4883C410             add rsp, 0x10
   .text:0x000000000000AA4F        F2C3                 bnd ret
   .text:0x000000000000AA51 data_0xAA51:
   .text:0x000000000000AA51        db 21 dup(0xCC)
   .text:0x000000000000AA66 data_0xAA66:
   .text:0x000000000000AA66        dq 0x000000841F0F6666
   .text:0x000000000000AA6E        dw 0x0000
   .text:0x000000000000AA70 memcmp:
   .text:0x000000000000AA70        482BD1               sub rdx, rcx
   .text:0x000000000000AA73        4983F808             cmp r8, 0x8
   .text:0x000000000000AA77        7222                 jb code_0xAA9B
   .text:0x000000000000AA79 code_0xAA79:
   .text:0x000000000000AA79        F6C107               test cl, 0x7
   .text:0x000000000000AA7C        7414                 jz code_0xAA92
   .text:0x000000000000AA7E code_0xAA7E:
   .text:0x000000000000AA7E        6690                 nop
   .text:0x000000000000AA80 code_0xAA80:
   .text:0x000000000000AA80        8A01                 mov al, byte ptr [rcx]
   .text:0x000000000000AA82        3A0411               cmp al, byte ptr [rcx+rdx]
   .text:0x000000000000AA85        752C                 jnz code_0xAAB3
   .text:0x000000000000AA87 code_0xAA87:
   .text:0x000000000000AA87        48FFC1               inc rcx
   .text:0x000000000000AA8A        49FFC8               dec r8
   .text:0x000000000000AA8D        F6C107               test cl, 0x7
   .text:0x000000000000AA90        75EE                 jnz code_0xAA80
   .text:0x000000000000AA92 code_0xAA92:
   .text:0x000000000000AA92        4D8BC8               mov r9, r8
   .text:0x000000000000AA95        49C1E903             shr r9, 0x3
   .text:0x000000000000AA99        751F                 jnz code_0xAABA
   .text:0x000000000000AA9B code_0xAA9B:
   .text:0x000000000000AA9B        4D85C0               test r8, r8
   .text:0x000000000000AA9E        740F                 jz code_0xAAAF
   .text:0x000000000000AAA0 code_0xAAA0:
   .text:0x000000000000AAA0        8A01                 mov al, byte ptr [rcx]
   .text:0x000000000000AAA2        3A0411               cmp al, byte ptr [rcx+rdx]
   .text:0x000000000000AAA5        750C                 jnz code_0xAAB3
   .text:0x000000000000AAA7 code_0xAAA7:
   .text:0x000000000000AAA7        48FFC1               inc rcx
   .text:0x000000000000AAAA        49FFC8               dec r8
   .text:0x000000000000AAAD        75F1                 jnz code_0xAAA0
   .text:0x000000000000AAAF code_0xAAAF:
   .text:0x000000000000AAAF        4833C0               xor rax, rax
   .text:0x000000000000AAB2        C3                   ret
   .text:0x000000000000AAB3 code_0xAAB3:
   .text:0x000000000000AAB3        1BC0                 sbb eax, eax
   .text:0x000000000000AAB5        83D8FF               sbb eax, 0xFFFFFFFF
   .text:0x000000000000AAB8        C3                   ret
   .text:0x000000000000AAB9 data_0xAAB9:
   .text:0x000000000000AAB9        db 0x90
   .text:0x000000000000AABA code_0xAABA:
   .text:0x000000000000AABA        49C1E902             shr r9, 0x2
   .text:0x000000000000AABE        7437                 jz code_0xAAF7
   .text:0x000000000000AAC0 code_0xAAC0:
   .text:0x000000000000AAC0        488B01               mov rax, qword ptr [rcx]
   .text:0x000000000000AAC3        483B0411             cmp rax, qword ptr [rcx+rdx]
   .text:0x000000000000AAC7        755B                 jnz code_0xAB24
   .text:0x000000000000AAC9 code_0xAAC9:
   .text:0x000000000000AAC9        488B4108             mov rax, qword ptr [rcx+0x8]
   .text:0x000000000000AACD        483B441108           cmp rax, qword ptr [rcx+rdx+0x8]
   .text:0x000000000000AAD2        754C                 jnz code_0xAB20
   .text:0x000000000000AAD4 code_0xAAD4:
   .text:0x000000000000AAD4        488B4110             mov rax, qword ptr [rcx+0x10]
   .text:0x000000000000AAD8        483B441110           cmp rax, qword ptr [rcx+rdx+0x10]
   .text:0x000000000000AADD        753D                 jnz code_0xAB1C
   .text:0x000000000000AADF code_0xAADF:
   .text:0x000000000000AADF        488B4118             mov rax, qword ptr [rcx+0x18]
   .text:0x000000000000AAE3        483B441118           cmp rax, qword ptr [rcx+rdx+0x18]
   .text:0x000000000000AAE8        752E                 jnz code_0xAB18
   .text:0x000000000000AAEA code_0xAAEA:
   .text:0x000000000000AAEA        4883C120             add rcx, 0x20
   .text:0x000000000000AAEE        49FFC9               dec r9
   .text:0x000000000000AAF1        75CD                 jnz code_0xAAC0
   .text:0x000000000000AAF3 code_0xAAF3:
   .text:0x000000000000AAF3        4983E01F             and r8, 0x1F
   .text:0x000000000000AAF7 code_0xAAF7:
   .text:0x000000000000AAF7        4D8BC8               mov r9, r8
   .text:0x000000000000AAFA        49C1E903             shr r9, 0x3
   .text:0x000000000000AAFE        749B                 jz code_0xAA9B
   .text:0x000000000000AB00 code_0xAB00:
   .text:0x000000000000AB00        488B01               mov rax, qword ptr [rcx]
   .text:0x000000000000AB03        483B0411             cmp rax, qword ptr [rcx+rdx]
   .text:0x000000000000AB07        751B                 jnz code_0xAB24
   .text:0x000000000000AB09 code_0xAB09:
   .text:0x000000000000AB09        4883C108             add rcx, 0x8
   .text:0x000000000000AB0D        49FFC9               dec r9
   .text:0x000000000000AB10        75EE                 jnz code_0xAB00
   .text:0x000000000000AB12 code_0xAB12:
   .text:0x000000000000AB12        4983E007             and r8, 0x7
   .text:0x000000000000AB16        EB83                 jmp code_0xAA9B
   .text:0x000000000000AB18 code_0xAB18:
   .text:0x000000000000AB18        4883C108             add rcx, 0x8
   .text:0x000000000000AB1C code_0xAB1C:
   .text:0x000000000000AB1C        4883C108             add rcx, 0x8
   .text:0x000000000000AB20 code_0xAB20:
   .text:0x000000000000AB20        4883C108             add rcx, 0x8
   .text:0x000000000000AB24 code_0xAB24:
   .text:0x000000000000AB24        488B0C0A             mov rcx, qword ptr [rdx+rcx]
   .text:0x000000000000AB28        480FC8               bswap rax
   .text:0x000000000000AB2B        480FC9               bswap rcx
   .text:0x000000000000AB2E        483BC1               cmp rax, rcx
   .text:0x000000000000AB31        1BC0                 sbb eax, eax
   .text:0x000000000000AB33        83D8FF               sbb eax, 0xFFFFFFFF
   .text:0x000000000000AB36        C3                   ret
   .text:0x000000000000AB37 data_0xAB37:
   .text:0x000000000000AB37        db 15 dup(0xCC)
   .text:0x000000000000AB46 data_0xAB46:
   .text:0x000000000000AB46        dq 0x000000841F0F6666
   .text:0x000000000000AB4E        dw 0x0000
   .text:0x000000000000AB50 code_0xAB50:
   .text:0x000000000000AB50        FFE0                 jmp rax
   .text:0x000000000000AB52 data_0xAB52:
   .text:0x000000000000AB52        db 14 dup(0xCC)
   .text:0x000000000000AB60 `int __cdecl __scrt_common_main_seh(void)'::`1'::filt$0:
   .text:0x000000000000AB60        4055                 push rbp
   .text:0x000000000000AB62        4883EC20             sub rsp, 0x20
   .text:0x000000000000AB66        488BEA               mov rbp, rdx
   .text:0x000000000000AB69        488B01               mov rax, qword ptr [rcx]
   .text:0x000000000000AB6C        488BD1               mov rdx, rcx
   .text:0x000000000000AB6F        8B08                 mov ecx, dword ptr [rax]
   .text:0x000000000000AB71        E8427EFFFF           call func_0x29B8; int32_t __cdecl( int32_t p1, int64_t p2 )
   .text:0x000000000000AB76        90                   nop
   .text:0x000000000000AB77        4883C420             add rsp, 0x20
   .text:0x000000000000AB7B        5D                   pop rbp
   .text:0x000000000000AB7C        C3                   ret
   .text:0x000000000000AB7D code_0xAB7D:
   .text:0x000000000000AB7D        CC                   int3
   .text:0x000000000000AB7E code_0xAB7E:
   .text:0x000000000000AB7E        4055                 push rbp
   .text:0x000000000000AB80        488BEA               mov rbp, rdx
   .text:0x000000000000AB83        488B01               mov rax, qword ptr [rcx]
   .text:0x000000000000AB86        33C9                 xor ecx, ecx
   .text:0x000000000000AB88        8138050000C0         cmp dword ptr [rax], 0xC0000005
   .text:0x000000000000AB8E        0F94C1               sete cl
   .text:0x000000000000AB91        8BC1                 mov eax, ecx
   .text:0x000000000000AB93        5D                   pop rbp
   .text:0x000000000000AB94        C3                   ret
   .text:0x000000000000AB95 code_0xAB95:
   .text:0x000000000000AB95        CC                   int3
   .text:0x000000000000AB96 code_0xAB96:
   .text:0x000000000000AB96        4055                 push rbp
   .text:0x000000000000AB98        4883EC20             sub rsp, 0x20
   .text:0x000000000000AB9C        488BEA               mov rbp, rdx
   .text:0x000000000000AB9F        33C0                 xor eax, eax
   .text:0x000000000000ABA1        384538               cmp byte ptr [rbp+0x38], al
   .text:0x000000000000ABA4        0F95C0               setne al
   .text:0x000000000000ABA7        4883C420             add rsp, 0x20
   .text:0x000000000000ABAB        5D                   pop rbp
   .text:0x000000000000ABAC        C3                   ret
   .text:0x000000000000ABAD code_0xABAD:
   .text:0x000000000000ABAD        CC                   int3
   .text:0x000000000000ABAE func_0xABAE:
   .text:0x000000000000ABAE        4055                 push rbp
   .text:0x000000000000ABB0        4883EC20             sub rsp, 0x20
   .text:0x000000000000ABB4        488BEA               mov rbp, rdx
   .text:0x000000000000ABB7        488B4548             mov rax, qword ptr [rbp+0x48]
   .text:0x000000000000ABBB        8B08                 mov ecx, dword ptr [rax]
   .text:0x000000000000ABBD        4883C420             add rsp, 0x20
   .text:0x000000000000ABC1        5D                   pop rbp
   .text:0x000000000000ABC2        E9E5B0FFFF           jmp func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x000000000000ABC7 code_0xABC7:
   .text:0x000000000000ABC7        CC                   int3
   .text:0x000000000000ABC8 code_0xABC8:
   .text:0x000000000000ABC8        4055                 push rbp
   .text:0x000000000000ABCA        4883EC20             sub rsp, 0x20
   .text:0x000000000000ABCE        488BEA               mov rbp, rdx
   .text:0x000000000000ABD1        488B01               mov rax, qword ptr [rcx]
   .text:0x000000000000ABD4        8B08                 mov ecx, dword ptr [rax]
   .text:0x000000000000ABD6        E8AD87FFFF           call dyntls_init_exception_filter; inline void __cdecl( int32_t p1 )
   .text:0x000000000000ABDB        90                   nop
   .text:0x000000000000ABDC        4883C420             add rsp, 0x20
   .text:0x000000000000ABE0        5D                   pop rbp
   .text:0x000000000000ABE1        C3                   ret
   .text:0x000000000000ABE2 code_0xABE2:
   .text:0x000000000000ABE2        CC                   int3
   .text:0x000000000000ABE3 `public: void __cdecl __crt_seh_guarded_call<void>::operator()<class <lambda_410d79af7f07d98d83a3f525b3859a53>,class <lambda_3e16ef9562a7dcce91392c22ab16ea36> & __ptr64,class <lambda_38119f0e861e05405d8a144b9b982f0a> >(class <lambda_410d79af7f07d98d83a3f525b3859a53> && __ptr64,class <lambda_3e16ef9562a7dcce91392c22ab16ea36> & __ptr64,class <lambda_38119f0e861e05405d8a144b9b982f0a> && __ptr64) __ptr64'::`1'::fin$0:
   .text:0x000000000000ABE3        4055                 push rbp
   .text:0x000000000000ABE5        4883EC20             sub rsp, 0x20
   .text:0x000000000000ABE9        488BEA               mov rbp, rdx
   .text:0x000000000000ABEC        488B4558             mov rax, qword ptr [rbp+0x58]
   .text:0x000000000000ABF0        8B08                 mov ecx, dword ptr [rax]
   .text:0x000000000000ABF2        4883C420             add rsp, 0x20
   .text:0x000000000000ABF6        5D                   pop rbp
   .text:0x000000000000ABF7        E9B0B0FFFF           jmp func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x000000000000ABFC code_0xABFC:
   .text:0x000000000000ABFC        CC                   int3
   .text:0x000000000000ABFD `struct __crt_multibyte_data * __ptr64 __cdecl update_thread_multibyte_data_internal(struct __acrt_ptd * __ptr64 const,struct update_thread_multibyte_data_internal * __ptr64 * __ptr64 const)'::`1'::fin$0:
   .text:0x000000000000ABFD        4055                 push rbp
   .text:0x000000000000ABFF        4883EC20             sub rsp, 0x20
   .text:0x000000000000AC03        488BEA               mov rbp, rdx
   .text:0x000000000000AC06        B905000000           mov ecx, 0x5
   .text:0x000000000000AC0B        4883C420             add rsp, 0x20
   .text:0x000000000000AC0F        5D                   pop rbp
   .text:0x000000000000AC10        E997B0FFFF           jmp func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x000000000000AC15 code_0xAC15:
   .text:0x000000000000AC15        CC                   int3
   .text:0x000000000000AC16 __acrt_initialize_lowio$fin$0:
   .text:0x000000000000AC16        4055                 push rbp
   .text:0x000000000000AC18        4883EC20             sub rsp, 0x20
   .text:0x000000000000AC1C        488BEA               mov rbp, rdx
   .text:0x000000000000AC1F        B907000000           mov ecx, 0x7
   .text:0x000000000000AC24        4883C420             add rsp, 0x20
   .text:0x000000000000AC28        5D                   pop rbp
   .text:0x000000000000AC29        E97EB0FFFF           jmp func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x000000000000AC2E code_0xAC2E:
   .text:0x000000000000AC2E        CC                   int3
   .text:0x000000000000AC2F __acrt_update_thread_locale_data$fin$0:
   .text:0x000000000000AC2F        4055                 push rbp
   .text:0x000000000000AC31        4883EC20             sub rsp, 0x20
   .text:0x000000000000AC35        488BEA               mov rbp, rdx
   .text:0x000000000000AC38        B904000000           mov ecx, 0x4
   .text:0x000000000000AC3D        4883C420             add rsp, 0x20
   .text:0x000000000000AC41        5D                   pop rbp
   .text:0x000000000000AC42        E965B0FFFF           jmp func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x000000000000AC47 code_0xAC47:
   .text:0x000000000000AC47        CC                   int3
   .text:0x000000000000AC48 __unDNameEx$fin$0:
   .text:0x000000000000AC48        4055                 push rbp
   .text:0x000000000000AC4A        4883EC20             sub rsp, 0x20
   .text:0x000000000000AC4E        488BEA               mov rbp, rdx
   .text:0x000000000000AC51        33C9                 xor ecx, ecx
   .text:0x000000000000AC53        4883C420             add rsp, 0x20
   .text:0x000000000000AC57        5D                   pop rbp
   .text:0x000000000000AC58        E94FB0FFFF           jmp func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x000000000000AC5D code_0xAC5D:
   .text:0x000000000000AC5D        CC                   int3
   .text:0x000000000000AC5E raise$fin$0:
   .text:0x000000000000AC5E        4055                 push rbp
   .text:0x000000000000AC60        4883EC20             sub rsp, 0x20
   .text:0x000000000000AC64        488BEA               mov rbp, rdx
   .text:0x000000000000AC67        807D7000             cmp byte ptr [rbp+0x70], 0x0
   .text:0x000000000000AC6B        740B                 jz code_0xAC78
   .text:0x000000000000AC6D code_0xAC6D:
   .text:0x000000000000AC6D        B903000000           mov ecx, 0x3
   .text:0x000000000000AC72        E835B0FFFF           call func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x000000000000AC77        90                   nop
   .text:0x000000000000AC78 code_0xAC78:
   .text:0x000000000000AC78        4883C420             add rsp, 0x20
   .text:0x000000000000AC7C        5D                   pop rbp
   .text:0x000000000000AC7D        C3                   ret
   .text:0x000000000000AC7E code_0xAC7E:
   .text:0x000000000000AC7E        CC                   int3
   .text:0x000000000000AC7F `public: void __cdecl __crt_seh_guarded_call<void>::operator()<class <lambda_842d9ff0dc9ef11c61343bbaebe7f885>,class <lambda_c5860995281e5c4ce005b3de8f5874ee> & __ptr64,class <lambda_d90129c13df834fdcbf8d2b88dafcf2d> >(class <lambda_842d9ff0dc9ef11c61343bbaebe7f885> && __ptr64,class <lambda_c5860995281e5c4ce005b3de8f5874ee> & __ptr64,class <lambda_d90129c13df834fdcbf8d2b88dafcf2d> && __ptr64) __ptr64'::`1'::fin$0:
   .text:0x000000000000AC7F        4055                 push rbp
   .text:0x000000000000AC81        4883EC20             sub rsp, 0x20
   .text:0x000000000000AC85        488BEA               mov rbp, rdx
   .text:0x000000000000AC88        488B4D48             mov rcx, qword ptr [rbp+0x48]
   .text:0x000000000000AC8C        488B09               mov rcx, qword ptr [rcx]
   .text:0x000000000000AC8F        4883C420             add rsp, 0x20
   .text:0x000000000000AC93        5D                   pop rbp
   .text:0x000000000000AC94        E9BBCDFFFF           jmp func_0x7A54; void __cdecl( int64_t p1 )
   .text:0x000000000000AC99 code_0xAC99:
   .text:0x000000000000AC99        CC                   int3
   .text:0x000000000000AC9A `public: void __cdecl __crt_seh_guarded_call<void>::operator()<class <lambda_886d6c58226a84441f68b9f2b8217b83>,class <lambda_ab61a845afdef5b7c387490eaf3616ee> & __ptr64,class <lambda_f7f22ab5edc0698d5f6905b0d3f44752> >(class <lambda_886d6c58226a84441f68b9f2b8217b83> && __ptr64,class <lambda_ab61a845afdef5b7c387490eaf3616ee> & __ptr64,class <lambda_f7f22ab5edc0698d5f6905b0d3f44752> && __ptr64) __ptr64'::`1'::fin$0:
   .text:0x000000000000AC9A        4055                 push rbp
   .text:0x000000000000AC9C        4883EC20             sub rsp, 0x20
   .text:0x000000000000ACA0        488BEA               mov rbp, rdx
   .text:0x000000000000ACA3        488B8598000000       mov rax, qword ptr [rbp+0x98]
   .text:0x000000000000ACAA        8B08                 mov ecx, dword ptr [rax]
   .text:0x000000000000ACAC        4883C420             add rsp, 0x20
   .text:0x000000000000ACB0        5D                   pop rbp
   .text:0x000000000000ACB1        E9F6AFFFFF           jmp func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x000000000000ACB6 code_0xACB6:
   .text:0x000000000000ACB6        CC                   int3
   .text:0x000000000000ACB7 func_0xACB7:
   .text:0x000000000000ACB7        4055                 push rbp
   .text:0x000000000000ACB9        4883EC20             sub rsp, 0x20
   .text:0x000000000000ACBD        488BEA               mov rbp, rdx
   .text:0x000000000000ACC0        488B4548             mov rax, qword ptr [rbp+0x48]
   .text:0x000000000000ACC4        8B08                 mov ecx, dword ptr [rax]
   .text:0x000000000000ACC6        4883C420             add rsp, 0x20
   .text:0x000000000000ACCA        5D                   pop rbp
   .text:0x000000000000ACCB        E9E8B1FFFF           jmp func_0x5EB8; void __cdecl( int32_t p1 )
   .text:0x000000000000ACD0 code_0xACD0:
   .text:0x000000000000ACD0        CC                   int3
   .text:0x000000000000ACD1 `long __cdecl common_filelength<long>(int)'::`1'::fin$0:
   .text:0x000000000000ACD1        4055                 push rbp
   .text:0x000000000000ACD3        4883EC20             sub rsp, 0x20
   .text:0x000000000000ACD7        488BEA               mov rbp, rdx
   .text:0x000000000000ACDA        8B4D50               mov ecx, dword ptr [rbp+0x50]
   .text:0x000000000000ACDD        4883C420             add rsp, 0x20
   .text:0x000000000000ACE1        5D                   pop rbp
   .text:0x000000000000ACE2        E9D1B1FFFF           jmp func_0x5EB8; void __cdecl( int32_t p1 )
   .text:0x000000000000ACE7 code_0xACE7:
   .text:0x000000000000ACE7        CC                   int3
   .text:0x000000000000ACE8 _rmtmp$fin$1:
   .text:0x000000000000ACE8        4055                 push rbp
   .text:0x000000000000ACEA        4883EC20             sub rsp, 0x20
   .text:0x000000000000ACEE        488BEA               mov rbp, rdx
   .text:0x000000000000ACF1        B908000000           mov ecx, 0x8
   .text:0x000000000000ACF6        4883C420             add rsp, 0x20
   .text:0x000000000000ACFA        5D                   pop rbp
   .text:0x000000000000ACFB        E9ACAFFFFF           jmp func_0x5CAC; void __cdecl( int32_t p1 )
   .text:0x000000000000AD00 code_0xAD00:
   .text:0x000000000000AD00        CC                   int3
   .text:0x000000000000AD01 clearerr_s$fin$0:
   .text:0x000000000000AD01        4055                 push rbp
   .text:0x000000000000AD03        4883EC20             sub rsp, 0x20
   .text:0x000000000000AD07        488BEA               mov rbp, rdx
   .text:0x000000000000AD0A        488B4D30             mov rcx, qword ptr [rbp+0x30]
   .text:0x000000000000AD0E        4883C420             add rsp, 0x20
   .text:0x000000000000AD12        5D                   pop rbp
   .text:0x000000000000AD13        E93CCDFFFF           jmp func_0x7A54; void __cdecl( int64_t p1 )
   .text:0x000000000000AD18 code_0xAD18:
   .text:0x000000000000AD18        CC                   int3
   .text:0x000000000000AD19 code_0xAD19:
   .text:0x000000000000AD19        4055                 push rbp
   .text:0x000000000000AD1B        4883EC20             sub rsp, 0x20
   .text:0x000000000000AD1F        488BEA               mov rbp, rdx
   .text:0x000000000000AD22        488B01               mov rax, qword ptr [rcx]
   .text:0x000000000000AD25        8138050000C0         cmp dword ptr [rax], 0xC0000005
   .text:0x000000000000AD2B        740C                 jz code_0xAD39
   .text:0x000000000000AD2D code_0xAD2D:
   .text:0x000000000000AD2D        81381D0000C0         cmp dword ptr [rax], 0xC000001D
   .text:0x000000000000AD33        7404                 jz code_0xAD39
   .text:0x000000000000AD35 code_0xAD35:
   .text:0x000000000000AD35        33C0                 xor eax, eax
   .text:0x000000000000AD37        EB05                 jmp code_0xAD3E
   .text:0x000000000000AD39 code_0xAD39:
   .text:0x000000000000AD39        B801000000           mov eax, 0x1
   .text:0x000000000000AD3E code_0xAD3E:
   .text:0x000000000000AD3E        4883C420             add rsp, 0x20
   .text:0x000000000000AD42        5D                   pop rbp
   .text:0x000000000000AD43        C3                   ret
   .text:0x000000000000AD44 data_0xAD44:
   .text:0x000000000000AD44        db 12 dup(0xCC)
   .text:0x000000000000AD50 code_0xAD50:
   .text:0x000000000000AD50        4055                 push rbp
   .text:0x000000000000AD52        4883EC20             sub rsp, 0x20
   .text:0x000000000000AD56        488BEA               mov rbp, rdx
   .text:0x000000000000AD59        488B01               mov rax, qword ptr [rcx]
   .text:0x000000000000AD5C        33C9                 xor ecx, ecx
   .text:0x000000000000AD5E        8138050000C0         cmp dword ptr [rax], 0xC0000005
   .text:0x000000000000AD64        0F94C1               sete cl
   .text:0x000000000000AD67        8BC1                 mov eax, ecx
   .text:0x000000000000AD69        4883C420             add rsp, 0x20
   .text:0x000000000000AD6D        5D                   pop rbp
   .text:0x000000000000AD6E        C3                   ret
   .text:0x000000000000AD6F code_0xAD6F:
   .text:0x000000000000AD6F        CC                   int3
   .text:0x000000000000AD70 data_0xAD70:
   .text:0x000000000000AD70        db 656 dup(??)
  .rdata:0x000000000000B000 GetModuleHandleExW:
  .rdata:0x000000000000B000        dq va_ptr kernel32!GetModuleHandleExW; int (__cdecl *)( unsigned long dwFlags, unsigned short * lpModuleName, struct HINSTANCE__ ** phModule )
  .rdata:0x000000000000B008 WriteConsoleW:
  .rdata:0x000000000000B008        dq va_ptr kernel32!WriteConsoleW; int (__cdecl *)( void * hConsoleOutput, void * lpBuffer, unsigned long nNumberOfCharsToWrite, unsigned long * lpNumberOfCharsWritten, void * lpReserved )
  .rdata:0x000000000000B010 QueryPerformanceCounter:
  .rdata:0x000000000000B010        dq va_ptr kernel32!QueryPerformanceCounter; int (__cdecl *)( union _LARGE_INTEGER * lpPerformanceCount )
  .rdata:0x000000000000B018 GetCurrentProcessId:
  .rdata:0x000000000000B018        dq va_ptr kernel32!GetCurrentProcessId; unsigned long (__cdecl *)( void )
  .rdata:0x000000000000B020 GetCurrentThreadId:
  .rdata:0x000000000000B020        dq va_ptr kernel32!GetCurrentThreadId; unsigned long (__cdecl *)( void )
  .rdata:0x000000000000B028 GetSystemTimeAsFileTime:
  .rdata:0x000000000000B028        dq va_ptr kernel32!GetSystemTimeAsFileTime; void (__cdecl *)( struct _FILETIME * lpSystemTimeAsFileTime )
  .rdata:0x000000000000B030 InitializeSListHead:
  .rdata:0x000000000000B030        dq va_ptr kernel32!InitializeSListHead; void (__cdecl *)( union _SLIST_HEADER * ListHead )
  .rdata:0x000000000000B038 RtlCaptureContext:
  .rdata:0x000000000000B038        dq va_ptr kernel32!RtlCaptureContext; void (__cdecl *)( struct _CONTEXT * ContextRecord )
  .rdata:0x000000000000B040 RtlLookupFunctionEntry:
  .rdata:0x000000000000B040        dq va_ptr kernel32!RtlLookupFunctionEntry; struct _IMAGE_RUNTIME_FUNCTION_ENTRY * (__cdecl *)( unsigned long long ControlPc, unsigned long long * ImageBase, struct _UNWIND_HISTORY_TABLE * HistoryTable )
  .rdata:0x000000000000B048 RtlVirtualUnwind:
  .rdata:0x000000000000B048        dq va_ptr kernel32!RtlVirtualUnwind; enum _EXCEPTION_DISPOSITION (__cdecl *)( struct _EXCEPTION_RECORD * p1, void * p2, struct _CONTEXT * p3, void * p4 ) (__cdecl *)( unsigned long HandlerType, unsigned long long ImageBase, unsigned long long ControlPc, struct _IMAGE_RUNTIME_FUNCTION_ENTRY * FunctionEntry, struct _CONTEXT * ContextRecord, void ** HandlerData, unsigned long long * EstablisherFrame, struct _KNONVOLATILE_CONTEXT_POINTERS * ContextPointers )
  .rdata:0x000000000000B050 IsDebuggerPresent:
  .rdata:0x000000000000B050        dq va_ptr kernel32!IsDebuggerPresent; int (__cdecl *)( void )
  .rdata:0x000000000000B058 UnhandledExceptionFilter:
  .rdata:0x000000000000B058        dq va_ptr kernel32!UnhandledExceptionFilter; long (__cdecl *)( struct _EXCEPTION_POINTERS * ExceptionInfo )
  .rdata:0x000000000000B060 SetUnhandledExceptionFilter:
  .rdata:0x000000000000B060        dq va_ptr kernel32!SetUnhandledExceptionFilter; long (__cdecl *)( struct _EXCEPTION_POINTERS * p1 ) (__cdecl *)( long (__cdecl * lpTopLevelExceptionFilter)( struct _EXCEPTION_POINTERS * p1 ) )
  .rdata:0x000000000000B068 GetStartupInfoW:
  .rdata:0x000000000000B068        dq va_ptr kernel32!GetStartupInfoW; void (__cdecl *)( struct _STARTUPINFOW * lpStartupInfo )
  .rdata:0x000000000000B070 IsProcessorFeaturePresent:
  .rdata:0x000000000000B070        dq va_ptr kernel32!IsProcessorFeaturePresent; int (__cdecl *)( unsigned long ProcessorFeature )
  .rdata:0x000000000000B078 GetModuleHandleW:
  .rdata:0x000000000000B078        dq va_ptr kernel32!GetModuleHandleW; struct HINSTANCE__ * (__cdecl *)( unsigned short * lpModuleName )
  .rdata:0x000000000000B080 CloseHandle:
  .rdata:0x000000000000B080        dq va_ptr kernel32!CloseHandle; int (__cdecl *)( void * hObject )
  .rdata:0x000000000000B088 RtlUnwindEx:
  .rdata:0x000000000000B088        dq va_ptr kernel32!RtlUnwindEx; void (__cdecl *)( void * TargetFrame, void * TargetIp, struct _EXCEPTION_RECORD * ExceptionRecord, void * ReturnValue, struct _CONTEXT * ContextRecord, struct _UNWIND_HISTORY_TABLE * HistoryTable )
  .rdata:0x000000000000B090 GetLastError:
  .rdata:0x000000000000B090        dq va_ptr kernel32!GetLastError; unsigned long (__cdecl *)( void )
  .rdata:0x000000000000B098 SetLastError:
  .rdata:0x000000000000B098        dq va_ptr kernel32!SetLastError; void (__cdecl *)( unsigned long dwErrCode )
  .rdata:0x000000000000B0A0 EnterCriticalSection:
  .rdata:0x000000000000B0A0        dq va_ptr kernel32!EnterCriticalSection; void (__cdecl *)( struct _RTL_CRITICAL_SECTION * lpCriticalSection )
  .rdata:0x000000000000B0A8 LeaveCriticalSection:
  .rdata:0x000000000000B0A8        dq va_ptr kernel32!LeaveCriticalSection; void (__cdecl *)( struct _RTL_CRITICAL_SECTION * lpCriticalSection )
  .rdata:0x000000000000B0B0 DeleteCriticalSection:
  .rdata:0x000000000000B0B0        dq va_ptr kernel32!DeleteCriticalSection; void (__cdecl *)( struct _RTL_CRITICAL_SECTION * lpCriticalSection )
  .rdata:0x000000000000B0B8 InitializeCriticalSectionAndSpinCount:
  .rdata:0x000000000000B0B8        dq va_ptr kernel32!InitializeCriticalSectionAndSpinCount; int (__cdecl *)( struct _RTL_CRITICAL_SECTION * lpCriticalSection, unsigned long dwSpinCount )
  .rdata:0x000000000000B0C0 TlsAlloc:
  .rdata:0x000000000000B0C0        dq va_ptr kernel32!TlsAlloc; unsigned long (__cdecl *)( void )
  .rdata:0x000000000000B0C8 TlsGetValue:
  .rdata:0x000000000000B0C8        dq va_ptr kernel32!TlsGetValue; void * (__cdecl *)( unsigned long dwTlsIndex )
  .rdata:0x000000000000B0D0 TlsSetValue:
  .rdata:0x000000000000B0D0        dq va_ptr kernel32!TlsSetValue; int (__cdecl *)( unsigned long dwTlsIndex, void * lpTlsValue )
  .rdata:0x000000000000B0D8 TlsFree:
  .rdata:0x000000000000B0D8        dq va_ptr kernel32!TlsFree; int (__cdecl *)( unsigned long dwTlsIndex )
  .rdata:0x000000000000B0E0 FreeLibrary:
  .rdata:0x000000000000B0E0        dq va_ptr kernel32!FreeLibrary; int (__cdecl *)( struct HINSTANCE__ * hLibModule )
  .rdata:0x000000000000B0E8 GetProcAddress:
  .rdata:0x000000000000B0E8        dq va_ptr kernel32!GetProcAddress; long long (__cdecl *)( ... ) (__cdecl *)( struct HINSTANCE__ * hModule, char * lpProcName )
  .rdata:0x000000000000B0F0 LoadLibraryExW:
  .rdata:0x000000000000B0F0        dq va_ptr kernel32!LoadLibraryExW; struct HINSTANCE__ * (__cdecl *)( unsigned short * lpLibFileName, void * hFile, unsigned long dwFlags )
  .rdata:0x000000000000B0F8 RaiseException:
  .rdata:0x000000000000B0F8        dq va_ptr kernel32!RaiseException; void (__cdecl *)( unsigned long dwExceptionCode, unsigned long dwExceptionFlags, unsigned long nNumberOfArguments, unsigned long long * lpArguments )
  .rdata:0x000000000000B100 GetStdHandle:
  .rdata:0x000000000000B100        dq va_ptr kernel32!GetStdHandle; void * (__cdecl *)( unsigned long nStdHandle )
  .rdata:0x000000000000B108 WriteFile:
  .rdata:0x000000000000B108        dq va_ptr kernel32!WriteFile; int (__cdecl *)( void * hFile, void * lpBuffer, unsigned long nNumberOfBytesToWrite, unsigned long * lpNumberOfBytesWritten, struct _OVERLAPPED * lpOverlapped )
  .rdata:0x000000000000B110 GetModuleFileNameW:
  .rdata:0x000000000000B110        dq va_ptr kernel32!GetModuleFileNameW; unsigned long (__cdecl *)( struct HINSTANCE__ * hModule, unsigned short * lpFilename, unsigned long nSize )
  .rdata:0x000000000000B118 GetCurrentProcess:
  .rdata:0x000000000000B118        dq va_ptr kernel32!GetCurrentProcess; void * (__cdecl *)( void )
  .rdata:0x000000000000B120 ExitProcess:
  .rdata:0x000000000000B120        dq va_ptr kernel32!ExitProcess; void *
  .rdata:0x000000000000B128 TerminateProcess:
  .rdata:0x000000000000B128        dq va_ptr kernel32!TerminateProcess; int (__cdecl *)( void * hProcess, unsigned int uExitCode )
  .rdata:0x000000000000B130 HeapAlloc:
  .rdata:0x000000000000B130        dq va_ptr kernel32!HeapAlloc; void * (__cdecl *)( void * hHeap, unsigned long dwFlags, unsigned long long dwBytes )
  .rdata:0x000000000000B138 HeapFree:
  .rdata:0x000000000000B138        dq va_ptr kernel32!HeapFree; int (__cdecl *)( void * hHeap, unsigned long dwFlags, void * lpMem )
  .rdata:0x000000000000B140 FindClose:
  .rdata:0x000000000000B140        dq va_ptr kernel32!FindClose; int (__cdecl *)( void * hFindFile )
  .rdata:0x000000000000B148 FindFirstFileExW:
  .rdata:0x000000000000B148        dq va_ptr kernel32!FindFirstFileExW; void * (__cdecl *)( unsigned short * lpFileName, enum _FINDEX_INFO_LEVELS fInfoLevelId, void * lpFindFileData, enum _FINDEX_SEARCH_OPS fSearchOp, void * lpSearchFilter, unsigned long dwAdditionalFlags )
  .rdata:0x000000000000B150 FindNextFileW:
  .rdata:0x000000000000B150        dq va_ptr kernel32!FindNextFileW; int (__cdecl *)( void * hFindFile, struct _WIN32_FIND_DATAW * lpFindFileData )
  .rdata:0x000000000000B158 IsValidCodePage:
  .rdata:0x000000000000B158        dq va_ptr kernel32!IsValidCodePage; int (__cdecl *)( unsigned int CodePage )
  .rdata:0x000000000000B160 GetACP:
  .rdata:0x000000000000B160        dq va_ptr kernel32!GetACP; unsigned int (__cdecl *)( void )
  .rdata:0x000000000000B168 GetOEMCP:
  .rdata:0x000000000000B168        dq va_ptr kernel32!GetOEMCP; unsigned int (__cdecl *)( void )
  .rdata:0x000000000000B170 GetCPInfo:
  .rdata:0x000000000000B170        dq va_ptr kernel32!GetCPInfo; int (__cdecl *)( unsigned int CodePage, struct _cpinfo * lpCPInfo )
  .rdata:0x000000000000B178 GetCommandLineA:
  .rdata:0x000000000000B178        dq va_ptr kernel32!GetCommandLineA; char * (__cdecl *)( void )
  .rdata:0x000000000000B180 GetCommandLineW:
  .rdata:0x000000000000B180        dq va_ptr kernel32!GetCommandLineW; unsigned short * (__cdecl *)( void )
  .rdata:0x000000000000B188 MultiByteToWideChar:
  .rdata:0x000000000000B188        dq va_ptr kernel32!MultiByteToWideChar; int (__cdecl *)( unsigned int CodePage, unsigned long dwFlags, char * lpMultiByteStr, int cbMultiByte, unsigned short * lpWideCharStr, int cchWideChar )
  .rdata:0x000000000000B190 WideCharToMultiByte:
  .rdata:0x000000000000B190        dq va_ptr kernel32!WideCharToMultiByte; int (__cdecl *)( unsigned int CodePage, unsigned long dwFlags, unsigned short * lpWideCharStr, int cchWideChar, char * lpMultiByteStr, int cbMultiByte, char * lpDefaultChar, int * lpUsedDefaultChar )
  .rdata:0x000000000000B198 GetEnvironmentStringsW:
  .rdata:0x000000000000B198        dq va_ptr kernel32!GetEnvironmentStringsW; unsigned short * (__cdecl *)( void )
  .rdata:0x000000000000B1A0 FreeEnvironmentStringsW:
  .rdata:0x000000000000B1A0        dq va_ptr kernel32!FreeEnvironmentStringsW; int (__cdecl *)( unsigned short * penv )
  .rdata:0x000000000000B1A8 SetStdHandle:
  .rdata:0x000000000000B1A8        dq va_ptr kernel32!SetStdHandle; int (__cdecl *)( unsigned long nStdHandle, void * hHandle )
  .rdata:0x000000000000B1B0 GetFileType:
  .rdata:0x000000000000B1B0        dq va_ptr kernel32!GetFileType; unsigned long (__cdecl *)( void * hFile )
  .rdata:0x000000000000B1B8 GetStringTypeW:
  .rdata:0x000000000000B1B8        dq va_ptr kernel32!GetStringTypeW; int (__cdecl *)( unsigned long dwInfoType, unsigned short * lpSrcStr, int cchSrc, unsigned short * lpCharType )
  .rdata:0x000000000000B1C0 LCMapStringW:
  .rdata:0x000000000000B1C0        dq va_ptr kernel32!LCMapStringW; int (__cdecl *)( unsigned long Locale, unsigned long dwMapFlags, unsigned short * lpSrcStr, int cchSrc, unsigned short * lpDestStr, int cchDest )
  .rdata:0x000000000000B1C8 GetProcessHeap:
  .rdata:0x000000000000B1C8        dq va_ptr kernel32!GetProcessHeap; void * (__cdecl *)( void )
  .rdata:0x000000000000B1D0 HeapSize:
  .rdata:0x000000000000B1D0        dq va_ptr kernel32!HeapSize; unsigned long long (__cdecl *)( void * hHeap, unsigned long dwFlags, void * lpMem )
  .rdata:0x000000000000B1D8 HeapReAlloc:
  .rdata:0x000000000000B1D8        dq va_ptr kernel32!HeapReAlloc; void * (__cdecl *)( void * hHeap, unsigned long dwFlags, void * lpMem, unsigned long long dwBytes )
  .rdata:0x000000000000B1E0 FlushFileBuffers:
  .rdata:0x000000000000B1E0        dq va_ptr kernel32!FlushFileBuffers; int (__cdecl *)( void * hFile )
  .rdata:0x000000000000B1E8 GetConsoleCP:
  .rdata:0x000000000000B1E8        dq va_ptr kernel32!GetConsoleCP; unsigned int (__cdecl *)( void )
  .rdata:0x000000000000B1F0 GetConsoleMode:
  .rdata:0x000000000000B1F0        dq va_ptr kernel32!GetConsoleMode; int (__cdecl *)( void * hConsoleHandle, unsigned long * lpMode )
  .rdata:0x000000000000B1F8 SetFilePointerEx:
  .rdata:0x000000000000B1F8        dq va_ptr kernel32!SetFilePointerEx; int (__cdecl *)( void * hFile, union _LARGE_INTEGER liDistanceToMove, union _LARGE_INTEGER * lpNewFilePointer, unsigned long dwMoveMethod )
  .rdata:0x000000000000B200 CreateFileW:
  .rdata:0x000000000000B200        dq va_ptr kernel32!CreateFileW; void * (__cdecl *)( unsigned short * lpFileName, unsigned long dwDesiredAccess, unsigned long dwShareMode, struct _SECURITY_ATTRIBUTES * lpSecurityAttributes, unsigned long dwCreationDisposition, unsigned long dwFlagsAndAttributes, void * hTemplateFile )
  .rdata:0x000000000000B208 data_0xB208:
  .rdata:0x000000000000B208        dq 0x0000000000000000
  .rdata:0x000000000000B210 UnityMain:
  .rdata:0x000000000000B210        dq va_ptr unityplayer!UnityMain; int32_t (__cdecl *)( int64_t p1, int32_t p2, int64_t p3, int32_t p4 )
  .rdata:0x000000000000B218 data_0xB218:
  .rdata:0x000000000000B218        dq 0x0000000000000000
  .rdata:0x000000000000B220 GuardCFCheckFunction:
  .rdata:0x000000000000B220        dq va_ptr Concurrency::details::_ExceptionHolder::ReportUnhandledError; GuardCFCheckFunction; private: void (__cdecl *)( void * this )
  .rdata:0x000000000000B228 GuardCFDispatchFunction:
  .rdata:0x000000000000B228        dq va_ptr code_0xAB50; GuardCFDispatchFunction
  .rdata:0x000000000000B230 data_0xB230:
  .rdata:0x000000000000B230        dq 0x0000000000000000
  .rdata:0x000000000000B238        dq va_ptr func_0x10D0; int32_t (__cdecl *)( void )
  .rdata:0x000000000000B240 data_0xB240:
  .rdata:0x000000000000B240        dq 0x0000000000000000
  .rdata:0x000000000000B248 data_0xB248:
  .rdata:0x000000000000B248        dq 0x0000000000000000
  .rdata:0x000000000000B250        dq va_ptr func_0x1008; void (__cdecl *)( void )
  .rdata:0x000000000000B258        dq va_ptr post_pgo_initialization; int (__cdecl *)( void )
  .rdata:0x000000000000B260        dq va_ptr initialize_multibyte; int (__cdecl *)( void )
  .rdata:0x000000000000B268        dq va_ptr __acrt_initialize_stdio; int32_t (__cdecl *)( void )
  .rdata:0x000000000000B270        dq va_ptr __acrt_initialize_fma3; int32_t (__cdecl *)( void )
  .rdata:0x000000000000B278 data_0xB278:
  .rdata:0x000000000000B278        dq 0x0000000000000000
  .rdata:0x000000000000B280 data_0xB280:
  .rdata:0x000000000000B280        dq 0x0000000000000000
  .rdata:0x000000000000B288        dq va_ptr __acrt_uninitialize_locale; void (__cdecl *)( void )
  .rdata:0x000000000000B290        dq va_ptr __dcrt_terminate_console_output; void (__cdecl *)( void )
  .rdata:0x000000000000B298        dq va_ptr __acrt_uninitialize_stdio; void (__cdecl *)( void )
  .rdata:0x000000000000B2A0 data_0xB2A0:
  .rdata:0x000000000000B2A0        dq 0x0000000000000000
  .rdata:0x000000000000B2A8 data_0xB2A8:
  .rdata:0x000000000000B2A8        dq 0x0000000000000000
  .rdata:0x000000000000B2B0 data_0xB2B0:
  .rdata:0x000000000000B2B0        dq 0x0000000000000000
  .rdata:0x000000000000B2B8        dq 0x0000000000000000
  .rdata:0x000000000000B2C0 data_0xB2C0:
  .rdata:0x000000000000B2C0        dq va_ptr func_0x1F6C; void (__cdecl *)( int64_t p1, int8_t p2 )
  .rdata:0x000000000000B2C8        dq va_ptr string_apimswinco; "api-ms-win-core-fibers-l1-1-1"
  .rdata:0x000000000000B2D0        dq va_ptr string_apimswinco_1; "api-ms-win-core-synch-l1-2-0"
  .rdata:0x000000000000B2D8        dq va_ptr string_kernel32; "kernel32"
  .rdata:0x000000000000B2E0 string_apimswinco:
  .rdata:0x000000000000B2E0        dw L"api-ms-win-core-fibers-l1-1-1\x0000"
  .rdata:0x000000000000B31C        dd 0x00000000
  .rdata:0x000000000000B320 string_apimswinco_1:
  .rdata:0x000000000000B320        dw L"api-ms-win-core-synch-l1-2-0\x0000"
  .rdata:0x000000000000B35A        dd 0x00000000
  .rdata:0x000000000000B35E        dw 0x0000
  .rdata:0x000000000000B360 string_kernel32:
  .rdata:0x000000000000B360        dw L"kernel32\x0000"
  .rdata:0x000000000000B372        dd 0x00000000
  .rdata:0x000000000000B376        dw 0x0000
  .rdata:0x000000000000B378 string_apims:
  .rdata:0x000000000000B378        dw L"api-ms-\x0000"
  .rdata:0x000000000000B388 string_extms:
  .rdata:0x000000000000B388        dw L"ext-ms-\x0000"
  .rdata:0x000000000000B398 data_0xB398:
  .rdata:0x000000000000B398        dq 0x0000000200000000
  .rdata:0x000000000000B3A0 string_FlsAlloc:
  .rdata:0x000000000000B3A0        db "FlsAlloc\x00"
  .rdata:0x000000000000B3A9        dd 0x00000000
  .rdata:0x000000000000B3AD        dw 0x0000
  .rdata:0x000000000000B3AF        db 0x00
  .rdata:0x000000000000B3B0 data_0xB3B0:
  .rdata:0x000000000000B3B0        dq 0x0000000200000000
  .rdata:0x000000000000B3B8 string_FlsFree:
  .rdata:0x000000000000B3B8        db "FlsFree\x00"
  .rdata:0x000000000000B3C0 data_0xB3C0:
  .rdata:0x000000000000B3C0        dq 0x0000000200000000
  .rdata:0x000000000000B3C8 string_FlsSetValu:
  .rdata:0x000000000000B3C8        db "FlsSetValue\x00"
  .rdata:0x000000000000B3D4        dd 0x00000000
  .rdata:0x000000000000B3D8 data_0xB3D8:
  .rdata:0x000000000000B3D8        dq 0x0000000200000001
  .rdata:0x000000000000B3E0 string_Initialize:
  .rdata:0x000000000000B3E0        db "InitializeCriticalSectionEx\x00"
  .rdata:0x000000000000B3FC        dd 0x00000000
  .rdata:0x000000000000B400        dq va_ptr string_based; "__based("
  .rdata:0x000000000000B408        dq va_ptr string_cdecl; "__cdecl"
  .rdata:0x000000000000B410        dq va_ptr string_pascal; "__pascal"
  .rdata:0x000000000000B418        dq va_ptr string_stdcall; "__stdcall"
  .rdata:0x000000000000B420        dq va_ptr string_thiscall; "__thiscall"
  .rdata:0x000000000000B428        dq va_ptr string_fastcall; "__fastcall"
  .rdata:0x000000000000B430        dq va_ptr string_vectorcall; "__vectorcall"
  .rdata:0x000000000000B438        dq va_ptr string_clrcall; "__clrcall"
  .rdata:0x000000000000B440        dq va_ptr string_eabi; "__eabi"
  .rdata:0x000000000000B448        dq va_ptr string_swift1; "__swift_1"
  .rdata:0x000000000000B450        dq va_ptr string_swift2; "__swift_2"
  .rdata:0x000000000000B458        dq va_ptr string_ptr64; "__ptr64"
  .rdata:0x000000000000B460        dq va_ptr string_restrict; "__restrict"
  .rdata:0x000000000000B468        dq va_ptr string_unaligned; "__unaligned"
  .rdata:0x000000000000B470        dq va_ptr string_restrict_1; "restrict("
  .rdata:0x000000000000B478        dq va_ptr data_0xB80A
  .rdata:0x000000000000B480        dq va_ptr string_new; " new"
  .rdata:0x000000000000B488        dq va_ptr string_delete; " delete"
  .rdata:0x000000000000B490        dq va_ptr data_0xB820
  .rdata:0x000000000000B498        dq va_ptr data_0xB824
  .rdata:0x000000000000B4A0        dq va_ptr data_0xB828
  .rdata:0x000000000000B4A8        dq va_ptr data_0xB82C
  .rdata:0x000000000000B4B0        dq va_ptr data_0xB830
  .rdata:0x000000000000B4B8        dq va_ptr data_0xB834
  .rdata:0x000000000000B4C0        dq va_ptr data_0xB838
  .rdata:0x000000000000B4C8        dq va_ptr string_operator; "operator"
  .rdata:0x000000000000B4D0        dq va_ptr data_0xB84C
  .rdata:0x000000000000B4D8        dq va_ptr data_0xB850
  .rdata:0x000000000000B4E0        dq va_ptr data_0xB854
  .rdata:0x000000000000B4E8        dq va_ptr data_0xB858
  .rdata:0x000000000000B4F0        dq va_ptr data_0xB85C
  .rdata:0x000000000000B4F8        dq va_ptr data_0xB860
  .rdata:0x000000000000B500        dq va_ptr data_0xB864
  .rdata:0x000000000000B508        dq va_ptr data_0xB868
  .rdata:0x000000000000B510        dq va_ptr data_0xB86C
  .rdata:0x000000000000B518        dq va_ptr data_0xB870
  .rdata:0x000000000000B520        dq va_ptr data_0xB874
  .rdata:0x000000000000B528        dq va_ptr data_0xB878
  .rdata:0x000000000000B530        dq va_ptr data_0xB87C
  .rdata:0x000000000000B538        dq va_ptr data_0xB880
  .rdata:0x000000000000B540        dq va_ptr data_0xB884
  .rdata:0x000000000000B548        dq va_ptr data_0xB888
  .rdata:0x000000000000B550        dq va_ptr data_0xB88C
  .rdata:0x000000000000B558        dq va_ptr data_0xB890
  .rdata:0x000000000000B560        dq va_ptr data_0xB894
  .rdata:0x000000000000B568        dq va_ptr data_0xB898
  .rdata:0x000000000000B570        dq va_ptr data_0xB89C
  .rdata:0x000000000000B578        dq va_ptr data_0xB8A0
  .rdata:0x000000000000B580        dq va_ptr data_0xB8A4
  .rdata:0x000000000000B588        dq va_ptr data_0xB8A8
  .rdata:0x000000000000B590        dq va_ptr data_0xB8AC
  .rdata:0x000000000000B598        dq va_ptr data_0xB8B0
  .rdata:0x000000000000B5A0        dq va_ptr data_0xB8B4
  .rdata:0x000000000000B5A8        dq va_ptr data_0xB8B8
  .rdata:0x000000000000B5B0        dq va_ptr data_0xB8BC
  .rdata:0x000000000000B5B8        dq va_ptr data_0xB8C0
  .rdata:0x000000000000B5C0        dq va_ptr data_0xB8C4
  .rdata:0x000000000000B5C8        dq va_ptr string_vftable; "`vftable'"
  .rdata:0x000000000000B5D0        dq va_ptr string_vbtable; "`vbtable'"
  .rdata:0x000000000000B5D8        dq va_ptr string_vcall; "`vcall'"
  .rdata:0x000000000000B5E0        dq va_ptr string_typeof; "`typeof'"
  .rdata:0x000000000000B5E8        dq va_ptr string_localstati; "`local static guard'"
  .rdata:0x000000000000B5F0        dq va_ptr string_string; "`string'"
  .rdata:0x000000000000B5F8        dq va_ptr string_vbasedestr; "`vbase destructor'"
  .rdata:0x000000000000B600        dq va_ptr string_vectordele; "`vector deleting destructor'"
  .rdata:0x000000000000B608        dq va_ptr string_defaultcon; "`default constructor closure'"
  .rdata:0x000000000000B610        dq va_ptr string_scalardele; "`scalar deleting destructor'"
  .rdata:0x000000000000B618        dq va_ptr string_vectorcons; "`vector constructor iterator'"
  .rdata:0x000000000000B620        dq va_ptr string_vectordest; "`vector destructor iterator'"
  .rdata:0x000000000000B628        dq va_ptr string_vectorvbas; "`vector vbase constructor iterator'"
  .rdata:0x000000000000B630        dq va_ptr string_virtualdis; "`virtual displacement map'"
  .rdata:0x000000000000B638        dq va_ptr string_ehvectorco; "`eh vector constructor iterator'"
  .rdata:0x000000000000B640        dq va_ptr string_ehvectorde; "`eh vector destructor iterator'"
  .rdata:0x000000000000B648        dq va_ptr string_ehvectorvb; "`eh vector vbase constructor iterator'"
  .rdata:0x000000000000B650        dq va_ptr string_copyconstr; "`copy constructor closure'"
  .rdata:0x000000000000B658        dq va_ptr string_udtreturni; "`udt returning'"
  .rdata:0x000000000000B660        dq va_ptr string_EH; "`EH"
  .rdata:0x000000000000B668        dq va_ptr string_RTTI; "`RTTI"
  .rdata:0x000000000000B670        dq va_ptr string_localvftab; "`local vftable'"
  .rdata:0x000000000000B678        dq va_ptr string_localvftab_1; "`local vftable constructor closure'"
  .rdata:0x000000000000B680        dq va_ptr string_new_1; " new[]"
  .rdata:0x000000000000B688        dq va_ptr string_delete_1; " delete[]"
  .rdata:0x000000000000B690        dq va_ptr string_omnicallsi; "`omni callsig'"
  .rdata:0x000000000000B698        dq va_ptr string_placementd; "`placement delete closure'"
  .rdata:0x000000000000B6A0        dq va_ptr string_placementd_1; "`placement delete[] closure'"
  .rdata:0x000000000000B6A8        dq va_ptr string_managedvec; "`managed vector constructor iterator'"
  .rdata:0x000000000000B6B0        dq va_ptr string_managedvec_1; "`managed vector destructor iterator'"
  .rdata:0x000000000000B6B8        dq va_ptr string_ehvectorco_1; "`eh vector copy constructor iterator'"
  .rdata:0x000000000000B6C0        dq va_ptr string_ehvectorvb_1; "`eh vector vbase copy constructor iterator'"
  .rdata:0x000000000000B6C8        dq va_ptr string_dynamicini; "`dynamic initializer for '"
  .rdata:0x000000000000B6D0        dq va_ptr string_dynamicate; "`dynamic atexit destructor for '"
  .rdata:0x000000000000B6D8        dq va_ptr string_vectorcopy; "`vector copy constructor iterator'"
  .rdata:0x000000000000B6E0        dq va_ptr string_vectorvbas_1; "`vector vbase copy constructor iterator'"
  .rdata:0x000000000000B6E8        dq va_ptr string_managedvec_2; "`managed vector copy constructor iterator'"
  .rdata:0x000000000000B6F0        dq va_ptr string_localstati_1; "`local static thread guard'"
  .rdata:0x000000000000B6F8        dq va_ptr string_operator_1; "operator "" "
  .rdata:0x000000000000B700        dq va_ptr string_operatorco; "operator co_await"
  .rdata:0x000000000000B708        dq va_ptr data_0xB80A
  .rdata:0x000000000000B710        dq va_ptr string_TypeDescri; " Type Descriptor'"
  .rdata:0x000000000000B718        dq va_ptr string_BaseClassD; " Base Class Descriptor at ("
  .rdata:0x000000000000B720        dq va_ptr string_BaseClassA; " Base Class Array'"
  .rdata:0x000000000000B728        dq va_ptr string_ClassHiera; " Class Hierarchy Descriptor'"
  .rdata:0x000000000000B730        dq va_ptr string_CompleteOb; " Complete Object Locator'"
  .rdata:0x000000000000B738 string_based:
  .rdata:0x000000000000B738        db "__based(\x00"
  .rdata:0x000000000000B741        dd 0x00000000
  .rdata:0x000000000000B745        dw 0x0000
  .rdata:0x000000000000B747        db 0x00
  .rdata:0x000000000000B748 string_cdecl:
  .rdata:0x000000000000B748        db "__cdecl\x00"
  .rdata:0x000000000000B750 string_pascal:
  .rdata:0x000000000000B750        db "__pascal\x00"
  .rdata:0x000000000000B759        dd 0x00000000
  .rdata:0x000000000000B75D        dw 0x0000
  .rdata:0x000000000000B75F        db 0x00
  .rdata:0x000000000000B760 string_stdcall:
  .rdata:0x000000000000B760        db "__stdcall\x00"
  .rdata:0x000000000000B76A        dd 0x00000000
  .rdata:0x000000000000B76E        dw 0x0000
  .rdata:0x000000000000B770 string_thiscall:
  .rdata:0x000000000000B770        db "__thiscall\x00"
  .rdata:0x000000000000B77B        dd 0x00000000
  .rdata:0x000000000000B77F        db 0x00
  .rdata:0x000000000000B780 string_fastcall:
  .rdata:0x000000000000B780        db "__fastcall\x00"
  .rdata:0x000000000000B78B        dd 0x00000000
  .rdata:0x000000000000B78F        db 0x00
  .rdata:0x000000000000B790 string_vectorcall:
  .rdata:0x000000000000B790        db "__vectorcall\x00"
  .rdata:0x000000000000B79D        dw 0x0000
  .rdata:0x000000000000B79F        db 0x00
  .rdata:0x000000000000B7A0 string_clrcall:
  .rdata:0x000000000000B7A0        db "__clrcall\x00"
  .rdata:0x000000000000B7AA        dw 0x0000
  .rdata:0x000000000000B7AC string_eabi:
  .rdata:0x000000000000B7AC        db "__eabi\x00"
  .rdata:0x000000000000B7B3        dd 0x00000000
  .rdata:0x000000000000B7B7        db 0x00
  .rdata:0x000000000000B7B8 string_swift1:
  .rdata:0x000000000000B7B8        db "__swift_1\x00"
  .rdata:0x000000000000B7C2        dd 0x00000000
  .rdata:0x000000000000B7C6        dw 0x0000
  .rdata:0x000000000000B7C8 string_swift2:
  .rdata:0x000000000000B7C8        db "__swift_2\x00"
  .rdata:0x000000000000B7D2        dd 0x00000000
  .rdata:0x000000000000B7D6        dw 0x0000
  .rdata:0x000000000000B7D8 string_ptr64:
  .rdata:0x000000000000B7D8        db "__ptr64\x00"
  .rdata:0x000000000000B7E0 string_restrict:
  .rdata:0x000000000000B7E0        db "__restrict\x00"
  .rdata:0x000000000000B7EB        dd 0x00000000
  .rdata:0x000000000000B7EF        db 0x00
  .rdata:0x000000000000B7F0 string_unaligned:
  .rdata:0x000000000000B7F0        db "__unaligned\x00"
  .rdata:0x000000000000B7FC        dd 0x00000000
  .rdata:0x000000000000B800 string_restrict_1:
  .rdata:0x000000000000B800        db "restrict(\x00"
  .rdata:0x000000000000B80A data_0xB80A:
  .rdata:0x000000000000B80A        dw 0x0000
  .rdata:0x000000000000B80C string_new:
  .rdata:0x000000000000B80C        db " new\x00"
  .rdata:0x000000000000B811        dd 0x00000000
  .rdata:0x000000000000B815        dw 0x0000
  .rdata:0x000000000000B817        db 0x00
  .rdata:0x000000000000B818 string_delete:
  .rdata:0x000000000000B818        db " delete\x00"
  .rdata:0x000000000000B820 data_0xB820:
  .rdata:0x000000000000B820        db 4 dup(0x3D)
  .rdata:0x000000000000B824 data_0xB824:
  .rdata:0x000000000000B824        db 4 dup(0x3E)
  .rdata:0x000000000000B828 data_0xB828:
  .rdata:0x000000000000B828        db 4 dup(0x3C)
  .rdata:0x000000000000B82C data_0xB82C:
  .rdata:0x000000000000B82C        db 4 dup(0x21)
  .rdata:0x000000000000B830 data_0xB830:
  .rdata:0x000000000000B830        db 4 dup(0x3D)
  .rdata:0x000000000000B834 data_0xB834:
  .rdata:0x000000000000B834        db 4 dup(0x21)
  .rdata:0x000000000000B838 data_0xB838:
  .rdata:0x000000000000B838        db 8 dup(0x5B)
  .rdata:0x000000000000B840 string_operator:
  .rdata:0x000000000000B840        db "operator\x00"
  .rdata:0x000000000000B849        db 3 dup(0x00)
  .rdata:0x000000000000B84C data_0xB84C:
  .rdata:0x000000000000B84C        db 4 dup(0x2D)
  .rdata:0x000000000000B850 data_0xB850:
  .rdata:0x000000000000B850        db 4 dup(0x2A)
  .rdata:0x000000000000B854 data_0xB854:
  .rdata:0x000000000000B854        db 4 dup(0x2B)
  .rdata:0x000000000000B858 data_0xB858:
  .rdata:0x000000000000B858        db 4 dup(0x2D)
  .rdata:0x000000000000B85C data_0xB85C:
  .rdata:0x000000000000B85C        db 4 dup(0x2D)
  .rdata:0x000000000000B860 data_0xB860:
  .rdata:0x000000000000B860        db 4 dup(0x2B)
  .rdata:0x000000000000B864 data_0xB864:
  .rdata:0x000000000000B864        db 4 dup(0x26)
  .rdata:0x000000000000B868 data_0xB868:
  .rdata:0x000000000000B868        db 4 dup(0x2D)
  .rdata:0x000000000000B86C data_0xB86C:
  .rdata:0x000000000000B86C        db 4 dup(0x2F)
  .rdata:0x000000000000B870 data_0xB870:
  .rdata:0x000000000000B870        db 4 dup(0x25)
  .rdata:0x000000000000B874 data_0xB874:
  .rdata:0x000000000000B874        db 4 dup(0x3C)
  .rdata:0x000000000000B878 data_0xB878:
  .rdata:0x000000000000B878        db 4 dup(0x3C)
  .rdata:0x000000000000B87C data_0xB87C:
  .rdata:0x000000000000B87C        db 4 dup(0x3E)
  .rdata:0x000000000000B880 data_0xB880:
  .rdata:0x000000000000B880        db 4 dup(0x3E)
  .rdata:0x000000000000B884 data_0xB884:
  .rdata:0x000000000000B884        db 4 dup(0x2C)
  .rdata:0x000000000000B888 data_0xB888:
  .rdata:0x000000000000B888        db 4 dup(0x28)
  .rdata:0x000000000000B88C data_0xB88C:
  .rdata:0x000000000000B88C        db 4 dup(0x7E)
  .rdata:0x000000000000B890 data_0xB890:
  .rdata:0x000000000000B890        db 4 dup(0x5E)
  .rdata:0x000000000000B894 data_0xB894:
  .rdata:0x000000000000B894        db 4 dup(0x7C)
  .rdata:0x000000000000B898 data_0xB898:
  .rdata:0x000000000000B898        db 4 dup(0x26)
  .rdata:0x000000000000B89C data_0xB89C:
  .rdata:0x000000000000B89C        db 4 dup(0x7C)
  .rdata:0x000000000000B8A0 data_0xB8A0:
  .rdata:0x000000000000B8A0        db 4 dup(0x2A)
  .rdata:0x000000000000B8A4 data_0xB8A4:
  .rdata:0x000000000000B8A4        db 4 dup(0x2B)
  .rdata:0x000000000000B8A8 data_0xB8A8:
  .rdata:0x000000000000B8A8        db 4 dup(0x2D)
  .rdata:0x000000000000B8AC data_0xB8AC:
  .rdata:0x000000000000B8AC        db 4 dup(0x2F)
  .rdata:0x000000000000B8B0 data_0xB8B0:
  .rdata:0x000000000000B8B0        db 4 dup(0x25)
  .rdata:0x000000000000B8B4 data_0xB8B4:
  .rdata:0x000000000000B8B4        db 4 dup(0x3E)
  .rdata:0x000000000000B8B8 data_0xB8B8:
  .rdata:0x000000000000B8B8        db 4 dup(0x3C)
  .rdata:0x000000000000B8BC data_0xB8BC:
  .rdata:0x000000000000B8BC        db 4 dup(0x26)
  .rdata:0x000000000000B8C0 data_0xB8C0:
  .rdata:0x000000000000B8C0        db 4 dup(0x7C)
  .rdata:0x000000000000B8C4 data_0xB8C4:
  .rdata:0x000000000000B8C4        db 4 dup(0x5E)
  .rdata:0x000000000000B8C8 string_vftable:
  .rdata:0x000000000000B8C8        db "`vftable'\x00"
  .rdata:0x000000000000B8D2        dd 0x00000000
  .rdata:0x000000000000B8D6        dw 0x0000
  .rdata:0x000000000000B8D8 string_vbtable:
  .rdata:0x000000000000B8D8        db "`vbtable'\x00"
  .rdata:0x000000000000B8E2        dd 0x00000000
  .rdata:0x000000000000B8E6        dw 0x0000
  .rdata:0x000000000000B8E8 string_vcall:
  .rdata:0x000000000000B8E8        db "`vcall'\x00"
  .rdata:0x000000000000B8F0 string_typeof:
  .rdata:0x000000000000B8F0        db "`typeof'\x00"
  .rdata:0x000000000000B8F9        dd 0x00000000
  .rdata:0x000000000000B8FD        dw 0x0000
  .rdata:0x000000000000B8FF        db 0x00
  .rdata:0x000000000000B900 string_localstati:
  .rdata:0x000000000000B900        db "`local static guard'\x00"
  .rdata:0x000000000000B915        dw 0x0000
  .rdata:0x000000000000B917        db 0x00
  .rdata:0x000000000000B918 string_string:
  .rdata:0x000000000000B918        db "`string'\x00"
  .rdata:0x000000000000B921        dd 0x00000000
  .rdata:0x000000000000B925        dw 0x0000
  .rdata:0x000000000000B927        db 0x00
  .rdata:0x000000000000B928 string_vbasedestr:
  .rdata:0x000000000000B928        db "`vbase destructor'\x00"
  .rdata:0x000000000000B93B        dd 0x00000000
  .rdata:0x000000000000B93F        db 0x00
  .rdata:0x000000000000B940 string_vectordele:
  .rdata:0x000000000000B940        db "`vector deleting destructor'\x00"
  .rdata:0x000000000000B95D        dw 0x0000
  .rdata:0x000000000000B95F        db 0x00
  .rdata:0x000000000000B960 string_defaultcon:
  .rdata:0x000000000000B960        db "`default constructor closure'\x00"
  .rdata:0x000000000000B97E        dw 0x0000
  .rdata:0x000000000000B980 string_scalardele:
  .rdata:0x000000000000B980        db "`scalar deleting destructor'\x00"
  .rdata:0x000000000000B99D        dw 0x0000
  .rdata:0x000000000000B99F        db 0x00
  .rdata:0x000000000000B9A0 string_vectorcons:
  .rdata:0x000000000000B9A0        db "`vector constructor iterator'\x00"
  .rdata:0x000000000000B9BE        dw 0x0000
  .rdata:0x000000000000B9C0 string_vectordest:
  .rdata:0x000000000000B9C0        db "`vector destructor iterator'\x00"
  .rdata:0x000000000000B9DD        dw 0x0000
  .rdata:0x000000000000B9DF        db 0x00
  .rdata:0x000000000000B9E0 string_vectorvbas:
  .rdata:0x000000000000B9E0        db "`vector vbase constructor iterator'\x00"
  .rdata:0x000000000000BA04        dd 0x00000000
  .rdata:0x000000000000BA08 string_virtualdis:
  .rdata:0x000000000000BA08        db "`virtual displacement map'\x00"
  .rdata:0x000000000000BA23        dd 0x00000000
  .rdata:0x000000000000BA27        db 0x00
  .rdata:0x000000000000BA28 string_ehvectorco:
  .rdata:0x000000000000BA28        db "`eh vector constructor iterator'\x00"
  .rdata:0x000000000000BA49        dd 0x00000000
  .rdata:0x000000000000BA4D        dw 0x0000
  .rdata:0x000000000000BA4F        db 0x00
  .rdata:0x000000000000BA50 string_ehvectorde:
  .rdata:0x000000000000BA50        db "`eh vector destructor iterator'\x00"
  .rdata:0x000000000000BA70 string_ehvectorvb:
  .rdata:0x000000000000BA70        db "`eh vector vbase constructor iterator'\x00"
  .rdata:0x000000000000BA97        db 0x00
  .rdata:0x000000000000BA98 string_copyconstr:
  .rdata:0x000000000000BA98        db "`copy constructor closure'\x00"
  .rdata:0x000000000000BAB3        dd 0x00000000
  .rdata:0x000000000000BAB7        db 0x00
  .rdata:0x000000000000BAB8 string_udtreturni:
  .rdata:0x000000000000BAB8        db "`udt returning'\x00"
  .rdata:0x000000000000BAC8 string_EH:
  .rdata:0x000000000000BAC8        db "`EH\x00"
  .rdata:0x000000000000BACC string_RTTI:
  .rdata:0x000000000000BACC        db "`RTTI\x00"
  .rdata:0x000000000000BAD2        dd 0x00000000
  .rdata:0x000000000000BAD6        dw 0x0000
  .rdata:0x000000000000BAD8 string_localvftab:
  .rdata:0x000000000000BAD8        db "`local vftable'\x00"
  .rdata:0x000000000000BAE8 string_localvftab_1:
  .rdata:0x000000000000BAE8        db "`local vftable constructor closure'\x00"
  .rdata:0x000000000000BB0C string_new_1:
  .rdata:0x000000000000BB0C        db " new[]\x00"
  .rdata:0x000000000000BB13        dd 0x00000000
  .rdata:0x000000000000BB17        db 0x00
  .rdata:0x000000000000BB18 string_delete_1:
  .rdata:0x000000000000BB18        db " delete[]\x00"
  .rdata:0x000000000000BB22        dd 0x00000000
  .rdata:0x000000000000BB26        dw 0x0000
  .rdata:0x000000000000BB28 string_omnicallsi:
  .rdata:0x000000000000BB28        db "`omni callsig'\x00"
  .rdata:0x000000000000BB37        db 0x00
  .rdata:0x000000000000BB38 string_placementd:
  .rdata:0x000000000000BB38        db "`placement delete closure'\x00"
  .rdata:0x000000000000BB53        dd 0x00000000
  .rdata:0x000000000000BB57        db 0x00
  .rdata:0x000000000000BB58 string_placementd_1:
  .rdata:0x000000000000BB58        db "`placement delete[] closure'\x00"
  .rdata:0x000000000000BB75        dw 0x0000
  .rdata:0x000000000000BB77        db 0x00
  .rdata:0x000000000000BB78 string_managedvec:
  .rdata:0x000000000000BB78        db "`managed vector constructor iterator'\x00"
  .rdata:0x000000000000BB9E        dw 0x0000
  .rdata:0x000000000000BBA0 string_managedvec_1:
  .rdata:0x000000000000BBA0        db "`managed vector destructor iterator'\x00"
  .rdata:0x000000000000BBC5        dw 0x0000
  .rdata:0x000000000000BBC7        db 0x00
  .rdata:0x000000000000BBC8 string_ehvectorco_1:
  .rdata:0x000000000000BBC8        db "`eh vector copy constructor iterator'\x00"
  .rdata:0x000000000000BBEE        dw 0x0000
  .rdata:0x000000000000BBF0 string_ehvectorvb_1:
  .rdata:0x000000000000BBF0        db "`eh vector vbase copy constructor iterator'\x00"
  .rdata:0x000000000000BC1C        dd 0x00000000
  .rdata:0x000000000000BC20 string_dynamicini:
  .rdata:0x000000000000BC20        db "`dynamic initializer for '\x00"
  .rdata:0x000000000000BC3B        dd 0x00000000
  .rdata:0x000000000000BC3F        db 0x00
  .rdata:0x000000000000BC40 string_dynamicate:
  .rdata:0x000000000000BC40        db "`dynamic atexit destructor for '\x00"
  .rdata:0x000000000000BC61        dd 0x00000000
  .rdata:0x000000000000BC65        dw 0x0000
  .rdata:0x000000000000BC67        db 0x00
  .rdata:0x000000000000BC68 string_vectorcopy:
  .rdata:0x000000000000BC68        db "`vector copy constructor iterator'\x00"
  .rdata:0x000000000000BC8B        dd 0x00000000
  .rdata:0x000000000000BC8F        db 0x00
  .rdata:0x000000000000BC90 string_vectorvbas_1:
  .rdata:0x000000000000BC90        db "`vector vbase copy constructor iterator'\x00"
  .rdata:0x000000000000BCB9        dd 0x00000000
  .rdata:0x000000000000BCBD        dw 0x0000
  .rdata:0x000000000000BCBF        db 0x00
  .rdata:0x000000000000BCC0 string_managedvec_2:
  .rdata:0x000000000000BCC0        db "`managed vector copy constructor iterator'\x00"
  .rdata:0x000000000000BCEB        dd 0x00000000
  .rdata:0x000000000000BCEF        db 0x00
  .rdata:0x000000000000BCF0 string_localstati_1:
  .rdata:0x000000000000BCF0        db "`local static thread guard'\x00"
  .rdata:0x000000000000BD0C        dd 0x00000000
  .rdata:0x000000000000BD10 string_operator_1:
  .rdata:0x000000000000BD10        db "operator \"\" \x00"
  .rdata:0x000000000000BD1D        dw 0x0000
  .rdata:0x000000000000BD1F        db 0x00
  .rdata:0x000000000000BD20 string_operatorco:
  .rdata:0x000000000000BD20        db "operator co_await\x00"
  .rdata:0x000000000000BD32        dd 0x00000000
  .rdata:0x000000000000BD36        dw 0x0000
  .rdata:0x000000000000BD38 string_TypeDescri:
  .rdata:0x000000000000BD38        db " Type Descriptor'\x00"
  .rdata:0x000000000000BD4A        dd 0x00000000
  .rdata:0x000000000000BD4E        dw 0x0000
  .rdata:0x000000000000BD50 string_BaseClassD:
  .rdata:0x000000000000BD50        db " Base Class Descriptor at (\x00"
  .rdata:0x000000000000BD6C        dd 0x00000000
  .rdata:0x000000000000BD70 string_BaseClassA:
  .rdata:0x000000000000BD70        db " Base Class Array'\x00"
  .rdata:0x000000000000BD83        dd 0x00000000
  .rdata:0x000000000000BD87        db 0x00
  .rdata:0x000000000000BD88 string_ClassHiera:
  .rdata:0x000000000000BD88        db " Class Hierarchy Descriptor'\x00"
  .rdata:0x000000000000BDA5        dw 0x0000
  .rdata:0x000000000000BDA7        db 0x00
  .rdata:0x000000000000BDA8 string_CompleteOb:
  .rdata:0x000000000000BDA8        db " Complete Object Locator'\x00"
  .rdata:0x000000000000BDC2        dq 0x0000000000000000
  .rdata:0x000000000000BDCA        dd 0x00000000
  .rdata:0x000000000000BDCE        dw 0x0000
  .rdata:0x000000000000BDD0 data_0xBDD0:
  .rdata:0x000000000000BDD0        dq 0x0000000BC0000005
  .rdata:0x000000000000BDD8        dq 0x0000000000000000
  .rdata:0x000000000000BDE0        dq 0x00000004C000001D
  .rdata:0x000000000000BDE8        dq 0x0000000000000000
  .rdata:0x000000000000BDF0        dq 0x00000004C0000096
  .rdata:0x000000000000BDF8        dq 0x0000000000000000
  .rdata:0x000000000000BE00        dq 0x00000008C000008D
  .rdata:0x000000000000BE08        dq 0x0000000000000000
  .rdata:0x000000000000BE10        dq 0x00000008C000008E
  .rdata:0x000000000000BE18        dq 0x0000000000000000
  .rdata:0x000000000000BE20        dq 0x00000008C000008F
  .rdata:0x000000000000BE28        dq 0x0000000000000000
  .rdata:0x000000000000BE30        dq 0x00000008C0000090
  .rdata:0x000000000000BE38        dq 0x0000000000000000
  .rdata:0x000000000000BE40        dq 0x00000008C0000091
  .rdata:0x000000000000BE48        dq 0x0000000000000000
  .rdata:0x000000000000BE50        dq 0x00000008C0000092
  .rdata:0x000000000000BE58        dq 0x0000000000000000
  .rdata:0x000000000000BE60        dq 0x00000008C0000093
  .rdata:0x000000000000BE68        dq 0x0000000000000000
  .rdata:0x000000000000BE70        dq 0x00000008C00002B4
  .rdata:0x000000000000BE78        dq 0x0000000000000000
  .rdata:0x000000000000BE80        dq 0x00000008C00002B5
  .rdata:0x000000000000BE88        dq 0x0000000000000000
  .rdata:0x000000000000BE90 data_0xBE90:
  .rdata:0x000000000000BE90        dq 0x000000000000000C
  .rdata:0x000000000000BE98 data_0xBE98:
  .rdata:0x000000000000BE98        dq 0x0000000000000003
  .rdata:0x000000000000BEA0 data_0xBEA0:
  .rdata:0x000000000000BEA0        dq 0x0000000000000009
  .rdata:0x000000000000BEA8 string_mscoreedll:
  .rdata:0x000000000000BEA8        dw L"mscoree.dll\x0000"
  .rdata:0x000000000000BEC0 string_CorExitPro:
  .rdata:0x000000000000BEC0        db "CorExitProcess\x00"
  .rdata:0x000000000000BECF        db 0x00
  .rdata:0x000000000000BED0 data_0xBED0:
  .rdata:0x000000000000BED0        dq va_ptr initialize_global_variables; inline int8_t (__cdecl *)( void )
  .rdata:0x000000000000BED8        dq 0x0000000000000000
  .rdata:0x000000000000BEE0        dq va_ptr initialize_pointers; int8_t (__cdecl *)( void )
  .rdata:0x000000000000BEE8        dq 0x0000000000000000
  .rdata:0x000000000000BEF0        dq va_ptr __acrt_initialize_winapi_thunks; inline int8_t (__cdecl *)( void )
  .rdata:0x000000000000BEF8        dq va_ptr __acrt_uninitialize_winapi_thunks; int8_t (__cdecl *)( int8_t p1 )
  .rdata:0x000000000000BF00        dq va_ptr std::codecvt<char,char,struct _Mbstatet>::do_always_noconv; protected: virtual bool (__cdecl *)( void * this )
  .rdata:0x000000000000BF08        dq va_ptr std::codecvt<char,char,struct _Mbstatet>::do_always_noconv; protected: virtual bool (__cdecl *)( void * this )
  .rdata:0x000000000000BF10        dq va_ptr __acrt_initialize_locks; int8_t (__cdecl *)( void )
  .rdata:0x000000000000BF18        dq va_ptr __acrt_uninitialize_locks; int8_t (__cdecl *)( void )
  .rdata:0x000000000000BF20        dq va_ptr __acrt_initialize_heap; void (__cdecl *)( void )
  .rdata:0x000000000000BF28        dq va_ptr __acrt_uninitialize_heap; inline int8_t (__cdecl *)( void )
  .rdata:0x000000000000BF30        dq 0x0000000000000000
  .rdata:0x000000000000BF38        dq va_ptr func_0x3C08; inline void (__cdecl *)( void )
  .rdata:0x000000000000BF40        dq va_ptr __acrt_initialize_ptd; int8_t (__cdecl *)( void )
  .rdata:0x000000000000BF48        dq va_ptr __acrt_uninitialize_ptd; int8_t (__cdecl *)( void )
  .rdata:0x000000000000BF50        dq va_ptr __acrt_initialize_lowio; int8_t (__cdecl *)( void )
  .rdata:0x000000000000BF58        dq va_ptr __acrt_uninitialize_lowio; int8_t (__cdecl *)( void )
  .rdata:0x000000000000BF60        dq va_ptr __acrt_initialize_command_line; int8_t (__cdecl *)( void )
  .rdata:0x000000000000BF68        dq va_ptr std::codecvt<char,char,struct _Mbstatet>::do_always_noconv; protected: virtual bool (__cdecl *)( void * this )
  .rdata:0x000000000000BF70        dq va_ptr __acrt_initialize_multibyte; int8_t (__cdecl *)( void )
  .rdata:0x000000000000BF78        dq 0x0000000000000000
  .rdata:0x000000000000BF80        dq 0x0000000000000000
  .rdata:0x000000000000BF88        dq va_ptr std::codecvt<char,char,struct _Mbstatet>::do_always_noconv; protected: virtual bool (__cdecl *)( void * this )
  .rdata:0x000000000000BF90        dq 0x0000000000000000
  .rdata:0x000000000000BF98        dq va_ptr uninitialize_allocated_io_buffers; int8_t (__cdecl *)( void )
  .rdata:0x000000000000BFA0        dq 0x0000000000000000
  .rdata:0x000000000000BFA8        dq va_ptr uninitialize_allocated_memory; int8_t (__cdecl *)( void )
  .rdata:0x000000000000BFB0        dq va_ptr std::codecvt<char,char,struct _Mbstatet>::do_always_noconv; protected: virtual bool (__cdecl *)( void * this )
  .rdata:0x000000000000BFB8        dq va_ptr __vcrt_uninitialize_critical; int8_t (__cdecl *)( void )
  .rdata:0x000000000000BFC0        dq va_ptr initialize_c; int8_t (__cdecl *)( void )
  .rdata:0x000000000000BFC8        dq va_ptr std::codecvt<char,char,struct _Mbstatet>::do_always_noconv; protected: virtual bool (__cdecl *)( void * this )
  .rdata:0x000000000000BFD0 data_0xBFD0:
  .rdata:0x000000000000BFD0        dq 0x0000001600000001
  .rdata:0x000000000000BFD8        dq 0x0000000200000002
  .rdata:0x000000000000BFE0        dq 0x0000000200000003
  .rdata:0x000000000000BFE8        dq 0x0000001800000004
  .rdata:0x000000000000BFF0        dq 0x0000000D00000005
  .rdata:0x000000000000BFF8        dq 0x0000000900000006
  .rdata:0x000000000000C000        dq 0x0000000C00000007
  .rdata:0x000000000000C008        dq 0x0000000C00000008
  .rdata:0x000000000000C010        dq 0x0000000C00000009
  .rdata:0x000000000000C018        dq 0x000000070000000A
  .rdata:0x000000000000C020        dq 0x000000080000000B
  .rdata:0x000000000000C028        dq 0x000000160000000C
  .rdata:0x000000000000C030        dq 0x000000160000000D
  .rdata:0x000000000000C038        dq 0x000000020000000F
  .rdata:0x000000000000C040        dq 0x0000000D00000010
  .rdata:0x000000000000C048        dq 0x0000001200000011
  .rdata:0x000000000000C050        dq 0x0000000200000012
  .rdata:0x000000000000C058        dq 0x0000000D00000021
  .rdata:0x000000000000C060        db "5\x00"
  .rdata:0x000000000000C062        dd 0x00020000
  .rdata:0x000000000000C066        dw 0x0000
  .rdata:0x000000000000C068        db "A\x00"
  .rdata:0x000000000000C06A        dd 0x000D0000
  .rdata:0x000000000000C06E        dw 0x0000
  .rdata:0x000000000000C070        db "C\x00"
  .rdata:0x000000000000C072        dd 0x00020000
  .rdata:0x000000000000C076        dw 0x0000
  .rdata:0x000000000000C078        db "P\x00"
  .rdata:0x000000000000C07A        dd 0x00110000
  .rdata:0x000000000000C07E        dw 0x0000
  .rdata:0x000000000000C080        db "R\x00"
  .rdata:0x000000000000C082        dd 0x000D0000
  .rdata:0x000000000000C086        dw 0x0000
  .rdata:0x000000000000C088        db "S\x00"
  .rdata:0x000000000000C08A        dd 0x000D0000
  .rdata:0x000000000000C08E        dw 0x0000
  .rdata:0x000000000000C090        db "W\x00"
  .rdata:0x000000000000C092        dd 0x00160000
  .rdata:0x000000000000C096        dw 0x0000
  .rdata:0x000000000000C098        db "Y\x00"
  .rdata:0x000000000000C09A        dd 0x000B0000
  .rdata:0x000000000000C09E        dw 0x0000
  .rdata:0x000000000000C0A0        db "l\x00"
  .rdata:0x000000000000C0A2        dd 0x000D0000
  .rdata:0x000000000000C0A6        dw 0x0000
  .rdata:0x000000000000C0A8        db "m\x00"
  .rdata:0x000000000000C0AA        dw 0x0000
  .rdata:0x000000000000C0AC        db " \x00"
  .rdata:0x000000000000C0AE        dw 0x0000
  .rdata:0x000000000000C0B0        db "p\x00"
  .rdata:0x000000000000C0B2        dd 0x001C0000
  .rdata:0x000000000000C0B6        dw 0x0000
  .rdata:0x000000000000C0B8        db "r\x00"
  .rdata:0x000000000000C0BA        dq 0x0080000000090000
  .rdata:0x000000000000C0C2        dq 0x00810000000A0000
  .rdata:0x000000000000C0CA        dq 0x00820000000A0000
  .rdata:0x000000000000C0D2        dq 0x0083000000090000
  .rdata:0x000000000000C0DA        dq 0x0084000000160000
  .rdata:0x000000000000C0E2        dq 0x00910000000D0000
  .rdata:0x000000000000C0EA        dq 0x009E000000290000
  .rdata:0x000000000000C0F2        dq 0x00A10000000D0000
  .rdata:0x000000000000C0FA        dq 0x00A4000000020000
  .rdata:0x000000000000C102        dq 0x00A70000000B0000
  .rdata:0x000000000000C10A        dq 0x00B70000000D0000
  .rdata:0x000000000000C112        dq 0x00CE000000110000
  .rdata:0x000000000000C11A        dq 0x00D7000000020000
  .rdata:0x000000000000C122        dq 0x07180000000B0000
  .rdata:0x000000000000C12A        dd 0x000C0000
  .rdata:0x000000000000C12E        dw 0x0000
  .rdata:0x000000000000C130 data_0xC130:
  .rdata:0x000000000000C130        dq va_ptr string_jaJP; "ja-JP"
  .rdata:0x000000000000C138 data_0xC138:
  .rdata:0x000000000000C138        dq va_ptr string_zhCN; "zh-CN"
  .rdata:0x000000000000C140 data_0xC140:
  .rdata:0x000000000000C140        dq va_ptr string_koKR; "ko-KR"
  .rdata:0x000000000000C148 data_0xC148:
  .rdata:0x000000000000C148        dq va_ptr string_zhTW; "zh-TW"
  .rdata:0x000000000000C150 string_jaJP:
  .rdata:0x000000000000C150        dw L"ja-JP\x0000"
  .rdata:0x000000000000C15C        dd 0x00000000
  .rdata:0x000000000000C160 string_zhCN:
  .rdata:0x000000000000C160        dw L"zh-CN\x0000"
  .rdata:0x000000000000C16C        dd 0x00000000
  .rdata:0x000000000000C170 string_koKR:
  .rdata:0x000000000000C170        dw L"ko-KR\x0000"
  .rdata:0x000000000000C17C        dd 0x00000000
  .rdata:0x000000000000C180 string_zhTW:
  .rdata:0x000000000000C180        dw L"zh-TW\x0000"
  .rdata:0x000000000000C18C        dd 0x00000000
  .rdata:0x000000000000C190 data_0xC190:
  .rdata:0x000000000000C190        dq va_ptr string_Sun; "Sun"
  .rdata:0x000000000000C198        dq va_ptr string_Mon; "Mon"
  .rdata:0x000000000000C1A0        dq va_ptr string_Tue; "Tue"
  .rdata:0x000000000000C1A8        dq va_ptr string_Wed; "Wed"
  .rdata:0x000000000000C1B0        dq va_ptr string_Thu; "Thu"
  .rdata:0x000000000000C1B8        dq va_ptr string_Fri; "Fri"
  .rdata:0x000000000000C1C0        dq va_ptr string_Sat; "Sat"
  .rdata:0x000000000000C1C8        dq va_ptr string_Sunday; "Sunday"
  .rdata:0x000000000000C1D0        dq va_ptr string_Monday; "Monday"
  .rdata:0x000000000000C1D8        dq va_ptr string_Tuesday; "Tuesday"
  .rdata:0x000000000000C1E0        dq va_ptr string_Wednesday; "Wednesday"
  .rdata:0x000000000000C1E8        dq va_ptr string_Thursday; "Thursday"
  .rdata:0x000000000000C1F0        dq va_ptr string_Friday; "Friday"
  .rdata:0x000000000000C1F8        dq va_ptr string_Saturday; "Saturday"
  .rdata:0x000000000000C200        dq va_ptr string_Jan; "Jan"
  .rdata:0x000000000000C208        dq va_ptr string_Feb; "Feb"
  .rdata:0x000000000000C210        dq va_ptr string_Mar; "Mar"
  .rdata:0x000000000000C218        dq va_ptr string_Apr; "Apr"
  .rdata:0x000000000000C220        dq va_ptr string_May; "May"
  .rdata:0x000000000000C228        dq va_ptr string_Jun; "Jun"
  .rdata:0x000000000000C230        dq va_ptr string_Jul; "Jul"
  .rdata:0x000000000000C238        dq va_ptr string_Aug; "Aug"
  .rdata:0x000000000000C240        dq va_ptr string_Sep; "Sep"
  .rdata:0x000000000000C248        dq va_ptr string_Oct; "Oct"
  .rdata:0x000000000000C250        dq va_ptr string_Nov; "Nov"
  .rdata:0x000000000000C258        dq va_ptr string_Dec; "Dec"
  .rdata:0x000000000000C260        dq va_ptr string_January; "January"
  .rdata:0x000000000000C268        dq va_ptr string_February; "February"
  .rdata:0x000000000000C270        dq va_ptr string_March; "March"
  .rdata:0x000000000000C278        dq va_ptr string_April; "April"
  .rdata:0x000000000000C280        dq va_ptr string_May; "May"
  .rdata:0x000000000000C288        dq va_ptr string_June; "June"
  .rdata:0x000000000000C290        dq va_ptr string_July; "July"
  .rdata:0x000000000000C298        dq va_ptr string_August; "August"
  .rdata:0x000000000000C2A0        dq va_ptr string_September; "September"
  .rdata:0x000000000000C2A8        dq va_ptr string_October; "October"
  .rdata:0x000000000000C2B0        dq va_ptr string_November; "November"
  .rdata:0x000000000000C2B8        dq va_ptr string_December; "December"
  .rdata:0x000000000000C2C0        dq va_ptr string_AM; "AM"
  .rdata:0x000000000000C2C8        dq va_ptr string_PM; "PM"
  .rdata:0x000000000000C2D0        dq va_ptr string_MMddyy; "MM/dd/yy"
  .rdata:0x000000000000C2D8        dq va_ptr string_ddddMMMMdd; "dddd, MMMM dd, yyyy"
  .rdata:0x000000000000C2E0        dq va_ptr string_HHmmss; "HH:mm:ss"
  .rdata:0x000000000000C2E8        dq 0x0000000000000001
  .rdata:0x000000000000C2F0        dq va_ptr data_0xC5A8; "S"
  .rdata:0x000000000000C2F8        dq va_ptr data_0xC5B0; "M"
  .rdata:0x000000000000C300        dq va_ptr data_0xC5B8; "T"
  .rdata:0x000000000000C308        dq va_ptr data_0xC5C0; "W"
  .rdata:0x000000000000C310        dq va_ptr data_0xC5C8; "T"
  .rdata:0x000000000000C318        dq va_ptr data_0xC5D0; "F"
  .rdata:0x000000000000C320        dq va_ptr data_0xC5D8; "S"
  .rdata:0x000000000000C328        dq va_ptr string_Sunday_1; "Sunday"
  .rdata:0x000000000000C330        dq va_ptr string_Monday_1; "Monday"
  .rdata:0x000000000000C338        dq va_ptr string_Tuesday_1; "Tuesday"
  .rdata:0x000000000000C340        dq va_ptr string_Wednesday_1; "Wednesday"
  .rdata:0x000000000000C348        dq va_ptr string_Thursday_1; "Thursday"
  .rdata:0x000000000000C350        dq va_ptr string_Friday_1; "Friday"
  .rdata:0x000000000000C358        dq va_ptr string_Saturday_1; "Saturday"
  .rdata:0x000000000000C360        dq va_ptr data_0xC668; "J"
  .rdata:0x000000000000C368        dq va_ptr data_0xC670; "F"
  .rdata:0x000000000000C370        dq va_ptr data_0xC678; "M"
  .rdata:0x000000000000C378        dq va_ptr data_0xC680; "A"
  .rdata:0x000000000000C380        dq va_ptr data_0xC688; "M"
  .rdata:0x000000000000C388        dq va_ptr data_0xC690; "J"
  .rdata:0x000000000000C390        dq va_ptr data_0xC698; "J"
  .rdata:0x000000000000C398        dq va_ptr data_0xC6A0; "A"
  .rdata:0x000000000000C3A0        dq va_ptr data_0xC6A8; "S"
  .rdata:0x000000000000C3A8        dq va_ptr data_0xC6B0; "O"
  .rdata:0x000000000000C3B0        dq va_ptr data_0xC6B8; "N"
  .rdata:0x000000000000C3B8        dq va_ptr data_0xC6C0; "D"
  .rdata:0x000000000000C3C0        dq va_ptr string_January_1; "January"
  .rdata:0x000000000000C3C8        dq va_ptr string_February_1; "February"
  .rdata:0x000000000000C3D0        dq va_ptr string_March_1; "March"
  .rdata:0x000000000000C3D8        dq va_ptr string_April_1; "April"
  .rdata:0x000000000000C3E0        dq va_ptr data_0xC688; "M"
  .rdata:0x000000000000C3E8        dq va_ptr data_0xC710; "J"
  .rdata:0x000000000000C3F0        dq va_ptr data_0xC720; "J"
  .rdata:0x000000000000C3F8        dq va_ptr string_August_1; "August"
  .rdata:0x000000000000C400        dq va_ptr string_September_1; "September"
  .rdata:0x000000000000C408        dq va_ptr string_October_1; "October"
  .rdata:0x000000000000C410        dq va_ptr string_November_1; "November"
  .rdata:0x000000000000C418        dq va_ptr string_December_1; "December"
  .rdata:0x000000000000C420        dq va_ptr data_0xC794; "A"
  .rdata:0x000000000000C428        dq va_ptr data_0xC79C; "P"
  .rdata:0x000000000000C430        dq va_ptr string_MMddyy_1; "MM/dd/yy"
  .rdata:0x000000000000C438        dq va_ptr string_ddddMMMMdd_1; "dddd, MMMM dd, yyyy"
  .rdata:0x000000000000C440        dq va_ptr string_HHmmss_1; "HH:mm:ss"
  .rdata:0x000000000000C448        dq va_ptr string_enUS; "en-US"
  .rdata:0x000000000000C450 string_Sun:
  .rdata:0x000000000000C450        db "Sun\x00"
  .rdata:0x000000000000C454 string_Mon:
  .rdata:0x000000000000C454        db "Mon\x00"
  .rdata:0x000000000000C458 string_Tue:
  .rdata:0x000000000000C458        db "Tue\x00"
  .rdata:0x000000000000C45C string_Wed:
  .rdata:0x000000000000C45C        db "Wed\x00"
  .rdata:0x000000000000C460 string_Thu:
  .rdata:0x000000000000C460        db "Thu\x00"
  .rdata:0x000000000000C464 string_Fri:
  .rdata:0x000000000000C464        db "Fri\x00"
  .rdata:0x000000000000C468 string_Sat:
  .rdata:0x000000000000C468        db "Sat\x00"
  .rdata:0x000000000000C46C string_Sunday:
  .rdata:0x000000000000C46C        db "Sunday\x00"
  .rdata:0x000000000000C473        db 0x00
  .rdata:0x000000000000C474 string_Monday:
  .rdata:0x000000000000C474        db "Monday\x00"
  .rdata:0x000000000000C47B        dd 0x00000000
  .rdata:0x000000000000C47F        db 0x00
  .rdata:0x000000000000C480 string_Tuesday:
  .rdata:0x000000000000C480        db "Tuesday\x00"
  .rdata:0x000000000000C488 string_Wednesday:
  .rdata:0x000000000000C488        db "Wednesday\x00"
  .rdata:0x000000000000C492        dd 0x00000000
  .rdata:0x000000000000C496        dw 0x0000
  .rdata:0x000000000000C498 string_Thursday:
  .rdata:0x000000000000C498        db "Thursday\x00"
  .rdata:0x000000000000C4A1        dw 0x0000
  .rdata:0x000000000000C4A3        db 0x00
  .rdata:0x000000000000C4A4 string_Friday:
  .rdata:0x000000000000C4A4        db "Friday\x00"
  .rdata:0x000000000000C4AB        dd 0x00000000
  .rdata:0x000000000000C4AF        db 0x00
  .rdata:0x000000000000C4B0 string_Saturday:
  .rdata:0x000000000000C4B0        db "Saturday\x00"
  .rdata:0x000000000000C4B9        dw 0x0000
  .rdata:0x000000000000C4BB        db 0x00
  .rdata:0x000000000000C4BC string_Jan:
  .rdata:0x000000000000C4BC        db "Jan\x00"
  .rdata:0x000000000000C4C0 string_Feb:
  .rdata:0x000000000000C4C0        db "Feb\x00"
  .rdata:0x000000000000C4C4 string_Mar:
  .rdata:0x000000000000C4C4        db "Mar\x00"
  .rdata:0x000000000000C4C8 string_Apr:
  .rdata:0x000000000000C4C8        db "Apr\x00"
  .rdata:0x000000000000C4CC string_May:
  .rdata:0x000000000000C4CC        db "May\x00"
  .rdata:0x000000000000C4D0 string_Jun:
  .rdata:0x000000000000C4D0        db "Jun\x00"
  .rdata:0x000000000000C4D4 string_Jul:
  .rdata:0x000000000000C4D4        db "Jul\x00"
  .rdata:0x000000000000C4D8 string_Aug:
  .rdata:0x000000000000C4D8        db "Aug\x00"
  .rdata:0x000000000000C4DC string_Sep:
  .rdata:0x000000000000C4DC        db "Sep\x00"
  .rdata:0x000000000000C4E0 string_Oct:
  .rdata:0x000000000000C4E0        db "Oct\x00"
  .rdata:0x000000000000C4E4 string_Nov:
  .rdata:0x000000000000C4E4        db "Nov\x00"
  .rdata:0x000000000000C4E8 string_Dec:
  .rdata:0x000000000000C4E8        db "Dec\x00"
  .rdata:0x000000000000C4EC        dd 0x00000000
  .rdata:0x000000000000C4F0 string_January:
  .rdata:0x000000000000C4F0        db "January\x00"
  .rdata:0x000000000000C4F8 string_February:
  .rdata:0x000000000000C4F8        db "February\x00"
  .rdata:0x000000000000C501        dw 0x0000
  .rdata:0x000000000000C503        db 0x00
  .rdata:0x000000000000C504 string_March:
  .rdata:0x000000000000C504        db "March\x00"
  .rdata:0x000000000000C50A        dw 0x0000
  .rdata:0x000000000000C50C string_April:
  .rdata:0x000000000000C50C        db "April\x00"
  .rdata:0x000000000000C512        dw 0x0000
  .rdata:0x000000000000C514 string_June:
  .rdata:0x000000000000C514        db "June\x00"
  .rdata:0x000000000000C519        dw 0x0000
  .rdata:0x000000000000C51B        db 0x00
  .rdata:0x000000000000C51C string_July:
  .rdata:0x000000000000C51C        db "July\x00"
  .rdata:0x000000000000C521        dw 0x0000
  .rdata:0x000000000000C523        db 0x00
  .rdata:0x000000000000C524 string_August:
  .rdata:0x000000000000C524        db "August\x00"
  .rdata:0x000000000000C52B        dd 0x00000000
  .rdata:0x000000000000C52F        db 0x00
  .rdata:0x000000000000C530 string_September:
  .rdata:0x000000000000C530        db "September\x00"
  .rdata:0x000000000000C53A        dd 0x00000000
  .rdata:0x000000000000C53E        dw 0x0000
  .rdata:0x000000000000C540 string_October:
  .rdata:0x000000000000C540        db "October\x00"
  .rdata:0x000000000000C548 string_November:
  .rdata:0x000000000000C548        db "November\x00"
  .rdata:0x000000000000C551        dd 0x00000000
  .rdata:0x000000000000C555        dw 0x0000
  .rdata:0x000000000000C557        db 0x00
  .rdata:0x000000000000C558 string_December:
  .rdata:0x000000000000C558        db "December\x00"
  .rdata:0x000000000000C561        dw 0x0000
  .rdata:0x000000000000C563        db 0x00
  .rdata:0x000000000000C564 string_AM:
  .rdata:0x000000000000C564        db "AM\x00"
  .rdata:0x000000000000C567        db 0x00
  .rdata:0x000000000000C568 string_PM:
  .rdata:0x000000000000C568        db "PM\x00"
  .rdata:0x000000000000C56B        dd 0x00000000
  .rdata:0x000000000000C56F        db 0x00
  .rdata:0x000000000000C570 string_MMddyy:
  .rdata:0x000000000000C570        db "MM/dd/yy\x00"
  .rdata:0x000000000000C579        dd 0x00000000
  .rdata:0x000000000000C57D        dw 0x0000
  .rdata:0x000000000000C57F        db 0x00
  .rdata:0x000000000000C580 string_ddddMMMMdd:
  .rdata:0x000000000000C580        db "dddd, MMMM dd, yyyy\x00"
  .rdata:0x000000000000C594        dd 0x00000000
  .rdata:0x000000000000C598 string_HHmmss:
  .rdata:0x000000000000C598        db "HH:mm:ss\x00"
  .rdata:0x000000000000C5A1        dd 0x00000000
  .rdata:0x000000000000C5A5        dw 0x0000
  .rdata:0x000000000000C5A7        db 0x00
  .rdata:0x000000000000C5A8 data_0xC5A8:
  .rdata:0x000000000000C5A8        db "S\x00"
  .rdata:0x000000000000C5AA        db "u\x00"
  .rdata:0x000000000000C5AC        db "n\x00"
  .rdata:0x000000000000C5AE        dw 0x0000
  .rdata:0x000000000000C5B0 data_0xC5B0:
  .rdata:0x000000000000C5B0        db "M\x00"
  .rdata:0x000000000000C5B2        db "o\x00"
  .rdata:0x000000000000C5B4        db "n\x00"
  .rdata:0x000000000000C5B6        dw 0x0000
  .rdata:0x000000000000C5B8 data_0xC5B8:
  .rdata:0x000000000000C5B8        db "T\x00"
  .rdata:0x000000000000C5BA        db "u\x00"
  .rdata:0x000000000000C5BC        db "e\x00"
  .rdata:0x000000000000C5BE        dw 0x0000
  .rdata:0x000000000000C5C0 data_0xC5C0:
  .rdata:0x000000000000C5C0        db "W\x00"
  .rdata:0x000000000000C5C2        db "e\x00"
  .rdata:0x000000000000C5C4        db "d\x00"
  .rdata:0x000000000000C5C6        dw 0x0000
  .rdata:0x000000000000C5C8 data_0xC5C8:
  .rdata:0x000000000000C5C8        db "T\x00"
  .rdata:0x000000000000C5CA        db "h\x00"
  .rdata:0x000000000000C5CC        db "u\x00"
  .rdata:0x000000000000C5CE        dw 0x0000
  .rdata:0x000000000000C5D0 data_0xC5D0:
  .rdata:0x000000000000C5D0        db "F\x00"
  .rdata:0x000000000000C5D2        db "r\x00"
  .rdata:0x000000000000C5D4        db "i\x00"
  .rdata:0x000000000000C5D6        dw 0x0000
  .rdata:0x000000000000C5D8 data_0xC5D8:
  .rdata:0x000000000000C5D8        db "S\x00"
  .rdata:0x000000000000C5DA        db "a\x00"
  .rdata:0x000000000000C5DC        db "t\x00"
  .rdata:0x000000000000C5DE        dw 0x0000
  .rdata:0x000000000000C5E0 string_Sunday_1:
  .rdata:0x000000000000C5E0        dw L"Sunday\x0000"
  .rdata:0x000000000000C5EE        dw 0x0000
  .rdata:0x000000000000C5F0 string_Monday_1:
  .rdata:0x000000000000C5F0        dw L"Monday\x0000"
  .rdata:0x000000000000C5FE        dw 0x0000
  .rdata:0x000000000000C600 string_Tuesday_1:
  .rdata:0x000000000000C600        dw L"Tuesday\x0000"
  .rdata:0x000000000000C610 string_Wednesday_1:
  .rdata:0x000000000000C610        dw L"Wednesday\x0000"
  .rdata:0x000000000000C624        dd 0x00000000
  .rdata:0x000000000000C628 string_Thursday_1:
  .rdata:0x000000000000C628        dw L"Thursday\x0000"
  .rdata:0x000000000000C63A        dd 0x00000000
  .rdata:0x000000000000C63E        dw 0x0000
  .rdata:0x000000000000C640 string_Friday_1:
  .rdata:0x000000000000C640        dw L"Friday\x0000"
  .rdata:0x000000000000C64E        dw 0x0000
  .rdata:0x000000000000C650 string_Saturday_1:
  .rdata:0x000000000000C650        dw L"Saturday\x0000"
  .rdata:0x000000000000C662        dd 0x00000000
  .rdata:0x000000000000C666        dw 0x0000
  .rdata:0x000000000000C668 data_0xC668:
  .rdata:0x000000000000C668        db "J\x00"
  .rdata:0x000000000000C66A        db "a\x00"
  .rdata:0x000000000000C66C        db "n\x00"
  .rdata:0x000000000000C66E        dw 0x0000
  .rdata:0x000000000000C670 data_0xC670:
  .rdata:0x000000000000C670        db "F\x00"
  .rdata:0x000000000000C672        db "e\x00"
  .rdata:0x000000000000C674        db "b\x00"
  .rdata:0x000000000000C676        dw 0x0000
  .rdata:0x000000000000C678 data_0xC678:
  .rdata:0x000000000000C678        db "M\x00"
  .rdata:0x000000000000C67A        db "a\x00"
  .rdata:0x000000000000C67C        db "r\x00"
  .rdata:0x000000000000C67E        dw 0x0000
  .rdata:0x000000000000C680 data_0xC680:
  .rdata:0x000000000000C680        db "A\x00"
  .rdata:0x000000000000C682        db "p\x00"
  .rdata:0x000000000000C684        db "r\x00"
  .rdata:0x000000000000C686        dw 0x0000
  .rdata:0x000000000000C688 data_0xC688:
  .rdata:0x000000000000C688        db "M\x00"
  .rdata:0x000000000000C68A        db "a\x00"
  .rdata:0x000000000000C68C        db "y\x00"
  .rdata:0x000000000000C68E        dw 0x0000
  .rdata:0x000000000000C690 data_0xC690:
  .rdata:0x000000000000C690        db "J\x00"
  .rdata:0x000000000000C692        db "u\x00"
  .rdata:0x000000000000C694        db "n\x00"
  .rdata:0x000000000000C696        dw 0x0000
  .rdata:0x000000000000C698 data_0xC698:
  .rdata:0x000000000000C698        db "J\x00"
  .rdata:0x000000000000C69A        db "u\x00"
  .rdata:0x000000000000C69C        db "l\x00"
  .rdata:0x000000000000C69E        dw 0x0000
  .rdata:0x000000000000C6A0 data_0xC6A0:
  .rdata:0x000000000000C6A0        db "A\x00"
  .rdata:0x000000000000C6A2        db "u\x00"
  .rdata:0x000000000000C6A4        db "g\x00"
  .rdata:0x000000000000C6A6        dw 0x0000
  .rdata:0x000000000000C6A8 data_0xC6A8:
  .rdata:0x000000000000C6A8        db "S\x00"
  .rdata:0x000000000000C6AA        db "e\x00"
  .rdata:0x000000000000C6AC        db "p\x00"
  .rdata:0x000000000000C6AE        dw 0x0000
  .rdata:0x000000000000C6B0 data_0xC6B0:
  .rdata:0x000000000000C6B0        db "O\x00"
  .rdata:0x000000000000C6B2        db "c\x00"
  .rdata:0x000000000000C6B4        db "t\x00"
  .rdata:0x000000000000C6B6        dw 0x0000
  .rdata:0x000000000000C6B8 data_0xC6B8:
  .rdata:0x000000000000C6B8        db "N\x00"
  .rdata:0x000000000000C6BA        db "o\x00"
  .rdata:0x000000000000C6BC        db "v\x00"
  .rdata:0x000000000000C6BE        dw 0x0000
  .rdata:0x000000000000C6C0 data_0xC6C0:
  .rdata:0x000000000000C6C0        db "D\x00"
  .rdata:0x000000000000C6C2        db "e\x00"
  .rdata:0x000000000000C6C4        db "c\x00"
  .rdata:0x000000000000C6C6        dw 0x0000
  .rdata:0x000000000000C6C8 string_January_1:
  .rdata:0x000000000000C6C8        dw L"January\x0000"
  .rdata:0x000000000000C6D8 string_February_1:
  .rdata:0x000000000000C6D8        dw L"February\x0000"
  .rdata:0x000000000000C6EA        dd 0x00000000
  .rdata:0x000000000000C6EE        dw 0x0000
  .rdata:0x000000000000C6F0 string_March_1:
  .rdata:0x000000000000C6F0        dw L"March\x0000"
  .rdata:0x000000000000C6FC        dd 0x00000000
  .rdata:0x000000000000C700 string_April_1:
  .rdata:0x000000000000C700        dw L"April\x0000"
  .rdata:0x000000000000C70C        dd 0x00000000
  .rdata:0x000000000000C710 data_0xC710:
  .rdata:0x000000000000C710        db "J\x00"
  .rdata:0x000000000000C712        db "u\x00"
  .rdata:0x000000000000C714        db "n\x00"
  .rdata:0x000000000000C716        db "e\x00"
  .rdata:0x000000000000C718        dq 0x0000000000000000
  .rdata:0x000000000000C720 data_0xC720:
  .rdata:0x000000000000C720        db "J\x00"
  .rdata:0x000000000000C722        db "u\x00"
  .rdata:0x000000000000C724        db "l\x00"
  .rdata:0x000000000000C726        db "y\x00"
  .rdata:0x000000000000C728        dq 0x0000000000000000
  .rdata:0x000000000000C730 string_August_1:
  .rdata:0x000000000000C730        dw L"August\x0000"
  .rdata:0x000000000000C73E        dw 0x0000
  .rdata:0x000000000000C740 string_September_1:
  .rdata:0x000000000000C740        dw L"September\x0000"
  .rdata:0x000000000000C754        dd 0x00000000
  .rdata:0x000000000000C758 string_October_1:
  .rdata:0x000000000000C758        dw L"October\x0000"
  .rdata:0x000000000000C768 string_November_1:
  .rdata:0x000000000000C768        dw L"November\x0000"
  .rdata:0x000000000000C77A        dd 0x00000000
  .rdata:0x000000000000C77E        dw 0x0000
  .rdata:0x000000000000C780 string_December_1:
  .rdata:0x000000000000C780        dw L"December\x0000"
  .rdata:0x000000000000C792        dw 0x0000
  .rdata:0x000000000000C794 data_0xC794:
  .rdata:0x000000000000C794        db "A\x00"
  .rdata:0x000000000000C796        db "M\x00"
  .rdata:0x000000000000C798        dd 0x00000000
  .rdata:0x000000000000C79C data_0xC79C:
  .rdata:0x000000000000C79C        db "P\x00"
  .rdata:0x000000000000C79E        db "M\x00"
  .rdata:0x000000000000C7A0        dq 0x0000000000000000
  .rdata:0x000000000000C7A8 string_MMddyy_1:
  .rdata:0x000000000000C7A8        dw L"MM/dd/yy\x0000"
  .rdata:0x000000000000C7BA        dd 0x00000000
  .rdata:0x000000000000C7BE        dw 0x0000
  .rdata:0x000000000000C7C0 string_ddddMMMMdd_1:
  .rdata:0x000000000000C7C0        dw L"dddd, MMMM dd, yyyy\x0000"
  .rdata:0x000000000000C7E8 string_HHmmss_1:
  .rdata:0x000000000000C7E8        dw L"HH:mm:ss\x0000"
  .rdata:0x000000000000C7FA        dd 0x00000000
  .rdata:0x000000000000C7FE        dw 0x0000
  .rdata:0x000000000000C800 string_enUS:
  .rdata:0x000000000000C800        dw L"en-US\x0000"
  .rdata:0x000000000000C80C        dq 0x0000000000000000
  .rdata:0x000000000000C814        dq 0x0000000000000000
  .rdata:0x000000000000C81C        dq 0x0000000000000000
  .rdata:0x000000000000C824        dq 0x0000000000000000
  .rdata:0x000000000000C82C        dq 0x0000000000000000
  .rdata:0x000000000000C834        dq 0x0000000000000000
  .rdata:0x000000000000C83C        dq 0x0000000000000000
  .rdata:0x000000000000C844        dq 0x0000000000000000
  .rdata:0x000000000000C84C        dq 0x0000000000000000
  .rdata:0x000000000000C854        dq 0x0000000000000000
  .rdata:0x000000000000C85C        dq 0x0000000000000000
  .rdata:0x000000000000C864        dq 0x0000000000000000
  .rdata:0x000000000000C86C        dq 0x0000000000000000
  .rdata:0x000000000000C874        dq 0x0000000000000000
  .rdata:0x000000000000C87C        dq 0x0000000000000000
  .rdata:0x000000000000C884        dq 0x0000000000000000
  .rdata:0x000000000000C88C        dq 0x0000000000000000
  .rdata:0x000000000000C894        dq 0x0000000000000000
  .rdata:0x000000000000C89C        dq 0x0000000000000000
  .rdata:0x000000000000C8A4        dq 0x0000000000000000
  .rdata:0x000000000000C8AC        dq 0x0000000000000000
  .rdata:0x000000000000C8B4        dq 0x0000000000000000
  .rdata:0x000000000000C8BC        dq 0x0000000000000000
  .rdata:0x000000000000C8C4        dq 0x0000000000000000
  .rdata:0x000000000000C8CC        dq 0x0000000000000000
  .rdata:0x000000000000C8D4        dq 0x0000000000000000
  .rdata:0x000000000000C8DC        dq 0x0000000000000000
  .rdata:0x000000000000C8E4        dq 0x0000000000000000
  .rdata:0x000000000000C8EC        dq 0x0000000000000000
  .rdata:0x000000000000C8F4        dq 0x0000000000000000
  .rdata:0x000000000000C8FC        dq 0x0000000000000000
  .rdata:0x000000000000C904        dq 0x0000000000000000
  .rdata:0x000000000000C90C        dd 0x00000000
  .rdata:0x000000000000C910 data_0xC910:
  .rdata:0x000000000000C910        db " \x00"
  .rdata:0x000000000000C912        db " \x00"
  .rdata:0x000000000000C914        db " \x00"
  .rdata:0x000000000000C916        db " \x00"
  .rdata:0x000000000000C918        db " \x00"
  .rdata:0x000000000000C91A        db " \x00"
  .rdata:0x000000000000C91C        db " \x00"
  .rdata:0x000000000000C91E        db " \x00"
  .rdata:0x000000000000C920        db " \x00"
  .rdata:0x000000000000C922        dq 0x0028002800280028
  .rdata:0x000000000000C92A        dw 0x0028
  .rdata:0x000000000000C92C        db " \x00"
  .rdata:0x000000000000C92E        db " \x00"
  .rdata:0x000000000000C930        db " \x00"
  .rdata:0x000000000000C932        db " \x00"
  .rdata:0x000000000000C934        db " \x00"
  .rdata:0x000000000000C936        db " \x00"
  .rdata:0x000000000000C938        db " \x00"
  .rdata:0x000000000000C93A        db " \x00"
  .rdata:0x000000000000C93C        db " \x00"
  .rdata:0x000000000000C93E        db " \x00"
  .rdata:0x000000000000C940        db " \x00"
  .rdata:0x000000000000C942        db " \x00"
  .rdata:0x000000000000C944        db " \x00"
  .rdata:0x000000000000C946        db " \x00"
  .rdata:0x000000000000C948        db " \x00"
  .rdata:0x000000000000C94A        db " \x00"
  .rdata:0x000000000000C94C        db " \x00"
  .rdata:0x000000000000C94E        db " \x00"
  .rdata:0x000000000000C950        db "H\x00"
  .rdata:0x000000000000C952        dq 0x0010001000100010
  .rdata:0x000000000000C95A        dq 0x0010001000100010
  .rdata:0x000000000000C962        dq 0x0010001000100010
  .rdata:0x000000000000C96A        dq 0x0084001000100010
  .rdata:0x000000000000C972        dq 0x0084008400840084
  .rdata:0x000000000000C97A        dq 0x0084008400840084
  .rdata:0x000000000000C982        dq 0x0010001000100084
  .rdata:0x000000000000C98A        dq 0x0010001000100010
  .rdata:0x000000000000C992        dq 0x0081008100810081
  .rdata:0x000000000000C99A        dq 0x0001000100810081
  .rdata:0x000000000000C9A2        dq 0x0001000100010001
  .rdata:0x000000000000C9AA        dq 0x0001000100010001
  .rdata:0x000000000000C9B2        dq 0x0001000100010001
  .rdata:0x000000000000C9BA        dq 0x0001000100010001
  .rdata:0x000000000000C9C2        dq 0x0010001000010001
  .rdata:0x000000000000C9CA        dq 0x0010001000100010
  .rdata:0x000000000000C9D2        dq 0x0082008200820082
  .rdata:0x000000000000C9DA        dq 0x0002000200820082
  .rdata:0x000000000000C9E2        dq 0x0002000200020002
  .rdata:0x000000000000C9EA        dq 0x0002000200020002
  .rdata:0x000000000000C9F2        dq 0x0002000200020002
  .rdata:0x000000000000C9FA        dq 0x0002000200020002
  .rdata:0x000000000000CA02        dq 0x0010001000020002
  .rdata:0x000000000000CA0A        dd 0x00100010
  .rdata:0x000000000000CA0E        db " \x00"
  .rdata:0x000000000000CA10        dq 0x0000000000000000
  .rdata:0x000000000000CA18        dq 0x0000000000000000
  .rdata:0x000000000000CA20        dq 0x0000000000000000
  .rdata:0x000000000000CA28        dq 0x0000000000000000
  .rdata:0x000000000000CA30        dq 0x0000000000000000
  .rdata:0x000000000000CA38        dq 0x0000000000000000
  .rdata:0x000000000000CA40        dq 0x0000000000000000
  .rdata:0x000000000000CA48        dq 0x0000000000000000
  .rdata:0x000000000000CA50        dq 0x0000000000000000
  .rdata:0x000000000000CA58        dq 0x0000000000000000
  .rdata:0x000000000000CA60        dq 0x0000000000000000
  .rdata:0x000000000000CA68        dq 0x0000000000000000
  .rdata:0x000000000000CA70        dq 0x0000000000000000
  .rdata:0x000000000000CA78        dq 0x0000000000000000
  .rdata:0x000000000000CA80        dq 0x0000000000000000
  .rdata:0x000000000000CA88        dq 0x0000000000000000
  .rdata:0x000000000000CA90        dq 0x0000000000000000
  .rdata:0x000000000000CA98        dq 0x0000000000000000
  .rdata:0x000000000000CAA0        dq 0x0000000000000000
  .rdata:0x000000000000CAA8        dq 0x0000000000000000
  .rdata:0x000000000000CAB0        dq 0x0000000000000000
  .rdata:0x000000000000CAB8        dq 0x0000000000000000
  .rdata:0x000000000000CAC0        dq 0x0000000000000000
  .rdata:0x000000000000CAC8        dq 0x0000000000000000
  .rdata:0x000000000000CAD0        dq 0x0000000000000000
  .rdata:0x000000000000CAD8        dq 0x0000000000000000
  .rdata:0x000000000000CAE0        dq 0x0000000000000000
  .rdata:0x000000000000CAE8        dq 0x0000000000000000
  .rdata:0x000000000000CAF0        dq 0x0000000000000000
  .rdata:0x000000000000CAF8        dq 0x0000000000000000
  .rdata:0x000000000000CB00        dq 0x0000000000000000
  .rdata:0x000000000000CB08        dq 0x0000000000000000
  .rdata:0x000000000000CB10        dq 0x8786858483828180
  .rdata:0x000000000000CB18        dq 0x8F8E8D8C8B8A8988
  .rdata:0x000000000000CB20        dq 0x9796959493929190
  .rdata:0x000000000000CB28        dq 0x9F9E9D9C9B9A9998
  .rdata:0x000000000000CB30        dq 0xA7A6A5A4A3A2A1A0
  .rdata:0x000000000000CB38        dq 0xAFAEADACABAAA9A8
  .rdata:0x000000000000CB40        dq 0xB7B6B5B4B3B2B1B0
  .rdata:0x000000000000CB48        dq 0xBFBEBDBCBBBAB9B8
  .rdata:0x000000000000CB50        dq 0xC7C6C5C4C3C2C1C0
  .rdata:0x000000000000CB58        dq 0xCFCECDCCCBCAC9C8
  .rdata:0x000000000000CB60        dq 0xD7D6D5D4D3D2D1D0
  .rdata:0x000000000000CB68        dq 0xDFDEDDDCDBDAD9D8
  .rdata:0x000000000000CB70        dq 0xE7E6E5E4E3E2E1E0
  .rdata:0x000000000000CB78        dq 0xEFEEEDECEBEAE9E8
  .rdata:0x000000000000CB80        dq 0xF7F6F5F4F3F2F1F0
  .rdata:0x000000000000CB88        dq 0xFFFEFDFCFBFAF9F8
  .rdata:0x000000000000CB90 data_0xCB90:
  .rdata:0x000000000000CB90        dq 0x0706050403020100
  .rdata:0x000000000000CB98        dq 0x0F0E0D0C0B0A0908
  .rdata:0x000000000000CBA0        dq 0x1716151413121110
  .rdata:0x000000000000CBA8        dq 0x1F1E1D1C1B1A1918
  .rdata:0x000000000000CBB0        dq 0x2726252423222120
  .rdata:0x000000000000CBB8        dq 0x2F2E2D2C2B2A2928
  .rdata:0x000000000000CBC0        dq 0x3736353433323130
  .rdata:0x000000000000CBC8        dq 0x3F3E3D3C3B3A3938
  .rdata:0x000000000000CBD0        dq 0x6766656463626140
  .rdata:0x000000000000CBD8        dq 0x6F6E6D6C6B6A6968
  .rdata:0x000000000000CBE0        dq 0x7776757473727170
  .rdata:0x000000000000CBE8        dq 0x5F5E5D5C5B7A7978
  .rdata:0x000000000000CBF0        dq 0x6766656463626160
  .rdata:0x000000000000CBF8        dq 0x6F6E6D6C6B6A6968
  .rdata:0x000000000000CC00        dq 0x7776757473727170
  .rdata:0x000000000000CC08        dq 0x7F7E7D7C7B7A7978
  .rdata:0x000000000000CC10        dq 0x8786858483828180
  .rdata:0x000000000000CC18        dq 0x8F8E8D8C8B8A8988
  .rdata:0x000000000000CC20        dq 0x9796959493929190
  .rdata:0x000000000000CC28        dq 0x9F9E9D9C9B9A9998
  .rdata:0x000000000000CC30        dq 0xA7A6A5A4A3A2A1A0
  .rdata:0x000000000000CC38        dq 0xAFAEADACABAAA9A8
  .rdata:0x000000000000CC40        dq 0xB7B6B5B4B3B2B1B0
  .rdata:0x000000000000CC48        dq 0xBFBEBDBCBBBAB9B8
  .rdata:0x000000000000CC50        dq 0xC7C6C5C4C3C2C1C0
  .rdata:0x000000000000CC58        dq 0xCFCECDCCCBCAC9C8
  .rdata:0x000000000000CC60        dq 0xD7D6D5D4D3D2D1D0
  .rdata:0x000000000000CC68        dq 0xDFDEDDDCDBDAD9D8
  .rdata:0x000000000000CC70        dq 0xE7E6E5E4E3E2E1E0
  .rdata:0x000000000000CC78        dq 0xEFEEEDECEBEAE9E8
  .rdata:0x000000000000CC80        dq 0xF7F6F5F4F3F2F1F0
  .rdata:0x000000000000CC88        dq 0xFFFEFDFCFBFAF9F8
  .rdata:0x000000000000CC90        dq 0x8786858483828180
  .rdata:0x000000000000CC98        dq 0x8F8E8D8C8B8A8988
  .rdata:0x000000000000CCA0        dq 0x9796959493929190
  .rdata:0x000000000000CCA8        dq 0x9F9E9D9C9B9A9998
  .rdata:0x000000000000CCB0        dq 0xA7A6A5A4A3A2A1A0
  .rdata:0x000000000000CCB8        dq 0xAFAEADACABAAA9A8
  .rdata:0x000000000000CCC0        dq 0xB7B6B5B4B3B2B1B0
  .rdata:0x000000000000CCC8        dq 0xBFBEBDBCBBBAB9B8
  .rdata:0x000000000000CCD0        dq 0xC7C6C5C4C3C2C1C0
  .rdata:0x000000000000CCD8        dq 0xCFCECDCCCBCAC9C8
  .rdata:0x000000000000CCE0        dq 0xD7D6D5D4D3D2D1D0
  .rdata:0x000000000000CCE8        dq 0xDFDEDDDCDBDAD9D8
  .rdata:0x000000000000CCF0        dq 0xE7E6E5E4E3E2E1E0
  .rdata:0x000000000000CCF8        dq 0xEFEEEDECEBEAE9E8
  .rdata:0x000000000000CD00        dq 0xF7F6F5F4F3F2F1F0
  .rdata:0x000000000000CD08        dq 0xFFFEFDFCFBFAF9F8
  .rdata:0x000000000000CD10 data_0xCD10:
  .rdata:0x000000000000CD10        dq 0x0706050403020100
  .rdata:0x000000000000CD18        dq 0x0F0E0D0C0B0A0908
  .rdata:0x000000000000CD20        dq 0x1716151413121110
  .rdata:0x000000000000CD28        dq 0x1F1E1D1C1B1A1918
  .rdata:0x000000000000CD30        dq 0x2726252423222120
  .rdata:0x000000000000CD38        dq 0x2F2E2D2C2B2A2928
  .rdata:0x000000000000CD40        dq 0x3736353433323130
  .rdata:0x000000000000CD48        dq 0x3F3E3D3C3B3A3938
  .rdata:0x000000000000CD50        dq 0x4746454443424140
  .rdata:0x000000000000CD58        dq 0x4F4E4D4C4B4A4948
  .rdata:0x000000000000CD60        dq 0x5756555453525150
  .rdata:0x000000000000CD68        dq 0x5F5E5D5C5B5A5958
  .rdata:0x000000000000CD70        dq 0x4746454443424160
  .rdata:0x000000000000CD78        dq 0x4F4E4D4C4B4A4948
  .rdata:0x000000000000CD80        dq 0x5756555453525150
  .rdata:0x000000000000CD88        dq 0x7F7E7D7C7B5A5958
  .rdata:0x000000000000CD90        dq 0x8786858483828180
  .rdata:0x000000000000CD98        dq 0x8F8E8D8C8B8A8988
  .rdata:0x000000000000CDA0        dq 0x9796959493929190
  .rdata:0x000000000000CDA8        dq 0x9F9E9D9C9B9A9998
  .rdata:0x000000000000CDB0        dq 0xA7A6A5A4A3A2A1A0
  .rdata:0x000000000000CDB8        dq 0xAFAEADACABAAA9A8
  .rdata:0x000000000000CDC0        dq 0xB7B6B5B4B3B2B1B0
  .rdata:0x000000000000CDC8        dq 0xBFBEBDBCBBBAB9B8
  .rdata:0x000000000000CDD0        dq 0xC7C6C5C4C3C2C1C0
  .rdata:0x000000000000CDD8        dq 0xCFCECDCCCBCAC9C8
  .rdata:0x000000000000CDE0        dq 0xD7D6D5D4D3D2D1D0
  .rdata:0x000000000000CDE8        dq 0xDFDEDDDCDBDAD9D8
  .rdata:0x000000000000CDF0        dq 0xE7E6E5E4E3E2E1E0
  .rdata:0x000000000000CDF8        dq 0xEFEEEDECEBEAE9E8
  .rdata:0x000000000000CE00        dq 0xF7F6F5F4F3F2F1F0
  .rdata:0x000000000000CE08        dq 0xFFFEFDFCFBFAF9F8
  .rdata:0x000000000000CE10 data_0xCE10:
  .rdata:0x000000000000CE10        db "u\x00"
  .rdata:0x000000000000CE12        db "k\x00"
  .rdata:0x000000000000CE14        dq 0x0000000000000000
  .rdata:0x000000000000CE1C        dd 0x00000000
  .rdata:0x000000000000CE20        dq va_ptr string_apimswinco_2; "api-ms-win-core-datetime-l1-1-1"
  .rdata:0x000000000000CE28        dq va_ptr string_apimswinco_3; "api-ms-win-core-fibers-l1-1-1"
  .rdata:0x000000000000CE30        dq va_ptr string_apimswinco_4; "api-ms-win-core-file-l1-2-2"
  .rdata:0x000000000000CE38        dq va_ptr string_apimswinco_5; "api-ms-win-core-localization-l1-2-1"
  .rdata:0x000000000000CE40        dq va_ptr string_apimswinco_6; "api-ms-win-core-localization-obsolete-l1-2-0"
  .rdata:0x000000000000CE48        dq va_ptr string_apimswinco_7; "api-ms-win-core-processthreads-l1-1-2"
  .rdata:0x000000000000CE50        dq va_ptr string_apimswinco_8; "api-ms-win-core-string-l1-1-0"
  .rdata:0x000000000000CE58        dq va_ptr string_apimswinco_9; "api-ms-win-core-synch-l1-2-0"
  .rdata:0x000000000000CE60        dq va_ptr string_apimswinco_10; "api-ms-win-core-sysinfo-l1-2-1"
  .rdata:0x000000000000CE68        dq va_ptr string_apimswinco_11; "api-ms-win-core-winrt-l1-1-0"
  .rdata:0x000000000000CE70        dq va_ptr string_apimswinco_12; "api-ms-win-core-xstate-l2-1-0"
  .rdata:0x000000000000CE78        dq va_ptr string_apimswinrt; "api-ms-win-rtcore-ntuser-window-l1-1-0"
  .rdata:0x000000000000CE80        dq va_ptr string_apimswinse; "api-ms-win-security-systemfunctions-l1-1-0"
  .rdata:0x000000000000CE88        dq va_ptr string_extmswinnt; "ext-ms-win-ntuser-dialogbox-l1-1-0"
  .rdata:0x000000000000CE90        dq va_ptr string_extmswinnt_1; "ext-ms-win-ntuser-windowstation-l1-1-0"
  .rdata:0x000000000000CE98        dq va_ptr string_advapi32; "advapi32"
  .rdata:0x000000000000CEA0        dq va_ptr string_kernel32_1; "kernel32"
  .rdata:0x000000000000CEA8        dq va_ptr string_ntdll; "ntdll"
  .rdata:0x000000000000CEB0        dq va_ptr string_apimswinap; "api-ms-win-appmodel-runtime-l1-1-2"
  .rdata:0x000000000000CEB8        dq va_ptr string_user32; "user32"
  .rdata:0x000000000000CEC0 string_apimswinco_2:
  .rdata:0x000000000000CEC0        dw L"api-ms-win-core-datetime-l1-1-1\x0000"
  .rdata:0x000000000000CF00 string_apimswinco_3:
  .rdata:0x000000000000CF00        dw L"api-ms-win-core-fibers-l1-1-1\x0000"
  .rdata:0x000000000000CF3C        dd 0x00000000
  .rdata:0x000000000000CF40 string_apimswinco_4:
  .rdata:0x000000000000CF40        dw L"api-ms-win-core-file-l1-2-2\x0000"
  .rdata:0x000000000000CF78        dq 0x0000000000000000
  .rdata:0x000000000000CF80 string_apimswinco_5:
  .rdata:0x000000000000CF80        dw L"api-ms-win-core-localization-l1-2-1\x0000"
  .rdata:0x000000000000CFC8        dq 0x0000000000000000
  .rdata:0x000000000000CFD0 string_apimswinco_6:
  .rdata:0x000000000000CFD0        dw L"api-ms-win-core-localization-obsolete-l1-2-0\x0000"
  .rdata:0x000000000000D02A        dd 0x00000000
  .rdata:0x000000000000D02E        dw 0x0000
  .rdata:0x000000000000D030 string_apimswinco_7:
  .rdata:0x000000000000D030        dw L"api-ms-win-core-processthreads-l1-1-2\x0000"
  .rdata:0x000000000000D07C        dd 0x00000000
  .rdata:0x000000000000D080 string_apimswinco_8:
  .rdata:0x000000000000D080        dw L"api-ms-win-core-string-l1-1-0\x0000"
  .rdata:0x000000000000D0BC        dd 0x00000000
  .rdata:0x000000000000D0C0 string_apimswinco_9:
  .rdata:0x000000000000D0C0        dw L"api-ms-win-core-synch-l1-2-0\x0000"
  .rdata:0x000000000000D0FA        dd 0x00000000
  .rdata:0x000000000000D0FE        dw 0x0000
  .rdata:0x000000000000D100 string_apimswinco_10:
  .rdata:0x000000000000D100        dw L"api-ms-win-core-sysinfo-l1-2-1\x0000"
  .rdata:0x000000000000D13E        dw 0x0000
  .rdata:0x000000000000D140 string_apimswinco_11:
  .rdata:0x000000000000D140        dw L"api-ms-win-core-winrt-l1-1-0\x0000"
  .rdata:0x000000000000D17A        dd 0x00000000
  .rdata:0x000000000000D17E        dw 0x0000
  .rdata:0x000000000000D180 string_apimswinco_12:
  .rdata:0x000000000000D180        dw L"api-ms-win-core-xstate-l2-1-0\x0000"
  .rdata:0x000000000000D1BC        dd 0x00000000
  .rdata:0x000000000000D1C0 string_apimswinrt:
  .rdata:0x000000000000D1C0        dw L"api-ms-win-rtcore-ntuser-window-l1-1-0\x0000"
  .rdata:0x000000000000D20E        dw 0x0000
  .rdata:0x000000000000D210 string_apimswinse:
  .rdata:0x000000000000D210        dw L"api-ms-win-security-systemfunctions-l1-1-0\x0000"
  .rdata:0x000000000000D266        dq 0x0000000000000000
  .rdata:0x000000000000D26E        dw 0x0000
  .rdata:0x000000000000D270 string_extmswinnt:
  .rdata:0x000000000000D270        dw L"ext-ms-win-ntuser-dialogbox-l1-1-0\x0000"
  .rdata:0x000000000000D2B6        dq 0x0000000000000000
  .rdata:0x000000000000D2BE        dw 0x0000
  .rdata:0x000000000000D2C0 string_extmswinnt_1:
  .rdata:0x000000000000D2C0        dw L"ext-ms-win-ntuser-windowstation-l1-1-0\x0000"
  .rdata:0x000000000000D30E        dw 0x0000
  .rdata:0x000000000000D310 string_advapi32:
  .rdata:0x000000000000D310        dw L"advapi32\x0000"
  .rdata:0x000000000000D322        dd 0x00000000
  .rdata:0x000000000000D326        dw 0x0000
  .rdata:0x000000000000D328 string_kernel32_1:
  .rdata:0x000000000000D328        dw L"kernel32\x0000"
  .rdata:0x000000000000D33A        dd 0x00000000
  .rdata:0x000000000000D33E        dw 0x0000
  .rdata:0x000000000000D340 string_ntdll:
  .rdata:0x000000000000D340        dw L"ntdll\x0000"
  .rdata:0x000000000000D34C        dd 0x00000000
  .rdata:0x000000000000D350 string_apimswinap:
  .rdata:0x000000000000D350        dw L"api-ms-win-appmodel-runtime-l1-1-2\x0000"
  .rdata:0x000000000000D396        dw 0x0000
  .rdata:0x000000000000D398 string_user32:
  .rdata:0x000000000000D398        dw L"user32\x0000"
  .rdata:0x000000000000D3A6        dw 0x0000
  .rdata:0x000000000000D3A8 string_apims_1:
  .rdata:0x000000000000D3A8        dw L"api-ms-\x0000"
  .rdata:0x000000000000D3B8 string_extms_1:
  .rdata:0x000000000000D3B8        dw L"ext-ms-\x0000"
  .rdata:0x000000000000D3C8 data_0xD3C8:
  .rdata:0x000000000000D3C8        dq 0x0000001000000001
  .rdata:0x000000000000D3D0 string_FlsAlloc_1:
  .rdata:0x000000000000D3D0        db "FlsAlloc\x00"
  .rdata:0x000000000000D3D9        dd 0x00000000
  .rdata:0x000000000000D3DD        dw 0x0000
  .rdata:0x000000000000D3DF        db 0x00
  .rdata:0x000000000000D3E0 data_0xD3E0:
  .rdata:0x000000000000D3E0        dq 0x0000001000000001
  .rdata:0x000000000000D3E8 string_FlsFree_1:
  .rdata:0x000000000000D3E8        db "FlsFree\x00"
  .rdata:0x000000000000D3F0 data_0xD3F0:
  .rdata:0x000000000000D3F0        dq 0x0000001000000001
  .rdata:0x000000000000D3F8 string_FlsGetValu:
  .rdata:0x000000000000D3F8        db "FlsGetValue\x00"
  .rdata:0x000000000000D404        dd 0x00000000
  .rdata:0x000000000000D408 data_0xD408:
  .rdata:0x000000000000D408        dq 0x0000001000000001
  .rdata:0x000000000000D410 string_FlsSetValu_1:
  .rdata:0x000000000000D410        db "FlsSetValue\x00"
  .rdata:0x000000000000D41C        dd 0x00000000
  .rdata:0x000000000000D420 data_0xD420:
  .rdata:0x000000000000D420        dq 0x0000001000000007
  .rdata:0x000000000000D428 string_Initialize_1:
  .rdata:0x000000000000D428        db "InitializeCriticalSectionEx\x00"
  .rdata:0x000000000000D444        dd 0x00000000
  .rdata:0x000000000000D448 data_0xD448:
  .rdata:0x000000000000D448        dq 0x0000001000000003
  .rdata:0x000000000000D450 string_LCMapStrin:
  .rdata:0x000000000000D450        db "LCMapStringEx\x00"
  .rdata:0x000000000000D45E        dw 0x0000
  .rdata:0x000000000000D460 data_0xD460:
  .rdata:0x000000000000D460        dq 0x0000001000000003
  .rdata:0x000000000000D468 string_LocaleName:
  .rdata:0x000000000000D468        db "LocaleNameToLCID\x00"
  .rdata:0x000000000000D479        dw 0x0000
  .rdata:0x000000000000D47B        db 0x00
  .rdata:0x000000000000D47C data_0xD47C:
  .rdata:0x000000000000D47C        dd 0x00000012
  .rdata:0x000000000000D480 string_AppPolicyG:
  .rdata:0x000000000000D480        db "AppPolicyGetProcessTerminationMethod\x00"
  .rdata:0x000000000000D4A5        dq 0x0000000000000000
  .rdata:0x000000000000D4AD        dw 0x0000
  .rdata:0x000000000000D4AF        db 0x00
  .rdata:0x000000000000D4B0 data_0xD4B0:
  .rdata:0x000000000000D4B0        dq 0x0000000000000001
  .rdata:0x000000000000D4B8        dq va_ptr data_0xE2F0; "a"
  .rdata:0x000000000000D4C0        dq 0x0000000000000002
  .rdata:0x000000000000D4C8        dq va_ptr data_0xE2F8; "b"
  .rdata:0x000000000000D4D0        dq 0x0000000000000003
  .rdata:0x000000000000D4D8        dq va_ptr data_0xE300; "c"
  .rdata:0x000000000000D4E0        dq 0x0000000000000004
  .rdata:0x000000000000D4E8        dq va_ptr string_zhCHS; "zh-CHS"
  .rdata:0x000000000000D4F0        dq 0x0000000000000005
  .rdata:0x000000000000D4F8        dq va_ptr data_0xE318; "c"
  .rdata:0x000000000000D500        dq 0x0000000000000006
  .rdata:0x000000000000D508        dq va_ptr data_0xE320; "d"
  .rdata:0x000000000000D510        dq 0x0000000000000007
  .rdata:0x000000000000D518        dq va_ptr data_0xE328; "d"
  .rdata:0x000000000000D520        dq 0x0000000000000008
  .rdata:0x000000000000D528        dq va_ptr data_0xE330; "e"
  .rdata:0x000000000000D530        dq 0x0000000000000009
  .rdata:0x000000000000D538        dq va_ptr data_0xE338; "e"
  .rdata:0x000000000000D540        dq 0x000000000000000A
  .rdata:0x000000000000D548        dq va_ptr data_0xE340; "e"
  .rdata:0x000000000000D550        dq 0x000000000000000B
  .rdata:0x000000000000D558        dq va_ptr data_0xE348; "f"
  .rdata:0x000000000000D560        dq 0x000000000000000C
  .rdata:0x000000000000D568        dq va_ptr data_0xE350; "f"
  .rdata:0x000000000000D570        dq 0x000000000000000D
  .rdata:0x000000000000D578        dq va_ptr data_0xE358; "h"
  .rdata:0x000000000000D580        dq 0x000000000000000E
  .rdata:0x000000000000D588        dq va_ptr data_0xE360; "h"
  .rdata:0x000000000000D590        dq 0x000000000000000F
  .rdata:0x000000000000D598        dq va_ptr data_0xE368; "i"
  .rdata:0x000000000000D5A0        dq 0x0000000000000010
  .rdata:0x000000000000D5A8        dq va_ptr data_0xE370; "i"
  .rdata:0x000000000000D5B0        dq 0x0000000000000011
  .rdata:0x000000000000D5B8        dq va_ptr data_0xE378; "j"
  .rdata:0x000000000000D5C0        dq 0x0000000000000012
  .rdata:0x000000000000D5C8        dq va_ptr data_0xE380; "k"
  .rdata:0x000000000000D5D0        dq 0x0000000000000013
  .rdata:0x000000000000D5D8        dq va_ptr data_0xE388; "n"
  .rdata:0x000000000000D5E0        dq 0x0000000000000014
  .rdata:0x000000000000D5E8        dq va_ptr data_0xE390; "n"
  .rdata:0x000000000000D5F0        dq 0x0000000000000015
  .rdata:0x000000000000D5F8        dq va_ptr data_0xE398; "p"
  .rdata:0x000000000000D600        dq 0x0000000000000016
  .rdata:0x000000000000D608        dq va_ptr data_0xE3A0; "p"
  .rdata:0x000000000000D610        dq 0x0000000000000018
  .rdata:0x000000000000D618        dq va_ptr data_0xE3A8; "r"
  .rdata:0x000000000000D620        dq 0x0000000000000019
  .rdata:0x000000000000D628        dq va_ptr data_0xE3B0; "r"
  .rdata:0x000000000000D630        dq 0x000000000000001A
  .rdata:0x000000000000D638        dq va_ptr data_0xE3B8; "h"
  .rdata:0x000000000000D640        dq 0x000000000000001B
  .rdata:0x000000000000D648        dq va_ptr data_0xE3C0; "s"
  .rdata:0x000000000000D650        dq 0x000000000000001C
  .rdata:0x000000000000D658        dq va_ptr data_0xE3C8; "s"
  .rdata:0x000000000000D660        dq 0x000000000000001D
  .rdata:0x000000000000D668        dq va_ptr data_0xE3D0; "s"
  .rdata:0x000000000000D670        dq 0x000000000000001E
  .rdata:0x000000000000D678        dq va_ptr data_0xE3D8; "t"
  .rdata:0x000000000000D680        dq 0x000000000000001F
  .rdata:0x000000000000D688        dq va_ptr data_0xE3E0; "t"
  .rdata:0x000000000000D690        db " \x00"
  .rdata:0x000000000000D692        dd 0x00000000
  .rdata:0x000000000000D696        dw 0x0000
  .rdata:0x000000000000D698        dq va_ptr data_0xE3E8; "u"
  .rdata:0x000000000000D6A0        dq 0x0000000000000021
  .rdata:0x000000000000D6A8        dq va_ptr data_0xE3F0; "i"
  .rdata:0x000000000000D6B0        dq 0x0000000000000022
  .rdata:0x000000000000D6B8        dq va_ptr data_0xCE10; "u"
  .rdata:0x000000000000D6C0        dq 0x0000000000000023
  .rdata:0x000000000000D6C8        dq va_ptr data_0xE3F8; "b"
  .rdata:0x000000000000D6D0        dq 0x0000000000000024
  .rdata:0x000000000000D6D8        dq va_ptr data_0xE400; "s"
  .rdata:0x000000000000D6E0        dq 0x0000000000000025
  .rdata:0x000000000000D6E8        dq va_ptr data_0xE408; "e"
  .rdata:0x000000000000D6F0        dq 0x0000000000000026
  .rdata:0x000000000000D6F8        dq va_ptr data_0xE410; "l"
  .rdata:0x000000000000D700        dq 0x0000000000000027
  .rdata:0x000000000000D708        dq va_ptr data_0xE418; "l"
  .rdata:0x000000000000D710        dq 0x0000000000000029
  .rdata:0x000000000000D718        dq va_ptr data_0xE420; "f"
  .rdata:0x000000000000D720        dq 0x000000000000002A
  .rdata:0x000000000000D728        dq va_ptr data_0xE428; "v"
  .rdata:0x000000000000D730        dq 0x000000000000002B
  .rdata:0x000000000000D738        dq va_ptr data_0xE430; "h"
  .rdata:0x000000000000D740        dq 0x000000000000002C
  .rdata:0x000000000000D748        dq va_ptr data_0xE438; "a"
  .rdata:0x000000000000D750        dq 0x000000000000002D
  .rdata:0x000000000000D758        dq va_ptr data_0xE440; "e"
  .rdata:0x000000000000D760        dq 0x000000000000002F
  .rdata:0x000000000000D768        dq va_ptr data_0xE448; "m"
  .rdata:0x000000000000D770        db "6\x00"
  .rdata:0x000000000000D772        dd 0x00000000
  .rdata:0x000000000000D776        dw 0x0000
  .rdata:0x000000000000D778        dq va_ptr data_0xE450; "a"
  .rdata:0x000000000000D780        db "7\x00"
  .rdata:0x000000000000D782        dd 0x00000000
  .rdata:0x000000000000D786        dw 0x0000
  .rdata:0x000000000000D788        dq va_ptr data_0xE458; "k"
  .rdata:0x000000000000D790        db "8\x00"
  .rdata:0x000000000000D792        dd 0x00000000
  .rdata:0x000000000000D796        dw 0x0000
  .rdata:0x000000000000D798        dq va_ptr data_0xE460; "f"
  .rdata:0x000000000000D7A0        db "9\x00"
  .rdata:0x000000000000D7A2        dd 0x00000000
  .rdata:0x000000000000D7A6        dw 0x0000
  .rdata:0x000000000000D7A8        dq va_ptr data_0xE468; "h"
  .rdata:0x000000000000D7B0        dq 0x000000000000003E
  .rdata:0x000000000000D7B8        dq va_ptr data_0xE470; "m"
  .rdata:0x000000000000D7C0        dq 0x000000000000003F
  .rdata:0x000000000000D7C8        dq va_ptr data_0xE478; "k"
  .rdata:0x000000000000D7D0        dq 0x0000000000000040
  .rdata:0x000000000000D7D8        dq va_ptr data_0xE480; "k"
  .rdata:0x000000000000D7E0        db "A\x00"
  .rdata:0x000000000000D7E2        dd 0x00000000
  .rdata:0x000000000000D7E6        dw 0x0000
  .rdata:0x000000000000D7E8        dq va_ptr data_0xE488; "s"
  .rdata:0x000000000000D7F0        db "C\x00"
  .rdata:0x000000000000D7F2        dd 0x00000000
  .rdata:0x000000000000D7F6        dw 0x0000
  .rdata:0x000000000000D7F8        dq va_ptr data_0xE490; "u"
  .rdata:0x000000000000D800        db "D\x00"
  .rdata:0x000000000000D802        dd 0x00000000
  .rdata:0x000000000000D806        dw 0x0000
  .rdata:0x000000000000D808        dq va_ptr data_0xE498; "t"
  .rdata:0x000000000000D810        db "F\x00"
  .rdata:0x000000000000D812        dd 0x00000000
  .rdata:0x000000000000D816        dw 0x0000
  .rdata:0x000000000000D818        dq va_ptr data_0xE4A0; "p"
  .rdata:0x000000000000D820        db "G\x00"
  .rdata:0x000000000000D822        dd 0x00000000
  .rdata:0x000000000000D826        dw 0x0000
  .rdata:0x000000000000D828        dq va_ptr data_0xE4A8; "g"
  .rdata:0x000000000000D830        db "I\x00"
  .rdata:0x000000000000D832        dd 0x00000000
  .rdata:0x000000000000D836        dw 0x0000
  .rdata:0x000000000000D838        dq va_ptr data_0xE4B0; "t"
  .rdata:0x000000000000D840        db "J\x00"
  .rdata:0x000000000000D842        dd 0x00000000
  .rdata:0x000000000000D846        dw 0x0000
  .rdata:0x000000000000D848        dq va_ptr data_0xE4B8; "t"
  .rdata:0x000000000000D850        db "K\x00"
  .rdata:0x000000000000D852        dd 0x00000000
  .rdata:0x000000000000D856        dw 0x0000
  .rdata:0x000000000000D858        dq va_ptr data_0xE4C0; "k"
  .rdata:0x000000000000D860        db "N\x00"
  .rdata:0x000000000000D862        dd 0x00000000
  .rdata:0x000000000000D866        dw 0x0000
  .rdata:0x000000000000D868        dq va_ptr data_0xE4C8; "m"
  .rdata:0x000000000000D870        db "O\x00"
  .rdata:0x000000000000D872        dd 0x00000000
  .rdata:0x000000000000D876        dw 0x0000
  .rdata:0x000000000000D878        dq va_ptr data_0xE4D0; "s"
  .rdata:0x000000000000D880        db "P\x00"
  .rdata:0x000000000000D882        dd 0x00000000
  .rdata:0x000000000000D886        dw 0x0000
  .rdata:0x000000000000D888        dq va_ptr data_0xE4D8; "m"
  .rdata:0x000000000000D890        db "V\x00"
  .rdata:0x000000000000D892        dd 0x00000000
  .rdata:0x000000000000D896        dw 0x0000
  .rdata:0x000000000000D898        dq va_ptr data_0xE4E0; "g"
  .rdata:0x000000000000D8A0        db "W\x00"
  .rdata:0x000000000000D8A2        dd 0x00000000
  .rdata:0x000000000000D8A6        dw 0x0000
  .rdata:0x000000000000D8A8        dq va_ptr data_0xE4E8; "k"
  .rdata:0x000000000000D8B0        db "Z\x00"
  .rdata:0x000000000000D8B2        dd 0x00000000
  .rdata:0x000000000000D8B6        dw 0x0000
  .rdata:0x000000000000D8B8        dq va_ptr data_0xE4F0; "s"
  .rdata:0x000000000000D8C0        db "e\x00"
  .rdata:0x000000000000D8C2        dd 0x00000000
  .rdata:0x000000000000D8C6        dw 0x0000
  .rdata:0x000000000000D8C8        dq va_ptr data_0xE4F8; "d"
  .rdata:0x000000000000D8D0        dq 0x000000000000007F
  .rdata:0x000000000000D8D8        dq va_ptr data_0xE500
  .rdata:0x000000000000D8E0        dq 0x0000000000000401
  .rdata:0x000000000000D8E8        dq va_ptr string_arSA; "ar-SA"
  .rdata:0x000000000000D8F0        dq 0x0000000000000402
  .rdata:0x000000000000D8F8        dq va_ptr string_bgBG; "bg-BG"
  .rdata:0x000000000000D900        dq 0x0000000000000403
  .rdata:0x000000000000D908        dq va_ptr string_caES; "ca-ES"
  .rdata:0x000000000000D910        dq 0x0000000000000404
  .rdata:0x000000000000D918        dq va_ptr string_zhTW; "zh-TW"
  .rdata:0x000000000000D920        dq 0x0000000000000405
  .rdata:0x000000000000D928        dq va_ptr string_csCZ; "cs-CZ"
  .rdata:0x000000000000D930        dq 0x0000000000000406
  .rdata:0x000000000000D938        dq va_ptr string_daDK; "da-DK"
  .rdata:0x000000000000D940        dq 0x0000000000000407
  .rdata:0x000000000000D948        dq va_ptr string_deDE; "de-DE"
  .rdata:0x000000000000D950        dq 0x0000000000000408
  .rdata:0x000000000000D958        dq va_ptr string_elGR; "el-GR"
  .rdata:0x000000000000D960        dq 0x0000000000000409
  .rdata:0x000000000000D968        dq va_ptr string_enUS; "en-US"
  .rdata:0x000000000000D970        dq 0x000000000000040B
  .rdata:0x000000000000D978        dq va_ptr string_fiFI; "fi-FI"
  .rdata:0x000000000000D980        dq 0x000000000000040C
  .rdata:0x000000000000D988        dq va_ptr string_frFR; "fr-FR"
  .rdata:0x000000000000D990        dq 0x000000000000040D
  .rdata:0x000000000000D998        dq va_ptr string_heIL; "he-IL"
  .rdata:0x000000000000D9A0        dq 0x000000000000040E
  .rdata:0x000000000000D9A8        dq va_ptr string_huHU; "hu-HU"
  .rdata:0x000000000000D9B0        dq 0x000000000000040F
  .rdata:0x000000000000D9B8        dq va_ptr string_isIS; "is-IS"
  .rdata:0x000000000000D9C0        dq 0x0000000000000410
  .rdata:0x000000000000D9C8        dq va_ptr string_itIT; "it-IT"
  .rdata:0x000000000000D9D0        dq 0x0000000000000411
  .rdata:0x000000000000D9D8        dq va_ptr string_jaJP; "ja-JP"
  .rdata:0x000000000000D9E0        dq 0x0000000000000412
  .rdata:0x000000000000D9E8        dq va_ptr string_koKR; "ko-KR"
  .rdata:0x000000000000D9F0        dq 0x0000000000000413
  .rdata:0x000000000000D9F8        dq va_ptr string_nlNL; "nl-NL"
  .rdata:0x000000000000DA00        dq 0x0000000000000414
  .rdata:0x000000000000DA08        dq va_ptr string_nbNO; "nb-NO"
  .rdata:0x000000000000DA10        dq 0x0000000000000415
  .rdata:0x000000000000DA18        dq va_ptr string_plPL; "pl-PL"
  .rdata:0x000000000000DA20        dq 0x0000000000000416
  .rdata:0x000000000000DA28        dq va_ptr string_ptBR; "pt-BR"
  .rdata:0x000000000000DA30        dq 0x0000000000000418
  .rdata:0x000000000000DA38        dq va_ptr string_roRO; "ro-RO"
  .rdata:0x000000000000DA40        dq 0x0000000000000419
  .rdata:0x000000000000DA48        dq va_ptr string_ruRU; "ru-RU"
  .rdata:0x000000000000DA50        dq 0x000000000000041A
  .rdata:0x000000000000DA58        dq va_ptr string_hrHR; "hr-HR"
  .rdata:0x000000000000DA60        dq 0x000000000000041B
  .rdata:0x000000000000DA68        dq va_ptr string_skSK; "sk-SK"
  .rdata:0x000000000000DA70        dq 0x000000000000041C
  .rdata:0x000000000000DA78        dq va_ptr string_sqAL; "sq-AL"
  .rdata:0x000000000000DA80        dq 0x000000000000041D
  .rdata:0x000000000000DA88        dq va_ptr string_svSE; "sv-SE"
  .rdata:0x000000000000DA90        dq 0x000000000000041E
  .rdata:0x000000000000DA98        dq va_ptr string_thTH; "th-TH"
  .rdata:0x000000000000DAA0        dq 0x000000000000041F
  .rdata:0x000000000000DAA8        dq va_ptr string_trTR; "tr-TR"
  .rdata:0x000000000000DAB0        dq 0x0000000000000420
  .rdata:0x000000000000DAB8        dq va_ptr string_urPK; "ur-PK"
  .rdata:0x000000000000DAC0        dq 0x0000000000000421
  .rdata:0x000000000000DAC8        dq va_ptr string_idID; "id-ID"
  .rdata:0x000000000000DAD0        dq 0x0000000000000422
  .rdata:0x000000000000DAD8        dq va_ptr string_ukUA; "uk-UA"
  .rdata:0x000000000000DAE0        dq 0x0000000000000423
  .rdata:0x000000000000DAE8        dq va_ptr string_beBY; "be-BY"
  .rdata:0x000000000000DAF0        dq 0x0000000000000424
  .rdata:0x000000000000DAF8        dq va_ptr string_slSI; "sl-SI"
  .rdata:0x000000000000DB00        dq 0x0000000000000425
  .rdata:0x000000000000DB08        dq va_ptr string_etEE; "et-EE"
  .rdata:0x000000000000DB10        dq 0x0000000000000426
  .rdata:0x000000000000DB18        dq va_ptr string_lvLV; "lv-LV"
  .rdata:0x000000000000DB20        dq 0x0000000000000427
  .rdata:0x000000000000DB28        dq va_ptr string_ltLT; "lt-LT"
  .rdata:0x000000000000DB30        dq 0x0000000000000429
  .rdata:0x000000000000DB38        dq va_ptr string_faIR; "fa-IR"
  .rdata:0x000000000000DB40        dq 0x000000000000042A
  .rdata:0x000000000000DB48        dq va_ptr string_viVN; "vi-VN"
  .rdata:0x000000000000DB50        dq 0x000000000000042B
  .rdata:0x000000000000DB58        dq va_ptr string_hyAM; "hy-AM"
  .rdata:0x000000000000DB60        dq 0x000000000000042C
  .rdata:0x000000000000DB68        dq va_ptr string_azAZLatn; "az-AZ-Latn"
  .rdata:0x000000000000DB70        dq 0x000000000000042D
  .rdata:0x000000000000DB78        dq va_ptr string_euES; "eu-ES"
  .rdata:0x000000000000DB80        dq 0x000000000000042F
  .rdata:0x000000000000DB88        dq va_ptr string_mkMK; "mk-MK"
  .rdata:0x000000000000DB90        dq 0x0000000000000432
  .rdata:0x000000000000DB98        dq va_ptr string_tnZA; "tn-ZA"
  .rdata:0x000000000000DBA0        dq 0x0000000000000434
  .rdata:0x000000000000DBA8        dq va_ptr string_xhZA; "xh-ZA"
  .rdata:0x000000000000DBB0        dq 0x0000000000000435
  .rdata:0x000000000000DBB8        dq va_ptr string_zuZA; "zu-ZA"
  .rdata:0x000000000000DBC0        dq 0x0000000000000436
  .rdata:0x000000000000DBC8        dq va_ptr string_afZA; "af-ZA"
  .rdata:0x000000000000DBD0        dq 0x0000000000000437
  .rdata:0x000000000000DBD8        dq va_ptr string_kaGE; "ka-GE"
  .rdata:0x000000000000DBE0        dq 0x0000000000000438
  .rdata:0x000000000000DBE8        dq va_ptr string_foFO; "fo-FO"
  .rdata:0x000000000000DBF0        dq 0x0000000000000439
  .rdata:0x000000000000DBF8        dq va_ptr string_hiIN; "hi-IN"
  .rdata:0x000000000000DC00        dq 0x000000000000043A
  .rdata:0x000000000000DC08        dq va_ptr string_mtMT; "mt-MT"
  .rdata:0x000000000000DC10        dq 0x000000000000043B
  .rdata:0x000000000000DC18        dq va_ptr string_seNO; "se-NO"
  .rdata:0x000000000000DC20        dq 0x000000000000043E
  .rdata:0x000000000000DC28        dq va_ptr string_msMY; "ms-MY"
  .rdata:0x000000000000DC30        dq 0x000000000000043F
  .rdata:0x000000000000DC38        dq va_ptr string_kkKZ; "kk-KZ"
  .rdata:0x000000000000DC40        dq 0x0000000000000440
  .rdata:0x000000000000DC48        dq va_ptr string_kyKG; "ky-KG"
  .rdata:0x000000000000DC50        dq 0x0000000000000441
  .rdata:0x000000000000DC58        dq va_ptr string_swKE; "sw-KE"
  .rdata:0x000000000000DC60        dq 0x0000000000000443
  .rdata:0x000000000000DC68        dq va_ptr string_uzUZLatn; "uz-UZ-Latn"
  .rdata:0x000000000000DC70        dq 0x0000000000000444
  .rdata:0x000000000000DC78        dq va_ptr string_ttRU; "tt-RU"
  .rdata:0x000000000000DC80        dq 0x0000000000000445
  .rdata:0x000000000000DC88        dq va_ptr string_bnIN; "bn-IN"
  .rdata:0x000000000000DC90        dq 0x0000000000000446
  .rdata:0x000000000000DC98        dq va_ptr string_paIN; "pa-IN"
  .rdata:0x000000000000DCA0        dq 0x0000000000000447
  .rdata:0x000000000000DCA8        dq va_ptr string_guIN; "gu-IN"
  .rdata:0x000000000000DCB0        dq 0x0000000000000449
  .rdata:0x000000000000DCB8        dq va_ptr string_taIN; "ta-IN"
  .rdata:0x000000000000DCC0        dq 0x000000000000044A
  .rdata:0x000000000000DCC8        dq va_ptr string_teIN; "te-IN"
  .rdata:0x000000000000DCD0        dq 0x000000000000044B
  .rdata:0x000000000000DCD8        dq va_ptr string_knIN; "kn-IN"
  .rdata:0x000000000000DCE0        dq 0x000000000000044C
  .rdata:0x000000000000DCE8        dq va_ptr string_mlIN; "ml-IN"
  .rdata:0x000000000000DCF0        dq 0x000000000000044E
  .rdata:0x000000000000DCF8        dq va_ptr string_mrIN; "mr-IN"
  .rdata:0x000000000000DD00        dq 0x000000000000044F
  .rdata:0x000000000000DD08        dq va_ptr string_saIN; "sa-IN"
  .rdata:0x000000000000DD10        dq 0x0000000000000450
  .rdata:0x000000000000DD18        dq va_ptr string_mnMN; "mn-MN"
  .rdata:0x000000000000DD20        dq 0x0000000000000452
  .rdata:0x000000000000DD28        dq va_ptr string_cyGB; "cy-GB"
  .rdata:0x000000000000DD30        dq 0x0000000000000456
  .rdata:0x000000000000DD38        dq va_ptr string_glES; "gl-ES"
  .rdata:0x000000000000DD40        dq 0x0000000000000457
  .rdata:0x000000000000DD48        dq va_ptr string_kokIN; "kok-IN"
  .rdata:0x000000000000DD50        dq 0x000000000000045A
  .rdata:0x000000000000DD58        dq va_ptr string_syrSY; "syr-SY"
  .rdata:0x000000000000DD60        dq 0x0000000000000465
  .rdata:0x000000000000DD68        dq va_ptr string_divMV; "div-MV"
  .rdata:0x000000000000DD70        dq 0x000000000000046B
  .rdata:0x000000000000DD78        dq va_ptr string_quzBO; "quz-BO"
  .rdata:0x000000000000DD80        dq 0x000000000000046C
  .rdata:0x000000000000DD88        dq va_ptr string_nsZA; "ns-ZA"
  .rdata:0x000000000000DD90        dq 0x0000000000000481
  .rdata:0x000000000000DD98        dq va_ptr string_miNZ; "mi-NZ"
  .rdata:0x000000000000DDA0        dq 0x0000000000000801
  .rdata:0x000000000000DDA8        dq va_ptr string_arIQ; "ar-IQ"
  .rdata:0x000000000000DDB0        dq 0x0000000000000804
  .rdata:0x000000000000DDB8        dq va_ptr string_zhCN; "zh-CN"
  .rdata:0x000000000000DDC0        dq 0x0000000000000807
  .rdata:0x000000000000DDC8        dq va_ptr string_deCH; "de-CH"
  .rdata:0x000000000000DDD0        dq 0x0000000000000809
  .rdata:0x000000000000DDD8        dq va_ptr string_enGB; "en-GB"
  .rdata:0x000000000000DDE0        dq 0x000000000000080A
  .rdata:0x000000000000DDE8        dq va_ptr string_esMX; "es-MX"
  .rdata:0x000000000000DDF0        dq 0x000000000000080C
  .rdata:0x000000000000DDF8        dq va_ptr string_frBE; "fr-BE"
  .rdata:0x000000000000DE00        dq 0x0000000000000810
  .rdata:0x000000000000DE08        dq va_ptr string_itCH; "it-CH"
  .rdata:0x000000000000DE10        dq 0x0000000000000813
  .rdata:0x000000000000DE18        dq va_ptr string_nlBE; "nl-BE"
  .rdata:0x000000000000DE20        dq 0x0000000000000814
  .rdata:0x000000000000DE28        dq va_ptr string_nnNO; "nn-NO"
  .rdata:0x000000000000DE30        dq 0x0000000000000816
  .rdata:0x000000000000DE38        dq va_ptr string_ptPT; "pt-PT"
  .rdata:0x000000000000DE40        dq 0x000000000000081A
  .rdata:0x000000000000DE48        dq va_ptr string_srSPLatn; "sr-SP-Latn"
  .rdata:0x000000000000DE50        dq 0x000000000000081D
  .rdata:0x000000000000DE58        dq va_ptr string_svFI; "sv-FI"
  .rdata:0x000000000000DE60        dq 0x000000000000082C
  .rdata:0x000000000000DE68        dq va_ptr string_azAZCyrl; "az-AZ-Cyrl"
  .rdata:0x000000000000DE70        dq 0x000000000000083B
  .rdata:0x000000000000DE78        dq va_ptr string_seSE; "se-SE"
  .rdata:0x000000000000DE80        dq 0x000000000000083E
  .rdata:0x000000000000DE88        dq va_ptr string_msBN; "ms-BN"
  .rdata:0x000000000000DE90        db "C\b\x00"
  .rdata:0x000000000000DE93        dd 0x00000000
  .rdata:0x000000000000DE97        db 0x00
  .rdata:0x000000000000DE98        dq va_ptr string_uzUZCyrl; "uz-UZ-Cyrl"
  .rdata:0x000000000000DEA0        db "k\b\x00"
  .rdata:0x000000000000DEA3        dd 0x00000000
  .rdata:0x000000000000DEA7        db 0x00
  .rdata:0x000000000000DEA8        dq va_ptr string_quzEC; "quz-EC"
  .rdata:0x000000000000DEB0        dq 0x0000000000000C01
  .rdata:0x000000000000DEB8        dq va_ptr string_arEG; "ar-EG"
  .rdata:0x000000000000DEC0        dq 0x0000000000000C04
  .rdata:0x000000000000DEC8        dq va_ptr string_zhHK; "zh-HK"
  .rdata:0x000000000000DED0        dq 0x0000000000000C07
  .rdata:0x000000000000DED8        dq va_ptr string_deAT; "de-AT"
  .rdata:0x000000000000DEE0        dq 0x0000000000000C09
  .rdata:0x000000000000DEE8        dq va_ptr string_enAU; "en-AU"
  .rdata:0x000000000000DEF0        dq 0x0000000000000C0A
  .rdata:0x000000000000DEF8        dq va_ptr string_esES; "es-ES"
  .rdata:0x000000000000DF00        dq 0x0000000000000C0C
  .rdata:0x000000000000DF08        dq va_ptr string_frCA; "fr-CA"
  .rdata:0x000000000000DF10        dq 0x0000000000000C1A
  .rdata:0x000000000000DF18        dq va_ptr string_srSPCyrl; "sr-SP-Cyrl"
  .rdata:0x000000000000DF20        dq 0x0000000000000C3B
  .rdata:0x000000000000DF28        dq va_ptr string_seFI; "se-FI"
  .rdata:0x000000000000DF30        db "k\f\x00"
  .rdata:0x000000000000DF33        dd 0x00000000
  .rdata:0x000000000000DF37        db 0x00
  .rdata:0x000000000000DF38        dq va_ptr string_quzPE; "quz-PE"
  .rdata:0x000000000000DF40        dq 0x0000000000001001
  .rdata:0x000000000000DF48        dq va_ptr string_arLY; "ar-LY"
  .rdata:0x000000000000DF50        dq 0x0000000000001004
  .rdata:0x000000000000DF58        dq va_ptr string_zhSG; "zh-SG"
  .rdata:0x000000000000DF60        dq 0x0000000000001007
  .rdata:0x000000000000DF68        dq va_ptr string_deLU; "de-LU"
  .rdata:0x000000000000DF70        dq 0x0000000000001009
  .rdata:0x000000000000DF78        dq va_ptr string_enCA; "en-CA"
  .rdata:0x000000000000DF80        dq 0x000000000000100A
  .rdata:0x000000000000DF88        dq va_ptr string_esGT; "es-GT"
  .rdata:0x000000000000DF90        dq 0x000000000000100C
  .rdata:0x000000000000DF98        dq va_ptr string_frCH; "fr-CH"
  .rdata:0x000000000000DFA0        dq 0x000000000000101A
  .rdata:0x000000000000DFA8        dq va_ptr string_hrBA; "hr-BA"
  .rdata:0x000000000000DFB0        dq 0x000000000000103B
  .rdata:0x000000000000DFB8        dq va_ptr string_smjNO; "smj-NO"
  .rdata:0x000000000000DFC0        dq 0x0000000000001401
  .rdata:0x000000000000DFC8        dq va_ptr string_arDZ; "ar-DZ"
  .rdata:0x000000000000DFD0        dq 0x0000000000001404
  .rdata:0x000000000000DFD8        dq va_ptr string_zhMO; "zh-MO"
  .rdata:0x000000000000DFE0        dq 0x0000000000001407
  .rdata:0x000000000000DFE8        dq va_ptr string_deLI; "de-LI"
  .rdata:0x000000000000DFF0        dq 0x0000000000001409
  .rdata:0x000000000000DFF8        dq va_ptr string_enNZ; "en-NZ"
  .rdata:0x000000000000E000        dq 0x000000000000140A
  .rdata:0x000000000000E008        dq va_ptr string_esCR; "es-CR"
  .rdata:0x000000000000E010        dq 0x000000000000140C
  .rdata:0x000000000000E018        dq va_ptr string_frLU; "fr-LU"
  .rdata:0x000000000000E020        dq 0x000000000000141A
  .rdata:0x000000000000E028        dq va_ptr string_bsBALatn; "bs-BA-Latn"
  .rdata:0x000000000000E030        dq 0x000000000000143B
  .rdata:0x000000000000E038        dq va_ptr string_smjSE; "smj-SE"
  .rdata:0x000000000000E040        dq 0x0000000000001801
  .rdata:0x000000000000E048        dq va_ptr string_arMA; "ar-MA"
  .rdata:0x000000000000E050        dq 0x0000000000001809
  .rdata:0x000000000000E058        dq va_ptr string_enIE; "en-IE"
  .rdata:0x000000000000E060        dq 0x000000000000180A
  .rdata:0x000000000000E068        dq va_ptr string_esPA; "es-PA"
  .rdata:0x000000000000E070        dq 0x000000000000180C
  .rdata:0x000000000000E078        dq va_ptr string_frMC; "fr-MC"
  .rdata:0x000000000000E080        dq 0x000000000000181A
  .rdata:0x000000000000E088        dq va_ptr string_srBALatn; "sr-BA-Latn"
  .rdata:0x000000000000E090        dq 0x000000000000183B
  .rdata:0x000000000000E098        dq va_ptr string_smaNO; "sma-NO"
  .rdata:0x000000000000E0A0        dq 0x0000000000001C01
  .rdata:0x000000000000E0A8        dq va_ptr string_arTN; "ar-TN"
  .rdata:0x000000000000E0B0        dq 0x0000000000001C09
  .rdata:0x000000000000E0B8        dq va_ptr string_enZA; "en-ZA"
  .rdata:0x000000000000E0C0        dq 0x0000000000001C0A
  .rdata:0x000000000000E0C8        dq va_ptr string_esDO; "es-DO"
  .rdata:0x000000000000E0D0        dq 0x0000000000001C1A
  .rdata:0x000000000000E0D8        dq va_ptr string_srBACyrl; "sr-BA-Cyrl"
  .rdata:0x000000000000E0E0        dq 0x0000000000001C3B
  .rdata:0x000000000000E0E8        dq va_ptr string_smaSE; "sma-SE"
  .rdata:0x000000000000E0F0        db 0x01
  .rdata:0x000000000000E0F1        db " \x00"
  .rdata:0x000000000000E0F3        dd 0x00000000
  .rdata:0x000000000000E0F7        db 0x00
  .rdata:0x000000000000E0F8        dq va_ptr string_arOM; "ar-OM"
  .rdata:0x000000000000E100        db "\t \x00"
  .rdata:0x000000000000E103        dd 0x00000000
  .rdata:0x000000000000E107        db 0x00
  .rdata:0x000000000000E108        dq va_ptr string_enJM; "en-JM"
  .rdata:0x000000000000E110        db "\n \x00"
  .rdata:0x000000000000E113        dd 0x00000000
  .rdata:0x000000000000E117        db 0x00
  .rdata:0x000000000000E118        dq va_ptr string_esVE; "es-VE"
  .rdata:0x000000000000E120        db "; \x00"
  .rdata:0x000000000000E123        dd 0x00000000
  .rdata:0x000000000000E127        db 0x00
  .rdata:0x000000000000E128        dq va_ptr string_smsFI; "sms-FI"
  .rdata:0x000000000000E130        dq 0x0000000000002401
  .rdata:0x000000000000E138        dq va_ptr string_arYE; "ar-YE"
  .rdata:0x000000000000E140        dq 0x0000000000002409
  .rdata:0x000000000000E148        dq va_ptr string_enCB; "en-CB"
  .rdata:0x000000000000E150        dq 0x000000000000240A
  .rdata:0x000000000000E158        dq va_ptr string_esCO; "es-CO"
  .rdata:0x000000000000E160        dq 0x000000000000243B
  .rdata:0x000000000000E168        dq va_ptr string_smnFI; "smn-FI"
  .rdata:0x000000000000E170        dq 0x0000000000002801
  .rdata:0x000000000000E178        dq va_ptr string_arSY; "ar-SY"
  .rdata:0x000000000000E180        dq 0x0000000000002809
  .rdata:0x000000000000E188        dq va_ptr string_enBZ; "en-BZ"
  .rdata:0x000000000000E190        dq 0x000000000000280A
  .rdata:0x000000000000E198        dq va_ptr string_esPE; "es-PE"
  .rdata:0x000000000000E1A0        dq 0x0000000000002C01
  .rdata:0x000000000000E1A8        dq va_ptr string_arJO; "ar-JO"
  .rdata:0x000000000000E1B0        dq 0x0000000000002C09
  .rdata:0x000000000000E1B8        dq va_ptr string_enTT; "en-TT"
  .rdata:0x000000000000E1C0        dq 0x0000000000002C0A
  .rdata:0x000000000000E1C8        dq va_ptr string_esAR; "es-AR"
  .rdata:0x000000000000E1D0        db 0x01
  .rdata:0x000000000000E1D1        db "0\x00"
  .rdata:0x000000000000E1D3        dd 0x00000000
  .rdata:0x000000000000E1D7        db 0x00
  .rdata:0x000000000000E1D8        dq va_ptr string_arLB; "ar-LB"
  .rdata:0x000000000000E1E0        db "\t0\x00"
  .rdata:0x000000000000E1E3        dd 0x00000000
  .rdata:0x000000000000E1E7        db 0x00
  .rdata:0x000000000000E1E8        dq va_ptr string_enZW; "en-ZW"
  .rdata:0x000000000000E1F0        db "\n0\x00"
  .rdata:0x000000000000E1F3        dd 0x00000000
  .rdata:0x000000000000E1F7        db 0x00
  .rdata:0x000000000000E1F8        dq va_ptr string_esEC; "es-EC"
  .rdata:0x000000000000E200        db 0x01
  .rdata:0x000000000000E201        db "4\x00"
  .rdata:0x000000000000E203        dd 0x00000000
  .rdata:0x000000000000E207        db 0x00
  .rdata:0x000000000000E208        dq va_ptr string_arKW; "ar-KW"
  .rdata:0x000000000000E210        db "\t4\x00"
  .rdata:0x000000000000E213        dd 0x00000000
  .rdata:0x000000000000E217        db 0x00
  .rdata:0x000000000000E218        dq va_ptr string_enPH; "en-PH"
  .rdata:0x000000000000E220        db "\n4\x00"
  .rdata:0x000000000000E223        dd 0x00000000
  .rdata:0x000000000000E227        db 0x00
  .rdata:0x000000000000E228        dq va_ptr string_esCL; "es-CL"
  .rdata:0x000000000000E230        db 0x01
  .rdata:0x000000000000E231        db "8\x00"
  .rdata:0x000000000000E233        dd 0x00000000
  .rdata:0x000000000000E237        db 0x00
  .rdata:0x000000000000E238        dq va_ptr string_arAE; "ar-AE"
  .rdata:0x000000000000E240        db "\n8\x00"
  .rdata:0x000000000000E243        dd 0x00000000
  .rdata:0x000000000000E247        db 0x00
  .rdata:0x000000000000E248        dq va_ptr string_esUY; "es-UY"
  .rdata:0x000000000000E250        dq 0x0000000000003C01
  .rdata:0x000000000000E258        dq va_ptr string_arBH; "ar-BH"
  .rdata:0x000000000000E260        dq 0x0000000000003C0A
  .rdata:0x000000000000E268        dq va_ptr string_esPY; "es-PY"
  .rdata:0x000000000000E270        dq 0x0000000000004001
  .rdata:0x000000000000E278        dq va_ptr string_arQA; "ar-QA"
  .rdata:0x000000000000E280        dq 0x000000000000400A
  .rdata:0x000000000000E288        dq va_ptr string_esBO; "es-BO"
  .rdata:0x000000000000E290        db "\nD\x00"
  .rdata:0x000000000000E293        dd 0x00000000
  .rdata:0x000000000000E297        db 0x00
  .rdata:0x000000000000E298        dq va_ptr string_esSV; "es-SV"
  .rdata:0x000000000000E2A0        db "\nH\x00"
  .rdata:0x000000000000E2A3        dd 0x00000000
  .rdata:0x000000000000E2A7        db 0x00
  .rdata:0x000000000000E2A8        dq va_ptr string_esHN; "es-HN"
  .rdata:0x000000000000E2B0        db "\nL\x00"
  .rdata:0x000000000000E2B3        dd 0x00000000
  .rdata:0x000000000000E2B7        db 0x00
  .rdata:0x000000000000E2B8        dq va_ptr string_esNI; "es-NI"
  .rdata:0x000000000000E2C0        db "\nP\x00"
  .rdata:0x000000000000E2C3        dd 0x00000000
  .rdata:0x000000000000E2C7        db 0x00
  .rdata:0x000000000000E2C8        dq va_ptr string_esPR; "es-PR"
  .rdata:0x000000000000E2D0        dq 0x0000000000007C04
  .rdata:0x000000000000E2D8        dq va_ptr string_zhCHT; "zh-CHT"
  .rdata:0x000000000000E2E0        dq 0x0000000000007C1A
  .rdata:0x000000000000E2E8        dq va_ptr data_0xEF00; "s"
  .rdata:0x000000000000E2F0 data_0xE2F0:
  .rdata:0x000000000000E2F0        db "a\x00"
  .rdata:0x000000000000E2F2        db "r\x00"
  .rdata:0x000000000000E2F4        dd 0x00000000
  .rdata:0x000000000000E2F8 data_0xE2F8:
  .rdata:0x000000000000E2F8        db "b\x00"
  .rdata:0x000000000000E2FA        db "g\x00"
  .rdata:0x000000000000E2FC        dd 0x00000000
  .rdata:0x000000000000E300 data_0xE300:
  .rdata:0x000000000000E300        db "c\x00"
  .rdata:0x000000000000E302        db "a\x00"
  .rdata:0x000000000000E304        dd 0x00000000
  .rdata:0x000000000000E308 string_zhCHS:
  .rdata:0x000000000000E308        dw L"zh-CHS\x0000"
  .rdata:0x000000000000E316        dw 0x0000
  .rdata:0x000000000000E318 data_0xE318:
  .rdata:0x000000000000E318        db "c\x00"
  .rdata:0x000000000000E31A        db "s\x00"
  .rdata:0x000000000000E31C        dd 0x00000000
  .rdata:0x000000000000E320 data_0xE320:
  .rdata:0x000000000000E320        db "d\x00"
  .rdata:0x000000000000E322        db "a\x00"
  .rdata:0x000000000000E324        dd 0x00000000
  .rdata:0x000000000000E328 data_0xE328:
  .rdata:0x000000000000E328        db "d\x00"
  .rdata:0x000000000000E32A        db "e\x00"
  .rdata:0x000000000000E32C        dd 0x00000000
  .rdata:0x000000000000E330 data_0xE330:
  .rdata:0x000000000000E330        db "e\x00"
  .rdata:0x000000000000E332        db "l\x00"
  .rdata:0x000000000000E334        dd 0x00000000
  .rdata:0x000000000000E338 data_0xE338:
  .rdata:0x000000000000E338        db "e\x00"
  .rdata:0x000000000000E33A        db "n\x00"
  .rdata:0x000000000000E33C        dd 0x00000000
  .rdata:0x000000000000E340 data_0xE340:
  .rdata:0x000000000000E340        db "e\x00"
  .rdata:0x000000000000E342        db "s\x00"
  .rdata:0x000000000000E344        dd 0x00000000
  .rdata:0x000000000000E348 data_0xE348:
  .rdata:0x000000000000E348        db "f\x00"
  .rdata:0x000000000000E34A        db "i\x00"
  .rdata:0x000000000000E34C        dd 0x00000000
  .rdata:0x000000000000E350 data_0xE350:
  .rdata:0x000000000000E350        db "f\x00"
  .rdata:0x000000000000E352        db "r\x00"
  .rdata:0x000000000000E354        dd 0x00000000
  .rdata:0x000000000000E358 data_0xE358:
  .rdata:0x000000000000E358        db "h\x00"
  .rdata:0x000000000000E35A        db "e\x00"
  .rdata:0x000000000000E35C        dd 0x00000000
  .rdata:0x000000000000E360 data_0xE360:
  .rdata:0x000000000000E360        db "h\x00"
  .rdata:0x000000000000E362        db "u\x00"
  .rdata:0x000000000000E364        dd 0x00000000
  .rdata:0x000000000000E368 data_0xE368:
  .rdata:0x000000000000E368        db "i\x00"
  .rdata:0x000000000000E36A        db "s\x00"
  .rdata:0x000000000000E36C        dd 0x00000000
  .rdata:0x000000000000E370 data_0xE370:
  .rdata:0x000000000000E370        db "i\x00"
  .rdata:0x000000000000E372        db "t\x00"
  .rdata:0x000000000000E374        dd 0x00000000
  .rdata:0x000000000000E378 data_0xE378:
  .rdata:0x000000000000E378        db "j\x00"
  .rdata:0x000000000000E37A        db "a\x00"
  .rdata:0x000000000000E37C        dd 0x00000000
  .rdata:0x000000000000E380 data_0xE380:
  .rdata:0x000000000000E380        db "k\x00"
  .rdata:0x000000000000E382        db "o\x00"
  .rdata:0x000000000000E384        dd 0x00000000
  .rdata:0x000000000000E388 data_0xE388:
  .rdata:0x000000000000E388        db "n\x00"
  .rdata:0x000000000000E38A        db "l\x00"
  .rdata:0x000000000000E38C        dd 0x00000000
  .rdata:0x000000000000E390 data_0xE390:
  .rdata:0x000000000000E390        db "n\x00"
  .rdata:0x000000000000E392        db "o\x00"
  .rdata:0x000000000000E394        dd 0x00000000
  .rdata:0x000000000000E398 data_0xE398:
  .rdata:0x000000000000E398        db "p\x00"
  .rdata:0x000000000000E39A        db "l\x00"
  .rdata:0x000000000000E39C        dd 0x00000000
  .rdata:0x000000000000E3A0 data_0xE3A0:
  .rdata:0x000000000000E3A0        db "p\x00"
  .rdata:0x000000000000E3A2        db "t\x00"
  .rdata:0x000000000000E3A4        dd 0x00000000
  .rdata:0x000000000000E3A8 data_0xE3A8:
  .rdata:0x000000000000E3A8        db "r\x00"
  .rdata:0x000000000000E3AA        db "o\x00"
  .rdata:0x000000000000E3AC        dd 0x00000000
  .rdata:0x000000000000E3B0 data_0xE3B0:
  .rdata:0x000000000000E3B0        db "r\x00"
  .rdata:0x000000000000E3B2        db "u\x00"
  .rdata:0x000000000000E3B4        dd 0x00000000
  .rdata:0x000000000000E3B8 data_0xE3B8:
  .rdata:0x000000000000E3B8        db "h\x00"
  .rdata:0x000000000000E3BA        db "r\x00"
  .rdata:0x000000000000E3BC        dd 0x00000000
  .rdata:0x000000000000E3C0 data_0xE3C0:
  .rdata:0x000000000000E3C0        db "s\x00"
  .rdata:0x000000000000E3C2        db "k\x00"
  .rdata:0x000000000000E3C4        dd 0x00000000
  .rdata:0x000000000000E3C8 data_0xE3C8:
  .rdata:0x000000000000E3C8        db "s\x00"
  .rdata:0x000000000000E3CA        db "q\x00"
  .rdata:0x000000000000E3CC        dd 0x00000000
  .rdata:0x000000000000E3D0 data_0xE3D0:
  .rdata:0x000000000000E3D0        db "s\x00"
  .rdata:0x000000000000E3D2        db "v\x00"
  .rdata:0x000000000000E3D4        dd 0x00000000
  .rdata:0x000000000000E3D8 data_0xE3D8:
  .rdata:0x000000000000E3D8        db "t\x00"
  .rdata:0x000000000000E3DA        db "h\x00"
  .rdata:0x000000000000E3DC        dd 0x00000000
  .rdata:0x000000000000E3E0 data_0xE3E0:
  .rdata:0x000000000000E3E0        db "t\x00"
  .rdata:0x000000000000E3E2        db "r\x00"
  .rdata:0x000000000000E3E4        dd 0x00000000
  .rdata:0x000000000000E3E8 data_0xE3E8:
  .rdata:0x000000000000E3E8        db "u\x00"
  .rdata:0x000000000000E3EA        db "r\x00"
  .rdata:0x000000000000E3EC        dd 0x00000000
  .rdata:0x000000000000E3F0 data_0xE3F0:
  .rdata:0x000000000000E3F0        db "i\x00"
  .rdata:0x000000000000E3F2        db "d\x00"
  .rdata:0x000000000000E3F4        dd 0x00000000
  .rdata:0x000000000000E3F8 data_0xE3F8:
  .rdata:0x000000000000E3F8        db "b\x00"
  .rdata:0x000000000000E3FA        db "e\x00"
  .rdata:0x000000000000E3FC        dd 0x00000000
  .rdata:0x000000000000E400 data_0xE400:
  .rdata:0x000000000000E400        db "s\x00"
  .rdata:0x000000000000E402        db "l\x00"
  .rdata:0x000000000000E404        dd 0x00000000
  .rdata:0x000000000000E408 data_0xE408:
  .rdata:0x000000000000E408        db "e\x00"
  .rdata:0x000000000000E40A        db "t\x00"
  .rdata:0x000000000000E40C        dd 0x00000000
  .rdata:0x000000000000E410 data_0xE410:
  .rdata:0x000000000000E410        db "l\x00"
  .rdata:0x000000000000E412        db "v\x00"
  .rdata:0x000000000000E414        dd 0x00000000
  .rdata:0x000000000000E418 data_0xE418:
  .rdata:0x000000000000E418        db "l\x00"
  .rdata:0x000000000000E41A        db "t\x00"
  .rdata:0x000000000000E41C        dd 0x00000000
  .rdata:0x000000000000E420 data_0xE420:
  .rdata:0x000000000000E420        db "f\x00"
  .rdata:0x000000000000E422        db "a\x00"
  .rdata:0x000000000000E424        dd 0x00000000
  .rdata:0x000000000000E428 data_0xE428:
  .rdata:0x000000000000E428        db "v\x00"
  .rdata:0x000000000000E42A        db "i\x00"
  .rdata:0x000000000000E42C        dd 0x00000000
  .rdata:0x000000000000E430 data_0xE430:
  .rdata:0x000000000000E430        db "h\x00"
  .rdata:0x000000000000E432        db "y\x00"
  .rdata:0x000000000000E434        dd 0x00000000
  .rdata:0x000000000000E438 data_0xE438:
  .rdata:0x000000000000E438        db "a\x00"
  .rdata:0x000000000000E43A        db "z\x00"
  .rdata:0x000000000000E43C        dd 0x00000000
  .rdata:0x000000000000E440 data_0xE440:
  .rdata:0x000000000000E440        db "e\x00"
  .rdata:0x000000000000E442        db "u\x00"
  .rdata:0x000000000000E444        dd 0x00000000
  .rdata:0x000000000000E448 data_0xE448:
  .rdata:0x000000000000E448        db "m\x00"
  .rdata:0x000000000000E44A        db "k\x00"
  .rdata:0x000000000000E44C        dd 0x00000000
  .rdata:0x000000000000E450 data_0xE450:
  .rdata:0x000000000000E450        db "a\x00"
  .rdata:0x000000000000E452        db "f\x00"
  .rdata:0x000000000000E454        dd 0x00000000
  .rdata:0x000000000000E458 data_0xE458:
  .rdata:0x000000000000E458        db "k\x00"
  .rdata:0x000000000000E45A        db "a\x00"
  .rdata:0x000000000000E45C        dd 0x00000000
  .rdata:0x000000000000E460 data_0xE460:
  .rdata:0x000000000000E460        db "f\x00"
  .rdata:0x000000000000E462        db "o\x00"
  .rdata:0x000000000000E464        dd 0x00000000
  .rdata:0x000000000000E468 data_0xE468:
  .rdata:0x000000000000E468        db "h\x00"
  .rdata:0x000000000000E46A        db "i\x00"
  .rdata:0x000000000000E46C        dd 0x00000000
  .rdata:0x000000000000E470 data_0xE470:
  .rdata:0x000000000000E470        db "m\x00"
  .rdata:0x000000000000E472        db "s\x00"
  .rdata:0x000000000000E474        dd 0x00000000
  .rdata:0x000000000000E478 data_0xE478:
  .rdata:0x000000000000E478        db "k\x00"
  .rdata:0x000000000000E47A        db "k\x00"
  .rdata:0x000000000000E47C        dd 0x00000000
  .rdata:0x000000000000E480 data_0xE480:
  .rdata:0x000000000000E480        db "k\x00"
  .rdata:0x000000000000E482        db "y\x00"
  .rdata:0x000000000000E484        dd 0x00000000
  .rdata:0x000000000000E488 data_0xE488:
  .rdata:0x000000000000E488        db "s\x00"
  .rdata:0x000000000000E48A        db "w\x00"
  .rdata:0x000000000000E48C        dd 0x00000000
  .rdata:0x000000000000E490 data_0xE490:
  .rdata:0x000000000000E490        db "u\x00"
  .rdata:0x000000000000E492        db "z\x00"
  .rdata:0x000000000000E494        dd 0x00000000
  .rdata:0x000000000000E498 data_0xE498:
  .rdata:0x000000000000E498        db "t\x00"
  .rdata:0x000000000000E49A        db "t\x00"
  .rdata:0x000000000000E49C        dd 0x00000000
  .rdata:0x000000000000E4A0 data_0xE4A0:
  .rdata:0x000000000000E4A0        db "p\x00"
  .rdata:0x000000000000E4A2        db "a\x00"
  .rdata:0x000000000000E4A4        dd 0x00000000
  .rdata:0x000000000000E4A8 data_0xE4A8:
  .rdata:0x000000000000E4A8        db "g\x00"
  .rdata:0x000000000000E4AA        db "u\x00"
  .rdata:0x000000000000E4AC        dd 0x00000000
  .rdata:0x000000000000E4B0 data_0xE4B0:
  .rdata:0x000000000000E4B0        db "t\x00"
  .rdata:0x000000000000E4B2        db "a\x00"
  .rdata:0x000000000000E4B4        dd 0x00000000
  .rdata:0x000000000000E4B8 data_0xE4B8:
  .rdata:0x000000000000E4B8        db "t\x00"
  .rdata:0x000000000000E4BA        db "e\x00"
  .rdata:0x000000000000E4BC        dd 0x00000000
  .rdata:0x000000000000E4C0 data_0xE4C0:
  .rdata:0x000000000000E4C0        db "k\x00"
  .rdata:0x000000000000E4C2        db "n\x00"
  .rdata:0x000000000000E4C4        dd 0x00000000
  .rdata:0x000000000000E4C8 data_0xE4C8:
  .rdata:0x000000000000E4C8        db "m\x00"
  .rdata:0x000000000000E4CA        db "r\x00"
  .rdata:0x000000000000E4CC        dd 0x00000000
  .rdata:0x000000000000E4D0 data_0xE4D0:
  .rdata:0x000000000000E4D0        db "s\x00"
  .rdata:0x000000000000E4D2        db "a\x00"
  .rdata:0x000000000000E4D4        dd 0x00000000
  .rdata:0x000000000000E4D8 data_0xE4D8:
  .rdata:0x000000000000E4D8        db "m\x00"
  .rdata:0x000000000000E4DA        db "n\x00"
  .rdata:0x000000000000E4DC        dd 0x00000000
  .rdata:0x000000000000E4E0 data_0xE4E0:
  .rdata:0x000000000000E4E0        db "g\x00"
  .rdata:0x000000000000E4E2        db "l\x00"
  .rdata:0x000000000000E4E4        dd 0x00000000
  .rdata:0x000000000000E4E8 data_0xE4E8:
  .rdata:0x000000000000E4E8        db "k\x00"
  .rdata:0x000000000000E4EA        db "o\x00"
  .rdata:0x000000000000E4EC        db "k\x00"
  .rdata:0x000000000000E4EE        dw 0x0000
  .rdata:0x000000000000E4F0 data_0xE4F0:
  .rdata:0x000000000000E4F0        db "s\x00"
  .rdata:0x000000000000E4F2        db "y\x00"
  .rdata:0x000000000000E4F4        db "r\x00"
  .rdata:0x000000000000E4F6        dw 0x0000
  .rdata:0x000000000000E4F8 data_0xE4F8:
  .rdata:0x000000000000E4F8        db "d\x00"
  .rdata:0x000000000000E4FA        db "i\x00"
  .rdata:0x000000000000E4FC        db "v\x00"
  .rdata:0x000000000000E4FE        dw 0x0000
  .rdata:0x000000000000E500 data_0xE500:
  .rdata:0x000000000000E500        dq 0x0000000000000000
  .rdata:0x000000000000E508 string_arSA:
  .rdata:0x000000000000E508        dw L"ar-SA\x0000"
  .rdata:0x000000000000E514        dd 0x00000000
  .rdata:0x000000000000E518 string_bgBG:
  .rdata:0x000000000000E518        dw L"bg-BG\x0000"
  .rdata:0x000000000000E524        dd 0x00000000
  .rdata:0x000000000000E528 string_caES:
  .rdata:0x000000000000E528        dw L"ca-ES\x0000"
  .rdata:0x000000000000E534        dd 0x00000000
  .rdata:0x000000000000E538 string_csCZ:
  .rdata:0x000000000000E538        dw L"cs-CZ\x0000"
  .rdata:0x000000000000E544        dd 0x00000000
  .rdata:0x000000000000E548 string_daDK:
  .rdata:0x000000000000E548        dw L"da-DK\x0000"
  .rdata:0x000000000000E554        dd 0x00000000
  .rdata:0x000000000000E558 string_deDE:
  .rdata:0x000000000000E558        dw L"de-DE\x0000"
  .rdata:0x000000000000E564        dd 0x00000000
  .rdata:0x000000000000E568 string_elGR:
  .rdata:0x000000000000E568        dw L"el-GR\x0000"
  .rdata:0x000000000000E574        dd 0x00000000
  .rdata:0x000000000000E578 string_fiFI:
  .rdata:0x000000000000E578        dw L"fi-FI\x0000"
  .rdata:0x000000000000E584        dd 0x00000000
  .rdata:0x000000000000E588 string_frFR:
  .rdata:0x000000000000E588        dw L"fr-FR\x0000"
  .rdata:0x000000000000E594        dd 0x00000000
  .rdata:0x000000000000E598 string_heIL:
  .rdata:0x000000000000E598        dw L"he-IL\x0000"
  .rdata:0x000000000000E5A4        dd 0x00000000
  .rdata:0x000000000000E5A8 string_huHU:
  .rdata:0x000000000000E5A8        dw L"hu-HU\x0000"
  .rdata:0x000000000000E5B4        dd 0x00000000
  .rdata:0x000000000000E5B8 string_isIS:
  .rdata:0x000000000000E5B8        dw L"is-IS\x0000"
  .rdata:0x000000000000E5C4        dd 0x00000000
  .rdata:0x000000000000E5C8 string_itIT:
  .rdata:0x000000000000E5C8        dw L"it-IT\x0000"
  .rdata:0x000000000000E5D4        dd 0x00000000
  .rdata:0x000000000000E5D8 string_nlNL:
  .rdata:0x000000000000E5D8        dw L"nl-NL\x0000"
  .rdata:0x000000000000E5E4        dd 0x00000000
  .rdata:0x000000000000E5E8 string_nbNO:
  .rdata:0x000000000000E5E8        dw L"nb-NO\x0000"
  .rdata:0x000000000000E5F4        dd 0x00000000
  .rdata:0x000000000000E5F8 string_plPL:
  .rdata:0x000000000000E5F8        dw L"pl-PL\x0000"
  .rdata:0x000000000000E604        dd 0x00000000
  .rdata:0x000000000000E608 string_ptBR:
  .rdata:0x000000000000E608        dw L"pt-BR\x0000"
  .rdata:0x000000000000E614        dd 0x00000000
  .rdata:0x000000000000E618 string_roRO:
  .rdata:0x000000000000E618        dw L"ro-RO\x0000"
  .rdata:0x000000000000E624        dd 0x00000000
  .rdata:0x000000000000E628 string_ruRU:
  .rdata:0x000000000000E628        dw L"ru-RU\x0000"
  .rdata:0x000000000000E634        dd 0x00000000
  .rdata:0x000000000000E638 string_hrHR:
  .rdata:0x000000000000E638        dw L"hr-HR\x0000"
  .rdata:0x000000000000E644        dd 0x00000000
  .rdata:0x000000000000E648 string_skSK:
  .rdata:0x000000000000E648        dw L"sk-SK\x0000"
  .rdata:0x000000000000E654        dd 0x00000000
  .rdata:0x000000000000E658 string_sqAL:
  .rdata:0x000000000000E658        dw L"sq-AL\x0000"
  .rdata:0x000000000000E664        dd 0x00000000
  .rdata:0x000000000000E668 string_svSE:
  .rdata:0x000000000000E668        dw L"sv-SE\x0000"
  .rdata:0x000000000000E674        dd 0x00000000
  .rdata:0x000000000000E678 string_thTH:
  .rdata:0x000000000000E678        dw L"th-TH\x0000"
  .rdata:0x000000000000E684        dd 0x00000000
  .rdata:0x000000000000E688 string_trTR:
  .rdata:0x000000000000E688        dw L"tr-TR\x0000"
  .rdata:0x000000000000E694        dd 0x00000000
  .rdata:0x000000000000E698 string_urPK:
  .rdata:0x000000000000E698        dw L"ur-PK\x0000"
  .rdata:0x000000000000E6A4        dd 0x00000000
  .rdata:0x000000000000E6A8 string_idID:
  .rdata:0x000000000000E6A8        dw L"id-ID\x0000"
  .rdata:0x000000000000E6B4        dd 0x00000000
  .rdata:0x000000000000E6B8 string_ukUA:
  .rdata:0x000000000000E6B8        dw L"uk-UA\x0000"
  .rdata:0x000000000000E6C4        dd 0x00000000
  .rdata:0x000000000000E6C8 string_beBY:
  .rdata:0x000000000000E6C8        dw L"be-BY\x0000"
  .rdata:0x000000000000E6D4        dd 0x00000000
  .rdata:0x000000000000E6D8 string_slSI:
  .rdata:0x000000000000E6D8        dw L"sl-SI\x0000"
  .rdata:0x000000000000E6E4        dd 0x00000000
  .rdata:0x000000000000E6E8 string_etEE:
  .rdata:0x000000000000E6E8        dw L"et-EE\x0000"
  .rdata:0x000000000000E6F4        dd 0x00000000
  .rdata:0x000000000000E6F8 string_lvLV:
  .rdata:0x000000000000E6F8        dw L"lv-LV\x0000"
  .rdata:0x000000000000E704        dd 0x00000000
  .rdata:0x000000000000E708 string_ltLT:
  .rdata:0x000000000000E708        dw L"lt-LT\x0000"
  .rdata:0x000000000000E714        dd 0x00000000
  .rdata:0x000000000000E718 string_faIR:
  .rdata:0x000000000000E718        dw L"fa-IR\x0000"
  .rdata:0x000000000000E724        dd 0x00000000
  .rdata:0x000000000000E728 string_viVN:
  .rdata:0x000000000000E728        dw L"vi-VN\x0000"
  .rdata:0x000000000000E734        dd 0x00000000
  .rdata:0x000000000000E738 string_hyAM:
  .rdata:0x000000000000E738        dw L"hy-AM\x0000"
  .rdata:0x000000000000E744        dd 0x00000000
  .rdata:0x000000000000E748 string_azAZLatn:
  .rdata:0x000000000000E748        dw L"az-AZ-Latn\x0000"
  .rdata:0x000000000000E75E        dw 0x0000
  .rdata:0x000000000000E760 string_euES:
  .rdata:0x000000000000E760        dw L"eu-ES\x0000"
  .rdata:0x000000000000E76C        dd 0x00000000
  .rdata:0x000000000000E770 string_mkMK:
  .rdata:0x000000000000E770        dw L"mk-MK\x0000"
  .rdata:0x000000000000E77C        dd 0x00000000
  .rdata:0x000000000000E780 string_tnZA:
  .rdata:0x000000000000E780        dw L"tn-ZA\x0000"
  .rdata:0x000000000000E78C        dd 0x00000000
  .rdata:0x000000000000E790 string_xhZA:
  .rdata:0x000000000000E790        dw L"xh-ZA\x0000"
  .rdata:0x000000000000E79C        dd 0x00000000
  .rdata:0x000000000000E7A0 string_zuZA:
  .rdata:0x000000000000E7A0        dw L"zu-ZA\x0000"
  .rdata:0x000000000000E7AC        dd 0x00000000
  .rdata:0x000000000000E7B0 string_afZA:
  .rdata:0x000000000000E7B0        dw L"af-ZA\x0000"
  .rdata:0x000000000000E7BC        dd 0x00000000
  .rdata:0x000000000000E7C0 string_kaGE:
  .rdata:0x000000000000E7C0        dw L"ka-GE\x0000"
  .rdata:0x000000000000E7CC        dd 0x00000000
  .rdata:0x000000000000E7D0 string_foFO:
  .rdata:0x000000000000E7D0        dw L"fo-FO\x0000"
  .rdata:0x000000000000E7DC        dd 0x00000000
  .rdata:0x000000000000E7E0 string_hiIN:
  .rdata:0x000000000000E7E0        dw L"hi-IN\x0000"
  .rdata:0x000000000000E7EC        dd 0x00000000
  .rdata:0x000000000000E7F0 string_mtMT:
  .rdata:0x000000000000E7F0        dw L"mt-MT\x0000"
  .rdata:0x000000000000E7FC        dd 0x00000000
  .rdata:0x000000000000E800 string_seNO:
  .rdata:0x000000000000E800        dw L"se-NO\x0000"
  .rdata:0x000000000000E80C        dd 0x00000000
  .rdata:0x000000000000E810 string_msMY:
  .rdata:0x000000000000E810        dw L"ms-MY\x0000"
  .rdata:0x000000000000E81C        dd 0x00000000
  .rdata:0x000000000000E820 string_kkKZ:
  .rdata:0x000000000000E820        dw L"kk-KZ\x0000"
  .rdata:0x000000000000E82C        dd 0x00000000
  .rdata:0x000000000000E830 string_kyKG:
  .rdata:0x000000000000E830        dw L"ky-KG\x0000"
  .rdata:0x000000000000E83C        dd 0x00000000
  .rdata:0x000000000000E840 string_swKE:
  .rdata:0x000000000000E840        dw L"sw-KE\x0000"
  .rdata:0x000000000000E84C        dd 0x00000000
  .rdata:0x000000000000E850 string_uzUZLatn:
  .rdata:0x000000000000E850        dw L"uz-UZ-Latn\x0000"
  .rdata:0x000000000000E866        dw 0x0000
  .rdata:0x000000000000E868 string_ttRU:
  .rdata:0x000000000000E868        dw L"tt-RU\x0000"
  .rdata:0x000000000000E874        dd 0x00000000
  .rdata:0x000000000000E878 string_bnIN:
  .rdata:0x000000000000E878        dw L"bn-IN\x0000"
  .rdata:0x000000000000E884        dd 0x00000000
  .rdata:0x000000000000E888 string_paIN:
  .rdata:0x000000000000E888        dw L"pa-IN\x0000"
  .rdata:0x000000000000E894        dd 0x00000000
  .rdata:0x000000000000E898 string_guIN:
  .rdata:0x000000000000E898        dw L"gu-IN\x0000"
  .rdata:0x000000000000E8A4        dd 0x00000000
  .rdata:0x000000000000E8A8 string_taIN:
  .rdata:0x000000000000E8A8        dw L"ta-IN\x0000"
  .rdata:0x000000000000E8B4        dd 0x00000000
  .rdata:0x000000000000E8B8 string_teIN:
  .rdata:0x000000000000E8B8        dw L"te-IN\x0000"
  .rdata:0x000000000000E8C4        dd 0x00000000
  .rdata:0x000000000000E8C8 string_knIN:
  .rdata:0x000000000000E8C8        dw L"kn-IN\x0000"
  .rdata:0x000000000000E8D4        dd 0x00000000
  .rdata:0x000000000000E8D8 string_mlIN:
  .rdata:0x000000000000E8D8        dw L"ml-IN\x0000"
  .rdata:0x000000000000E8E4        dd 0x00000000
  .rdata:0x000000000000E8E8 string_mrIN:
  .rdata:0x000000000000E8E8        dw L"mr-IN\x0000"
  .rdata:0x000000000000E8F4        dd 0x00000000
  .rdata:0x000000000000E8F8 string_saIN:
  .rdata:0x000000000000E8F8        dw L"sa-IN\x0000"
  .rdata:0x000000000000E904        dd 0x00000000
  .rdata:0x000000000000E908 string_mnMN:
  .rdata:0x000000000000E908        dw L"mn-MN\x0000"
  .rdata:0x000000000000E914        dd 0x00000000
  .rdata:0x000000000000E918 string_cyGB:
  .rdata:0x000000000000E918        dw L"cy-GB\x0000"
  .rdata:0x000000000000E924        dd 0x00000000
  .rdata:0x000000000000E928 string_glES:
  .rdata:0x000000000000E928        dw L"gl-ES\x0000"
  .rdata:0x000000000000E934        dd 0x00000000
  .rdata:0x000000000000E938 string_kokIN:
  .rdata:0x000000000000E938        dw L"kok-IN\x0000"
  .rdata:0x000000000000E946        dw 0x0000
  .rdata:0x000000000000E948 string_syrSY:
  .rdata:0x000000000000E948        dw L"syr-SY\x0000"
  .rdata:0x000000000000E956        dw 0x0000
  .rdata:0x000000000000E958 string_divMV:
  .rdata:0x000000000000E958        dw L"div-MV\x0000"
  .rdata:0x000000000000E966        dw 0x0000
  .rdata:0x000000000000E968 string_quzBO:
  .rdata:0x000000000000E968        dw L"quz-BO\x0000"
  .rdata:0x000000000000E976        dw 0x0000
  .rdata:0x000000000000E978 string_nsZA:
  .rdata:0x000000000000E978        dw L"ns-ZA\x0000"
  .rdata:0x000000000000E984        dd 0x00000000
  .rdata:0x000000000000E988 string_miNZ:
  .rdata:0x000000000000E988        dw L"mi-NZ\x0000"
  .rdata:0x000000000000E994        dd 0x00000000
  .rdata:0x000000000000E998 string_arIQ:
  .rdata:0x000000000000E998        dw L"ar-IQ\x0000"
  .rdata:0x000000000000E9A4        dd 0x00000000
  .rdata:0x000000000000E9A8 string_deCH:
  .rdata:0x000000000000E9A8        dw L"de-CH\x0000"
  .rdata:0x000000000000E9B4        dd 0x00000000
  .rdata:0x000000000000E9B8 string_enGB:
  .rdata:0x000000000000E9B8        dw L"en-GB\x0000"
  .rdata:0x000000000000E9C4        dd 0x00000000
  .rdata:0x000000000000E9C8 string_esMX:
  .rdata:0x000000000000E9C8        dw L"es-MX\x0000"
  .rdata:0x000000000000E9D4        dd 0x00000000
  .rdata:0x000000000000E9D8 string_frBE:
  .rdata:0x000000000000E9D8        dw L"fr-BE\x0000"
  .rdata:0x000000000000E9E4        dd 0x00000000
  .rdata:0x000000000000E9E8 string_itCH:
  .rdata:0x000000000000E9E8        dw L"it-CH\x0000"
  .rdata:0x000000000000E9F4        dd 0x00000000
  .rdata:0x000000000000E9F8 string_nlBE:
  .rdata:0x000000000000E9F8        dw L"nl-BE\x0000"
  .rdata:0x000000000000EA04        dd 0x00000000
  .rdata:0x000000000000EA08 string_nnNO:
  .rdata:0x000000000000EA08        dw L"nn-NO\x0000"
  .rdata:0x000000000000EA14        dd 0x00000000
  .rdata:0x000000000000EA18 string_ptPT:
  .rdata:0x000000000000EA18        dw L"pt-PT\x0000"
  .rdata:0x000000000000EA24        dd 0x00000000
  .rdata:0x000000000000EA28 string_srSPLatn:
  .rdata:0x000000000000EA28        dw L"sr-SP-Latn\x0000"
  .rdata:0x000000000000EA3E        dw 0x0000
  .rdata:0x000000000000EA40 string_svFI:
  .rdata:0x000000000000EA40        dw L"sv-FI\x0000"
  .rdata:0x000000000000EA4C        dd 0x00000000
  .rdata:0x000000000000EA50 string_azAZCyrl:
  .rdata:0x000000000000EA50        dw L"az-AZ-Cyrl\x0000"
  .rdata:0x000000000000EA66        dw 0x0000
  .rdata:0x000000000000EA68 string_seSE:
  .rdata:0x000000000000EA68        dw L"se-SE\x0000"
  .rdata:0x000000000000EA74        dd 0x00000000
  .rdata:0x000000000000EA78 string_msBN:
  .rdata:0x000000000000EA78        dw L"ms-BN\x0000"
  .rdata:0x000000000000EA84        dd 0x00000000
  .rdata:0x000000000000EA88 string_uzUZCyrl:
  .rdata:0x000000000000EA88        dw L"uz-UZ-Cyrl\x0000"
  .rdata:0x000000000000EA9E        dw 0x0000
  .rdata:0x000000000000EAA0 string_quzEC:
  .rdata:0x000000000000EAA0        dw L"quz-EC\x0000"
  .rdata:0x000000000000EAAE        dw 0x0000
  .rdata:0x000000000000EAB0 string_arEG:
  .rdata:0x000000000000EAB0        dw L"ar-EG\x0000"
  .rdata:0x000000000000EABC        dd 0x00000000
  .rdata:0x000000000000EAC0 string_zhHK:
  .rdata:0x000000000000EAC0        dw L"zh-HK\x0000"
  .rdata:0x000000000000EACC        dd 0x00000000
  .rdata:0x000000000000EAD0 string_deAT:
  .rdata:0x000000000000EAD0        dw L"de-AT\x0000"
  .rdata:0x000000000000EADC        dd 0x00000000
  .rdata:0x000000000000EAE0 string_enAU:
  .rdata:0x000000000000EAE0        dw L"en-AU\x0000"
  .rdata:0x000000000000EAEC        dd 0x00000000
  .rdata:0x000000000000EAF0 string_esES:
  .rdata:0x000000000000EAF0        dw L"es-ES\x0000"
  .rdata:0x000000000000EAFC        dd 0x00000000
  .rdata:0x000000000000EB00 string_frCA:
  .rdata:0x000000000000EB00        dw L"fr-CA\x0000"
  .rdata:0x000000000000EB0C        dd 0x00000000
  .rdata:0x000000000000EB10 string_srSPCyrl:
  .rdata:0x000000000000EB10        dw L"sr-SP-Cyrl\x0000"
  .rdata:0x000000000000EB26        dw 0x0000
  .rdata:0x000000000000EB28 string_seFI:
  .rdata:0x000000000000EB28        dw L"se-FI\x0000"
  .rdata:0x000000000000EB34        dd 0x00000000
  .rdata:0x000000000000EB38 string_quzPE:
  .rdata:0x000000000000EB38        dw L"quz-PE\x0000"
  .rdata:0x000000000000EB46        dw 0x0000
  .rdata:0x000000000000EB48 string_arLY:
  .rdata:0x000000000000EB48        dw L"ar-LY\x0000"
  .rdata:0x000000000000EB54        dd 0x00000000
  .rdata:0x000000000000EB58 string_zhSG:
  .rdata:0x000000000000EB58        dw L"zh-SG\x0000"
  .rdata:0x000000000000EB64        dd 0x00000000
  .rdata:0x000000000000EB68 string_deLU:
  .rdata:0x000000000000EB68        dw L"de-LU\x0000"
  .rdata:0x000000000000EB74        dd 0x00000000
  .rdata:0x000000000000EB78 string_enCA:
  .rdata:0x000000000000EB78        dw L"en-CA\x0000"
  .rdata:0x000000000000EB84        dd 0x00000000
  .rdata:0x000000000000EB88 string_esGT:
  .rdata:0x000000000000EB88        dw L"es-GT\x0000"
  .rdata:0x000000000000EB94        dd 0x00000000
  .rdata:0x000000000000EB98 string_frCH:
  .rdata:0x000000000000EB98        dw L"fr-CH\x0000"
  .rdata:0x000000000000EBA4        dd 0x00000000
  .rdata:0x000000000000EBA8 string_hrBA:
  .rdata:0x000000000000EBA8        dw L"hr-BA\x0000"
  .rdata:0x000000000000EBB4        dd 0x00000000
  .rdata:0x000000000000EBB8 string_smjNO:
  .rdata:0x000000000000EBB8        dw L"smj-NO\x0000"
  .rdata:0x000000000000EBC6        dw 0x0000
  .rdata:0x000000000000EBC8 string_arDZ:
  .rdata:0x000000000000EBC8        dw L"ar-DZ\x0000"
  .rdata:0x000000000000EBD4        dd 0x00000000
  .rdata:0x000000000000EBD8 string_zhMO:
  .rdata:0x000000000000EBD8        dw L"zh-MO\x0000"
  .rdata:0x000000000000EBE4        dd 0x00000000
  .rdata:0x000000000000EBE8 string_deLI:
  .rdata:0x000000000000EBE8        dw L"de-LI\x0000"
  .rdata:0x000000000000EBF4        dd 0x00000000
  .rdata:0x000000000000EBF8 string_enNZ:
  .rdata:0x000000000000EBF8        dw L"en-NZ\x0000"
  .rdata:0x000000000000EC04        dd 0x00000000
  .rdata:0x000000000000EC08 string_esCR:
  .rdata:0x000000000000EC08        dw L"es-CR\x0000"
  .rdata:0x000000000000EC14        dd 0x00000000
  .rdata:0x000000000000EC18 string_frLU:
  .rdata:0x000000000000EC18        dw L"fr-LU\x0000"
  .rdata:0x000000000000EC24        dd 0x00000000
  .rdata:0x000000000000EC28 string_bsBALatn:
  .rdata:0x000000000000EC28        dw L"bs-BA-Latn\x0000"
  .rdata:0x000000000000EC3E        dw 0x0000
  .rdata:0x000000000000EC40 string_smjSE:
  .rdata:0x000000000000EC40        dw L"smj-SE\x0000"
  .rdata:0x000000000000EC4E        dw 0x0000
  .rdata:0x000000000000EC50 string_arMA:
  .rdata:0x000000000000EC50        dw L"ar-MA\x0000"
  .rdata:0x000000000000EC5C        dd 0x00000000
  .rdata:0x000000000000EC60 string_enIE:
  .rdata:0x000000000000EC60        dw L"en-IE\x0000"
  .rdata:0x000000000000EC6C        dd 0x00000000
  .rdata:0x000000000000EC70 string_esPA:
  .rdata:0x000000000000EC70        dw L"es-PA\x0000"
  .rdata:0x000000000000EC7C        dd 0x00000000
  .rdata:0x000000000000EC80 string_frMC:
  .rdata:0x000000000000EC80        dw L"fr-MC\x0000"
  .rdata:0x000000000000EC8C        dd 0x00000000
  .rdata:0x000000000000EC90 string_srBALatn:
  .rdata:0x000000000000EC90        dw L"sr-BA-Latn\x0000"
  .rdata:0x000000000000ECA6        dw 0x0000
  .rdata:0x000000000000ECA8 string_smaNO:
  .rdata:0x000000000000ECA8        dw L"sma-NO\x0000"
  .rdata:0x000000000000ECB6        dw 0x0000
  .rdata:0x000000000000ECB8 string_arTN:
  .rdata:0x000000000000ECB8        dw L"ar-TN\x0000"
  .rdata:0x000000000000ECC4        dd 0x00000000
  .rdata:0x000000000000ECC8 string_enZA:
  .rdata:0x000000000000ECC8        dw L"en-ZA\x0000"
  .rdata:0x000000000000ECD4        dd 0x00000000
  .rdata:0x000000000000ECD8 string_esDO:
  .rdata:0x000000000000ECD8        dw L"es-DO\x0000"
  .rdata:0x000000000000ECE4        dd 0x00000000
  .rdata:0x000000000000ECE8 string_srBACyrl:
  .rdata:0x000000000000ECE8        dw L"sr-BA-Cyrl\x0000"
  .rdata:0x000000000000ECFE        dw 0x0000
  .rdata:0x000000000000ED00 string_smaSE:
  .rdata:0x000000000000ED00        dw L"sma-SE\x0000"
  .rdata:0x000000000000ED0E        dw 0x0000
  .rdata:0x000000000000ED10 string_arOM:
  .rdata:0x000000000000ED10        dw L"ar-OM\x0000"
  .rdata:0x000000000000ED1C        dd 0x00000000
  .rdata:0x000000000000ED20 string_enJM:
  .rdata:0x000000000000ED20        dw L"en-JM\x0000"
  .rdata:0x000000000000ED2C        dd 0x00000000
  .rdata:0x000000000000ED30 string_esVE:
  .rdata:0x000000000000ED30        dw L"es-VE\x0000"
  .rdata:0x000000000000ED3C        dd 0x00000000
  .rdata:0x000000000000ED40 string_smsFI:
  .rdata:0x000000000000ED40        dw L"sms-FI\x0000"
  .rdata:0x000000000000ED4E        dw 0x0000
  .rdata:0x000000000000ED50 string_arYE:
  .rdata:0x000000000000ED50        dw L"ar-YE\x0000"
  .rdata:0x000000000000ED5C        dd 0x00000000
  .rdata:0x000000000000ED60 string_enCB:
  .rdata:0x000000000000ED60        dw L"en-CB\x0000"
  .rdata:0x000000000000ED6C        dd 0x00000000
  .rdata:0x000000000000ED70 string_esCO:
  .rdata:0x000000000000ED70        dw L"es-CO\x0000"
  .rdata:0x000000000000ED7C        dd 0x00000000
  .rdata:0x000000000000ED80 string_smnFI:
  .rdata:0x000000000000ED80        dw L"smn-FI\x0000"
  .rdata:0x000000000000ED8E        dw 0x0000
  .rdata:0x000000000000ED90 string_arSY:
  .rdata:0x000000000000ED90        dw L"ar-SY\x0000"
  .rdata:0x000000000000ED9C        dd 0x00000000
  .rdata:0x000000000000EDA0 string_enBZ:
  .rdata:0x000000000000EDA0        dw L"en-BZ\x0000"
  .rdata:0x000000000000EDAC        dd 0x00000000
  .rdata:0x000000000000EDB0 string_esPE:
  .rdata:0x000000000000EDB0        dw L"es-PE\x0000"
  .rdata:0x000000000000EDBC        dd 0x00000000
  .rdata:0x000000000000EDC0 string_arJO:
  .rdata:0x000000000000EDC0        dw L"ar-JO\x0000"
  .rdata:0x000000000000EDCC        dd 0x00000000
  .rdata:0x000000000000EDD0 string_enTT:
  .rdata:0x000000000000EDD0        dw L"en-TT\x0000"
  .rdata:0x000000000000EDDC        dd 0x00000000
  .rdata:0x000000000000EDE0 string_esAR:
  .rdata:0x000000000000EDE0        dw L"es-AR\x0000"
  .rdata:0x000000000000EDEC        dd 0x00000000
  .rdata:0x000000000000EDF0 string_arLB:
  .rdata:0x000000000000EDF0        dw L"ar-LB\x0000"
  .rdata:0x000000000000EDFC        dd 0x00000000
  .rdata:0x000000000000EE00 string_enZW:
  .rdata:0x000000000000EE00        dw L"en-ZW\x0000"
  .rdata:0x000000000000EE0C        dd 0x00000000
  .rdata:0x000000000000EE10 string_esEC:
  .rdata:0x000000000000EE10        dw L"es-EC\x0000"
  .rdata:0x000000000000EE1C        dd 0x00000000
  .rdata:0x000000000000EE20 string_arKW:
  .rdata:0x000000000000EE20        dw L"ar-KW\x0000"
  .rdata:0x000000000000EE2C        dd 0x00000000
  .rdata:0x000000000000EE30 string_enPH:
  .rdata:0x000000000000EE30        dw L"en-PH\x0000"
  .rdata:0x000000000000EE3C        dd 0x00000000
  .rdata:0x000000000000EE40 string_esCL:
  .rdata:0x000000000000EE40        dw L"es-CL\x0000"
  .rdata:0x000000000000EE4C        dd 0x00000000
  .rdata:0x000000000000EE50 string_arAE:
  .rdata:0x000000000000EE50        dw L"ar-AE\x0000"
  .rdata:0x000000000000EE5C        dd 0x00000000
  .rdata:0x000000000000EE60 string_esUY:
  .rdata:0x000000000000EE60        dw L"es-UY\x0000"
  .rdata:0x000000000000EE6C        dd 0x00000000
  .rdata:0x000000000000EE70 string_arBH:
  .rdata:0x000000000000EE70        dw L"ar-BH\x0000"
  .rdata:0x000000000000EE7C        dd 0x00000000
  .rdata:0x000000000000EE80 string_esPY:
  .rdata:0x000000000000EE80        dw L"es-PY\x0000"
  .rdata:0x000000000000EE8C        dd 0x00000000
  .rdata:0x000000000000EE90 string_arQA:
  .rdata:0x000000000000EE90        dw L"ar-QA\x0000"
  .rdata:0x000000000000EE9C        dd 0x00000000
  .rdata:0x000000000000EEA0 string_esBO:
  .rdata:0x000000000000EEA0        dw L"es-BO\x0000"
  .rdata:0x000000000000EEAC        dd 0x00000000
  .rdata:0x000000000000EEB0 string_esSV:
  .rdata:0x000000000000EEB0        dw L"es-SV\x0000"
  .rdata:0x000000000000EEBC        dd 0x00000000
  .rdata:0x000000000000EEC0 string_esHN:
  .rdata:0x000000000000EEC0        dw L"es-HN\x0000"
  .rdata:0x000000000000EECC        dd 0x00000000
  .rdata:0x000000000000EED0 string_esNI:
  .rdata:0x000000000000EED0        dw L"es-NI\x0000"
  .rdata:0x000000000000EEDC        dd 0x00000000
  .rdata:0x000000000000EEE0 string_esPR:
  .rdata:0x000000000000EEE0        dw L"es-PR\x0000"
  .rdata:0x000000000000EEEC        dd 0x00000000
  .rdata:0x000000000000EEF0 string_zhCHT:
  .rdata:0x000000000000EEF0        dw L"zh-CHT\x0000"
  .rdata:0x000000000000EEFE        dw 0x0000
  .rdata:0x000000000000EF00 data_0xEF00:
  .rdata:0x000000000000EF00        db "s\x00"
  .rdata:0x000000000000EF02        db "r\x00"
  .rdata:0x000000000000EF04        dq 0x0000000000000000
  .rdata:0x000000000000EF0C        dd 0x00000000
  .rdata:0x000000000000EF10 data_0xEF10:
  .rdata:0x000000000000EF10        dq va_ptr data_0xE500
  .rdata:0x000000000000EF18        db "B\x00"
  .rdata:0x000000000000EF1A        dd 0x00000000
  .rdata:0x000000000000EF1E        dw 0x0000
  .rdata:0x000000000000EF20        dq va_ptr data_0xE450; "a"
  .rdata:0x000000000000EF28        dq 0x000000000000002C
  .rdata:0x000000000000EF30        dq va_ptr string_afza; "af-za"
  .rdata:0x000000000000EF38        db "q\x00"
  .rdata:0x000000000000EF3A        dd 0x00000000
  .rdata:0x000000000000EF3E        dw 0x0000
  .rdata:0x000000000000EF40        dq va_ptr data_0xE2F0; "a"
  .rdata:0x000000000000EF48        dq 0x0000000000000000
  .rdata:0x000000000000EF50        dq va_ptr string_arae; "ar-ae"
  .rdata:0x000000000000EF58        dq 0x00000000000000D8
  .rdata:0x000000000000EF60        dq va_ptr string_arbh; "ar-bh"
  .rdata:0x000000000000EF68        dq 0x00000000000000DA
  .rdata:0x000000000000EF70        dq va_ptr string_ardz; "ar-dz"
  .rdata:0x000000000000EF78        dq 0x00000000000000B1
  .rdata:0x000000000000EF80        dq va_ptr string_areg; "ar-eg"
  .rdata:0x000000000000EF88        dq 0x00000000000000A0
  .rdata:0x000000000000EF90        dq va_ptr string_ariq; "ar-iq"
  .rdata:0x000000000000EF98        dq 0x000000000000008F
  .rdata:0x000000000000EFA0        dq va_ptr string_arjo; "ar-jo"
  .rdata:0x000000000000EFA8        dq 0x00000000000000CF
  .rdata:0x000000000000EFB0        dq va_ptr string_arkw; "ar-kw"
  .rdata:0x000000000000EFB8        dq 0x00000000000000D5
  .rdata:0x000000000000EFC0        dq va_ptr string_arlb; "ar-lb"
  .rdata:0x000000000000EFC8        dq 0x00000000000000D2
  .rdata:0x000000000000EFD0        dq va_ptr string_arly; "ar-ly"
  .rdata:0x000000000000EFD8        dq 0x00000000000000A9
  .rdata:0x000000000000EFE0        dq va_ptr string_arma; "ar-ma"
  .rdata:0x000000000000EFE8        dq 0x00000000000000B9
  .rdata:0x000000000000EFF0        dq va_ptr string_arom; "ar-om"
  .rdata:0x000000000000EFF8        dq 0x00000000000000C4
  .rdata:0x000000000000F000        dq va_ptr string_arqa; "ar-qa"
  .rdata:0x000000000000F008        dq 0x00000000000000DC
  .rdata:0x000000000000F010        dq va_ptr string_arsa; "ar-sa"
  .rdata:0x000000000000F018        db "C\x00"
  .rdata:0x000000000000F01A        dd 0x00000000
  .rdata:0x000000000000F01E        dw 0x0000
  .rdata:0x000000000000F020        dq va_ptr string_arsy; "ar-sy"
  .rdata:0x000000000000F028        dq 0x00000000000000CC
  .rdata:0x000000000000F030        dq va_ptr string_artn; "ar-tn"
  .rdata:0x000000000000F038        dq 0x00000000000000BF
  .rdata:0x000000000000F040        dq va_ptr string_arye; "ar-ye"
  .rdata:0x000000000000F048        dq 0x00000000000000C8
  .rdata:0x000000000000F050        dq va_ptr data_0xE438; "a"
  .rdata:0x000000000000F058        dq 0x0000000000000029
  .rdata:0x000000000000F060        dq va_ptr string_azazcyrl; "az-az-cyrl"
  .rdata:0x000000000000F068        dq 0x000000000000009B
  .rdata:0x000000000000F070        dq va_ptr string_azazlatn; "az-az-latn"
  .rdata:0x000000000000F078        db "k\x00"
  .rdata:0x000000000000F07A        dd 0x00000000
  .rdata:0x000000000000F07E        dw 0x0000
  .rdata:0x000000000000F080        dq va_ptr data_0xE3F8; "b"
  .rdata:0x000000000000F088        dq 0x0000000000000021
  .rdata:0x000000000000F090        dq va_ptr string_beby; "be-by"
  .rdata:0x000000000000F098        db "c\x00"
  .rdata:0x000000000000F09A        dd 0x00000000
  .rdata:0x000000000000F09E        dw 0x0000
  .rdata:0x000000000000F0A0        dq va_ptr data_0xE2F8; "b"
  .rdata:0x000000000000F0A8        dq 0x0000000000000001
  .rdata:0x000000000000F0B0        dq va_ptr string_bgbg; "bg-bg"
  .rdata:0x000000000000F0B8        db "D\x00"
  .rdata:0x000000000000F0BA        dd 0x00000000
  .rdata:0x000000000000F0BE        dw 0x0000
  .rdata:0x000000000000F0C0        dq va_ptr string_bnin; "bn-in"
  .rdata:0x000000000000F0C8        dq 0x000000000000007D
  .rdata:0x000000000000F0D0        dq va_ptr string_bsbalatn; "bs-ba-latn"
  .rdata:0x000000000000F0D8        dq 0x00000000000000B7
  .rdata:0x000000000000F0E0        dq va_ptr data_0xE300; "c"
  .rdata:0x000000000000F0E8        dq 0x0000000000000002
  .rdata:0x000000000000F0F0        dq va_ptr string_caes; "ca-es"
  .rdata:0x000000000000F0F8        db "E\x00"
  .rdata:0x000000000000F0FA        dd 0x00000000
  .rdata:0x000000000000F0FE        dw 0x0000
  .rdata:0x000000000000F100        dq va_ptr data_0xE318; "c"
  .rdata:0x000000000000F108        dq 0x0000000000000004
  .rdata:0x000000000000F110        dq va_ptr string_cscz; "cs-cz"
  .rdata:0x000000000000F118        db "G\x00"
  .rdata:0x000000000000F11A        dd 0x00000000
  .rdata:0x000000000000F11E        dw 0x0000
  .rdata:0x000000000000F120        dq va_ptr string_cygb; "cy-gb"
  .rdata:0x000000000000F128        dq 0x0000000000000087
  .rdata:0x000000000000F130        dq va_ptr data_0xE320; "d"
  .rdata:0x000000000000F138        dq 0x0000000000000005
  .rdata:0x000000000000F140        dq va_ptr string_dadk; "da-dk"
  .rdata:0x000000000000F148        db "H\x00"
  .rdata:0x000000000000F14A        dd 0x00000000
  .rdata:0x000000000000F14E        dw 0x0000
  .rdata:0x000000000000F150        dq va_ptr data_0xE328; "d"
  .rdata:0x000000000000F158        dq 0x0000000000000006
  .rdata:0x000000000000F160        dq va_ptr string_deat; "de-at"
  .rdata:0x000000000000F168        dq 0x00000000000000A2
  .rdata:0x000000000000F170        dq va_ptr string_dech; "de-ch"
  .rdata:0x000000000000F178        dq 0x0000000000000091
  .rdata:0x000000000000F180        dq va_ptr string_dede; "de-de"
  .rdata:0x000000000000F188        db "I\x00"
  .rdata:0x000000000000F18A        dd 0x00000000
  .rdata:0x000000000000F18E        dw 0x0000
  .rdata:0x000000000000F190        dq va_ptr string_deli; "de-li"
  .rdata:0x000000000000F198        dq 0x00000000000000B3
  .rdata:0x000000000000F1A0        dq va_ptr string_delu; "de-lu"
  .rdata:0x000000000000F1A8        dq 0x00000000000000AB
  .rdata:0x000000000000F1B0        dq va_ptr data_0xE4F8; "d"
  .rdata:0x000000000000F1B8        db "A\x00"
  .rdata:0x000000000000F1BA        dd 0x00000000
  .rdata:0x000000000000F1BE        dw 0x0000
  .rdata:0x000000000000F1C0        dq va_ptr string_divmv; "div-mv"
  .rdata:0x000000000000F1C8        dq 0x000000000000008B
  .rdata:0x000000000000F1D0        dq va_ptr data_0xE330; "e"
  .rdata:0x000000000000F1D8        dq 0x0000000000000007
  .rdata:0x000000000000F1E0        dq va_ptr string_elgr; "el-gr"
  .rdata:0x000000000000F1E8        db "J\x00"
  .rdata:0x000000000000F1EA        dd 0x00000000
  .rdata:0x000000000000F1EE        dw 0x0000
  .rdata:0x000000000000F1F0        dq va_ptr data_0xE338; "e"
  .rdata:0x000000000000F1F8        dq 0x0000000000000008
  .rdata:0x000000000000F200        dq va_ptr string_enau; "en-au"
  .rdata:0x000000000000F208        dq 0x00000000000000A3
  .rdata:0x000000000000F210        dq va_ptr string_enbz; "en-bz"
  .rdata:0x000000000000F218        dq 0x00000000000000CD
  .rdata:0x000000000000F220        dq va_ptr string_enca; "en-ca"
  .rdata:0x000000000000F228        dq 0x00000000000000AC
  .rdata:0x000000000000F230        dq va_ptr string_encb; "en-cb"
  .rdata:0x000000000000F238        dq 0x00000000000000C9
  .rdata:0x000000000000F240        dq va_ptr string_engb; "en-gb"
  .rdata:0x000000000000F248        dq 0x0000000000000092
  .rdata:0x000000000000F250        dq va_ptr string_enie; "en-ie"
  .rdata:0x000000000000F258        dq 0x00000000000000BA
  .rdata:0x000000000000F260        dq va_ptr string_enjm; "en-jm"
  .rdata:0x000000000000F268        dq 0x00000000000000C5
  .rdata:0x000000000000F270        dq va_ptr string_ennz; "en-nz"
  .rdata:0x000000000000F278        dq 0x00000000000000B4
  .rdata:0x000000000000F280        dq va_ptr string_enph; "en-ph"
  .rdata:0x000000000000F288        dq 0x00000000000000D6
  .rdata:0x000000000000F290        dq va_ptr string_entt; "en-tt"
  .rdata:0x000000000000F298        dq 0x00000000000000D0
  .rdata:0x000000000000F2A0        dq va_ptr string_enus; "en-us"
  .rdata:0x000000000000F2A8        db "K\x00"
  .rdata:0x000000000000F2AA        dd 0x00000000
  .rdata:0x000000000000F2AE        dw 0x0000
  .rdata:0x000000000000F2B0        dq va_ptr string_enza; "en-za"
  .rdata:0x000000000000F2B8        dq 0x00000000000000C0
  .rdata:0x000000000000F2C0        dq va_ptr string_enzw; "en-zw"
  .rdata:0x000000000000F2C8        dq 0x00000000000000D3
  .rdata:0x000000000000F2D0        dq va_ptr data_0xE340; "e"
  .rdata:0x000000000000F2D8        dq 0x0000000000000009
  .rdata:0x000000000000F2E0        dq va_ptr string_esar; "es-ar"
  .rdata:0x000000000000F2E8        dq 0x00000000000000D1
  .rdata:0x000000000000F2F0        dq va_ptr string_esbo; "es-bo"
  .rdata:0x000000000000F2F8        dq 0x00000000000000DD
  .rdata:0x000000000000F300        dq va_ptr string_escl; "es-cl"
  .rdata:0x000000000000F308        dq 0x00000000000000D7
  .rdata:0x000000000000F310        dq va_ptr string_esco; "es-co"
  .rdata:0x000000000000F318        dq 0x00000000000000CA
  .rdata:0x000000000000F320        dq va_ptr string_escr; "es-cr"
  .rdata:0x000000000000F328        dq 0x00000000000000B5
  .rdata:0x000000000000F330        dq va_ptr string_esdo; "es-do"
  .rdata:0x000000000000F338        dq 0x00000000000000C1
  .rdata:0x000000000000F340        dq va_ptr string_esec; "es-ec"
  .rdata:0x000000000000F348        dq 0x00000000000000D4
  .rdata:0x000000000000F350        dq va_ptr string_eses; "es-es"
  .rdata:0x000000000000F358        dq 0x00000000000000A4
  .rdata:0x000000000000F360        dq va_ptr string_esgt; "es-gt"
  .rdata:0x000000000000F368        dq 0x00000000000000AD
  .rdata:0x000000000000F370        dq va_ptr string_eshn; "es-hn"
  .rdata:0x000000000000F378        dq 0x00000000000000DF
  .rdata:0x000000000000F380        dq va_ptr string_esmx; "es-mx"
  .rdata:0x000000000000F388        dq 0x0000000000000093
  .rdata:0x000000000000F390        dq va_ptr string_esni; "es-ni"
  .rdata:0x000000000000F398        dq 0x00000000000000E0
  .rdata:0x000000000000F3A0        dq va_ptr string_espa; "es-pa"
  .rdata:0x000000000000F3A8        dq 0x00000000000000BB
  .rdata:0x000000000000F3B0        dq va_ptr string_espe; "es-pe"
  .rdata:0x000000000000F3B8        dq 0x00000000000000CE
  .rdata:0x000000000000F3C0        dq va_ptr string_espr; "es-pr"
  .rdata:0x000000000000F3C8        dq 0x00000000000000E1
  .rdata:0x000000000000F3D0        dq va_ptr string_espy; "es-py"
  .rdata:0x000000000000F3D8        dq 0x00000000000000DB
  .rdata:0x000000000000F3E0        dq va_ptr string_essv; "es-sv"
  .rdata:0x000000000000F3E8        dq 0x00000000000000DE
  .rdata:0x000000000000F3F0        dq va_ptr string_esuy; "es-uy"
  .rdata:0x000000000000F3F8        dq 0x00000000000000D9
  .rdata:0x000000000000F400        dq va_ptr string_esve; "es-ve"
  .rdata:0x000000000000F408        dq 0x00000000000000C6
  .rdata:0x000000000000F410        dq va_ptr data_0xE408; "e"
  .rdata:0x000000000000F418        dq 0x0000000000000023
  .rdata:0x000000000000F420        dq va_ptr string_etee; "et-ee"
  .rdata:0x000000000000F428        db "e\x00"
  .rdata:0x000000000000F42A        dd 0x00000000
  .rdata:0x000000000000F42E        dw 0x0000
  .rdata:0x000000000000F430        dq va_ptr data_0xE440; "e"
  .rdata:0x000000000000F438        dq 0x000000000000002A
  .rdata:0x000000000000F440        dq va_ptr string_eues; "eu-es"
  .rdata:0x000000000000F448        db "l\x00"
  .rdata:0x000000000000F44A        dd 0x00000000
  .rdata:0x000000000000F44E        dw 0x0000
  .rdata:0x000000000000F450        dq va_ptr data_0xE420; "f"
  .rdata:0x000000000000F458        dq 0x0000000000000026
  .rdata:0x000000000000F460        dq va_ptr string_fair; "fa-ir"
  .rdata:0x000000000000F468        db "h\x00"
  .rdata:0x000000000000F46A        dd 0x00000000
  .rdata:0x000000000000F46E        dw 0x0000
  .rdata:0x000000000000F470        dq va_ptr data_0xE348; "f"
  .rdata:0x000000000000F478        dq 0x000000000000000A
  .rdata:0x000000000000F480        dq va_ptr string_fifi; "fi-fi"
  .rdata:0x000000000000F488        db "L\x00"
  .rdata:0x000000000000F48A        dd 0x00000000
  .rdata:0x000000000000F48E        dw 0x0000
  .rdata:0x000000000000F490        dq va_ptr data_0xE460; "f"
  .rdata:0x000000000000F498        db ".\x00"
  .rdata:0x000000000000F49A        dd 0x00000000
  .rdata:0x000000000000F49E        dw 0x0000
  .rdata:0x000000000000F4A0        dq va_ptr string_fofo; "fo-fo"
  .rdata:0x000000000000F4A8        db "s\x00"
  .rdata:0x000000000000F4AA        dd 0x00000000
  .rdata:0x000000000000F4AE        dw 0x0000
  .rdata:0x000000000000F4B0        dq va_ptr data_0xE350; "f"
  .rdata:0x000000000000F4B8        dq 0x000000000000000B
  .rdata:0x000000000000F4C0        dq va_ptr string_frbe; "fr-be"
  .rdata:0x000000000000F4C8        dq 0x0000000000000094
  .rdata:0x000000000000F4D0        dq va_ptr string_frca; "fr-ca"
  .rdata:0x000000000000F4D8        dq 0x00000000000000A5
  .rdata:0x000000000000F4E0        dq va_ptr string_frch; "fr-ch"
  .rdata:0x000000000000F4E8        dq 0x00000000000000AE
  .rdata:0x000000000000F4F0        dq va_ptr string_frfr; "fr-fr"
  .rdata:0x000000000000F4F8        db "M\x00"
  .rdata:0x000000000000F4FA        dd 0x00000000
  .rdata:0x000000000000F4FE        dw 0x0000
  .rdata:0x000000000000F500        dq va_ptr string_frlu; "fr-lu"
  .rdata:0x000000000000F508        dq 0x00000000000000B6
  .rdata:0x000000000000F510        dq va_ptr string_frmc; "fr-mc"
  .rdata:0x000000000000F518        dq 0x00000000000000BC
  .rdata:0x000000000000F520        dq va_ptr data_0xE4E0; "g"
  .rdata:0x000000000000F528        dq 0x000000000000003E
  .rdata:0x000000000000F530        dq va_ptr string_gles; "gl-es"
  .rdata:0x000000000000F538        dq 0x0000000000000088
  .rdata:0x000000000000F540        dq va_ptr data_0xE4A8; "g"
  .rdata:0x000000000000F548        db "7\x00"
  .rdata:0x000000000000F54A        dd 0x00000000
  .rdata:0x000000000000F54E        dw 0x0000
  .rdata:0x000000000000F550        dq va_ptr string_guin; "gu-in"
  .rdata:0x000000000000F558        dq 0x000000000000007F
  .rdata:0x000000000000F560        dq va_ptr data_0xE358; "h"
  .rdata:0x000000000000F568        dq 0x000000000000000C
  .rdata:0x000000000000F570        dq va_ptr string_heil; "he-il"
  .rdata:0x000000000000F578        db "N\x00"
  .rdata:0x000000000000F57A        dd 0x00000000
  .rdata:0x000000000000F57E        dw 0x0000
  .rdata:0x000000000000F580        dq va_ptr data_0xE468; "h"
  .rdata:0x000000000000F588        dq 0x000000000000002F
  .rdata:0x000000000000F590        dq va_ptr string_hiin; "hi-in"
  .rdata:0x000000000000F598        db "t\x00"
  .rdata:0x000000000000F59A        dd 0x00000000
  .rdata:0x000000000000F59E        dw 0x0000
  .rdata:0x000000000000F5A0        dq va_ptr data_0xE3B8; "h"
  .rdata:0x000000000000F5A8        dq 0x0000000000000018
  .rdata:0x000000000000F5B0        dq va_ptr string_hrba; "hr-ba"
  .rdata:0x000000000000F5B8        dq 0x00000000000000AF
  .rdata:0x000000000000F5C0        dq va_ptr string_hrhr; "hr-hr"
  .rdata:0x000000000000F5C8        db "Z\x00"
  .rdata:0x000000000000F5CA        dd 0x00000000
  .rdata:0x000000000000F5CE        dw 0x0000
  .rdata:0x000000000000F5D0        dq va_ptr data_0xE360; "h"
  .rdata:0x000000000000F5D8        dq 0x000000000000000D
  .rdata:0x000000000000F5E0        dq va_ptr string_huhu; "hu-hu"
  .rdata:0x000000000000F5E8        db "O\x00"
  .rdata:0x000000000000F5EA        dd 0x00000000
  .rdata:0x000000000000F5EE        dw 0x0000
  .rdata:0x000000000000F5F0        dq va_ptr data_0xE430; "h"
  .rdata:0x000000000000F5F8        dq 0x0000000000000028
  .rdata:0x000000000000F600        dq va_ptr string_hyam; "hy-am"
  .rdata:0x000000000000F608        db "j\x00"
  .rdata:0x000000000000F60A        dd 0x00000000
  .rdata:0x000000000000F60E        dw 0x0000
  .rdata:0x000000000000F610        dq va_ptr data_0xE3F0; "i"
  .rdata:0x000000000000F618        dq 0x000000000000001F
  .rdata:0x000000000000F620        dq va_ptr string_idid; "id-id"
  .rdata:0x000000000000F628        db "a\x00"
  .rdata:0x000000000000F62A        dd 0x00000000
  .rdata:0x000000000000F62E        dw 0x0000
  .rdata:0x000000000000F630        dq va_ptr data_0xE368; "i"
  .rdata:0x000000000000F638        dq 0x000000000000000E
  .rdata:0x000000000000F640        dq va_ptr string_isis; "is-is"
  .rdata:0x000000000000F648        db "P\x00"
  .rdata:0x000000000000F64A        dd 0x00000000
  .rdata:0x000000000000F64E        dw 0x0000
  .rdata:0x000000000000F650        dq va_ptr data_0xE370; "i"
  .rdata:0x000000000000F658        dq 0x000000000000000F
  .rdata:0x000000000000F660        dq va_ptr string_itch; "it-ch"
  .rdata:0x000000000000F668        dq 0x0000000000000095
  .rdata:0x000000000000F670        dq va_ptr string_itit; "it-it"
  .rdata:0x000000000000F678        db "Q\x00"
  .rdata:0x000000000000F67A        dd 0x00000000
  .rdata:0x000000000000F67E        dw 0x0000
  .rdata:0x000000000000F680        dq va_ptr data_0xE378; "j"
  .rdata:0x000000000000F688        dq 0x0000000000000010
  .rdata:0x000000000000F690        dq va_ptr string_jajp; "ja-jp"
  .rdata:0x000000000000F698        db "R\x00"
  .rdata:0x000000000000F69A        dd 0x00000000
  .rdata:0x000000000000F69E        dw 0x0000
  .rdata:0x000000000000F6A0        dq va_ptr data_0xE458; "k"
  .rdata:0x000000000000F6A8        dq 0x000000000000002D
  .rdata:0x000000000000F6B0        dq va_ptr string_kage; "ka-ge"
  .rdata:0x000000000000F6B8        db "r\x00"
  .rdata:0x000000000000F6BA        dd 0x00000000
  .rdata:0x000000000000F6BE        dw 0x0000
  .rdata:0x000000000000F6C0        dq va_ptr data_0xE478; "k"
  .rdata:0x000000000000F6C8        db "1\x00"
  .rdata:0x000000000000F6CA        dd 0x00000000
  .rdata:0x000000000000F6CE        dw 0x0000
  .rdata:0x000000000000F6D0        dq va_ptr string_kkkz; "kk-kz"
  .rdata:0x000000000000F6D8        db "x\x00"
  .rdata:0x000000000000F6DA        dd 0x00000000
  .rdata:0x000000000000F6DE        dw 0x0000
  .rdata:0x000000000000F6E0        dq va_ptr data_0xE4C0; "k"
  .rdata:0x000000000000F6E8        dq 0x000000000000003A
  .rdata:0x000000000000F6F0        dq va_ptr string_knin; "kn-in"
  .rdata:0x000000000000F6F8        dq 0x0000000000000082
  .rdata:0x000000000000F700        dq va_ptr data_0xE380; "k"
  .rdata:0x000000000000F708        dq 0x0000000000000011
  .rdata:0x000000000000F710        dq va_ptr data_0xE4E8; "k"
  .rdata:0x000000000000F718        dq 0x000000000000003F
  .rdata:0x000000000000F720        dq va_ptr string_kokin; "kok-in"
  .rdata:0x000000000000F728        dq 0x0000000000000089
  .rdata:0x000000000000F730        dq va_ptr string_kokr; "ko-kr"
  .rdata:0x000000000000F738        db "S\x00"
  .rdata:0x000000000000F73A        dd 0x00000000
  .rdata:0x000000000000F73E        dw 0x0000
  .rdata:0x000000000000F740        dq va_ptr data_0xE480; "k"
  .rdata:0x000000000000F748        db "2\x00"
  .rdata:0x000000000000F74A        dd 0x00000000
  .rdata:0x000000000000F74E        dw 0x0000
  .rdata:0x000000000000F750        dq va_ptr string_kykg; "ky-kg"
  .rdata:0x000000000000F758        db "y\x00"
  .rdata:0x000000000000F75A        dd 0x00000000
  .rdata:0x000000000000F75E        dw 0x0000
  .rdata:0x000000000000F760        dq va_ptr data_0xE418; "l"
  .rdata:0x000000000000F768        dq 0x0000000000000025
  .rdata:0x000000000000F770        dq va_ptr string_ltlt; "lt-lt"
  .rdata:0x000000000000F778        db "g\x00"
  .rdata:0x000000000000F77A        dd 0x00000000
  .rdata:0x000000000000F77E        dw 0x0000
  .rdata:0x000000000000F780        dq va_ptr data_0xE410; "l"
  .rdata:0x000000000000F788        dq 0x0000000000000024
  .rdata:0x000000000000F790        dq va_ptr string_lvlv; "lv-lv"
  .rdata:0x000000000000F798        db "f\x00"
  .rdata:0x000000000000F79A        dd 0x00000000
  .rdata:0x000000000000F79E        dw 0x0000
  .rdata:0x000000000000F7A0        dq va_ptr string_minz; "mi-nz"
  .rdata:0x000000000000F7A8        dq 0x000000000000008E
  .rdata:0x000000000000F7B0        dq va_ptr data_0xE448; "m"
  .rdata:0x000000000000F7B8        dq 0x000000000000002B
  .rdata:0x000000000000F7C0        dq va_ptr string_mkmk; "mk-mk"
  .rdata:0x000000000000F7C8        db "m\x00"
  .rdata:0x000000000000F7CA        dd 0x00000000
  .rdata:0x000000000000F7CE        dw 0x0000
  .rdata:0x000000000000F7D0        dq va_ptr string_mlin; "ml-in"
  .rdata:0x000000000000F7D8        dq 0x0000000000000083
  .rdata:0x000000000000F7E0        dq va_ptr data_0xE4D8; "m"
  .rdata:0x000000000000F7E8        dq 0x000000000000003D
  .rdata:0x000000000000F7F0        dq va_ptr string_mnmn; "mn-mn"
  .rdata:0x000000000000F7F8        dq 0x0000000000000086
  .rdata:0x000000000000F800        dq va_ptr data_0xE4C8; "m"
  .rdata:0x000000000000F808        dq 0x000000000000003B
  .rdata:0x000000000000F810        dq va_ptr string_mrin; "mr-in"
  .rdata:0x000000000000F818        dq 0x0000000000000084
  .rdata:0x000000000000F820        dq va_ptr data_0xE470; "m"
  .rdata:0x000000000000F828        db "0\x00"
  .rdata:0x000000000000F82A        dd 0x00000000
  .rdata:0x000000000000F82E        dw 0x0000
  .rdata:0x000000000000F830        dq va_ptr string_msbn; "ms-bn"
  .rdata:0x000000000000F838        dq 0x000000000000009D
  .rdata:0x000000000000F840        dq va_ptr string_msmy; "ms-my"
  .rdata:0x000000000000F848        db "w\x00"
  .rdata:0x000000000000F84A        dd 0x00000000
  .rdata:0x000000000000F84E        dw 0x0000
  .rdata:0x000000000000F850        dq va_ptr string_mtmt; "mt-mt"
  .rdata:0x000000000000F858        db "u\x00"
  .rdata:0x000000000000F85A        dd 0x00000000
  .rdata:0x000000000000F85E        dw 0x0000
  .rdata:0x000000000000F860        dq va_ptr string_nbno; "nb-no"
  .rdata:0x000000000000F868        db "U\x00"
  .rdata:0x000000000000F86A        dd 0x00000000
  .rdata:0x000000000000F86E        dw 0x0000
  .rdata:0x000000000000F870        dq va_ptr data_0xE388; "n"
  .rdata:0x000000000000F878        dq 0x0000000000000012
  .rdata:0x000000000000F880        dq va_ptr string_nlbe; "nl-be"
  .rdata:0x000000000000F888        dq 0x0000000000000096
  .rdata:0x000000000000F890        dq va_ptr string_nlnl; "nl-nl"
  .rdata:0x000000000000F898        db "T\x00"
  .rdata:0x000000000000F89A        dd 0x00000000
  .rdata:0x000000000000F89E        dw 0x0000
  .rdata:0x000000000000F8A0        dq va_ptr string_nnno; "nn-no"
  .rdata:0x000000000000F8A8        dq 0x0000000000000097
  .rdata:0x000000000000F8B0        dq va_ptr data_0xE390; "n"
  .rdata:0x000000000000F8B8        dq 0x0000000000000013
  .rdata:0x000000000000F8C0        dq va_ptr string_nsza; "ns-za"
  .rdata:0x000000000000F8C8        dq 0x000000000000008D
  .rdata:0x000000000000F8D0        dq va_ptr data_0xE4A0; "p"
  .rdata:0x000000000000F8D8        db "6\x00"
  .rdata:0x000000000000F8DA        dd 0x00000000
  .rdata:0x000000000000F8DE        dw 0x0000
  .rdata:0x000000000000F8E0        dq va_ptr string_pain; "pa-in"
  .rdata:0x000000000000F8E8        dq 0x000000000000007E
  .rdata:0x000000000000F8F0        dq va_ptr data_0xE398; "p"
  .rdata:0x000000000000F8F8        dq 0x0000000000000014
  .rdata:0x000000000000F900        dq va_ptr string_plpl; "pl-pl"
  .rdata:0x000000000000F908        db "V\x00"
  .rdata:0x000000000000F90A        dd 0x00000000
  .rdata:0x000000000000F90E        dw 0x0000
  .rdata:0x000000000000F910        dq va_ptr data_0xE3A0; "p"
  .rdata:0x000000000000F918        dq 0x0000000000000015
  .rdata:0x000000000000F920        dq va_ptr string_ptbr; "pt-br"
  .rdata:0x000000000000F928        db "W\x00"
  .rdata:0x000000000000F92A        dd 0x00000000
  .rdata:0x000000000000F92E        dw 0x0000
  .rdata:0x000000000000F930        dq va_ptr string_ptpt; "pt-pt"
  .rdata:0x000000000000F938        dq 0x0000000000000098
  .rdata:0x000000000000F940        dq va_ptr string_quzbo; "quz-bo"
  .rdata:0x000000000000F948        dq 0x000000000000008C
  .rdata:0x000000000000F950        dq va_ptr string_quzec; "quz-ec"
  .rdata:0x000000000000F958        dq 0x000000000000009F
  .rdata:0x000000000000F960        dq va_ptr string_quzpe; "quz-pe"
  .rdata:0x000000000000F968        dq 0x00000000000000A8
  .rdata:0x000000000000F970        dq va_ptr data_0xE3A8; "r"
  .rdata:0x000000000000F978        dq 0x0000000000000016
  .rdata:0x000000000000F980        dq va_ptr string_roro; "ro-ro"
  .rdata:0x000000000000F988        db "X\x00"
  .rdata:0x000000000000F98A        dd 0x00000000
  .rdata:0x000000000000F98E        dw 0x0000
  .rdata:0x000000000000F990        dq va_ptr data_0xE3B0; "r"
  .rdata:0x000000000000F998        dq 0x0000000000000017
  .rdata:0x000000000000F9A0        dq va_ptr string_ruru; "ru-ru"
  .rdata:0x000000000000F9A8        db "Y\x00"
  .rdata:0x000000000000F9AA        dd 0x00000000
  .rdata:0x000000000000F9AE        dw 0x0000
  .rdata:0x000000000000F9B0        dq va_ptr data_0xE4D0; "s"
  .rdata:0x000000000000F9B8        dq 0x000000000000003C
  .rdata:0x000000000000F9C0        dq va_ptr string_sain; "sa-in"
  .rdata:0x000000000000F9C8        dq 0x0000000000000085
  .rdata:0x000000000000F9D0        dq va_ptr string_sefi; "se-fi"
  .rdata:0x000000000000F9D8        dq 0x00000000000000A7
  .rdata:0x000000000000F9E0        dq va_ptr string_seno; "se-no"
  .rdata:0x000000000000F9E8        db "v\x00"
  .rdata:0x000000000000F9EA        dd 0x00000000
  .rdata:0x000000000000F9EE        dw 0x0000
  .rdata:0x000000000000F9F0        dq va_ptr string_sese; "se-se"
  .rdata:0x000000000000F9F8        dq 0x000000000000009C
  .rdata:0x000000000000FA00        dq va_ptr data_0xE3C0; "s"
  .rdata:0x000000000000FA08        dq 0x0000000000000019
  .rdata:0x000000000000FA10        dq va_ptr string_sksk; "sk-sk"
  .rdata:0x000000000000FA18        dq 0x000000000000005B
  .rdata:0x000000000000FA20        dq va_ptr data_0xE400; "s"
  .rdata:0x000000000000FA28        dq 0x0000000000000022
  .rdata:0x000000000000FA30        dq va_ptr string_slsi; "sl-si"
  .rdata:0x000000000000FA38        db "d\x00"
  .rdata:0x000000000000FA3A        dd 0x00000000
  .rdata:0x000000000000FA3E        dw 0x0000
  .rdata:0x000000000000FA40        dq va_ptr string_smano; "sma-no"
  .rdata:0x000000000000FA48        dq 0x00000000000000BE
  .rdata:0x000000000000FA50        dq va_ptr string_smase; "sma-se"
  .rdata:0x000000000000FA58        dq 0x00000000000000C3
  .rdata:0x000000000000FA60        dq va_ptr string_smjno; "smj-no"
  .rdata:0x000000000000FA68        dq 0x00000000000000B0
  .rdata:0x000000000000FA70        dq va_ptr string_smjse; "smj-se"
  .rdata:0x000000000000FA78        dq 0x00000000000000B8
  .rdata:0x000000000000FA80        dq va_ptr string_smnfi; "smn-fi"
  .rdata:0x000000000000FA88        dq 0x00000000000000CB
  .rdata:0x000000000000FA90        dq va_ptr string_smsfi; "sms-fi"
  .rdata:0x000000000000FA98        dq 0x00000000000000C7
  .rdata:0x000000000000FAA0        dq va_ptr data_0xE3C8; "s"
  .rdata:0x000000000000FAA8        dq 0x000000000000001A
  .rdata:0x000000000000FAB0        dq va_ptr string_sqal; "sq-al"
  .rdata:0x000000000000FAB8        dq 0x000000000000005C
  .rdata:0x000000000000FAC0        dq va_ptr data_0xEF00; "s"
  .rdata:0x000000000000FAC8        dq 0x00000000000000E3
  .rdata:0x000000000000FAD0        dq va_ptr string_srbacyrl; "sr-ba-cyrl"
  .rdata:0x000000000000FAD8        dq 0x00000000000000C2
  .rdata:0x000000000000FAE0        dq va_ptr string_srbalatn; "sr-ba-latn"
  .rdata:0x000000000000FAE8        dq 0x00000000000000BD
  .rdata:0x000000000000FAF0        dq va_ptr string_srspcyrl; "sr-sp-cyrl"
  .rdata:0x000000000000FAF8        dq 0x00000000000000A6
  .rdata:0x000000000000FB00        dq va_ptr string_srsplatn; "sr-sp-latn"
  .rdata:0x000000000000FB08        dq 0x0000000000000099
  .rdata:0x000000000000FB10        dq va_ptr data_0xE3D0; "s"
  .rdata:0x000000000000FB18        dq 0x000000000000001B
  .rdata:0x000000000000FB20        dq va_ptr string_svfi; "sv-fi"
  .rdata:0x000000000000FB28        dq 0x000000000000009A
  .rdata:0x000000000000FB30        dq va_ptr string_svse; "sv-se"
  .rdata:0x000000000000FB38        dq 0x000000000000005D
  .rdata:0x000000000000FB40        dq va_ptr data_0xE488; "s"
  .rdata:0x000000000000FB48        db "3\x00"
  .rdata:0x000000000000FB4A        dd 0x00000000
  .rdata:0x000000000000FB4E        dw 0x0000
  .rdata:0x000000000000FB50        dq va_ptr string_swke; "sw-ke"
  .rdata:0x000000000000FB58        db "z\x00"
  .rdata:0x000000000000FB5A        dd 0x00000000
  .rdata:0x000000000000FB5E        dw 0x0000
  .rdata:0x000000000000FB60        dq va_ptr data_0xE4F0; "s"
  .rdata:0x000000000000FB68        dq 0x0000000000000040
  .rdata:0x000000000000FB70        dq va_ptr string_syrsy; "syr-sy"
  .rdata:0x000000000000FB78        dq 0x000000000000008A
  .rdata:0x000000000000FB80        dq va_ptr data_0xE4B0; "t"
  .rdata:0x000000000000FB88        db "8\x00"
  .rdata:0x000000000000FB8A        dd 0x00000000
  .rdata:0x000000000000FB8E        dw 0x0000
  .rdata:0x000000000000FB90        dq va_ptr string_tain; "ta-in"
  .rdata:0x000000000000FB98        dq 0x0000000000000080
  .rdata:0x000000000000FBA0        dq va_ptr data_0xE4B8; "t"
  .rdata:0x000000000000FBA8        db "9\x00"
  .rdata:0x000000000000FBAA        dd 0x00000000
  .rdata:0x000000000000FBAE        dw 0x0000
  .rdata:0x000000000000FBB0        dq va_ptr string_tein; "te-in"
  .rdata:0x000000000000FBB8        dq 0x0000000000000081
  .rdata:0x000000000000FBC0        dq va_ptr data_0xE3D8; "t"
  .rdata:0x000000000000FBC8        dq 0x000000000000001C
  .rdata:0x000000000000FBD0        dq va_ptr string_thth; "th-th"
  .rdata:0x000000000000FBD8        dq 0x000000000000005E
  .rdata:0x000000000000FBE0        dq va_ptr string_tnza; "tn-za"
  .rdata:0x000000000000FBE8        db "n\x00"
  .rdata:0x000000000000FBEA        dd 0x00000000
  .rdata:0x000000000000FBEE        dw 0x0000
  .rdata:0x000000000000FBF0        dq va_ptr data_0xE3E0; "t"
  .rdata:0x000000000000FBF8        dq 0x000000000000001D
  .rdata:0x000000000000FC00        dq va_ptr string_trtr; "tr-tr"
  .rdata:0x000000000000FC08        dq 0x000000000000005F
  .rdata:0x000000000000FC10        dq va_ptr data_0xE498; "t"
  .rdata:0x000000000000FC18        db "5\x00"
  .rdata:0x000000000000FC1A        dd 0x00000000
  .rdata:0x000000000000FC1E        dw 0x0000
  .rdata:0x000000000000FC20        dq va_ptr string_ttru; "tt-ru"
  .rdata:0x000000000000FC28        dq 0x000000000000007C
  .rdata:0x000000000000FC30        dq va_ptr data_0xCE10; "u"
  .rdata:0x000000000000FC38        db " \x00"
  .rdata:0x000000000000FC3A        dd 0x00000000
  .rdata:0x000000000000FC3E        dw 0x0000
  .rdata:0x000000000000FC40        dq va_ptr string_ukua; "uk-ua"
  .rdata:0x000000000000FC48        db "b\x00"
  .rdata:0x000000000000FC4A        dd 0x00000000
  .rdata:0x000000000000FC4E        dw 0x0000
  .rdata:0x000000000000FC50        dq va_ptr data_0xE3E8; "u"
  .rdata:0x000000000000FC58        dq 0x000000000000001E
  .rdata:0x000000000000FC60        dq va_ptr string_urpk; "ur-pk"
  .rdata:0x000000000000FC68        dq 0x0000000000000060
  .rdata:0x000000000000FC70        dq va_ptr data_0xE490; "u"
  .rdata:0x000000000000FC78        db "4\x00"
  .rdata:0x000000000000FC7A        dd 0x00000000
  .rdata:0x000000000000FC7E        dw 0x0000
  .rdata:0x000000000000FC80        dq va_ptr string_uzuzcyrl; "uz-uz-cyrl"
  .rdata:0x000000000000FC88        dq 0x000000000000009E
  .rdata:0x000000000000FC90        dq va_ptr string_uzuzlatn; "uz-uz-latn"
  .rdata:0x000000000000FC98        dq 0x000000000000007B
  .rdata:0x000000000000FCA0        dq va_ptr data_0xE428; "v"
  .rdata:0x000000000000FCA8        dq 0x0000000000000027
  .rdata:0x000000000000FCB0        dq va_ptr string_vivn; "vi-vn"
  .rdata:0x000000000000FCB8        db "i\x00"
  .rdata:0x000000000000FCBA        dd 0x00000000
  .rdata:0x000000000000FCBE        dw 0x0000
  .rdata:0x000000000000FCC0        dq va_ptr string_xhza; "xh-za"
  .rdata:0x000000000000FCC8        db "o\x00"
  .rdata:0x000000000000FCCA        dd 0x00000000
  .rdata:0x000000000000FCCE        dw 0x0000
  .rdata:0x000000000000FCD0        dq va_ptr string_zhchs; "zh-chs"
  .rdata:0x000000000000FCD8        dq 0x0000000000000003
  .rdata:0x000000000000FCE0        dq va_ptr string_zhcht; "zh-cht"
  .rdata:0x000000000000FCE8        dq 0x00000000000000E2
  .rdata:0x000000000000FCF0        dq va_ptr string_zhcn; "zh-cn"
  .rdata:0x000000000000FCF8        dq 0x0000000000000090
  .rdata:0x000000000000FD00        dq va_ptr string_zhhk; "zh-hk"
  .rdata:0x000000000000FD08        dq 0x00000000000000A1
  .rdata:0x000000000000FD10        dq va_ptr string_zhmo; "zh-mo"
  .rdata:0x000000000000FD18        dq 0x00000000000000B2
  .rdata:0x000000000000FD20        dq va_ptr string_zhsg; "zh-sg"
  .rdata:0x000000000000FD28        dq 0x00000000000000AA
  .rdata:0x000000000000FD30        dq va_ptr string_zhtw; "zh-tw"
  .rdata:0x000000000000FD38        db "F\x00"
  .rdata:0x000000000000FD3A        dd 0x00000000
  .rdata:0x000000000000FD3E        dw 0x0000
  .rdata:0x000000000000FD40        dq va_ptr string_zuza; "zu-za"
  .rdata:0x000000000000FD48        db "p\x00"
  .rdata:0x000000000000FD4A        dd 0x00000000
  .rdata:0x000000000000FD4E        dw 0x0000
  .rdata:0x000000000000FD50 string_afza:
  .rdata:0x000000000000FD50        dw L"af-za\x0000"
  .rdata:0x000000000000FD5C        dd 0x00000000
  .rdata:0x000000000000FD60 string_arae:
  .rdata:0x000000000000FD60        dw L"ar-ae\x0000"
  .rdata:0x000000000000FD6C        dd 0x00000000
  .rdata:0x000000000000FD70 string_arbh:
  .rdata:0x000000000000FD70        dw L"ar-bh\x0000"
  .rdata:0x000000000000FD7C        dd 0x00000000
  .rdata:0x000000000000FD80 string_ardz:
  .rdata:0x000000000000FD80        dw L"ar-dz\x0000"
  .rdata:0x000000000000FD8C        dd 0x00000000
  .rdata:0x000000000000FD90 string_areg:
  .rdata:0x000000000000FD90        dw L"ar-eg\x0000"
  .rdata:0x000000000000FD9C        dd 0x00000000
  .rdata:0x000000000000FDA0 string_ariq:
  .rdata:0x000000000000FDA0        dw L"ar-iq\x0000"
  .rdata:0x000000000000FDAC        dd 0x00000000
  .rdata:0x000000000000FDB0 string_arjo:
  .rdata:0x000000000000FDB0        dw L"ar-jo\x0000"
  .rdata:0x000000000000FDBC        dd 0x00000000
  .rdata:0x000000000000FDC0 string_arkw:
  .rdata:0x000000000000FDC0        dw L"ar-kw\x0000"
  .rdata:0x000000000000FDCC        dd 0x00000000
  .rdata:0x000000000000FDD0 string_arlb:
  .rdata:0x000000000000FDD0        dw L"ar-lb\x0000"
  .rdata:0x000000000000FDDC        dd 0x00000000
  .rdata:0x000000000000FDE0 string_arly:
  .rdata:0x000000000000FDE0        dw L"ar-ly\x0000"
  .rdata:0x000000000000FDEC        dd 0x00000000
  .rdata:0x000000000000FDF0 string_arma:
  .rdata:0x000000000000FDF0        dw L"ar-ma\x0000"
  .rdata:0x000000000000FDFC        dd 0x00000000
  .rdata:0x000000000000FE00 string_arom:
  .rdata:0x000000000000FE00        dw L"ar-om\x0000"
  .rdata:0x000000000000FE0C        dd 0x00000000
  .rdata:0x000000000000FE10 string_arqa:
  .rdata:0x000000000000FE10        dw L"ar-qa\x0000"
  .rdata:0x000000000000FE1C        dd 0x00000000
  .rdata:0x000000000000FE20 string_arsa:
  .rdata:0x000000000000FE20        dw L"ar-sa\x0000"
  .rdata:0x000000000000FE2C        dd 0x00000000
  .rdata:0x000000000000FE30 string_arsy:
  .rdata:0x000000000000FE30        dw L"ar-sy\x0000"
  .rdata:0x000000000000FE3C        dd 0x00000000
  .rdata:0x000000000000FE40 string_artn:
  .rdata:0x000000000000FE40        dw L"ar-tn\x0000"
  .rdata:0x000000000000FE4C        dd 0x00000000
  .rdata:0x000000000000FE50 string_arye:
  .rdata:0x000000000000FE50        dw L"ar-ye\x0000"
  .rdata:0x000000000000FE5C        dd 0x00000000
  .rdata:0x000000000000FE60 string_azazcyrl:
  .rdata:0x000000000000FE60        dw L"az-az-cyrl\x0000"
  .rdata:0x000000000000FE76        dw 0x0000
  .rdata:0x000000000000FE78 string_azazlatn:
  .rdata:0x000000000000FE78        dw L"az-az-latn\x0000"
  .rdata:0x000000000000FE8E        dw 0x0000
  .rdata:0x000000000000FE90 string_beby:
  .rdata:0x000000000000FE90        dw L"be-by\x0000"
  .rdata:0x000000000000FE9C        dd 0x00000000
  .rdata:0x000000000000FEA0 string_bgbg:
  .rdata:0x000000000000FEA0        dw L"bg-bg\x0000"
  .rdata:0x000000000000FEAC        dd 0x00000000
  .rdata:0x000000000000FEB0 string_bnin:
  .rdata:0x000000000000FEB0        dw L"bn-in\x0000"
  .rdata:0x000000000000FEBC        dd 0x00000000
  .rdata:0x000000000000FEC0 string_bsbalatn:
  .rdata:0x000000000000FEC0        dw L"bs-ba-latn\x0000"
  .rdata:0x000000000000FED6        dw 0x0000
  .rdata:0x000000000000FED8 string_caes:
  .rdata:0x000000000000FED8        dw L"ca-es\x0000"
  .rdata:0x000000000000FEE4        dd 0x00000000
  .rdata:0x000000000000FEE8 string_cscz:
  .rdata:0x000000000000FEE8        dw L"cs-cz\x0000"
  .rdata:0x000000000000FEF4        dd 0x00000000
  .rdata:0x000000000000FEF8 string_cygb:
  .rdata:0x000000000000FEF8        dw L"cy-gb\x0000"
  .rdata:0x000000000000FF04        dd 0x00000000
  .rdata:0x000000000000FF08 string_dadk:
  .rdata:0x000000000000FF08        dw L"da-dk\x0000"
  .rdata:0x000000000000FF14        dd 0x00000000
  .rdata:0x000000000000FF18 string_deat:
  .rdata:0x000000000000FF18        dw L"de-at\x0000"
  .rdata:0x000000000000FF24        dd 0x00000000
  .rdata:0x000000000000FF28 string_dech:
  .rdata:0x000000000000FF28        dw L"de-ch\x0000"
  .rdata:0x000000000000FF34        dd 0x00000000
  .rdata:0x000000000000FF38 string_dede:
  .rdata:0x000000000000FF38        dw L"de-de\x0000"
  .rdata:0x000000000000FF44        dd 0x00000000
  .rdata:0x000000000000FF48 string_deli:
  .rdata:0x000000000000FF48        dw L"de-li\x0000"
  .rdata:0x000000000000FF54        dd 0x00000000
  .rdata:0x000000000000FF58 string_delu:
  .rdata:0x000000000000FF58        dw L"de-lu\x0000"
  .rdata:0x000000000000FF64        dd 0x00000000
  .rdata:0x000000000000FF68 string_divmv:
  .rdata:0x000000000000FF68        dw L"div-mv\x0000"
  .rdata:0x000000000000FF76        dw 0x0000
  .rdata:0x000000000000FF78 string_elgr:
  .rdata:0x000000000000FF78        dw L"el-gr\x0000"
  .rdata:0x000000000000FF84        dd 0x00000000
  .rdata:0x000000000000FF88 string_enau:
  .rdata:0x000000000000FF88        dw L"en-au\x0000"
  .rdata:0x000000000000FF94        dd 0x00000000
  .rdata:0x000000000000FF98 string_enbz:
  .rdata:0x000000000000FF98        dw L"en-bz\x0000"
  .rdata:0x000000000000FFA4        dd 0x00000000
  .rdata:0x000000000000FFA8 string_enca:
  .rdata:0x000000000000FFA8        dw L"en-ca\x0000"
  .rdata:0x000000000000FFB4        dd 0x00000000
  .rdata:0x000000000000FFB8 string_encb:
  .rdata:0x000000000000FFB8        dw L"en-cb\x0000"
  .rdata:0x000000000000FFC4        dd 0x00000000
  .rdata:0x000000000000FFC8 string_engb:
  .rdata:0x000000000000FFC8        dw L"en-gb\x0000"
  .rdata:0x000000000000FFD4        dd 0x00000000
  .rdata:0x000000000000FFD8 string_enie:
  .rdata:0x000000000000FFD8        dw L"en-ie\x0000"
  .rdata:0x000000000000FFE4        dd 0x00000000
  .rdata:0x000000000000FFE8 string_enjm:
  .rdata:0x000000000000FFE8        dw L"en-jm\x0000"
  .rdata:0x000000000000FFF4        dd 0x00000000
  .rdata:0x000000000000FFF8 string_ennz:
  .rdata:0x000000000000FFF8        dw L"en-nz\x0000"
  .rdata:0x0000000000010004        dd 0x00000000
  .rdata:0x0000000000010008 string_enph:
  .rdata:0x0000000000010008        dw L"en-ph\x0000"
  .rdata:0x0000000000010014        dd 0x00000000
  .rdata:0x0000000000010018 string_entt:
  .rdata:0x0000000000010018        dw L"en-tt\x0000"
  .rdata:0x0000000000010024        dd 0x00000000
  .rdata:0x0000000000010028 string_enus:
  .rdata:0x0000000000010028        dw L"en-us\x0000"
  .rdata:0x0000000000010034        dd 0x00000000
  .rdata:0x0000000000010038 string_enza:
  .rdata:0x0000000000010038        dw L"en-za\x0000"
  .rdata:0x0000000000010044        dd 0x00000000
  .rdata:0x0000000000010048 string_enzw:
  .rdata:0x0000000000010048        dw L"en-zw\x0000"
  .rdata:0x0000000000010054        dd 0x00000000
  .rdata:0x0000000000010058 string_esar:
  .rdata:0x0000000000010058        dw L"es-ar\x0000"
  .rdata:0x0000000000010064        dd 0x00000000
  .rdata:0x0000000000010068 string_esbo:
  .rdata:0x0000000000010068        dw L"es-bo\x0000"
  .rdata:0x0000000000010074        dd 0x00000000
  .rdata:0x0000000000010078 string_escl:
  .rdata:0x0000000000010078        dw L"es-cl\x0000"
  .rdata:0x0000000000010084        dd 0x00000000
  .rdata:0x0000000000010088 string_esco:
  .rdata:0x0000000000010088        dw L"es-co\x0000"
  .rdata:0x0000000000010094        dd 0x00000000
  .rdata:0x0000000000010098 string_escr:
  .rdata:0x0000000000010098        dw L"es-cr\x0000"
  .rdata:0x00000000000100A4        dd 0x00000000
  .rdata:0x00000000000100A8 string_esdo:
  .rdata:0x00000000000100A8        dw L"es-do\x0000"
  .rdata:0x00000000000100B4        dd 0x00000000
  .rdata:0x00000000000100B8 string_esec:
  .rdata:0x00000000000100B8        dw L"es-ec\x0000"
  .rdata:0x00000000000100C4        dd 0x00000000
  .rdata:0x00000000000100C8 string_eses:
  .rdata:0x00000000000100C8        dw L"es-es\x0000"
  .rdata:0x00000000000100D4        dd 0x00000000
  .rdata:0x00000000000100D8 string_esgt:
  .rdata:0x00000000000100D8        dw L"es-gt\x0000"
  .rdata:0x00000000000100E4        dd 0x00000000
  .rdata:0x00000000000100E8 string_eshn:
  .rdata:0x00000000000100E8        dw L"es-hn\x0000"
  .rdata:0x00000000000100F4        dd 0x00000000
  .rdata:0x00000000000100F8 string_esmx:
  .rdata:0x00000000000100F8        dw L"es-mx\x0000"
  .rdata:0x0000000000010104        dd 0x00000000
  .rdata:0x0000000000010108 string_esni:
  .rdata:0x0000000000010108        dw L"es-ni\x0000"
  .rdata:0x0000000000010114        dd 0x00000000
  .rdata:0x0000000000010118 string_espa:
  .rdata:0x0000000000010118        dw L"es-pa\x0000"
  .rdata:0x0000000000010124        dd 0x00000000
  .rdata:0x0000000000010128 string_espe:
  .rdata:0x0000000000010128        dw L"es-pe\x0000"
  .rdata:0x0000000000010134        dd 0x00000000
  .rdata:0x0000000000010138 string_espr:
  .rdata:0x0000000000010138        dw L"es-pr\x0000"
  .rdata:0x0000000000010144        dd 0x00000000
  .rdata:0x0000000000010148 string_espy:
  .rdata:0x0000000000010148        dw L"es-py\x0000"
  .rdata:0x0000000000010154        dd 0x00000000
  .rdata:0x0000000000010158 string_essv:
  .rdata:0x0000000000010158        dw L"es-sv\x0000"
  .rdata:0x0000000000010164        dd 0x00000000
  .rdata:0x0000000000010168 string_esuy:
  .rdata:0x0000000000010168        dw L"es-uy\x0000"
  .rdata:0x0000000000010174        dd 0x00000000
  .rdata:0x0000000000010178 string_esve:
  .rdata:0x0000000000010178        dw L"es-ve\x0000"
  .rdata:0x0000000000010184        dd 0x00000000
  .rdata:0x0000000000010188 string_etee:
  .rdata:0x0000000000010188        dw L"et-ee\x0000"
  .rdata:0x0000000000010194        dd 0x00000000
  .rdata:0x0000000000010198 string_eues:
  .rdata:0x0000000000010198        dw L"eu-es\x0000"
  .rdata:0x00000000000101A4        dd 0x00000000
  .rdata:0x00000000000101A8 string_fair:
  .rdata:0x00000000000101A8        dw L"fa-ir\x0000"
  .rdata:0x00000000000101B4        dd 0x00000000
  .rdata:0x00000000000101B8 string_fifi:
  .rdata:0x00000000000101B8        dw L"fi-fi\x0000"
  .rdata:0x00000000000101C4        dd 0x00000000
  .rdata:0x00000000000101C8 string_fofo:
  .rdata:0x00000000000101C8        dw L"fo-fo\x0000"
  .rdata:0x00000000000101D4        dd 0x00000000
  .rdata:0x00000000000101D8 string_frbe:
  .rdata:0x00000000000101D8        dw L"fr-be\x0000"
  .rdata:0x00000000000101E4        dd 0x00000000
  .rdata:0x00000000000101E8 string_frca:
  .rdata:0x00000000000101E8        dw L"fr-ca\x0000"
  .rdata:0x00000000000101F4        dd 0x00000000
  .rdata:0x00000000000101F8 string_frch:
  .rdata:0x00000000000101F8        dw L"fr-ch\x0000"
  .rdata:0x0000000000010204        dd 0x00000000
  .rdata:0x0000000000010208 string_frfr:
  .rdata:0x0000000000010208        dw L"fr-fr\x0000"
  .rdata:0x0000000000010214        dd 0x00000000
  .rdata:0x0000000000010218 string_frlu:
  .rdata:0x0000000000010218        dw L"fr-lu\x0000"
  .rdata:0x0000000000010224        dd 0x00000000
  .rdata:0x0000000000010228 string_frmc:
  .rdata:0x0000000000010228        dw L"fr-mc\x0000"
  .rdata:0x0000000000010234        dd 0x00000000
  .rdata:0x0000000000010238 string_gles:
  .rdata:0x0000000000010238        dw L"gl-es\x0000"
  .rdata:0x0000000000010244        dd 0x00000000
  .rdata:0x0000000000010248 string_guin:
  .rdata:0x0000000000010248        dw L"gu-in\x0000"
  .rdata:0x0000000000010254        dd 0x00000000
  .rdata:0x0000000000010258 string_heil:
  .rdata:0x0000000000010258        dw L"he-il\x0000"
  .rdata:0x0000000000010264        dd 0x00000000
  .rdata:0x0000000000010268 string_hiin:
  .rdata:0x0000000000010268        dw L"hi-in\x0000"
  .rdata:0x0000000000010274        dd 0x00000000
  .rdata:0x0000000000010278 string_hrba:
  .rdata:0x0000000000010278        dw L"hr-ba\x0000"
  .rdata:0x0000000000010284        dd 0x00000000
  .rdata:0x0000000000010288 string_hrhr:
  .rdata:0x0000000000010288        dw L"hr-hr\x0000"
  .rdata:0x0000000000010294        dd 0x00000000
  .rdata:0x0000000000010298 string_huhu:
  .rdata:0x0000000000010298        dw L"hu-hu\x0000"
  .rdata:0x00000000000102A4        dd 0x00000000
  .rdata:0x00000000000102A8 string_hyam:
  .rdata:0x00000000000102A8        dw L"hy-am\x0000"
  .rdata:0x00000000000102B4        dd 0x00000000
  .rdata:0x00000000000102B8 string_idid:
  .rdata:0x00000000000102B8        dw L"id-id\x0000"
  .rdata:0x00000000000102C4        dd 0x00000000
  .rdata:0x00000000000102C8 string_isis:
  .rdata:0x00000000000102C8        dw L"is-is\x0000"
  .rdata:0x00000000000102D4        dd 0x00000000
  .rdata:0x00000000000102D8 string_itch:
  .rdata:0x00000000000102D8        dw L"it-ch\x0000"
  .rdata:0x00000000000102E4        dd 0x00000000
  .rdata:0x00000000000102E8 string_itit:
  .rdata:0x00000000000102E8        dw L"it-it\x0000"
  .rdata:0x00000000000102F4        dd 0x00000000
  .rdata:0x00000000000102F8 string_jajp:
  .rdata:0x00000000000102F8        dw L"ja-jp\x0000"
  .rdata:0x0000000000010304        dd 0x00000000
  .rdata:0x0000000000010308 string_kage:
  .rdata:0x0000000000010308        dw L"ka-ge\x0000"
  .rdata:0x0000000000010314        dd 0x00000000
  .rdata:0x0000000000010318 string_kkkz:
  .rdata:0x0000000000010318        dw L"kk-kz\x0000"
  .rdata:0x0000000000010324        dd 0x00000000
  .rdata:0x0000000000010328 string_knin:
  .rdata:0x0000000000010328        dw L"kn-in\x0000"
  .rdata:0x0000000000010334        dd 0x00000000
  .rdata:0x0000000000010338 string_kokin:
  .rdata:0x0000000000010338        dw L"kok-in\x0000"
  .rdata:0x0000000000010346        dw 0x0000
  .rdata:0x0000000000010348 string_kokr:
  .rdata:0x0000000000010348        dw L"ko-kr\x0000"
  .rdata:0x0000000000010354        dd 0x00000000
  .rdata:0x0000000000010358 string_kykg:
  .rdata:0x0000000000010358        dw L"ky-kg\x0000"
  .rdata:0x0000000000010364        dd 0x00000000
  .rdata:0x0000000000010368 string_ltlt:
  .rdata:0x0000000000010368        dw L"lt-lt\x0000"
  .rdata:0x0000000000010374        dd 0x00000000
  .rdata:0x0000000000010378 string_lvlv:
  .rdata:0x0000000000010378        dw L"lv-lv\x0000"
  .rdata:0x0000000000010384        dd 0x00000000
  .rdata:0x0000000000010388 string_minz:
  .rdata:0x0000000000010388        dw L"mi-nz\x0000"
  .rdata:0x0000000000010394        dd 0x00000000
  .rdata:0x0000000000010398 string_mkmk:
  .rdata:0x0000000000010398        dw L"mk-mk\x0000"
  .rdata:0x00000000000103A4        dd 0x00000000
  .rdata:0x00000000000103A8 string_mlin:
  .rdata:0x00000000000103A8        dw L"ml-in\x0000"
  .rdata:0x00000000000103B4        dd 0x00000000
  .rdata:0x00000000000103B8 string_mnmn:
  .rdata:0x00000000000103B8        dw L"mn-mn\x0000"
  .rdata:0x00000000000103C4        dd 0x00000000
  .rdata:0x00000000000103C8 string_mrin:
  .rdata:0x00000000000103C8        dw L"mr-in\x0000"
  .rdata:0x00000000000103D4        dd 0x00000000
  .rdata:0x00000000000103D8 string_msbn:
  .rdata:0x00000000000103D8        dw L"ms-bn\x0000"
  .rdata:0x00000000000103E4        dd 0x00000000
  .rdata:0x00000000000103E8 string_msmy:
  .rdata:0x00000000000103E8        dw L"ms-my\x0000"
  .rdata:0x00000000000103F4        dd 0x00000000
  .rdata:0x00000000000103F8 string_mtmt:
  .rdata:0x00000000000103F8        dw L"mt-mt\x0000"
  .rdata:0x0000000000010404        dd 0x00000000
  .rdata:0x0000000000010408 string_nbno:
  .rdata:0x0000000000010408        dw L"nb-no\x0000"
  .rdata:0x0000000000010414        dd 0x00000000
  .rdata:0x0000000000010418 string_nlbe:
  .rdata:0x0000000000010418        dw L"nl-be\x0000"
  .rdata:0x0000000000010424        dd 0x00000000
  .rdata:0x0000000000010428 string_nlnl:
  .rdata:0x0000000000010428        dw L"nl-nl\x0000"
  .rdata:0x0000000000010434        dd 0x00000000
  .rdata:0x0000000000010438 string_nnno:
  .rdata:0x0000000000010438        dw L"nn-no\x0000"
  .rdata:0x0000000000010444        dd 0x00000000
  .rdata:0x0000000000010448 string_nsza:
  .rdata:0x0000000000010448        dw L"ns-za\x0000"
  .rdata:0x0000000000010454        dd 0x00000000
  .rdata:0x0000000000010458 string_pain:
  .rdata:0x0000000000010458        dw L"pa-in\x0000"
  .rdata:0x0000000000010464        dd 0x00000000
  .rdata:0x0000000000010468 string_plpl:
  .rdata:0x0000000000010468        dw L"pl-pl\x0000"
  .rdata:0x0000000000010474        dd 0x00000000
  .rdata:0x0000000000010478 string_ptbr:
  .rdata:0x0000000000010478        dw L"pt-br\x0000"
  .rdata:0x0000000000010484        dd 0x00000000
  .rdata:0x0000000000010488 string_ptpt:
  .rdata:0x0000000000010488        dw L"pt-pt\x0000"
  .rdata:0x0000000000010494        dd 0x00000000
  .rdata:0x0000000000010498 string_quzbo:
  .rdata:0x0000000000010498        dw L"quz-bo\x0000"
  .rdata:0x00000000000104A6        dw 0x0000
  .rdata:0x00000000000104A8 string_quzec:
  .rdata:0x00000000000104A8        dw L"quz-ec\x0000"
  .rdata:0x00000000000104B6        dw 0x0000
  .rdata:0x00000000000104B8 string_quzpe:
  .rdata:0x00000000000104B8        dw L"quz-pe\x0000"
  .rdata:0x00000000000104C6        dw 0x0000
  .rdata:0x00000000000104C8 string_roro:
  .rdata:0x00000000000104C8        dw L"ro-ro\x0000"
  .rdata:0x00000000000104D4        dd 0x00000000
  .rdata:0x00000000000104D8 string_ruru:
  .rdata:0x00000000000104D8        dw L"ru-ru\x0000"
  .rdata:0x00000000000104E4        dd 0x00000000
  .rdata:0x00000000000104E8 string_sain:
  .rdata:0x00000000000104E8        dw L"sa-in\x0000"
  .rdata:0x00000000000104F4        dd 0x00000000
  .rdata:0x00000000000104F8 string_sefi:
  .rdata:0x00000000000104F8        dw L"se-fi\x0000"
  .rdata:0x0000000000010504        dd 0x00000000
  .rdata:0x0000000000010508 string_seno:
  .rdata:0x0000000000010508        dw L"se-no\x0000"
  .rdata:0x0000000000010514        dd 0x00000000
  .rdata:0x0000000000010518 string_sese:
  .rdata:0x0000000000010518        dw L"se-se\x0000"
  .rdata:0x0000000000010524        dd 0x00000000
  .rdata:0x0000000000010528 string_sksk:
  .rdata:0x0000000000010528        dw L"sk-sk\x0000"
  .rdata:0x0000000000010534        dd 0x00000000
  .rdata:0x0000000000010538 string_slsi:
  .rdata:0x0000000000010538        dw L"sl-si\x0000"
  .rdata:0x0000000000010544        dd 0x00000000
  .rdata:0x0000000000010548 string_smano:
  .rdata:0x0000000000010548        dw L"sma-no\x0000"
  .rdata:0x0000000000010556        dw 0x0000
  .rdata:0x0000000000010558 string_smase:
  .rdata:0x0000000000010558        dw L"sma-se\x0000"
  .rdata:0x0000000000010566        dw 0x0000
  .rdata:0x0000000000010568 string_smjno:
  .rdata:0x0000000000010568        dw L"smj-no\x0000"
  .rdata:0x0000000000010576        dw 0x0000
  .rdata:0x0000000000010578 string_smjse:
  .rdata:0x0000000000010578        dw L"smj-se\x0000"
  .rdata:0x0000000000010586        dw 0x0000
  .rdata:0x0000000000010588 string_smnfi:
  .rdata:0x0000000000010588        dw L"smn-fi\x0000"
  .rdata:0x0000000000010596        dw 0x0000
  .rdata:0x0000000000010598 string_smsfi:
  .rdata:0x0000000000010598        dw L"sms-fi\x0000"
  .rdata:0x00000000000105A6        dw 0x0000
  .rdata:0x00000000000105A8 string_sqal:
  .rdata:0x00000000000105A8        dw L"sq-al\x0000"
  .rdata:0x00000000000105B4        dd 0x00000000
  .rdata:0x00000000000105B8 string_srbacyrl:
  .rdata:0x00000000000105B8        dw L"sr-ba-cyrl\x0000"
  .rdata:0x00000000000105CE        dw 0x0000
  .rdata:0x00000000000105D0 string_srbalatn:
  .rdata:0x00000000000105D0        dw L"sr-ba-latn\x0000"
  .rdata:0x00000000000105E6        dw 0x0000
  .rdata:0x00000000000105E8 string_srspcyrl:
  .rdata:0x00000000000105E8        dw L"sr-sp-cyrl\x0000"
  .rdata:0x00000000000105FE        dw 0x0000
  .rdata:0x0000000000010600 string_srsplatn:
  .rdata:0x0000000000010600        dw L"sr-sp-latn\x0000"
  .rdata:0x0000000000010616        dw 0x0000
  .rdata:0x0000000000010618 string_svfi:
  .rdata:0x0000000000010618        dw L"sv-fi\x0000"
  .rdata:0x0000000000010624        dd 0x00000000
  .rdata:0x0000000000010628 string_svse:
  .rdata:0x0000000000010628        dw L"sv-se\x0000"
  .rdata:0x0000000000010634        dd 0x00000000
  .rdata:0x0000000000010638 string_swke:
  .rdata:0x0000000000010638        dw L"sw-ke\x0000"
  .rdata:0x0000000000010644        dd 0x00000000
  .rdata:0x0000000000010648 string_syrsy:
  .rdata:0x0000000000010648        dw L"syr-sy\x0000"
  .rdata:0x0000000000010656        dw 0x0000
  .rdata:0x0000000000010658 string_tain:
  .rdata:0x0000000000010658        dw L"ta-in\x0000"
  .rdata:0x0000000000010664        dd 0x00000000
  .rdata:0x0000000000010668 string_tein:
  .rdata:0x0000000000010668        dw L"te-in\x0000"
  .rdata:0x0000000000010674        dd 0x00000000
  .rdata:0x0000000000010678 string_thth:
  .rdata:0x0000000000010678        dw L"th-th\x0000"
  .rdata:0x0000000000010684        dd 0x00000000
  .rdata:0x0000000000010688 string_tnza:
  .rdata:0x0000000000010688        dw L"tn-za\x0000"
  .rdata:0x0000000000010694        dd 0x00000000
  .rdata:0x0000000000010698 string_trtr:
  .rdata:0x0000000000010698        dw L"tr-tr\x0000"
  .rdata:0x00000000000106A4        dd 0x00000000
  .rdata:0x00000000000106A8 string_ttru:
  .rdata:0x00000000000106A8        dw L"tt-ru\x0000"
  .rdata:0x00000000000106B4        dd 0x00000000
  .rdata:0x00000000000106B8 string_ukua:
  .rdata:0x00000000000106B8        dw L"uk-ua\x0000"
  .rdata:0x00000000000106C4        dd 0x00000000
  .rdata:0x00000000000106C8 string_urpk:
  .rdata:0x00000000000106C8        dw L"ur-pk\x0000"
  .rdata:0x00000000000106D4        dd 0x00000000
  .rdata:0x00000000000106D8 string_uzuzcyrl:
  .rdata:0x00000000000106D8        dw L"uz-uz-cyrl\x0000"
  .rdata:0x00000000000106EE        dw 0x0000
  .rdata:0x00000000000106F0 string_uzuzlatn:
  .rdata:0x00000000000106F0        dw L"uz-uz-latn\x0000"
  .rdata:0x0000000000010706        dw 0x0000
  .rdata:0x0000000000010708 string_vivn:
  .rdata:0x0000000000010708        dw L"vi-vn\x0000"
  .rdata:0x0000000000010714        dd 0x00000000
  .rdata:0x0000000000010718 string_xhza:
  .rdata:0x0000000000010718        dw L"xh-za\x0000"
  .rdata:0x0000000000010724        dd 0x00000000
  .rdata:0x0000000000010728 string_zhchs:
  .rdata:0x0000000000010728        dw L"zh-chs\x0000"
  .rdata:0x0000000000010736        dw 0x0000
  .rdata:0x0000000000010738 string_zhcht:
  .rdata:0x0000000000010738        dw L"zh-cht\x0000"
  .rdata:0x0000000000010746        dw 0x0000
  .rdata:0x0000000000010748 string_zhcn:
  .rdata:0x0000000000010748        dw L"zh-cn\x0000"
  .rdata:0x0000000000010754        dd 0x00000000
  .rdata:0x0000000000010758 string_zhhk:
  .rdata:0x0000000000010758        dw L"zh-hk\x0000"
  .rdata:0x0000000000010764        dd 0x00000000
  .rdata:0x0000000000010768 string_zhmo:
  .rdata:0x0000000000010768        dw L"zh-mo\x0000"
  .rdata:0x0000000000010774        dd 0x00000000
  .rdata:0x0000000000010778 string_zhsg:
  .rdata:0x0000000000010778        dw L"zh-sg\x0000"
  .rdata:0x0000000000010784        dd 0x00000000
  .rdata:0x0000000000010788 string_zhtw:
  .rdata:0x0000000000010788        dw L"zh-tw\x0000"
  .rdata:0x0000000000010794        dd 0x00000000
  .rdata:0x0000000000010798 string_zuza:
  .rdata:0x0000000000010798        dw L"zu-za\x0000"
  .rdata:0x00000000000107A4 data_0x107A4:
  .rdata:0x00000000000107A4        dq 0x0000000000000000
  .rdata:0x00000000000107AC        dd 0x00000000
  .rdata:0x00000000000107B0 data_0x107B0:
  .rdata:0x00000000000107B0        dq 0xFFF0000000000000
  .rdata:0x00000000000107B8        dq 0x0000000000000000
  .rdata:0x00000000000107C0 data_0x107C0:
  .rdata:0x00000000000107C0        dq 0x7FF0000000000000
  .rdata:0x00000000000107C8        dq 0x0000000000000000
  .rdata:0x00000000000107D0 data_0x107D0:
  .rdata:0x00000000000107D0        dq 0xFFF8000000000000
  .rdata:0x00000000000107D8        dq 0x0000000000000000
  .rdata:0x00000000000107E0 data_0x107E0:
  .rdata:0x00000000000107E0        dq 0x0008000000000000
  .rdata:0x00000000000107E8        dq 0x0000000000000000
  .rdata:0x00000000000107F0 data_0x107F0:
  .rdata:0x00000000000107F0        dq 0x00000000000003FF
  .rdata:0x00000000000107F8        dq 0x0000000000000000
  .rdata:0x0000000000010800        dq 0x0000000000000001
  .rdata:0x0000000000010808        dq 0x0000000000000000
  .rdata:0x0000000000010810 data_0x10810:
  .rdata:0x0000000000010810        dq 0x000FFFFFFFFFFFFF
  .rdata:0x0000000000010818        dq 0x0000000000000000
  .rdata:0x0000000000010820 data_0x10820:
  .rdata:0x0000000000010820        dq 0x000FF00000000000
  .rdata:0x0000000000010828        dq 0x0000000000000000
  .rdata:0x0000000000010830 data_0x10830:
  .rdata:0x0000000000010830        dq 0x0000080000000000
  .rdata:0x0000000000010838        dq 0x0000000000000000
  .rdata:0x0000000000010840 data_0x10840:
  .rdata:0x0000000000010840        dq 0x3FDBCB7B1526E50E
  .rdata:0x0000000000010848        dq 0x0000000000000000
  .rdata:0x0000000000010850 data_0x10850:
  .rdata:0x0000000000010850        dq 0x3FDBCB7800000000
  .rdata:0x0000000000010858        dq 0x0000000000000000
  .rdata:0x0000000000010860 data_0x10860:
  .rdata:0x0000000000010860        dq 0x3EA8A93728719535
  .rdata:0x0000000000010868        dq 0x0000000000000000
  .rdata:0x0000000000010870 data_0x10870:
  .rdata:0x0000000000010870        dq 0x3FD3441350000000
  .rdata:0x0000000000010878        dq 0x0000000000000000
  .rdata:0x0000000000010880 data_0x10880:
  .rdata:0x0000000000010880        dq 0x3E03EF3FDE623E25
  .rdata:0x0000000000010888        dq 0x0000000000000000
  .rdata:0x0000000000010890 data_0x10890:
  .rdata:0x0000000000010890        dq 0x4000000000000000
  .rdata:0x0000000000010898        dq 0x0000000000000000
  .rdata:0x00000000000108A0 data_0x108A0:
  .rdata:0x00000000000108A0        dq 0x3FF0000000000000
  .rdata:0x00000000000108A8        dq 0x0000000000000000
  .rdata:0x00000000000108B0 data_0x108B0:
  .rdata:0x00000000000108B0        dq 0x3FE0000000000000
  .rdata:0x00000000000108B8        dq 0x0000000000000000
  .rdata:0x00000000000108C0        dq 0x0000000000000100
  .rdata:0x00000000000108C8        dq 0x0000000000000000
  .rdata:0x00000000000108D0        dq 0x3F60000000000000
  .rdata:0x00000000000108D8        dq 0x0000000000000000
  .rdata:0x00000000000108E0 data_0x108E0:
  .rdata:0x00000000000108E0        dq 0x3FE0000000000000
  .rdata:0x00000000000108E8        dq 0x0000000000000000
  .rdata:0x00000000000108F0 data_0x108F0:
  .rdata:0x00000000000108F0        dq 0x3FD5555555555555
  .rdata:0x00000000000108F8        dq 0x0000000000000000
  .rdata:0x0000000000010900 data_0x10900:
  .rdata:0x0000000000010900        dq 0x3FD0000000000000
  .rdata:0x0000000000010908        dq 0x0000000000000000
  .rdata:0x0000000000010910 data_0x10910:
  .rdata:0x0000000000010910        dq 0x3FC999999999999A
  .rdata:0x0000000000010918        dq 0x0000000000000000
  .rdata:0x0000000000010920 data_0x10920:
  .rdata:0x0000000000010920        dq 0x3FC5555555555555
  .rdata:0x0000000000010928        dq 0x0000000000000000
  .rdata:0x0000000000010930 data_0x10930:
  .rdata:0x0000000000010930        dq 0xC08FF80000000000
  .rdata:0x0000000000010938        dq 0x0000000000000000
  .rdata:0x0000000000010940 data_0x10940:
  .rdata:0x0000000000010940        dq 0x00000000000007FD
  .rdata:0x0000000000010948        dq 0x0000000000000000
  .rdata:0x0000000000010950 data_0x10950:
  .rdata:0x0000000000010950        dq 0x3FB0000000000000
  .rdata:0x0000000000010958        dq 0x0000000000000000
  .rdata:0x0000000000010960        dq 0x3FEE000000000000
  .rdata:0x0000000000010968        dq 0x0000000000000000
  .rdata:0x0000000000010970        dq 0x3FF1000000000000
  .rdata:0x0000000000010978        dq 0x0000000000000000
  .rdata:0x0000000000010980        dq 0x0010000000000000
  .rdata:0x0000000000010988        dq 0x0000000000000000
  .rdata:0x0000000000010990 data_0x10990:
  .rdata:0x0000000000010990        dq 0x7FFFFFFFFFFFFFFF
  .rdata:0x0000000000010998        dq 0x0000000000000000
  .rdata:0x00000000000109A0 data_0x109A0:
  .rdata:0x00000000000109A0        dq 0x3FB55555555554E6
  .rdata:0x00000000000109A8        dq 0x0000000000000000
  .rdata:0x00000000000109B0 data_0x109B0:
  .rdata:0x00000000000109B0        dq 0x3F89999999BAC6D4
  .rdata:0x00000000000109B8        dq 0x0000000000000000
  .rdata:0x00000000000109C0 data_0x109C0:
  .rdata:0x00000000000109C0        dw 0x519F
  .rdata:0x00000000000109C2        db 0xF1
  .rdata:0x00000000000109C3        db "\a#Ib?\x00"
  .rdata:0x00000000000109C9        dd 0x00000000
  .rdata:0x00000000000109CD        dw 0x0000
  .rdata:0x00000000000109CF        db 0x00
  .rdata:0x00000000000109D0 data_0x109D0:
  .rdata:0x00000000000109D0        dq 0x3F3C8034C85DFFF0
  .rdata:0x00000000000109D8        dq 0x0000000000000000
  .rdata:0x00000000000109E0 data_0x109E0:
  .rdata:0x00000000000109E0        dq 0xFFFFFFFF00000000
  .rdata:0x00000000000109E8        dq 0x0000000000000000
  .rdata:0x00000000000109F0 data_0x109F0:
  .rdata:0x00000000000109F0        dd 0x00000001
  .rdata:0x00000000000109F4 data_0x109F4:
  .rdata:0x00000000000109F4        dd 0x00000002
  .rdata:0x00000000000109F8 data_0x109F8:
  .rdata:0x00000000000109F8        dq 0x0000000000000003
  .rdata:0x0000000000010A00 string_CONOUT:
  .rdata:0x0000000000010A00        dw L"CONOUT$\x0000"
  .rdata:0x0000000000010A10 data_0x10A10:
  .rdata:0x0000000000010A10        dq 0x0000000000000000
  .rdata:0x0000000000010A18        dq 0x3F5BBD9E90000000
  .rdata:0x0000000000010A20        dd 0x70000000
  .rdata:0x0000000000010A24        dw 0xAFD4
  .rdata:0x0000000000010A26        db "k?\x00"
  .rdata:0x0000000000010A29        dd 0x95600000
  .rdata:0x0000000000010A2D        db 0xB9
  .rdata:0x0000000000010A2E        db "t?\x00"
  .rdata:0x0000000000010A31        dq 0x003F7B9476A00000
  .rdata:0x0000000000010A39        dq 0x003F81344DA00000
  .rdata:0x0000000000010A41        dq 0x003F849B08500000
  .rdata:0x0000000000010A49        dq 0x003F87FE71C00000
  .rdata:0x0000000000010A51        dq 0x003F8B5E90800000
  .rdata:0x0000000000010A59        dq 0x003F8EBB6AF00000
  .rdata:0x0000000000010A61        dq 0x003F910A83A00000
  .rdata:0x0000000000010A69        dq 0x003F92B5B5E00000
  .rdata:0x0000000000010A71        dq 0x003F945F4F500000
  .rdata:0x0000000000010A79        dq 0x003F960753000000
  .rdata:0x0000000000010A81        dq 0x003F97ADC3D00000
  .rdata:0x0000000000010A89        dq 0x003F9952A4F00000
  .rdata:0x0000000000010A91        dq 0x003F9AF5F9200000
  .rdata:0x0000000000010A99        dq 0x003F9C97C3700000
  .rdata:0x0000000000010AA1        dq 0x003F9E3806A00000
  .rdata:0x0000000000010AA9        dq 0x003F9FD6C5B00000
  .rdata:0x0000000000010AB1        dq 0x003FA0BA01A00000
  .rdata:0x0000000000010AB9        dq 0x003FA187E1200000
  .rdata:0x0000000000010AC1        dq 0x003FA25502C00000
  .rdata:0x0000000000010AC9        dq 0x003FA32167C00000
  .rdata:0x0000000000010AD1        dq 0x003FA3ED11900000
  .rdata:0x0000000000010AD9        dq 0x003FA4B801800000
  .rdata:0x0000000000010AE1        dq 0x003FA58238E00000
  .rdata:0x0000000000010AE9        dq 0x003FA64BB9100000
  .rdata:0x0000000000010AF1        dq 0x003FA71483400000
  .rdata:0x0000000000010AF9        dq 0x003FA7DC98C00000
  .rdata:0x0000000000010B01        dq 0x003FA8A3FAD00000
  .rdata:0x0000000000010B09        dq 0x003FA96AAAC00000
  .rdata:0x0000000000010B11        dq 0x003FAA30A9D00000
  .rdata:0x0000000000010B19        dq 0x003FAAF5F9200000
  .rdata:0x0000000000010B21        dq 0x003FABBA9A000000
  .rdata:0x0000000000010B29        dq 0x003FAC7E8D900000
  .rdata:0x0000000000010B31        dq 0x003FAD41D5100000
  .rdata:0x0000000000010B39        dq 0x003FAE0471A00000
  .rdata:0x0000000000010B41        dq 0x003FAEC664700000
  .rdata:0x0000000000010B49        dq 0x003FAF87AEB00000
  .rdata:0x0000000000010B51        dq 0x003FB02428C00000
  .rdata:0x0000000000010B59        dq 0x003FB08426F00000
  .rdata:0x0000000000010B61        dq 0x003FB0E3D2900000
  .rdata:0x0000000000010B69        dq 0x003FB1432C300000
  .rdata:0x0000000000010B71        dq 0x003FB1A234400000
  .rdata:0x0000000000010B79        dq 0x003FB200EB600000
  .rdata:0x0000000000010B81        dq 0x003FB25F52100000
  .rdata:0x0000000000010B89        dq 0x003FB2BD68E00000
  .rdata:0x0000000000010B91        dq 0x003FB31B30500000
  .rdata:0x0000000000010B99        dq 0x003FB378A8E00000
  .rdata:0x0000000000010BA1        dq 0x003FB3D5D3300000
  .rdata:0x0000000000010BA9        dq 0x003FB432AFA00000
  .rdata:0x0000000000010BB1        dq 0x003FB48F3ED00000
  .rdata:0x0000000000010BB9        dq 0x003FB4EB81200000
  .rdata:0x0000000000010BC1        dq 0x003FB54777300000
  .rdata:0x0000000000010BC9        dq 0x003FB5A321600000
  .rdata:0x0000000000010BD1        dq 0x003FB5FE80400000
  .rdata:0x0000000000010BD9        dq 0x003FB65994400000
  .rdata:0x0000000000010BE1        dq 0x003FB6B45DF00000
  .rdata:0x0000000000010BE9        dq 0x003FB70EDDB00000
  .rdata:0x0000000000010BF1        dq 0x003FB76914000000
  .rdata:0x0000000000010BF9        dq 0x003FB7C301600000
  .rdata:0x0000000000010C01        dq 0x003FB81CA6300000
  .rdata:0x0000000000010C09        dq 0x003FB87603000000
  .rdata:0x0000000000010C11        dq 0x003FB8CF18300000
  .rdata:0x0000000000010C19        dq 0x003FB927E6400000
  .rdata:0x0000000000010C21        dq 0x003FB9806D900000
  .rdata:0x0000000000010C29        dq 0x003FB9D8AEA00000
  .rdata:0x0000000000010C31        dq 0x003FBA30A9D00000
  .rdata:0x0000000000010C39        dq 0x003FBA885FA00000
  .rdata:0x0000000000010C41        dq 0x003FBADFD0700000
  .rdata:0x0000000000010C49        dq 0x003FBB36FCB00000
  .rdata:0x0000000000010C51        dq 0x003FBB8DE4D00000
  .rdata:0x0000000000010C59        dq 0x003FBBE489300000
  .rdata:0x0000000000010C61        dq 0x003FBC3AEA400000
  .rdata:0x0000000000010C69        dq 0x003FBC9108700000
  .rdata:0x0000000000010C71        dq 0x003FBCE6E4100000
  .rdata:0x0000000000010C79        dq 0x003FBD3C7DA00000
  .rdata:0x0000000000010C81        dq 0x003FBD91D5800000
  .rdata:0x0000000000010C89        dq 0x003FBDE6EC000000
  .rdata:0x0000000000010C91        dq 0x003FBE3BC1A00000
  .rdata:0x0000000000010C99        dq 0x003FBE9056B00000
  .rdata:0x0000000000010CA1        dq 0x003FBEE4ABA00000
  .rdata:0x0000000000010CA9        dq 0x003FBF38C0C00000
  .rdata:0x0000000000010CB1        dq 0x003FBF8C96800000
  .rdata:0x0000000000010CB9        dq 0x003FBFE02D300000
  .rdata:0x0000000000010CC1        dq 0x003FC019C2A00000
  .rdata:0x0000000000010CC9        dq 0x003FC0434F700000
  .rdata:0x0000000000010CD1        dq 0x003FC06CBD600000
  .rdata:0x0000000000010CD9        dq 0x003FC0960C800000
  .rdata:0x0000000000010CE1        dq 0x003FC0BF3D000000
  .rdata:0x0000000000010CE9        dq 0x003FC0E84F100000
  .rdata:0x0000000000010CF1        dq 0x003FC11142F00000
  .rdata:0x0000000000010CF9        dq 0x003FC13A18A00000
  .rdata:0x0000000000010D01        dq 0x003FC162D0800000
  .rdata:0x0000000000010D09        dq 0x003FC18B6A900000
  .rdata:0x0000000000010D11        dq 0x003FC1B3E7100000
  .rdata:0x0000000000010D19        dq 0x003FC1DC46300000
  .rdata:0x0000000000010D21        dq 0x003FC20488100000
  .rdata:0x0000000000010D29        dq 0x003FC22CACE00000
  .rdata:0x0000000000010D31        dq 0x003FC254B4D00000
  .rdata:0x0000000000010D39        dq 0x003FC27C9FF00000
  .rdata:0x0000000000010D41        dq 0x003FC2A46E800000
  .rdata:0x0000000000010D49        dq 0x003FC2CC20B00000
  .rdata:0x0000000000010D51        dq 0x003FC2F3B6900000
  .rdata:0x0000000000010D59        dq 0x003FC31B30500000
  .rdata:0x0000000000010D61        dq 0x003FC3428E200000
  .rdata:0x0000000000010D69        dq 0x003FC369D0200000
  .rdata:0x0000000000010D71        dq 0x003FC390F6800000
  .rdata:0x0000000000010D79        dq 0x003FC3B801600000
  .rdata:0x0000000000010D81        dq 0x003FC3DEF0E00000
  .rdata:0x0000000000010D89        dq 0x003FC405C5300000
  .rdata:0x0000000000010D91        dq 0x003FC42C7E700000
  .rdata:0x0000000000010D99        dq 0x003FC4531CD00000
  .rdata:0x0000000000010DA1        dq 0x003FC479A0700000
  .rdata:0x0000000000010DA9        dq 0x003FC4A009700000
  .rdata:0x0000000000010DB1        dq 0x003FC4C658000000
  .rdata:0x0000000000010DB9        dq 0x003FC4EC8C300000
  .rdata:0x0000000000010DC1        dq 0x003FC512A6400000
  .rdata:0x0000000000010DC9        dq 0x003FC538A6300000
  .rdata:0x0000000000010DD1        dq 0x003FC55E8C500000
  .rdata:0x0000000000010DD9        dq 0x003FC58458900000
  .rdata:0x0000000000010DE1        dq 0x003FC5AA0B400000
  .rdata:0x0000000000010DE9        dq 0x003FC5CFA4700000
  .rdata:0x0000000000010DF1        dq 0x003FC5F524400000
  .rdata:0x0000000000010DF9        dq 0x003FC61A8AD00000
  .rdata:0x0000000000010E01        dq 0x003FC63FD8500000
  .rdata:0x0000000000010E09        dq 0x003FC6650CD00000
  .rdata:0x0000000000010E11        dq 0x003FC68A28800000
  .rdata:0x0000000000010E19        dq 0x003FC6AF2B800000
  .rdata:0x0000000000010E21        dq 0x003FC6D415E00000
  .rdata:0x0000000000010E29        dq 0x003FC6F8E7D00000
  .rdata:0x0000000000010E31        dq 0x003FC71DA1700000
  .rdata:0x0000000000010E39        dq 0x003FC74242E00000
  .rdata:0x0000000000010E41        dq 0x003FC766CC400000
  .rdata:0x0000000000010E49        dq 0x003FC78B3DA00000
  .rdata:0x0000000000010E51        dq 0x003FC7AF97300000
  .rdata:0x0000000000010E59        dq 0x003FC7D3D9100000
  .rdata:0x0000000000010E61        dq 0x003FC7F803500000
  .rdata:0x0000000000010E69        dq 0x003FC81C16200000
  .rdata:0x0000000000010E71        dq 0x003FC84011900000
  .rdata:0x0000000000010E79        dq 0x003FC863F5C00000
  .rdata:0x0000000000010E81        dq 0x003FC887C2E00000
  .rdata:0x0000000000010E89        dq 0x003FC8AB79000000
  .rdata:0x0000000000010E91        dq 0x003FC8CF18300000
  .rdata:0x0000000000010E99        dq 0x003FC8F2A0A00000
  .rdata:0x0000000000010EA1        dq 0x003FC91612700000
  .rdata:0x0000000000010EA9        dq 0x003FC9396DB00000
  .rdata:0x0000000000010EB1        dq 0x003FC95CB2800000
  .rdata:0x0000000000010EB9        dq 0x003FC97FE1000000
  .rdata:0x0000000000010EC1        dq 0x003FC9A2F9500000
  .rdata:0x0000000000010EC9        dq 0x003FC9C5FB700000
  .rdata:0x0000000000010ED1        dq 0x003FC9E8E7B00000
  .rdata:0x0000000000010ED9        dq 0x003FCA0BBDF00000
  .rdata:0x0000000000010EE1        dq 0x003FCA2E7E800000
  .rdata:0x0000000000010EE9        dq 0x003FCA5129600000
  .rdata:0x0000000000010EF1        dq 0x003FCA73BEA00000
  .rdata:0x0000000000010EF9        dq 0x003FCA963E700000
  .rdata:0x0000000000010F01        dq 0x003FCAB8A8F00000
  .rdata:0x0000000000010F09        dq 0x003FCADAFE200000
  .rdata:0x0000000000010F11        dq 0x003FCAFD3E300000
  .rdata:0x0000000000010F19        dq 0x003FCB1F69300000
  .rdata:0x0000000000010F21        dq 0x003FCB417F400000
  .rdata:0x0000000000010F29        dq 0x003FCB6380700000
  .rdata:0x0000000000010F31        dq 0x003FCB856CF00000
  .rdata:0x0000000000010F39        dq 0x003FCBA744B00000
  .rdata:0x0000000000010F41        dq 0x003FCBC907F00000
  .rdata:0x0000000000010F49        dq 0x003FCBEAB6C00000
  .rdata:0x0000000000010F51        dq 0x003FCC0C51300000
  .rdata:0x0000000000010F59        dq 0x003FCC2DD7500000
  .rdata:0x0000000000010F61        dq 0x003FCC4F49500000
  .rdata:0x0000000000010F69        dq 0x003FCC70A7400000
  .rdata:0x0000000000010F71        dq 0x003FCC91F1300000
  .rdata:0x0000000000010F79        dq 0x003FCCB327400000
  .rdata:0x0000000000010F81        dq 0x003FCCD449800000
  .rdata:0x0000000000010F89        dq 0x003FCCF558100000
  .rdata:0x0000000000010F91        dq 0x003FCD1653000000
  .rdata:0x0000000000010F99        dq 0x003FCD373A600000
  .rdata:0x0000000000010FA1        dq 0x003FCD580E600000
  .rdata:0x0000000000010FA9        dq 0x003FCD78CF000000
  .rdata:0x0000000000010FB1        dq 0x003FCD997C700000
  .rdata:0x0000000000010FB9        dq 0x003FCDBA16A00000
  .rdata:0x0000000000010FC1        dq 0x003FCDDA9DD00000
  .rdata:0x0000000000010FC9        dq 0x003FCDFB11F00000
  .rdata:0x0000000000010FD1        dq 0x003FCE1B73300000
  .rdata:0x0000000000010FD9        dq 0x003FCE3BC1A00000
  .rdata:0x0000000000010FE1        dq 0x003FCE5BFD500000
  .rdata:0x0000000000010FE9        dq 0x003FCE7C26600000
  .rdata:0x0000000000010FF1        dq 0x003FCE9C3CE00000
  .rdata:0x0000000000010FF9        dq 0x003FCEBC40E00000
  .rdata:0x0000000000011001        dq 0x003FCEDC32800000
  .rdata:0x0000000000011009        dq 0x003FCEFC11D00000
  .rdata:0x0000000000011011        dq 0x003FCF1BDEE00000
  .rdata:0x0000000000011019        dq 0x003FCF3B99D00000
  .rdata:0x0000000000011021        dq 0x003FCF5B42A00000
  .rdata:0x0000000000011029        dq 0x003FCF7AD9800000
  .rdata:0x0000000000011031        dq 0x003FCF9A5E700000
  .rdata:0x0000000000011039        dq 0x003FCFB9D1900000
  .rdata:0x0000000000011041        dq 0x003FCFD932F00000
  .rdata:0x0000000000011049        dq 0x003FCFF882A00000
  .rdata:0x0000000000011051        dq 0x003FD00BE0500000
  .rdata:0x0000000000011059        dq 0x003FD01B76A00000
  .rdata:0x0000000000011061        dq 0x003FD02B04300000
  .rdata:0x0000000000011069        dq 0x003FD03A89100000
  .rdata:0x0000000000011071        dq 0x003FD04A05400000
  .rdata:0x0000000000011079        dq 0x003FD05978E00000
  .rdata:0x0000000000011081        dq 0x003FD068E3F00000
  .rdata:0x0000000000011089        dq 0x003FD07846700000
  .rdata:0x0000000000011091        dq 0x003FD087A0800000
  .rdata:0x0000000000011099        dq 0x003FD096F2100000
  .rdata:0x00000000000110A1        dq 0x003FD0A63B300000
  .rdata:0x00000000000110A9        dq 0x003FD0B57BF00000
  .rdata:0x00000000000110B1        dq 0x003FD0C4B4500000
  .rdata:0x00000000000110B9        dq 0x003FD0D3E4600000
  .rdata:0x00000000000110C1        dq 0x003FD0E30C300000
  .rdata:0x00000000000110C9        dq 0x003FD0F22BC00000
  .rdata:0x00000000000110D1        dq 0x003FD10143100000
  .rdata:0x00000000000110D9        dq 0x003FD11052400000
  .rdata:0x00000000000110E1        dq 0x003FD11F59400000
  .rdata:0x00000000000110E9        dq 0x003FD12E58300000
  .rdata:0x00000000000110F1        dq 0x003FD13D4F000000
  .rdata:0x00000000000110F9        dq 0x003FD14C3DD00000
  .rdata:0x0000000000011101        dq 0x003FD15B24A00000
  .rdata:0x0000000000011109        dq 0x003FD16A03700000
  .rdata:0x0000000000011111        dq 0x003FD178DA500000
  .rdata:0x0000000000011119        dq 0x003FD187A9400000
  .rdata:0x0000000000011121        dq 0x003FD19670600000
  .rdata:0x0000000000011129        dq 0x003FD1A52FA00000
  .rdata:0x0000000000011131        dq 0x003FD1B3E7100000
  .rdata:0x0000000000011139        dq 0x003FD1C296C00000
  .rdata:0x0000000000011141        dq 0x003FD1D13EB00000
  .rdata:0x0000000000011149        dq 0x003FD1DFDEF00000
  .rdata:0x0000000000011151        dq 0x003FD1EE77700000
  .rdata:0x0000000000011159        dq 0x003FD1FD08600000
  .rdata:0x0000000000011161        dq 0x003FD20B91A00000
  .rdata:0x0000000000011169        dq 0x003FD21A13500000
  .rdata:0x0000000000011171        dq 0x003FD2288D700000
  .rdata:0x0000000000011179        dq 0x003FD23700100000
  .rdata:0x0000000000011181        dq 0x003FD2456B300000
  .rdata:0x0000000000011189        dq 0x003FD253CED00000
  .rdata:0x0000000000011191        dq 0x003FD2622B000000
  .rdata:0x0000000000011199        dq 0x003FD2707FD00000
  .rdata:0x00000000000111A1        dq 0x003FD27ECD400000
  .rdata:0x00000000000111A9        dq 0x003FD28D13600000
  .rdata:0x00000000000111B1        dq 0x003FD29B52200000
  .rdata:0x00000000000111B9        dq 0x003FD2A989A00000
  .rdata:0x00000000000111C1        dq 0x003FD2B7B9E00000
  .rdata:0x00000000000111C9        dq 0x003FD2C5E2E00000
  .rdata:0x00000000000111D1        dq 0x003FD2D404B00000
  .rdata:0x00000000000111D9        dq 0x003FD2E21F500000
  .rdata:0x00000000000111E1        dq 0x003FD2F032C00000
  .rdata:0x00000000000111E9        dq 0x003FD2FE3F200000
  .rdata:0x00000000000111F1        dq 0x003FD30C44700000
  .rdata:0x00000000000111F9        dq 0x003FD31A42B00000
  .rdata:0x0000000000011201        dq 0x003FD32839E00000
  .rdata:0x0000000000011209        dq 0x003FD3362A100000
  .rdata:0x0000000000011211        dq 0x003FD34413500000
  .rdata:0x0000000000011219        dd 0x00000000
  .rdata:0x000000000001121D        dw 0x0000
  .rdata:0x000000000001121F        db 0x00
  .rdata:0x0000000000011220 data_0x11220:
  .rdata:0x0000000000011220        dq 0x0000000000000000
  .rdata:0x0000000000011228        dq 0x3DB20ABC22B2208F
  .rdata:0x0000000000011230        dq 0x3DB10F69332E0DD4
  .rdata:0x0000000000011238        dq 0x3DCE950DE87ED257
  .rdata:0x0000000000011240        dq 0x3DD3F3443B626D69
  .rdata:0x0000000000011248        dq 0x3DF45AEAA5363E57
  .rdata:0x0000000000011250        dq 0x3DC443683CE1BF0B
  .rdata:0x0000000000011258        dq 0x3DF989CD60C6A511
  .rdata:0x0000000000011260        dq 0x3DFD626F201F2E9F
  .rdata:0x0000000000011268        dq 0x3DE94F8BB8DABDCD
  .rdata:0x0000000000011270        dq 0x3E0088D8EF423015
  .rdata:0x0000000000011278        dq 0x3E080413A62B79AD
  .rdata:0x0000000000011280        dq 0x3E059717C0EED3C4
  .rdata:0x0000000000011288        dq 0x3DAD4A77ADD44902
  .rdata:0x0000000000011290        dq 0x3E0E763FF037300E
  .rdata:0x0000000000011298        dq 0x3DE162D74706F6C3
  .rdata:0x00000000000112A0        dq 0x3E0601CC1F4DBC14
  .rdata:0x00000000000112A8        dq 0x3DEAF3E051F6E5BF
  .rdata:0x00000000000112B0        dq 0x3E097A0B1E1AF3EB
  .rdata:0x00000000000112B8        dq 0x3DC0A38970C002C7
  .rdata:0x00000000000112C0        dw 0xC751
  .rdata:0x00000000000112C2        db "W\x00"
  .rdata:0x00000000000112C4        dq 0xEECD6E0E3E102E00
  .rdata:0x00000000000112CC        dq 0x7003B5AF3E155B00
  .rdata:0x00000000000112D4        dq 0xB336A36D3DDF8629
  .rdata:0x00000000000112DC        dq 0x4A06EA4F3E1057B9
  .rdata:0x00000000000112E4        dq 0x9EA1BCAD3E134BC8
  .rdata:0x00000000000112EC        dq 0xB4F7EA2A3E1643DA
  .rdata:0x00000000000112F4        dq 0x38F7FCEF3E1D66A7
  .rdata:0x00000000000112FC        dq 0xC670F0883DF6B2E0
  .rdata:0x0000000000011304        dq 0x093ACAB33DF3E954
  .rdata:0x000000000001130C        dq 0xE7275DA73E047209
  .rdata:0x0000000000011314        dq 0x7771B9E73E1D708F
  .rdata:0x000000000001131C        dq 0xA70A06603E1FDF9E
  .rdata:0x0000000000011324        dq 0x1F4DBC143E0827BF
  .rdata:0x000000000001132C        dq 0x106A5E5B3E1601CC
  .rdata:0x0000000000011334        dq 0xF17C624B3E0637F6
  .rdata:0x000000000001133C        dq 0xCE80623A3E126A13
  .rdata:0x0000000000011344        dq 0xE91594DE3E093EB2
  .rdata:0x000000000001134C        dq 0x108FA0313E1430D1
  .rdata:0x0000000000011354        dq 0x0BBAF2413E1D6B10
  .rdata:0x000000000001135C        dq 0x5EA6BC2B3E16879C
  .rdata:0x0000000000011364        dq 0xCDC6676C3DFF0801
  .rdata:0x000000000001136C        dq 0xBCC4AB2C3E29B63D
  .rdata:0x0000000000011374        dq 0x7DDD65443E2B022C
  .rdata:0x000000000001137C        dq 0x5703379E3DF917D0
  .rdata:0x0000000000011384        dq 0x947A1B603E154060
  .rdata:0x000000000001138C        dq 0x277CA97E3E0CD18B
  .rdata:0x0000000000011394        dq 0xC59F5FA93E17AD65
  .rdata:0x000000000001139C        dq 0x6006D0823E11884D
  .rdata:0x00000000000113A4        dq 0x3C3108F83E1711C4
  .rdata:0x00000000000113AC        dq 0xE32BE13A3E2F092E
  .rdata:0x00000000000113B4        dq 0xFD734F9A3E1714C5
  .rdata:0x00000000000113BC        dq 0xB5E084833E26BBA7
  .rdata:0x00000000000113C4        dq 0xC74D0B953DFDF48F
  .rdata:0x00000000000113CC        dq 0x48790C133E232F9B
  .rdata:0x00000000000113D4        dq 0x08C6586E3DF973E8
  .rdata:0x00000000000113DC        dq 0xF9524A983E1ECCBC
  .rdata:0x00000000000113E4        dq 0x593131B83E2115E9
  .rdata:0x00000000000113EC        dq 0x256438353E2F1740
  .rdata:0x00000000000113F4        dq 0x1D8BED803E1BCF8B
  .rdata:0x00000000000113FC        dq 0xF929D9E43E1F5FA8
  .rdata:0x0000000000011404        dq 0xD8220C943E244A4D
  .rdata:0x000000000001140C        dq 0x9304E3093E129820
  .rdata:0x0000000000011414        dq 0xABA665FE3E2A0B48
  .rdata:0x000000000001141C        dq 0x193651633E1F4D56
  .rdata:0x0000000000011424        dq 0xFE5927363E210C90
  .rdata:0x000000000001142C        dq 0x25C81CCA3DF80F78
  .rdata:0x0000000000011434        dq 0x7D6D746A3E105288
  .rdata:0x000000000001143C        dq 0xA70A06603DE09553
  .rdata:0x0000000000011444        dq 0xEC45933C3E1827BF
  .rdata:0x000000000001144C        dq 0x1BF5DBA93E06B0A8
  .rdata:0x0000000000011454        dq 0x2655D5153E105AF8
  .rdata:0x000000000001145C        dq 0xBFAEE4BF3E17E2FA
  .rdata:0x0000000000011464        dq 0xDA683FA33E0D59EC
  .rdata:0x000000000001146C        dq 0xFD3A37373E1D8B2F
  .rdata:0x0000000000011474        dq 0x61AE12043E24B8DD
  .rdata:0x000000000001147C        dq 0x49E90F9F3E13827E
  .rdata:0x0000000000011484        dq 0x1597591D3E2C8C7B
  .rdata:0x000000000001148C        dq 0x6E317B363E29EAF0
  .rdata:0x0000000000011494        dq 0x097206553E19AAA6
  .rdata:0x000000000001149C        dq 0xFC7AAC543E2E7256
  .rdata:0x00000000000114A4        dq 0xCF61A2523E261C33
  .rdata:0x00000000000114AC        dq 0x11C427303E29662B
  .rdata:0x00000000000114B4        dq 0x0B5ACB363E1843C8
  .rdata:0x00000000000114BC        dq 0x842701A43E2064BB
  .rdata:0x00000000000114C4        dq 0xB58F79D63E0A340C
  .rdata:0x00000000000114CC        dq 0x9C5E9D9A3E1A8E55
  .rdata:0x00000000000114D4        dq 0x0D7FFD6A3DE92D21
  .rdata:0x00000000000114DC        dq 0xD95163143E3F63E6
  .rdata:0x00000000000114E4        dq 0x1962350C3E2E9B0E
  .rdata:0x00000000000114EC        dq 0x38785E813E292390
  .rdata:0x00000000000114F4        dq 0x4CABA6AF3E326F88
  .rdata:0x00000000000114FC        dq 0xDC8E761C3E3B5B6A
  .rdata:0x0000000000011504        dq 0x313A1AED3DF0226A
  .rdata:0x000000000001150C        dq 0x7C738D173E3C4AD7
  .rdata:0x0000000000011514        dq 0xF18A66183E1564E8
  .rdata:0x000000000001151C        dq 0xF57776663E338FEC
  .rdata:0x0000000000011524        dq 0xF08DA0B83E3D929E
  .rdata:0x000000000001152C        dq 0xEEAA58263E39483B
  .rdata:0x0000000000011534        dq 0x590237BA3E3BDD0E
  .rdata:0x000000000001153C        dq 0xE0EBCAC73E39C4DD
  .rdata:0x0000000000011544        dq 0x82270DAC3E1AF3E9
  .rdata:0x000000000001154C        dq 0x532AB9BA3E35CE53
  .rdata:0x0000000000011554        dq 0x958886543E394F74
  .rdata:0x000000000001155C        dq 0x0BE34BF03E073427
  .rdata:0x0000000000011564        dq 0x6006D0823E0C5A00
  .rdata:0x000000000001156C        dq 0xB4ED8CF83E2711C4
  .rdata:0x0000000000011574        dq 0xCEF2D2A03E250025
  .rdata:0x000000000001157C        dq 0x0C0A75543E2ED18B
  .rdata:0x0000000000011584        dq 0x3359A7CA3E21282E
  .rdata:0x000000000001158C        dq 0x13A840253E0D70F3
  .rdata:0x0000000000011594        dq 0xC321891E3E2B7F7E
  .rdata:0x000000000001159C        dq 0x038B75503E33306E
  .rdata:0x00000000000115A4        dq 0x8CD71D643E3FC7F8
  .rdata:0x00000000000115AC        dq 0x228594743E3EB035
  .rdata:0x00000000000115B4        dq 0x52DE86E33E3A76C8
  .rdata:0x00000000000115BC        dq 0xE08658AF3E3D0EC6
  .rdata:0x00000000000115C4        dq 0xD2C00A9E3E2FA4CC
  .rdata:0x00000000000115CC        dq 0xF2C25BD13E3B84A2
  .rdata:0x00000000000115D4        dq 0x225BF6993E20A5B0
  .rdata:0x00000000000115DC        dq 0x859BF0373E3DD660
  .rdata:0x00000000000115E4        dq 0xB590CBE13E08B10F
  .rdata:0x00000000000115EC        dq 0xF31E96F63E3E8823
  .rdata:0x00000000000115F4        dq 0x5CA20F9A3E361311
  .rdata:0x00000000000115FC        dq 0x4939B9A53E2E1F87
  .rdata:0x0000000000011604        dq 0x7A3E58E23E2C9572
  .rdata:0x000000000001160C        dq 0xEA9F03343E380595
  .rdata:0x0000000000011614        dq 0x598E56093E2FF126
  .rdata:0x000000000001161C        dq 0xF856C4483E3953F5
  .rdata:0x0000000000011624        dq 0x0FF261F43E36C16F
  .rdata:0x000000000001162C        dq 0xD53D53A23E24CB22
  .rdata:0x0000000000011634        dq 0x6189F2563E35E120
  .rdata:0x000000000001163C        dq 0xFFD49C0F3E3A527F
  .rdata:0x0000000000011644        dq 0x8228D7DA3E3856FC
  .rdata:0x000000000001164C        dq 0x9444DFE03E300C2E
  .rdata:0x0000000000011654        dq 0x0EEA59A63DF113D0
  .rdata:0x000000000001165C        dq 0x0F32D7113E251063
  .rdata:0x0000000000011664        dq 0x1A10F8CF3E262E78
  .rdata:0x000000000001166C        dq 0x7E4BCD853DED3ED9
  .rdata:0x0000000000011674        dq 0x4980AD213E23654A
  .rdata:0x000000000001167C        dq 0xD4B16E643E055B78
  .rdata:0x0000000000011684        dq 0xD939F50C3E212F2D
  .rdata:0x000000000001168C        dq 0x627180FC3E37C4AD
  .rdata:0x0000000000011694        dq 0xC7E149613E281784
  .rdata:0x000000000001169C        dq 0x193651633DEA5162
  .rdata:0x00000000000116A4        dq 0x2BA176883E310C90
  .rdata:0x00000000000116AC        dq 0xE0E93D813E373C4D
  .rdata:0x00000000000116B4        dq 0xF01621AF3E2AE8A5
  .rdata:0x00000000000116BC        dq 0x74DD5B663E2AB0C6
  .rdata:0x00000000000116C4        dq 0xECBB54943E301E8B
  .rdata:0x00000000000116CC        db "o ->\x00"
  .rdata:0x00000000000116D1        dq 0x293DF0B48B724FCC
  .rdata:0x00000000000116D9        dq 0xAF3E3F831F0B61E2
  .rdata:0x00000000000116E1        dq 0xAA3DF81A97C407BC
  .rdata:0x00000000000116E9        dq 0x933E3E286C1CCBB7
  .rdata:0x00000000000116F1        dq 0x5C3E28630B49220A
  .rdata:0x00000000000116F9        dq 0x463DFF0B15C1A22C
  .rdata:0x0000000000011701        dq 0x853E355445E71C09
  .rdata:0x0000000000011709        dq 0x393E3BE630F8066D
  .rdata:0x0000000000011711        dq 0x813E2599DFF0D96C
  .rdata:0x0000000000011719        dq 0xC83E36CC85B18FB0
  .rdata:0x0000000000011721        dq 0x1F3E34476D001EA8
  .rdata:0x0000000000011729        dq 0x873E373F889E16D3
  .rdata:0x0000000000011731        dq 0xF63E3357100D792A
  .rdata:0x0000000000011739        dq 0xE23E3BD179AE6101
  .rdata:0x0000000000011741        dq 0xFB3E0CA31056C3F6
  .rdata:0x0000000000011749        dq 0x3F3E3D2870629C08
  .rdata:0x0000000000011751        dq 0xA63E3ABA3880D267
  .rdata:0x0000000000011759        dq 0x023E2C3633CB297D
  .rdata:0x0000000000011761        dq 0xE63E21843899EFEA
  .rdata:0x0000000000011769        dq 0x503E3BCCC99D2008
  .rdata:0x0000000000011771        dq 0xE13E38000544BDD3
  .rdata:0x0000000000011779        dq 0xDF3E2B91C226606A
  .rdata:0x0000000000011781        dq 0xC93E2A7ADF26B62B
  .rdata:0x0000000000011789        dq 0xF03E18764FC8826E
  .rdata:0x0000000000011791        dq 0xE33E1F4F3DE50F68
  .rdata:0x0000000000011799        dq 0x473DF760CA757995
  .rdata:0x00000000000117A1        dq 0x6F3DFC667ED38051
  .rdata:0x00000000000117A9        dq 0x6B3E3733F6196ADF
  .rdata:0x00000000000117B1        dq 0x133E2FB710F33E83
  .rdata:0x00000000000117B9        dq 0x1A3E39886EBA6410
  .rdata:0x00000000000117C1        dq 0x713DFB5368D0AF8C
  .rdata:0x00000000000117C9        dq 0xFB3E358C691B8D29
  .rdata:0x00000000000117D1        dq 0x973DFE9465226D08
  .rdata:0x00000000000117D9        dq 0x183E33587E063F00
  .rdata:0x00000000000117E1        dq 0x543E3618E702129F
  .rdata:0x00000000000117E9        dq 0x4A3E361C33FC7AAC
  .rdata:0x00000000000117F1        dq 0x213E3F07A6840860
  .rdata:0x00000000000117F9        dq 0x0B3E3C34BFE49454
  .rdata:0x0000000000011801        dq 0x633E38B1F00E4130
  .rdata:0x0000000000011809        dq 0x363E3F434284D61B
  .rdata:0x0000000000011811        dq 0xDE3E3A63095E3974
  .rdata:0x0000000000011819        dq 0xA63E34428656B919
  .rdata:0x0000000000011821        dq 0x1C3E36CA9201B2D9
  .rdata:0x0000000000011829        dq 0x303E2738823A2A93
  .rdata:0x0000000000011831        dq 0xFE3E3C11880E1792
  .rdata:0x0000000000011839        dq 0x173E313DDC8D6D52
  .rdata:0x0000000000011841        dq 0x503E33EED58922E9
  .rdata:0x0000000000011849        dq 0x8B3E295992846BDD
  .rdata:0x0000000000011851        dq 0xC43E0DDB4D5F2E27
  .rdata:0x0000000000011859        dq 0x343DF1A5F12A0635
  .rdata:0x0000000000011861        dq 0x5E3E4642F0882C3C
  .rdata:0x0000000000011869        dq 0xE43E2AEE9BA7F647
  .rdata:0x0000000000011871        dq 0x2E3E264B7F834A60
  .rdata:0x0000000000011879        dq 0x013E290D42E24379
  .rdata:0x0000000000011881        dq 0x5B3E4C272008134F
  .rdata:0x0000000000011889        dq 0x483E4A782E16D6CF
  .rdata:0x0000000000011891        dq 0x213E44505C79DA66
  .rdata:0x0000000000011899        dq 0xBC3E4CA9D4EA4DCD
  .rdata:0x00000000000118A1        dq 0x133E297D3D627CD5
  .rdata:0x00000000000118A9        dq 0xDD3E20B15CF9BCAA
  .rdata:0x00000000000118B1        dq 0x483E315B2063CF76
  .rdata:0x00000000000118B9        dq 0x943E2983E6F3AA27
  .rdata:0x00000000000118C1        dq 0x0F3E3F4C64F4FFE9
  .rdata:0x00000000000118C9        dq 0xB83E46BEBA7CE85A
  .rdata:0x00000000000118D1        dq 0xAB3E3B9C69FD4EA6
  .rdata:0x00000000000118D9        dq 0xD13E2B6AA5835FA4
  .rdata:0x00000000000118E1        dq 0xE03E43CCC3790FED
  .rdata:0x00000000000118E9        dq 0x9D3E29C04CC4404F
  .rdata:0x00000000000118F1        dq 0x123E40734B7A75D8
  .rdata:0x00000000000118F9        dq 0x943E1B4404C4E016
  .rdata:0x0000000000011901        dq 0xCD3E40C565C2CE48
  .rdata:0x0000000000011909        dq 0x4E3E33C71441D935
  .rdata:0x0000000000011911        dq 0x433D72A492556B3B
  .rdata:0x0000000000011919        dq 0xF43E20FA090341DC
  .rdata:0x0000000000011921        dq 0x453E2E8F7009E3D9
  .rdata:0x0000000000011929        dq 0x563E4B1BF68B048A
  .rdata:0x0000000000011931        dq 0xBD3E3EEE52DFFAA9
  .rdata:0x0000000000011939        dq 0x663E456B0900E465
  .rdata:0x0000000000011941        dq 0x603E4D929EF57776
  .rdata:0x0000000000011949        dq 0xF03E486EA28637E2
  .rdata:0x0000000000011951        dq 0x743E4665AFF10CA2
  .rdata:0x0000000000011959        dq 0xC73E2F11FDAF48EC
  .rdata:0x0000000000011961        dq 0x653E4CBE1B86A4D1
  .rdata:0x0000000000011969        dq 0x1D3E25B05BFEA876
  .rdata:0x0000000000011971        dq 0x9F3E41CEC20A1A4A
  .rdata:0x0000000000011979        dq 0x703E41CD5F0A409B
  .rdata:0x0000000000011981        dq 0x603E453656C82650
  .rdata:0x0000000000011989        dq 0xD23E377ED8352822
  .rdata:0x0000000000011991        dq 0xF23E2417BC3040B9
  .rdata:0x0000000000011999        dq 0xE93E408EEF7B79EF
  .rdata:0x00000000000119A1        dq 0x573E4DC76F39DC57
  .rdata:0x00000000000119A9        dq 0x0C3E4C0493A70CF4
  .rdata:0x00000000000119B1        dq 0xBA3E4A83D6CEA5A6
  .rdata:0x00000000000119B9        dq 0x0A3E30D6700DC557
  .rdata:0x00000000000119C1        dq 0x153E44C96C12E8BD
  .rdata:0x00000000000119C9        dq 0x423E3D2C1993E323
  .rdata:0x00000000000119D1        dq 0x7D3E22C721135F82
  .rdata:0x00000000000119D9        dq 0x2B3E279A3E4DDA74
  .rdata:0x00000000000119E1        dq 0x313DFCF89F6941A7
  .rdata:0x00000000000119E9        dq 0xDB3E2149A702F108
  .rdata:0x00000000000119F1        dq 0x0A3E4EAD4B7C8175
  .rdata:0x00000000000119F9        dq 0x2F3E4E6930FE63E7
  .rdata:0x0000000000011A01        dq 0x923E41E106BED9EE
  .rdata:0x0000000000011A09        dq 0x7C3E2D682B82F11C
  .rdata:0x0000000000011A11        dq 0xF63E3A07F188DBA4
  .rdata:0x0000000000011A19        dq 0x253E40F9342DC172
  .rdata:0x0000000000011A21        dq 0x003E03EF3FDE623E
  .rdata:0x0000000000011A29        dd 0x00000000
  .rdata:0x0000000000011A2D        dw 0x0000
  .rdata:0x0000000000011A2F        db 0x00
  .rdata:0x0000000000011A30 data_0x11A30:
  .rdata:0x0000000000011A30        dq 0x4000000000000000
  .rdata:0x0000000000011A38        dq 0x3FFFE01FE01FE020
  .rdata:0x0000000000011A40        dq 0x3FFFC07F01FC07F0
  .rdata:0x0000000000011A48        dq 0x3FFFA11CAA01FA12
  .rdata:0x0000000000011A50        dq 0x3FFF81F81F81F820
  .rdata:0x0000000000011A58        dq 0x3FFF6310ACA0DBB5
  .rdata:0x0000000000011A60        dq 0x3FFF44659E4A4271
  .rdata:0x0000000000011A68        dq 0x3FFF25F644230AB5
  .rdata:0x0000000000011A70        dq 0x3FFF07C1F07C1F08
  .rdata:0x0000000000011A78        dq 0x3FFEE9C7F8458E02
  .rdata:0x0000000000011A80        dq 0x3FFECC07B301ECC0
  .rdata:0x0000000000011A88        dq 0x3FFEAE807ABA01EB
  .rdata:0x0000000000011A90        dq 0x3FFE9131ABF0B767
  .rdata:0x0000000000011A98        dq 0x3FFE741AA59750E4
  .rdata:0x0000000000011AA0        dq 0x3FFE573AC901E574
  .rdata:0x0000000000011AA8        dq 0x3FFE3A9179DC1A73
  .rdata:0x0000000000011AB0        dq 0x3FFE1E1E1E1E1E1E
  .rdata:0x0000000000011AB8        dq 0x3FFE01E01E01E01E
  .rdata:0x0000000000011AC0        dq 0x3FFDE5D6E3F8868A
  .rdata:0x0000000000011AC8        dq 0x3FFDCA01DCA01DCA
  .rdata:0x0000000000011AD0        dq 0x3FFDAE6076B981DB
  .rdata:0x0000000000011AD8        dq 0x3FFD92F2231E7F8A
  .rdata:0x0000000000011AE0        dq 0x3FFD77B654B82C34
  .rdata:0x0000000000011AE8        dq 0x3FFD5CAC807572B2
  .rdata:0x0000000000011AF0        dq 0x3FFD41D41D41D41D
  .rdata:0x0000000000011AF8        dq 0x3FFD272CA3FC5B1A
  .rdata:0x0000000000011B00        dq 0x3FFD0CB58F6EC074
  .rdata:0x0000000000011B08        dq 0x3FFCF26E5C44BFC6
  .rdata:0x0000000000011B10        dq 0x3FFCD85689039B0B
  .rdata:0x0000000000011B18        dq 0x3FFCBE6D9601CBE7
  .rdata:0x0000000000011B20        dq 0x3FFCA4B3055EE191
  .rdata:0x0000000000011B28        dq 0x3FFC8B265AFB8A42
  .rdata:0x0000000000011B30        dq 0x3FFC71C71C71C71C
  .rdata:0x0000000000011B38        dq 0x3FFC5894D10D4986
  .rdata:0x0000000000011B40        dq 0x3FFC3F8F01C3F8F0
  .rdata:0x0000000000011B48        dq 0x3FFC26B5392EA01C
  .rdata:0x0000000000011B50        dq 0x3FFC0E070381C0E0
  .rdata:0x0000000000011B58        dq 0x3FFBF583EE868D8B
  .rdata:0x0000000000011B60        dq 0x3FFBDD2B899406F7
  .rdata:0x0000000000011B68        dq 0x3FFBC4FD65883E7B
  .rdata:0x0000000000011B70        dq 0x3FFBACF914C1BAD0
  .rdata:0x0000000000011B78        dq 0x3FFB951E2B18FF23
  .rdata:0x0000000000011B80        dq 0x3FFB7D6C3DDA338B
  .rdata:0x0000000000011B88        dq 0x3FFB65E2E3BEEE05
  .rdata:0x0000000000011B90        dq 0x3FFB4E81B4E81B4F
  .rdata:0x0000000000011B98        dq 0x3FFB37484AD806CE
  .rdata:0x0000000000011BA0        dq 0x3FFB2036406C80D9
  .rdata:0x0000000000011BA8        dq 0x3FFB094B31D922A4
  .rdata:0x0000000000011BB0        dq 0x3FFAF286BCA1AF28
  .rdata:0x0000000000011BB8        dq 0x3FFADBE87F94905E
  .rdata:0x0000000000011BC0        dq 0x3FFAC5701AC5701B
  .rdata:0x0000000000011BC8        dq 0x3FFAAF1D2F87EBFD
  .rdata:0x0000000000011BD0        dq 0x3FFA98EF606A63BE
  .rdata:0x0000000000011BD8        dq 0x3FFA82E65130E159
  .rdata:0x0000000000011BE0        dq 0x3FFA6D01A6D01A6D
  .rdata:0x0000000000011BE8        dq 0x3FFA574107688A4A
  .rdata:0x0000000000011BF0        dq 0x3FFA41A41A41A41A
  .rdata:0x0000000000011BF8        dq 0x3FFA2C2A87C51CA0
  .rdata:0x0000000000011C00        dq 0x3FFA16D3F97A4B02
  .rdata:0x0000000000011C08        dq 0x3FFA01A01A01A01A
  .rdata:0x0000000000011C10        dq 0x3FF9EC8E951033D9
  .rdata:0x0000000000011C18        dq 0x3FF9D79F176B682D
  .rdata:0x0000000000011C20        dq 0x3FF9C2D14EE4A102
  .rdata:0x0000000000011C28        dq 0x3FF9AE24EA5510DA
  .rdata:0x0000000000011C30        dq 0x3FF999999999999A
  .rdata:0x0000000000011C38        dq 0x3FF9852F0D8EC0FF
  .rdata:0x0000000000011C40        dq 0x3FF970E4F80CB872
  .rdata:0x0000000000011C48        dq 0x3FF95CBB0BE377AE
  .rdata:0x0000000000011C50        dq 0x3FF948B0FCD6E9E0
  .rdata:0x0000000000011C58        dq 0x3FF934C67F9B2CE6
  .rdata:0x0000000000011C60        dq 0x3FF920FB49D0E229
  .rdata:0x0000000000011C68        dq 0x3FF90D4F120190D5
  .rdata:0x0000000000011C70        dq 0x3FF8F9C18F9C18FA
  .rdata:0x0000000000011C78        dq 0x3FF8E6527AF1373F
  .rdata:0x0000000000011C80        dq 0x3FF8D3018D3018D3
  .rdata:0x0000000000011C88        dq 0x3FF8BFCE8062FF3A
  .rdata:0x0000000000011C90        dq 0x3FF8ACB90F6BF3AA
  .rdata:0x0000000000011C98        dq 0x3FF899C0F601899C
  .rdata:0x0000000000011CA0        dq 0x3FF886E5F0ABB04A
  .rdata:0x0000000000011CA8        dq 0x3FF87427BCC092B9
  .rdata:0x0000000000011CB0        dq 0x3FF8618618618618
  .rdata:0x0000000000011CB8        dq 0x3FF84F00C2780614
  .rdata:0x0000000000011CC0        dq 0x3FF83C977AB2BEDD
  .rdata:0x0000000000011CC8        dq 0x3FF82A4A0182A4A0
  .rdata:0x0000000000011CD0        dq 0x3FF8181818181818
  .rdata:0x0000000000011CD8        dq 0x3FF8060180601806
  .rdata:0x0000000000011CE0        dq 0x3FF7F405FD017F40
  .rdata:0x0000000000011CE8        dq 0x3FF7E225515A4F1D
  .rdata:0x0000000000011CF0        dq 0x3FF7D05F417D05F4
  .rdata:0x0000000000011CF8        dq 0x3FF7BEB3922E017C
  .rdata:0x0000000000011D00        dq 0x3FF7AD2208E0ECC3
  .rdata:0x0000000000011D08        dq 0x3FF79BAA6BB6398B
  .rdata:0x0000000000011D10        dq 0x3FF78A4C8178A4C8
  .rdata:0x0000000000011D18        dq 0x3FF77908119AC60D
  .rdata:0x0000000000011D20        dq 0x3FF767DCE434A9B1
  .rdata:0x0000000000011D28        dq 0x3FF756CAC201756D
  .rdata:0x0000000000011D30        dq 0x3FF745D1745D1746
  .rdata:0x0000000000011D38        dq 0x3FF734F0C541FE8D
  .rdata:0x0000000000011D40        dq 0x3FF724287F46DEBC
  .rdata:0x0000000000011D48        dq 0x3FF713786D9C7C09
  .rdata:0x0000000000011D50        dq 0x3FF702E05C0B8170
  .rdata:0x0000000000011D58        dq 0x3FF6F26016F26017
  .rdata:0x0000000000011D60        dq 0x3FF6E1F76B4337C7
  .rdata:0x0000000000011D68        dq 0x3FF6D1A62681C861
  .rdata:0x0000000000011D70        dq 0x3FF6C16C16C16C17
  .rdata:0x0000000000011D78        dq 0x3FF6B1490AA31A3D
  .rdata:0x0000000000011D80        dq 0x3FF6A13CD1537290
  .rdata:0x0000000000011D88        dq 0x3FF691473A88D0C0
  .rdata:0x0000000000011D90        dq 0x3FF6816816816817
  .rdata:0x0000000000011D98        dq 0x3FF6719F3601671A
  .rdata:0x0000000000011DA0        dq 0x3FF661EC6A5122F9
  .rdata:0x0000000000011DA8        dq 0x3FF6524F853B4AA3
  .rdata:0x0000000000011DB0        dq 0x3FF642C8590B2164
  .rdata:0x0000000000011DB8        dq 0x3FF63356B88AC0DE
  .rdata:0x0000000000011DC0        dq 0x3FF623FA77016240
  .rdata:0x0000000000011DC8        dq 0x3FF614B36831AE94
  .rdata:0x0000000000011DD0        dq 0x3FF6058160581606
  .rdata:0x0000000000011DD8        dq 0x3FF5F66434292DFC
  .rdata:0x0000000000011DE0        dq 0x3FF5E75BB8D015E7
  .rdata:0x0000000000011DE8        dq 0x3FF5D867C3ECE2A5
  .rdata:0x0000000000011DF0        dq 0x3FF5C9882B931057
  .rdata:0x0000000000011DF8        dq 0x3FF5BABCC647FA91
  .rdata:0x0000000000011E00        dq 0x3FF5AC056B015AC0
  .rdata:0x0000000000011E08        dq 0x3FF59D61F123CCAA
  .rdata:0x0000000000011E10        dq 0x3FF58ED2308158ED
  .rdata:0x0000000000011E18        dq 0x3FF5805601580560
  .rdata:0x0000000000011E20        dq 0x3FF571ED3C506B3A
  .rdata:0x0000000000011E28        dq 0x3FF56397BA7C52E2
  .rdata:0x0000000000011E30        dq 0x3FF5555555555555
  .rdata:0x0000000000011E38        dq 0x3FF54725E6BB82FE
  .rdata:0x0000000000011E40        dq 0x3FF5390948F40FEB
  .rdata:0x0000000000011E48        dq 0x3FF52AFF56A8054B
  .rdata:0x0000000000011E50        dq 0x3FF51D07EAE2F815
  .rdata:0x0000000000011E58        dq 0x3FF50F22E111C4C5
  .rdata:0x0000000000011E60        dq 0x3FF5015015015015
  .rdata:0x0000000000011E68        dq 0x3FF4F38F62DD4C9B
  .rdata:0x0000000000011E70        dq 0x3FF4E5E0A72F0539
  .rdata:0x0000000000011E78        dq 0x3FF4D843BEDC2C4C
  .rdata:0x0000000000011E80        dq 0x3FF4CAB88725AF6E
  .rdata:0x0000000000011E88        dq 0x3FF4BD3EDDA68FE1
  .rdata:0x0000000000011E90        dq 0x3FF4AFD6A052BF5B
  .rdata:0x0000000000011E98        dq 0x3FF4A27FAD76014A
  .rdata:0x0000000000011EA0        dq 0x3FF49539E3B2D067
  .rdata:0x0000000000011EA8        dq 0x3FF4880522014880
  .rdata:0x0000000000011EB0        dq 0x3FF47AE147AE147B
  .rdata:0x0000000000011EB8        dq 0x3FF46DCE34596066
  .rdata:0x0000000000011EC0        dq 0x3FF460CBC7F5CF9A
  .rdata:0x0000000000011EC8        dq 0x3FF453D9E2C776CA
  .rdata:0x0000000000011ED0        dq 0x3FF446F86562D9FB
  .rdata:0x0000000000011ED8        dq 0x3FF43A2730ABEE4D
  .rdata:0x0000000000011EE0        dq 0x3FF42D6625D51F87
  .rdata:0x0000000000011EE8        dq 0x3FF420B5265E5951
  .rdata:0x0000000000011EF0        dq 0x3FF4141414141414
  .rdata:0x0000000000011EF8        dq 0x3FF40782D10E6566
  .rdata:0x0000000000011F00        dq 0x3FF3FB013FB013FB
  .rdata:0x0000000000011F08        dq 0x3FF3EE8F42A5AF07
  .rdata:0x0000000000011F10        dq 0x3FF3E22CBCE4A902
  .rdata:0x0000000000011F18        dq 0x3FF3D5D991AA75C6
  .rdata:0x0000000000011F20        dq 0x3FF3C995A47BABE7
  .rdata:0x0000000000011F28        dq 0x3FF3BD60D9232955
  .rdata:0x0000000000011F30        dq 0x3FF3B13B13B13B14
  .rdata:0x0000000000011F38        dq 0x3FF3A524387AC822
  .rdata:0x0000000000011F40        dq 0x3FF3991C2C187F63
  .rdata:0x0000000000011F48        dq 0x3FF38D22D366088E
  .rdata:0x0000000000011F50        dq 0x3FF3813813813814
  .rdata:0x0000000000011F58        dq 0x3FF3755BD1C945EE
  .rdata:0x0000000000011F60        dq 0x3FF3698DF3DE0748
  .rdata:0x0000000000011F68        dq 0x3FF35DCE5F9F2AF8
  .rdata:0x0000000000011F70        dq 0x3FF3521CFB2B78C1
  .rdata:0x0000000000011F78        dq 0x3FF34679ACE01346
  .rdata:0x0000000000011F80        dq 0x3FF33AE45B57BCB2
  .rdata:0x0000000000011F88        dq 0x3FF32F5CED6A1DFA
  .rdata:0x0000000000011F90        dq 0x3FF323E34A2B10BF
  .rdata:0x0000000000011F98        dq 0x3FF3187758E9EBB6
  .rdata:0x0000000000011FA0        dq 0x3FF30D190130D190
  .rdata:0x0000000000011FA8        dq 0x3FF301C82AC40260
  .rdata:0x0000000000011FB0        dq 0x3FF2F684BDA12F68
  .rdata:0x0000000000011FB8        dq 0x3FF2EB4EA1FED14B
  .rdata:0x0000000000011FC0        dq 0x3FF2E025C04B8097
  .rdata:0x0000000000011FC8        dq 0x3FF2D50A012D50A0
  .rdata:0x0000000000011FD0        dq 0x3FF2C9FB4D812CA0
  .rdata:0x0000000000011FD8        dq 0x3FF2BEF98E5A3711
  .rdata:0x0000000000011FE0        dq 0x3FF2B404AD012B40
  .rdata:0x0000000000011FE8        dq 0x3FF2A91C92F3C105
  .rdata:0x0000000000011FF0        dq 0x3FF29E4129E4129E
  .rdata:0x0000000000011FF8        dq 0x3FF293725BB804A5
  .rdata:0x0000000000012000        dq 0x3FF288B01288B013
  .rdata:0x0000000000012008        dq 0x3FF27DFA38A1CE4D
  .rdata:0x0000000000012010        dq 0x3FF27350B8812735
  .rdata:0x0000000000012018        dq 0x3FF268B37CD60127
  .rdata:0x0000000000012020        dq 0x3FF25E22708092F1
  .rdata:0x0000000000012028        dq 0x3FF2539D7E9177B2
  .rdata:0x0000000000012030        dq 0x3FF2492492492492
  .rdata:0x0000000000012038        dq 0x3FF23EB79717605B
  .rdata:0x0000000000012040        dq 0x3FF23456789ABCDF
  .rdata:0x0000000000012048        dq 0x3FF22A0122A0122A
  .rdata:0x0000000000012050        dq 0x3FF21FB78121FB78
  .rdata:0x0000000000012058        dq 0x3FF21579804855E6
  .rdata:0x0000000000012060        dq 0x3FF20B470C67C0D9
  .rdata:0x0000000000012068        dq 0x3FF2012012012012
  .rdata:0x0000000000012070        dq 0x3FF1F7047DC11F70
  .rdata:0x0000000000012078        dq 0x3FF1ECF43C7FB84C
  .rdata:0x0000000000012080        dq 0x3FF1E2EF3B3FB874
  .rdata:0x0000000000012088        dq 0x3FF1D8F5672E4ABD
  .rdata:0x0000000000012090        dq 0x3FF1CF06ADA2811D
  .rdata:0x0000000000012098        dq 0x3FF1C522FC1CE059
  .rdata:0x00000000000120A0        dq 0x3FF1BB4A4046ED29
  .rdata:0x00000000000120A8        dq 0x3FF1B17C67F2BAE3
  .rdata:0x00000000000120B0        dq 0x3FF1A7B9611A7B96
  .rdata:0x00000000000120B8        dq 0x3FF19E0119E0119E
  .rdata:0x00000000000120C0        dq 0x3FF19453808CA29C
  .rdata:0x00000000000120C8        dq 0x3FF18AB083902BDB
  .rdata:0x00000000000120D0        dq 0x3FF1811811811812
  .rdata:0x00000000000120D8        dq 0x3FF1778A191BD684
  .rdata:0x00000000000120E0        dq 0x3FF16E0689427379
  .rdata:0x00000000000120E8        dq 0x3FF1648D50FC3201
  .rdata:0x00000000000120F0        dq 0x3FF15B1E5F75270D
  .rdata:0x00000000000120F8        dq 0x3FF151B9A3FDD5C9
  .rdata:0x0000000000012100        dq 0x3FF1485F0E0ACD3B
  .rdata:0x0000000000012108        dq 0x3FF13F0E8D344724
  .rdata:0x0000000000012110        dq 0x3FF135C81135C811
  .rdata:0x0000000000012118        dq 0x3FF12C8B89EDC0AC
  .rdata:0x0000000000012120        dq 0x3FF12358E75D3033
  .rdata:0x0000000000012128        dq 0x3FF11A3019A74826
  .rdata:0x0000000000012130        dq 0x3FF1111111111111
  .rdata:0x0000000000012138        dq 0x3FF107FBBE011080
  .rdata:0x0000000000012140        dq 0x3FF0FEF010FEF011
  .rdata:0x0000000000012148        dq 0x3FF0F5EDFAB325A2
  .rdata:0x0000000000012150        dq 0x3FF0ECF56BE69C90
  .rdata:0x0000000000012158        dq 0x3FF0E40655826011
  .rdata:0x0000000000012160        dq 0x3FF0DB20A88F4696
  .rdata:0x0000000000012168        dq 0x3FF0D24456359E3A
  .rdata:0x0000000000012170        dq 0x3FF0C9714FBCDA3B
  .rdata:0x0000000000012178        dq 0x3FF0C0A7868B4171
  .rdata:0x0000000000012180        dq 0x3FF0B7E6EC259DC8
  .rdata:0x0000000000012188        dq 0x3FF0AF2F722EECB5
  .rdata:0x0000000000012190        dq 0x3FF0A6810A6810A7
  .rdata:0x0000000000012198        dq 0x3FF09DDBA6AF8360
  .rdata:0x00000000000121A0        dq 0x3FF0953F39010954
  .rdata:0x00000000000121A8        dq 0x3FF08CABB37565E2
  .rdata:0x00000000000121B0        dq 0x3FF0842108421084
  .rdata:0x00000000000121B8        dq 0x3FF07B9F29B8EAE2
  .rdata:0x00000000000121C0        dq 0x3FF073260A47F7C6
  .rdata:0x00000000000121C8        dq 0x3FF06AB59C7912FB
  .rdata:0x00000000000121D0        dq 0x3FF0624DD2F1A9FC
  .rdata:0x00000000000121D8        dq 0x3FF059EEA0727586
  .rdata:0x00000000000121E0        dq 0x3FF05197F7D73404
  .rdata:0x00000000000121E8        dq 0x3FF04949CC1664C5
  .rdata:0x00000000000121F0        dq 0x3FF0410410410410
  .rdata:0x00000000000121F8        dq 0x3FF038C6B78247FC
  .rdata:0x0000000000012200        dq 0x3FF03091B51F5E1A
  .rdata:0x0000000000012208        dq 0x3FF02864FC7729E9
  .rdata:0x0000000000012210        dq 0x3FF0204081020408
  .rdata:0x0000000000012218        dq 0x3FF0182436517A37
  .rdata:0x0000000000012220        dq 0x3FF0101010101010
  .rdata:0x0000000000012228        dq 0x3FF0080402010080
  .rdata:0x0000000000012230        dq 0x3FF0000000000000
  .rdata:0x0000000000012238        dq 0x0000000000000000
  .rdata:0x0000000000012240 string_log10:
  .rdata:0x0000000000012240        db "log10\x00"
  .rdata:0x0000000000012246        dq 0x0000000000000000
  .rdata:0x000000000001224E        dw 0x0000
  .rdata:0x0000000000012250 data_0x12250:
  .rdata:0x0000000000012250        dq 0x433FFFFFFFFFFFFF
  .rdata:0x0000000000012258 data_0x12258:
  .rdata:0x0000000000012258        dq 0xC33FFFFFFFFFFFFF
  .rdata:0x0000000000012260 data_0x12260:
  .rdata:0x0000000000012260        dq va_ptr data_0x15640
  .rdata:0x0000000000012268        dq va_ptr data_0x156E0
  .rdata:0x0000000000012270 data_0x12270:
  .rdata:0x0000000000012270        dd 0x00000000; Characteristics
  .rdata:0x0000000000012274        dd 0x5E38C4C5; TimeDateStamp
  .rdata:0x0000000000012278        dw 0x0000; MajorVersion
  .rdata:0x000000000001227A        dw 0x0000; MinorVersion
  .rdata:0x000000000001227C        dd 0x00000002; Type
  .rdata:0x0000000000012280        dd 0x0000007D; SizeOfData
  .rdata:0x0000000000012284        dd rva_ptr data_0x123D0; AddressOfRawData
  .rdata:0x0000000000012288        dd file_ptr data_0x123D0; PointerToRawData
  .rdata:0x000000000001228C        dd 0x00000000; Characteristics
  .rdata:0x0000000000012290        dd 0x5E38C4C5; TimeDateStamp
  .rdata:0x0000000000012294        dw 0x0000; MajorVersion
  .rdata:0x0000000000012296        dw 0x0000; MinorVersion
  .rdata:0x0000000000012298        dd 0x0000000C; Type
  .rdata:0x000000000001229C        dd 0x00000014; SizeOfData
  .rdata:0x00000000000122A0        dd rva_ptr data_0x12450; AddressOfRawData
  .rdata:0x00000000000122A4        dd file_ptr data_0x12450; PointerToRawData
  .rdata:0x00000000000122A8        dd 0x00000000; Characteristics
  .rdata:0x00000000000122AC        dd 0x5E38C4C5; TimeDateStamp
  .rdata:0x00000000000122B0        dw 0x0000; MajorVersion
  .rdata:0x00000000000122B2        dw 0x0000; MinorVersion
  .rdata:0x00000000000122B4        dd 0x0000000D; Type
  .rdata:0x00000000000122B8        dd 0x000002B8; SizeOfData
  .rdata:0x00000000000122BC        dd rva_ptr data_0x12464; AddressOfRawData
  .rdata:0x00000000000122C0        dd file_ptr data_0x12464; PointerToRawData
  .rdata:0x00000000000122C4        dq 0x0000000000000000
  .rdata:0x00000000000122CC        dd 0x00000000
  .rdata:0x00000000000122D0 data_0x122D0:
  .rdata:0x00000000000122D0        dd 0x00000100; Size
  .rdata:0x00000000000122D4        dd 0x00000000; TimeDateStamp
  .rdata:0x00000000000122D8        dw 0x0000; MajorVersion
  .rdata:0x00000000000122DA        dw 0x0000; MinorVersion
  .rdata:0x00000000000122DC        dd 0x00000000; GlobalFlagsClear
  .rdata:0x00000000000122E0        dd 0x00000000; GlobalFlagsSet
  .rdata:0x00000000000122E4        dd 0x00000000; CriticalSectionDefaultTimeout
  .rdata:0x00000000000122E8        dq 0x0000000000000000; DeCommitFreeBlockThreshold
  .rdata:0x00000000000122F0        dq 0x0000000000000000; DeCommitTotalFreeThreshold
  .rdata:0x00000000000122F8        dq 0x0000000000000000; LockPrefixTable
  .rdata:0x0000000000012300        dq 0x0000000000000000; MaximumAllocationSize
  .rdata:0x0000000000012308        dq 0x0000000000000000; VirtualMemoryThreshold
  .rdata:0x0000000000012310        dq 0x0000000000000000; ProcessAffinityMask
  .rdata:0x0000000000012318        dd 0x00000000; ProcessHeapFlags
  .rdata:0x000000000001231C        dw 0x0000; CSDVersion
  .rdata:0x000000000001231E        dw 0x0000; Reserved1
  .rdata:0x0000000000012320        dq 0x0000000000000000; EditList
  .rdata:0x0000000000012328        dq va_ptr __security_cookie; SecurityCookie
  .rdata:0x0000000000012330        dq 0x0000000000000000; SEHandlerTable
  .rdata:0x0000000000012338        dq 0x0000000000000000; SEHandlerCount
  .rdata:0x0000000000012340        dq va_ptr GuardCFCheckFunction; GuardCFCheckFunctionPointer
  .rdata:0x0000000000012348        dq va_ptr GuardCFDispatchFunction; GuardCFDispatchFunctionPointer
  .rdata:0x0000000000012350        dq 0x0000000000000000; GuardCFFunctionTable
  .rdata:0x0000000000012358        dq 0x0000000000000000; GuardCFFunctionCount
  .rdata:0x0000000000012360        dd 0x00000100; GuardFlags
  .rdata:0x0000000000012364        dw 0x0000; Flags
  .rdata:0x0000000000012366        dw 0x0000; Catalog
  .rdata:0x0000000000012368        dd file_ptr data_0x0; CatalogOffset
  .rdata:0x000000000001236C        dd 0x00000000; Reserved
  .rdata:0x0000000000012370        dq 0x0000000000000000; GuardAddressTakenIatEntryTable
  .rdata:0x0000000000012378        dq 0x0000000000000000; GuardAddressTakenIatEntryCount
  .rdata:0x0000000000012380        dq 0x0000000000000000; GuardLongJumpTargetTable
  .rdata:0x0000000000012388        dq 0x0000000000000000; GuardLongJumpTargetCount
  .rdata:0x0000000000012390        dq 0x0000000000000000; DynamicValueRelocTable
  .rdata:0x0000000000012398        dq 0x0000000000000000; CHPEMetadataPointer
  .rdata:0x00000000000123A0        dq 0x0000000000000000; GuardRFFailureRoutine
  .rdata:0x00000000000123A8        dq 0x0000000000000000; GuardRFFailureRoutineFunctionPointer
  .rdata:0x00000000000123B0        dd file_ptr data_0x0; DynamicValueRelocTableOffset
  .rdata:0x00000000000123B4        dw 0x0000; DynamicValueRelocTableSection
  .rdata:0x00000000000123B6        dw 0x0000; Reserved2
  .rdata:0x00000000000123B8        dq 0x0000000000000000; GuardRFVerifyStackPointerFunctionPointer
  .rdata:0x00000000000123C0        dd file_ptr data_0x0; HotPatchTableOffset
  .rdata:0x00000000000123C4        dd 0x00000000; Reserved3
  .rdata:0x00000000000123C8        dq 0x0000000000000000; EnclaveConfigurationPointer
  .rdata:0x00000000000123D0 data_0x123D0:
  .rdata:0x00000000000123D0        dd 0x53445352; Signature
  .rdata:0x00000000000123D4        dd 0x8DCF2521; GUID.Data1; GUID
  .rdata:0x00000000000123D8        dw 0x925B; GUID.Data2
  .rdata:0x00000000000123DA        dw 0x4142; GUID.Data3
  .rdata:0x00000000000123DC        db [ 0xAF, 0xE8, 0x0A, 0xD7, 0xAC, 0x3A, 0x27, 0x0A ]; GUID.Data4
  .rdata:0x00000000000123E4        dd 0x00000001; Age
  .rdata:0x00000000000123E8        db "C:\\buildslave\\unity\\build\\artifacts\\WindowsPlayer\\Win64_nondev_m_r\\WindowsPlayer_Master_mono_x64.pdb\x00"; PdbFileName
  .rdata:0x000000000001244D        dw 0x0000
  .rdata:0x000000000001244F        db 0x00
  .rdata:0x0000000000012450 data_0x12450:
  .rdata:0x0000000000012450        dd 0x00000000; Compiler
  .rdata:0x0000000000012454        dd 0x000000CF; C/C++
  .rdata:0x0000000000012458        dd 0x000000CD; GS
  .rdata:0x000000000001245C        dd 0x00000000; SDL
  .rdata:0x0000000000012460        dd 0x000000CD; Guard
  .rdata:0x0000000000012464 data_0x12464:
  .rdata:0x0000000000012464        dq 0x0000100000000000
  .rdata:0x000000000001246C        dd 0x00009B40
  .rdata:0x0000000000012470        db ".text$mn\x00"
  .rdata:0x0000000000012479        dd 0x40000000
  .rdata:0x000000000001247D        dw 0x00AB
  .rdata:0x000000000001247F        db 0x00
  .rdata:0x0000000000012480        db " \x00"
  .rdata:0x0000000000012482        dw 0x0000
  .rdata:0x0000000000012484        db ".text$mn$00\x00"
  .rdata:0x0000000000012490        dq 0x000002100000AB60
  .rdata:0x0000000000012498        db ".text$x\x00"
  .rdata:0x00000000000124A0        dq 0x000002200000B000
  .rdata:0x00000000000124A8        db ".idata$5\x00"
  .rdata:0x00000000000124B1        dq 0x100000B220000000
  .rdata:0x00000000000124B9        dw 0x0000
  .rdata:0x00000000000124BB        db 0x00
  .rdata:0x00000000000124BC        db ".00cfg\x00"
  .rdata:0x00000000000124C3        dq 0x0000080000B23000
  .rdata:0x00000000000124CB        db 0x00
  .rdata:0x00000000000124CC        db ".CRT$XCA\x00"
  .rdata:0x00000000000124D5        dq 0x080000B238000000
  .rdata:0x00000000000124DD        dw 0x0000
  .rdata:0x00000000000124DF        db 0x00
  .rdata:0x00000000000124E0        db ".CRT$XCAA\x00"
  .rdata:0x00000000000124EA        dq 0x00080000B2400000
  .rdata:0x00000000000124F2        dw 0x0000
  .rdata:0x00000000000124F4        db ".CRT$XCZ\x00"
  .rdata:0x00000000000124FD        dq 0x080000B248000000
  .rdata:0x0000000000012505        dw 0x0000
  .rdata:0x0000000000012507        db 0x00
  .rdata:0x0000000000012508        db ".CRT$XIA\x00"
  .rdata:0x0000000000012511        dq 0x080000B250000000
  .rdata:0x0000000000012519        dw 0x0000
  .rdata:0x000000000001251B        db 0x00
  .rdata:0x000000000001251C        db ".CRT$XIAA\x00"
  .rdata:0x0000000000012526        dq 0x00080000B2580000
  .rdata:0x000000000001252E        dw 0x0000
  .rdata:0x0000000000012530        db ".CRT$XIAC\x00"
  .rdata:0x000000000001253A        dq 0x00180000B2600000
  .rdata:0x0000000000012542        dw 0x0000
  .rdata:0x0000000000012544        db ".CRT$XIC\x00"
  .rdata:0x000000000001254D        dq 0x080000B278000000
  .rdata:0x0000000000012555        dw 0x0000
  .rdata:0x0000000000012557        db 0x00
  .rdata:0x0000000000012558        db ".CRT$XIZ\x00"
  .rdata:0x0000000000012561        dq 0x080000B280000000
  .rdata:0x0000000000012569        dw 0x0000
  .rdata:0x000000000001256B        db 0x00
  .rdata:0x000000000001256C        db ".CRT$XPA\x00"
  .rdata:0x0000000000012575        dq 0x100000B288000000
  .rdata:0x000000000001257D        dw 0x0000
  .rdata:0x000000000001257F        db 0x00
  .rdata:0x0000000000012580        db ".CRT$XPX\x00"
  .rdata:0x0000000000012589        dq 0x080000B298000000
  .rdata:0x0000000000012591        dw 0x0000
  .rdata:0x0000000000012593        db 0x00
  .rdata:0x0000000000012594        db ".CRT$XPXA\x00"
  .rdata:0x000000000001259E        dq 0x00080000B2A00000
  .rdata:0x00000000000125A6        dw 0x0000
  .rdata:0x00000000000125A8        db ".CRT$XPZ\x00"
  .rdata:0x00000000000125B1        dq 0x080000B2A8000000
  .rdata:0x00000000000125B9        dw 0x0000
  .rdata:0x00000000000125BB        db 0x00
  .rdata:0x00000000000125BC        db ".CRT$XTA\x00"
  .rdata:0x00000000000125C5        dq 0x100000B2B0000000
  .rdata:0x00000000000125CD        dw 0x0000
  .rdata:0x00000000000125CF        db 0x00
  .rdata:0x00000000000125D0        db ".CRT$XTZ\x00"
  .rdata:0x00000000000125D9        dq 0x100000B2C0000000
  .rdata:0x00000000000125E1        db "q\x00"
  .rdata:0x00000000000125E3        db 0x00
  .rdata:0x00000000000125E4        db ".rdata\x00"
  .rdata:0x00000000000125EB        dq 0x000350000123D000
  .rdata:0x00000000000125F3        db 0x00
  .rdata:0x00000000000125F4        db ".rdata$zzzdbg\x00"
  .rdata:0x0000000000012602        dq 0x0008000127200000
  .rdata:0x000000000001260A        dw 0x0000
  .rdata:0x000000000001260C        db ".rtc$IAA\x00"
  .rdata:0x0000000000012615        dq 0x0800012728000000
  .rdata:0x000000000001261D        dw 0x0000
  .rdata:0x000000000001261F        db 0x00
  .rdata:0x0000000000012620        db ".rtc$IZZ\x00"
  .rdata:0x0000000000012629        dq 0x0800012730000000
  .rdata:0x0000000000012631        dw 0x0000
  .rdata:0x0000000000012633        db 0x00
  .rdata:0x0000000000012634        db ".rtc$TAA\x00"
  .rdata:0x000000000001263D        dq 0x0800012738000000
  .rdata:0x0000000000012645        dw 0x0000
  .rdata:0x0000000000012647        db 0x00
  .rdata:0x0000000000012648        db ".rtc$TZZ\x00"
  .rdata:0x0000000000012651        dq 0xD000012740000000
  .rdata:0x0000000000012659        dw 0x0009
  .rdata:0x000000000001265B        db 0x00
  .rdata:0x000000000001265C        db ".xdata\x00"
  .rdata:0x0000000000012663        dq 0x0000880001311000
  .rdata:0x000000000001266B        db 0x00
  .rdata:0x000000000001266C        db ".edata\x00"
  .rdata:0x0000000000012673        dq 0x0000280001319800
  .rdata:0x000000000001267B        db 0x00
  .rdata:0x000000000001267C        db ".idata$2\x00"
  .rdata:0x0000000000012685        dq 0x18000131C0000000
  .rdata:0x000000000001268D        dw 0x0000
  .rdata:0x000000000001268F        db 0x00
  .rdata:0x0000000000012690        db ".idata$3\x00"
  .rdata:0x0000000000012699        dq 0x20000131D8000000
  .rdata:0x00000000000126A1        dw 0x0002
  .rdata:0x00000000000126A3        db 0x00
  .rdata:0x00000000000126A4        db ".idata$4\x00"
  .rdata:0x00000000000126AD        dq 0xE6000133F8000000
  .rdata:0x00000000000126B5        dw 0x0004
  .rdata:0x00000000000126B7        db 0x00
  .rdata:0x00000000000126B8        db ".idata$6\x00"
  .rdata:0x00000000000126C1        dq 0xF000014000000000
  .rdata:0x00000000000126C9        dw 0x0008
  .rdata:0x00000000000126CB        db 0x00
  .rdata:0x00000000000126CC        db ".data\x00"
  .rdata:0x00000000000126D2        dq 0x12D8000148F00000
  .rdata:0x00000000000126DA        dw 0x0000
  .rdata:0x00000000000126DC        db ".bss\x00"
  .rdata:0x00000000000126E1        dq 0x1800016000000000
  .rdata:0x00000000000126E9        dw 0x000C
  .rdata:0x00000000000126EB        db 0x00
  .rdata:0x00000000000126EC        db ".pdata\x00"
  .rdata:0x00000000000126F3        dq 0x0002B00001700000
  .rdata:0x00000000000126FB        db 0x00
  .rdata:0x00000000000126FC        db ".rsrc$01\x00"
  .rdata:0x0000000000012705        dq 0x30000172B0000000
  .rdata:0x000000000001270D        dw 0x089E
  .rdata:0x000000000001270F        db 0x00
  .rdata:0x0000000000012710        db ".rsrc$02\x00"
  .rdata:0x0000000000012719        dq 0x0000000000000000
  .rdata:0x0000000000012721        dd 0x00000000
  .rdata:0x0000000000012725        dw 0x0000
  .rdata:0x0000000000012727        db 0x00
  .rdata:0x0000000000012728 data_0x12728:
  .rdata:0x0000000000012728        dq 0x0000000000000000
  .rdata:0x0000000000012730        dq 0x0000000000000000
  .rdata:0x0000000000012738 data_0x12738:
  .rdata:0x0000000000012738        dq 0x0000000000000000
  .rdata:0x0000000000012740        db 0x01; Version_Flags
  .rdata:0x0000000000012741        db 0x06; SizeOfProlog
  .rdata:0x0000000000012742        db 0x02; CountOfCodes
  .rdata:0x0000000000012743        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012744        dw 0x3206; UnwindCode1
  .rdata:0x0000000000012746        dw 0x3002; UnwindCode2
  .rdata:0x0000000000012748        db 0x01; Version_Flags
  .rdata:0x0000000000012749        db 0x04; SizeOfProlog
  .rdata:0x000000000001274A        db 0x01; CountOfCodes
  .rdata:0x000000000001274B        db 0x00; FrameRegister_FrameOffset
  .rdata:0x000000000001274C        dw 0x4204; UnwindCode1
  .rdata:0x000000000001274E        dw 0x0000; UnwindCodePadding
  .rdata:0x0000000000012750        db 0x09; Version_Flags
  .rdata:0x0000000000012751        db 0x0A; SizeOfProlog
  .rdata:0x0000000000012752        db 0x04; CountOfCodes
  .rdata:0x0000000000012753        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012754        dw 0x340A; UnwindCode1
  .rdata:0x0000000000012756        dw 0x0008; UnwindCode2
  .rdata:0x0000000000012758        dw 0x520A; UnwindCode3
  .rdata:0x000000000001275A        dw 0x7006; UnwindCode4
  .rdata:0x000000000001275C        dd rva_ptr __C_specific_handler; ExceptionHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012760        dd 0x00000002; ExceptionHandlerData
  .rdata:0x0000000000012764        dd rva_ptr code_0x1110; Begin
  .rdata:0x0000000000012768        dd rva_ptr code_0x1214; End
  .rdata:0x000000000001276C        dd rva_ptr `int __cdecl __scrt_common_main_seh(void)'::`1'::filt$0; Handler; void (__cdecl __rva_ptr)( int64_t p1, int64_t p2 )
  .rdata:0x0000000000012770        dd rva_ptr code_0x1214; Target
  .rdata:0x0000000000012774        dd rva_ptr code_0x1243; Begin
  .rdata:0x0000000000012778        dd rva_ptr code_0x1255; End
  .rdata:0x000000000001277C        dd rva_ptr `int __cdecl __scrt_common_main_seh(void)'::`1'::filt$0; Handler; void (__cdecl __rva_ptr)( int64_t p1, int64_t p2 )
  .rdata:0x0000000000012780        dd rva_ptr code_0x1214; Target
  .rdata:0x0000000000012784        db 0x01; Version_Flags
  .rdata:0x0000000000012785        db 0x06; SizeOfProlog
  .rdata:0x0000000000012786        db 0x02; CountOfCodes
  .rdata:0x0000000000012787        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012788        dw 0x3206; UnwindCode1
  .rdata:0x000000000001278A        dw 0x5002; UnwindCode2
  .rdata:0x000000000001278C        db 0x09; Version_Flags
  .rdata:0x000000000001278D        db 0x04; SizeOfProlog
  .rdata:0x000000000001278E        db 0x01; CountOfCodes
  .rdata:0x000000000001278F        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012790        dw 0x2204; UnwindCode1
  .rdata:0x0000000000012792        dw 0x0000; UnwindCodePadding
  .rdata:0x0000000000012794        dd rva_ptr __C_specific_handler; ExceptionHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012798        dd 0x00000001; ExceptionHandlerData
  .rdata:0x000000000001279C        dd rva_ptr code_0x13DB; Begin
  .rdata:0x00000000000127A0        dd rva_ptr code_0x1466; End
  .rdata:0x00000000000127A4        dd rva_ptr code_0xAB7E; Handler
  .rdata:0x00000000000127A8        dd rva_ptr code_0x1466; Target
  .rdata:0x00000000000127AC        db 0x01; Version_Flags
  .rdata:0x00000000000127AD        db 0x02; SizeOfProlog
  .rdata:0x00000000000127AE        db 0x01; CountOfCodes
  .rdata:0x00000000000127AF        db 0x00; FrameRegister_FrameOffset
  .rdata:0x00000000000127B0        dw 0x5002; UnwindCode1
  .rdata:0x00000000000127B2        dw 0x0000; UnwindCodePadding
  .rdata:0x00000000000127B4        db 0x01; Version_Flags
  .rdata:0x00000000000127B5        db 0x06; SizeOfProlog
  .rdata:0x00000000000127B6        db 0x02; CountOfCodes
  .rdata:0x00000000000127B7        db 0x00; FrameRegister_FrameOffset
  .rdata:0x00000000000127B8        dw 0x7206; UnwindCode1
  .rdata:0x00000000000127BA        dw 0x3002; UnwindCode2
  .rdata:0x00000000000127BC        db 0x01; Version_Flags
  .rdata:0x00000000000127BD        db 0x0D; SizeOfProlog
  .rdata:0x00000000000127BE        db 0x04; CountOfCodes
  .rdata:0x00000000000127BF        db 0x00; FrameRegister_FrameOffset
  .rdata:0x00000000000127C0        dw 0x340D; UnwindCode1
  .rdata:0x00000000000127C2        dw 0x0009; UnwindCode2
  .rdata:0x00000000000127C4        dw 0x320D; UnwindCode3
  .rdata:0x00000000000127C6        dw 0x5006; UnwindCode4
  .rdata:0x00000000000127C8        db 0x01; Version_Flags
  .rdata:0x00000000000127C9        db 0x07; SizeOfProlog
  .rdata:0x00000000000127CA        db 0x02; CountOfCodes
  .rdata:0x00000000000127CB        db 0x00; FrameRegister_FrameOffset
  .rdata:0x00000000000127CC        dw 0x0107; UnwindCode1
  .rdata:0x00000000000127CE        dw 0x0013; UnwindCode2
  .rdata:0x00000000000127D0        db 0x01; Version_Flags
  .rdata:0x00000000000127D1        db 0x15; SizeOfProlog
  .rdata:0x00000000000127D2        db 0x05; CountOfCodes
  .rdata:0x00000000000127D3        db 0x00; FrameRegister_FrameOffset
  .rdata:0x00000000000127D4        dw 0x3415; UnwindCode1
  .rdata:0x00000000000127D6        dw 0x00BA; UnwindCode2
  .rdata:0x00000000000127D8        dw 0x0115; UnwindCode3
  .rdata:0x00000000000127DA        dw 0x00B8; UnwindCode4
  .rdata:0x00000000000127DC        dw 0x5006; UnwindCode5
  .rdata:0x00000000000127DE        dw 0x0000; UnwindCodePadding
  .rdata:0x00000000000127E0        db 0x01; Version_Flags
  .rdata:0x00000000000127E1        db 0x0A; SizeOfProlog
  .rdata:0x00000000000127E2        db 0x04; CountOfCodes
  .rdata:0x00000000000127E3        db 0x00; FrameRegister_FrameOffset
  .rdata:0x00000000000127E4        dw 0x340A; UnwindCode1
  .rdata:0x00000000000127E6        dw 0x0006; UnwindCode2
  .rdata:0x00000000000127E8        dw 0x320A; UnwindCode3
  .rdata:0x00000000000127EA        dw 0x7006; UnwindCode4
  .rdata:0x00000000000127EC        db 0x01; Version_Flags
  .rdata:0x00000000000127ED        db 0x12; SizeOfProlog
  .rdata:0x00000000000127EE        db 0x08; CountOfCodes
  .rdata:0x00000000000127EF        db 0x00; FrameRegister_FrameOffset
  .rdata:0x00000000000127F0        dw 0x5412; UnwindCode1
  .rdata:0x00000000000127F2        dw 0x0008; UnwindCode2
  .rdata:0x00000000000127F4        dw 0x3412; UnwindCode3
  .rdata:0x00000000000127F6        dw 0x0007; UnwindCode4
  .rdata:0x00000000000127F8        dw 0x1212; UnwindCode5
  .rdata:0x00000000000127FA        dw 0xE00E; UnwindCode6
  .rdata:0x00000000000127FC        dw 0x700C; UnwindCode7
  .rdata:0x00000000000127FE        dw 0x600B; UnwindCode8
  .rdata:0x0000000000012800        db 0x01; Version_Flags
  .rdata:0x0000000000012801        db 0x00; SizeOfProlog
  .rdata:0x0000000000012802        db 0x00; CountOfCodes
  .rdata:0x0000000000012803        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012804        db 0x01; Version_Flags
  .rdata:0x0000000000012805        db 0x1C; SizeOfProlog
  .rdata:0x0000000000012806        db 0x0C; CountOfCodes
  .rdata:0x0000000000012807        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012808        dw 0x641C; UnwindCode1
  .rdata:0x000000000001280A        dw 0x0010; UnwindCode2
  .rdata:0x000000000001280C        dw 0x541C; UnwindCode3
  .rdata:0x000000000001280E        dw 0x000F; UnwindCode4
  .rdata:0x0000000000012810        dw 0x341C; UnwindCode5
  .rdata:0x0000000000012812        dw 0x000E; UnwindCode6
  .rdata:0x0000000000012814        dw 0x721C; UnwindCode7
  .rdata:0x0000000000012816        dw 0xF018; UnwindCode8
  .rdata:0x0000000000012818        dw 0xE016; UnwindCode9
  .rdata:0x000000000001281A        dw 0xD014; UnwindCode10
  .rdata:0x000000000001281C        dw 0xC012; UnwindCode11
  .rdata:0x000000000001281E        dw 0x7010; UnwindCode12
  .rdata:0x0000000000012820        db 0x02; Version_Flags
  .rdata:0x0000000000012821        db 0x01; SizeOfProlog
  .rdata:0x0000000000012822        db 0x03; CountOfCodes
  .rdata:0x0000000000012823        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012824        dw 0x1602; UnwindCode1
  .rdata:0x0000000000012826        dw 0x0600; UnwindCode2
  .rdata:0x0000000000012828        dw 0x7001; UnwindCode3
  .rdata:0x000000000001282A        dw 0x0000; UnwindCodePadding
  .rdata:0x000000000001282C        db 0x01; Version_Flags
  .rdata:0x000000000001282D        db 0x00; SizeOfProlog
  .rdata:0x000000000001282E        db 0x00; CountOfCodes
  .rdata:0x000000000001282F        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012830        db 0x01; Version_Flags
  .rdata:0x0000000000012831        db 0x00; SizeOfProlog
  .rdata:0x0000000000012832        db 0x00; CountOfCodes
  .rdata:0x0000000000012833        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012834        db 0x01; Version_Flags
  .rdata:0x0000000000012835        db 0x00; SizeOfProlog
  .rdata:0x0000000000012836        db 0x00; CountOfCodes
  .rdata:0x0000000000012837        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012838        db 0x01; Version_Flags
  .rdata:0x0000000000012839        db 0x00; SizeOfProlog
  .rdata:0x000000000001283A        db 0x00; CountOfCodes
  .rdata:0x000000000001283B        db 0x00; FrameRegister_FrameOffset
  .rdata:0x000000000001283C        db 0x09; Version_Flags
  .rdata:0x000000000001283D        db 0x0D; SizeOfProlog
  .rdata:0x000000000001283E        db 0x01; CountOfCodes
  .rdata:0x000000000001283F        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012840        dw 0x420D; UnwindCode1
  .rdata:0x0000000000012842        dw 0x0000; UnwindCodePadding
  .rdata:0x0000000000012844        dd rva_ptr __C_specific_handler; ExceptionHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012848        dd 0x00000001; ExceptionHandlerData
  .rdata:0x000000000001284C        dd rva_ptr code_0x1FA5; Begin
  .rdata:0x0000000000012850        dd rva_ptr code_0x1FB4; End
  .rdata:0x0000000000012854        dd rva_ptr code_0xAB96; Handler
  .rdata:0x0000000000012858        dd rva_ptr code_0x1FD7; Target
  .rdata:0x000000000001285C        db 0x01; Version_Flags
  .rdata:0x000000000001285D        db 0x0F; SizeOfProlog
  .rdata:0x000000000001285E        db 0x06; CountOfCodes
  .rdata:0x000000000001285F        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012860        dw 0x640F; UnwindCode1
  .rdata:0x0000000000012862        dw 0x0007; UnwindCode2
  .rdata:0x0000000000012864        dw 0x340F; UnwindCode3
  .rdata:0x0000000000012866        dw 0x0006; UnwindCode4
  .rdata:0x0000000000012868        dw 0x320F; UnwindCode5
  .rdata:0x000000000001286A        dw 0x700B; UnwindCode6
  .rdata:0x000000000001286C        db 0x01; Version_Flags
  .rdata:0x000000000001286D        db 0x05; SizeOfProlog
  .rdata:0x000000000001286E        db 0x02; CountOfCodes
  .rdata:0x000000000001286F        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012870        dw 0x7405; UnwindCode1
  .rdata:0x0000000000012872        dw 0x0001; UnwindCode2
  .rdata:0x0000000000012874        db 0x01; Version_Flags
  .rdata:0x0000000000012875        db 0x09; SizeOfProlog
  .rdata:0x0000000000012876        db 0x02; CountOfCodes
  .rdata:0x0000000000012877        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012878        dw 0x3209; UnwindCode1
  .rdata:0x000000000001287A        dw 0x3005; UnwindCode2
  .rdata:0x000000000001287C        db 0x01; Version_Flags
  .rdata:0x000000000001287D        db 0x1C; SizeOfProlog
  .rdata:0x000000000001287E        db 0x0C; CountOfCodes
  .rdata:0x000000000001287F        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012880        dw 0x641C; UnwindCode1
  .rdata:0x0000000000012882        dw 0x000C; UnwindCode2
  .rdata:0x0000000000012884        dw 0x541C; UnwindCode3
  .rdata:0x0000000000012886        dw 0x000B; UnwindCode4
  .rdata:0x0000000000012888        dw 0x341C; UnwindCode5
  .rdata:0x000000000001288A        dw 0x000A; UnwindCode6
  .rdata:0x000000000001288C        dw 0x321C; UnwindCode7
  .rdata:0x000000000001288E        dw 0xF018; UnwindCode8
  .rdata:0x0000000000012890        dw 0xE016; UnwindCode9
  .rdata:0x0000000000012892        dw 0xD014; UnwindCode10
  .rdata:0x0000000000012894        dw 0xC012; UnwindCode11
  .rdata:0x0000000000012896        dw 0x7010; UnwindCode12
  .rdata:0x0000000000012898        db 0x02; Version_Flags
  .rdata:0x0000000000012899        db 0x02; SizeOfProlog
  .rdata:0x000000000001289A        db 0x04; CountOfCodes
  .rdata:0x000000000001289B        db 0x00; FrameRegister_FrameOffset
  .rdata:0x000000000001289C        dw 0x1603; UnwindCode1
  .rdata:0x000000000001289E        dw 0x0600; UnwindCode2
  .rdata:0x00000000000128A0        dw 0x6002; UnwindCode3
  .rdata:0x00000000000128A2        dw 0x7001; UnwindCode4
  .rdata:0x00000000000128A4        db 0x01; Version_Flags
  .rdata:0x00000000000128A5        db 0x00; SizeOfProlog
  .rdata:0x00000000000128A6        db 0x00; CountOfCodes
  .rdata:0x00000000000128A7        db 0x00; FrameRegister_FrameOffset
  .rdata:0x00000000000128A8        db 0x01; Version_Flags
  .rdata:0x00000000000128A9        db 0x04; SizeOfProlog
  .rdata:0x00000000000128AA        db 0x01; CountOfCodes
  .rdata:0x00000000000128AB        db 0x00; FrameRegister_FrameOffset
  .rdata:0x00000000000128AC        dw 0x4204; UnwindCode1
  .rdata:0x00000000000128AE        dw 0x0000; UnwindCodePadding
  .rdata:0x00000000000128B0        db 0x01; Version_Flags
  .rdata:0x00000000000128B1        db 0x04; SizeOfProlog
  .rdata:0x00000000000128B2        db 0x01; CountOfCodes
  .rdata:0x00000000000128B3        db 0x00; FrameRegister_FrameOffset
  .rdata:0x00000000000128B4        dw 0x4204; UnwindCode1
  .rdata:0x00000000000128B6        dw 0x0000; UnwindCodePadding
  .rdata:0x00000000000128B8        db 0x01; Version_Flags
  .rdata:0x00000000000128B9        db 0x14; SizeOfProlog
  .rdata:0x00000000000128BA        db 0x08; CountOfCodes
  .rdata:0x00000000000128BB        db 0x00; FrameRegister_FrameOffset
  .rdata:0x00000000000128BC        dw 0x6414; UnwindCode1
  .rdata:0x00000000000128BE        dw 0x0008; UnwindCode2
  .rdata:0x00000000000128C0        dw 0x5414; UnwindCode3
  .rdata:0x00000000000128C2        dw 0x0007; UnwindCode4
  .rdata:0x00000000000128C4        dw 0x3414; UnwindCode5
  .rdata:0x00000000000128C6        dw 0x0006; UnwindCode6
  .rdata:0x00000000000128C8        dw 0x3214; UnwindCode7
  .rdata:0x00000000000128CA        dw 0x7010; UnwindCode8
  .rdata:0x00000000000128CC        db 0x01; Version_Flags
  .rdata:0x00000000000128CD        db 0x13; SizeOfProlog
  .rdata:0x00000000000128CE        db 0x08; CountOfCodes
  .rdata:0x00000000000128CF        db 0x00; FrameRegister_FrameOffset
  .rdata:0x00000000000128D0        dw 0x3413; UnwindCode1
  .rdata:0x00000000000128D2        dw 0x000C; UnwindCode2
  .rdata:0x00000000000128D4        dw 0x5213; UnwindCode3
  .rdata:0x00000000000128D6        dw 0xF00C; UnwindCode4
  .rdata:0x00000000000128D8        dw 0xE00A; UnwindCode5
  .rdata:0x00000000000128DA        dw 0x7008; UnwindCode6
  .rdata:0x00000000000128DC        dw 0x6007; UnwindCode7
  .rdata:0x00000000000128DE        dw 0x5006; UnwindCode8
  .rdata:0x00000000000128E0        db 0x01; Version_Flags
  .rdata:0x00000000000128E1        db 0x15; SizeOfProlog
  .rdata:0x00000000000128E2        db 0x09; CountOfCodes
  .rdata:0x00000000000128E3        db 0x00; FrameRegister_FrameOffset
  .rdata:0x00000000000128E4        dw 0xC415; UnwindCode1
  .rdata:0x00000000000128E6        dw 0x0005; UnwindCode2
  .rdata:0x00000000000128E8        dw 0x7415; UnwindCode3
  .rdata:0x00000000000128EA        dw 0x0004; UnwindCode4
  .rdata:0x00000000000128EC        dw 0x6415; UnwindCode5
  .rdata:0x00000000000128EE        dw 0x0003; UnwindCode6
  .rdata:0x00000000000128F0        dw 0x3415; UnwindCode7
  .rdata:0x00000000000128F2        dw 0x0002; UnwindCode8
  .rdata:0x00000000000128F4        dw 0xF015; UnwindCode9
  .rdata:0x00000000000128F6        dw 0x0000; UnwindCodePadding
  .rdata:0x00000000000128F8        db 0x01; Version_Flags
  .rdata:0x00000000000128F9        db 0x0F; SizeOfProlog
  .rdata:0x00000000000128FA        db 0x04; CountOfCodes
  .rdata:0x00000000000128FB        db 0x00; FrameRegister_FrameOffset
  .rdata:0x00000000000128FC        dw 0x340F; UnwindCode1
  .rdata:0x00000000000128FE        dw 0x0006; UnwindCode2
  .rdata:0x0000000000012900        dw 0x320F; UnwindCode3
  .rdata:0x0000000000012902        dw 0x700B; UnwindCode4
  .rdata:0x0000000000012904        db 0x01; Version_Flags
  .rdata:0x0000000000012905        db 0x18; SizeOfProlog
  .rdata:0x0000000000012906        db 0x0A; CountOfCodes
  .rdata:0x0000000000012907        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012908        dw 0x6418; UnwindCode1
  .rdata:0x000000000001290A        dw 0x000C; UnwindCode2
  .rdata:0x000000000001290C        dw 0x5418; UnwindCode3
  .rdata:0x000000000001290E        dw 0x000B; UnwindCode4
  .rdata:0x0000000000012910        dw 0x3418; UnwindCode5
  .rdata:0x0000000000012912        dw 0x000A; UnwindCode6
  .rdata:0x0000000000012914        dw 0x5218; UnwindCode7
  .rdata:0x0000000000012916        dw 0xF014; UnwindCode8
  .rdata:0x0000000000012918        dw 0xE012; UnwindCode9
  .rdata:0x000000000001291A        dw 0x7010; UnwindCode10
  .rdata:0x000000000001291C        db 0x01; Version_Flags
  .rdata:0x000000000001291D        db 0x16; SizeOfProlog
  .rdata:0x000000000001291E        db 0x04; CountOfCodes
  .rdata:0x000000000001291F        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012920        dw 0x3416; UnwindCode1
  .rdata:0x0000000000012922        dw 0x000C; UnwindCode2
  .rdata:0x0000000000012924        dw 0x9216; UnwindCode3
  .rdata:0x0000000000012926        dw 0x500F; UnwindCode4
  .rdata:0x0000000000012928        db 0x09; Version_Flags
  .rdata:0x0000000000012929        db 0x06; SizeOfProlog
  .rdata:0x000000000001292A        db 0x02; CountOfCodes
  .rdata:0x000000000001292B        db 0x00; FrameRegister_FrameOffset
  .rdata:0x000000000001292C        dw 0x3206; UnwindCode1
  .rdata:0x000000000001292E        dw 0x3002; UnwindCode2
  .rdata:0x0000000000012930        dd rva_ptr __C_specific_handler; ExceptionHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012934        dd 0x00000001; ExceptionHandlerData
  .rdata:0x0000000000012938        dd rva_ptr code_0x32D1; Begin
  .rdata:0x000000000001293C        dd rva_ptr code_0x3335; End
  .rdata:0x0000000000012940        dd rva_ptr code_0xABC8; Handler
  .rdata:0x0000000000012944        dd rva_ptr code_0x3380; Target
  .rdata:0x0000000000012948        db 0x11; Version_Flags
  .rdata:0x0000000000012949        db 0x0F; SizeOfProlog
  .rdata:0x000000000001294A        db 0x04; CountOfCodes
  .rdata:0x000000000001294B        db 0x00; FrameRegister_FrameOffset
  .rdata:0x000000000001294C        dw 0x340F; UnwindCode1
  .rdata:0x000000000001294E        dw 0x0006; UnwindCode2
  .rdata:0x0000000000012950        dw 0x320F; UnwindCode3
  .rdata:0x0000000000012952        dw 0x700B; UnwindCode4
  .rdata:0x0000000000012954        dd rva_ptr __C_specific_handler; TerminationHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012958        dd 0x00000001; TerminationHandlerData
  .rdata:0x000000000001295C        db 0x95
  .rdata:0x000000000001295D        db "2\x00"
  .rdata:0x000000000001295F        dw 0x9E00
  .rdata:0x0000000000012961        db "2\x00"
  .rdata:0x0000000000012963        dq 0x0000000000ABAE00
  .rdata:0x000000000001296B        db 0x00
  .rdata:0x000000000001296C        db 0x01; Version_Flags
  .rdata:0x000000000001296D        db 0x07; SizeOfProlog
  .rdata:0x000000000001296E        db 0x01; CountOfCodes
  .rdata:0x000000000001296F        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012970        dw 0x4207; UnwindCode1
  .rdata:0x0000000000012972        dw 0x0000; UnwindCodePadding
  .rdata:0x0000000000012974        db 0x11; Version_Flags
  .rdata:0x0000000000012975        db 0x14; SizeOfProlog
  .rdata:0x0000000000012976        db 0x06; CountOfCodes
  .rdata:0x0000000000012977        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012978        dw 0x6414; UnwindCode1
  .rdata:0x000000000001297A        dw 0x0009; UnwindCode2
  .rdata:0x000000000001297C        dw 0x3414; UnwindCode3
  .rdata:0x000000000001297E        dw 0x0008; UnwindCode4
  .rdata:0x0000000000012980        dw 0x5214; UnwindCode5
  .rdata:0x0000000000012982        dw 0x7010; UnwindCode6
  .rdata:0x0000000000012984        dd rva_ptr __C_specific_handler; TerminationHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012988        dd 0x00000001; TerminationHandlerData
  .rdata:0x000000000001298C        db 0xDB
  .rdata:0x000000000001298D        db "5\x00"
  .rdata:0x000000000001298F        dw 0x1300
  .rdata:0x0000000000012991        db "6\x00"
  .rdata:0x0000000000012993        dq 0x0000000000ABE300
  .rdata:0x000000000001299B        db 0x00
  .rdata:0x000000000001299C        db 0x01; Version_Flags
  .rdata:0x000000000001299D        db 0x12; SizeOfProlog
  .rdata:0x000000000001299E        db 0x02; CountOfCodes
  .rdata:0x000000000001299F        db 0x00; FrameRegister_FrameOffset
  .rdata:0x00000000000129A0        dw 0x7212; UnwindCode1
  .rdata:0x00000000000129A2        dw 0x500B; UnwindCode2
  .rdata:0x00000000000129A4        db 0x01; Version_Flags
  .rdata:0x00000000000129A5        db 0x0B; SizeOfProlog
  .rdata:0x00000000000129A6        db 0x01; CountOfCodes
  .rdata:0x00000000000129A7        db 0x00; FrameRegister_FrameOffset
  .rdata:0x00000000000129A8        dw 0x620B; UnwindCode1
  .rdata:0x00000000000129AA        dw 0x0000; UnwindCodePadding
  .rdata:0x00000000000129AC        db 0x01; Version_Flags
  .rdata:0x00000000000129AD        db 0x1D; SizeOfProlog
  .rdata:0x00000000000129AE        db 0x0C; CountOfCodes
  .rdata:0x00000000000129AF        db 0x00; FrameRegister_FrameOffset
  .rdata:0x00000000000129B0        dw 0x741D; UnwindCode1
  .rdata:0x00000000000129B2        dw 0x000B; UnwindCode2
  .rdata:0x00000000000129B4        dw 0x641D; UnwindCode3
  .rdata:0x00000000000129B6        dw 0x000A; UnwindCode4
  .rdata:0x00000000000129B8        dw 0x541D; UnwindCode5
  .rdata:0x00000000000129BA        dw 0x0009; UnwindCode6
  .rdata:0x00000000000129BC        dw 0x341D; UnwindCode7
  .rdata:0x00000000000129BE        dw 0x0008; UnwindCode8
  .rdata:0x00000000000129C0        dw 0x321D; UnwindCode9
  .rdata:0x00000000000129C2        dw 0xF019; UnwindCode10
  .rdata:0x00000000000129C4        dw 0xE017; UnwindCode11
  .rdata:0x00000000000129C6        dw 0xC015; UnwindCode12
  .rdata:0x00000000000129C8        db 0x11; Version_Flags
  .rdata:0x00000000000129C9        db 0x0F; SizeOfProlog
  .rdata:0x00000000000129CA        db 0x04; CountOfCodes
  .rdata:0x00000000000129CB        db 0x00; FrameRegister_FrameOffset
  .rdata:0x00000000000129CC        dw 0x340F; UnwindCode1
  .rdata:0x00000000000129CE        dw 0x0006; UnwindCode2
  .rdata:0x00000000000129D0        dw 0x320F; UnwindCode3
  .rdata:0x00000000000129D2        dw 0x700B; UnwindCode4
  .rdata:0x00000000000129D4        dd rva_ptr __C_specific_handler; TerminationHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x00000000000129D8        dd 0x00000001; TerminationHandlerData
  .rdata:0x00000000000129DC        db "i7\x00"
  .rdata:0x00000000000129DF        db 0x00
  .rdata:0x00000000000129E0        db "s7\x00"
  .rdata:0x00000000000129E3        dq 0x0000000000ABAE00
  .rdata:0x00000000000129EB        db 0x00
  .rdata:0x00000000000129EC        db 0x11; Version_Flags
  .rdata:0x00000000000129ED        db 0x0F; SizeOfProlog
  .rdata:0x00000000000129EE        db 0x04; CountOfCodes
  .rdata:0x00000000000129EF        db 0x00; FrameRegister_FrameOffset
  .rdata:0x00000000000129F0        dw 0x340F; UnwindCode1
  .rdata:0x00000000000129F2        dw 0x0006; UnwindCode2
  .rdata:0x00000000000129F4        dw 0x320F; UnwindCode3
  .rdata:0x00000000000129F6        dw 0x700B; UnwindCode4
  .rdata:0x00000000000129F8        dd rva_ptr __C_specific_handler; TerminationHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x00000000000129FC        dd 0x00000001; TerminationHandlerData
  .rdata:0x0000000000012A00        db "-7\x00"
  .rdata:0x0000000000012A03        db 0x00
  .rdata:0x0000000000012A04        db "77\x00"
  .rdata:0x0000000000012A07        dq 0x0000000000ABAE00
  .rdata:0x0000000000012A0F        db 0x00
  .rdata:0x0000000000012A10        db 0x09; Version_Flags
  .rdata:0x0000000000012A11        db 0x04; SizeOfProlog
  .rdata:0x0000000000012A12        db 0x01; CountOfCodes
  .rdata:0x0000000000012A13        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012A14        dw 0x4204; UnwindCode1
  .rdata:0x0000000000012A16        dw 0x0000; UnwindCodePadding
  .rdata:0x0000000000012A18        dd rva_ptr __C_specific_handler; ExceptionHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012A1C        dd 0x00000001; ExceptionHandlerData
  .rdata:0x0000000000012A20        dd rva_ptr code_0x3D0A; Begin
  .rdata:0x0000000000012A24        dd rva_ptr code_0x3D12; End
  .rdata:0x0000000000012A28        dd 0x00000001; Handler
  .rdata:0x0000000000012A2C        dd rva_ptr code_0x3D12; Target
  .rdata:0x0000000000012A30        db 0x01; Version_Flags
  .rdata:0x0000000000012A31        db 0x00; SizeOfProlog
  .rdata:0x0000000000012A32        db 0x00; CountOfCodes
  .rdata:0x0000000000012A33        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012A34        db 0x01; Version_Flags
  .rdata:0x0000000000012A35        db 0x0A; SizeOfProlog
  .rdata:0x0000000000012A36        db 0x02; CountOfCodes
  .rdata:0x0000000000012A37        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012A38        dw 0x320A; UnwindCode1
  .rdata:0x0000000000012A3A        dw 0x3006; UnwindCode2
  .rdata:0x0000000000012A3C        db 0x01; Version_Flags
  .rdata:0x0000000000012A3D        db 0x09; SizeOfProlog
  .rdata:0x0000000000012A3E        db 0x02; CountOfCodes
  .rdata:0x0000000000012A3F        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012A40        dw 0x9209; UnwindCode1
  .rdata:0x0000000000012A42        dw 0x5002; UnwindCode2
  .rdata:0x0000000000012A44        db 0x01; Version_Flags
  .rdata:0x0000000000012A45        db 0x09; SizeOfProlog
  .rdata:0x0000000000012A46        db 0x02; CountOfCodes
  .rdata:0x0000000000012A47        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012A48        dw 0x7209; UnwindCode1
  .rdata:0x0000000000012A4A        dw 0x5002; UnwindCode2
  .rdata:0x0000000000012A4C        db 0x11; Version_Flags
  .rdata:0x0000000000012A4D        db 0x0F; SizeOfProlog
  .rdata:0x0000000000012A4E        db 0x04; CountOfCodes
  .rdata:0x0000000000012A4F        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012A50        dw 0x340F; UnwindCode1
  .rdata:0x0000000000012A52        dw 0x0006; UnwindCode2
  .rdata:0x0000000000012A54        dw 0x320F; UnwindCode3
  .rdata:0x0000000000012A56        dw 0x700B; UnwindCode4
  .rdata:0x0000000000012A58        dd rva_ptr __C_specific_handler; TerminationHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012A5C        dd 0x00000001; TerminationHandlerData
  .rdata:0x0000000000012A60        dq 0x00003F0D00003EFD
  .rdata:0x0000000000012A68        dq 0x000000000000ABAE
  .rdata:0x0000000000012A70        db 0x11; Version_Flags
  .rdata:0x0000000000012A71        db 0x0F; SizeOfProlog
  .rdata:0x0000000000012A72        db 0x04; CountOfCodes
  .rdata:0x0000000000012A73        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012A74        dw 0x340F; UnwindCode1
  .rdata:0x0000000000012A76        dw 0x0006; UnwindCode2
  .rdata:0x0000000000012A78        dw 0x320F; UnwindCode3
  .rdata:0x0000000000012A7A        dw 0x700B; UnwindCode4
  .rdata:0x0000000000012A7C        dd rva_ptr __C_specific_handler; TerminationHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012A80        dd 0x00000001; TerminationHandlerData
  .rdata:0x0000000000012A84        dq 0x00003F9300003F7D
  .rdata:0x0000000000012A8C        dq 0x000000000000ABAE
  .rdata:0x0000000000012A94        db 0x11; Version_Flags
  .rdata:0x0000000000012A95        db 0x0F; SizeOfProlog
  .rdata:0x0000000000012A96        db 0x04; CountOfCodes
  .rdata:0x0000000000012A97        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012A98        dw 0x340F; UnwindCode1
  .rdata:0x0000000000012A9A        dw 0x0006; UnwindCode2
  .rdata:0x0000000000012A9C        dw 0x320F; UnwindCode3
  .rdata:0x0000000000012A9E        dw 0x700B; UnwindCode4
  .rdata:0x0000000000012AA0        dd rva_ptr __C_specific_handler; TerminationHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012AA4        dd 0x00000001; TerminationHandlerData
  .rdata:0x0000000000012AA8        dq 0x00003FF500003FC5
  .rdata:0x0000000000012AB0        dq 0x000000000000ABAE
  .rdata:0x0000000000012AB8        db 0x11; Version_Flags
  .rdata:0x0000000000012AB9        db 0x0F; SizeOfProlog
  .rdata:0x0000000000012ABA        db 0x04; CountOfCodes
  .rdata:0x0000000000012ABB        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012ABC        dw 0x340F; UnwindCode1
  .rdata:0x0000000000012ABE        dw 0x0006; UnwindCode2
  .rdata:0x0000000000012AC0        dw 0x320F; UnwindCode3
  .rdata:0x0000000000012AC2        dw 0x700B; UnwindCode4
  .rdata:0x0000000000012AC4        dd rva_ptr __C_specific_handler; TerminationHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012AC8        dd 0x00000001; TerminationHandlerData
  .rdata:0x0000000000012ACC        dd 0x00003F3D
  .rdata:0x0000000000012AD0        db "K?\x00"
  .rdata:0x0000000000012AD3        dq 0x0000000000ABAE00
  .rdata:0x0000000000012ADB        db 0x00
  .rdata:0x0000000000012ADC        db 0x01; Version_Flags
  .rdata:0x0000000000012ADD        db 0x04; SizeOfProlog
  .rdata:0x0000000000012ADE        db 0x01; CountOfCodes
  .rdata:0x0000000000012ADF        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012AE0        dw 0x6204; UnwindCode1
  .rdata:0x0000000000012AE2        dw 0x0000; UnwindCodePadding
  .rdata:0x0000000000012AE4        db 0x19; Version_Flags
  .rdata:0x0000000000012AE5        db 0x2E; SizeOfProlog
  .rdata:0x0000000000012AE6        db 0x09; CountOfCodes
  .rdata:0x0000000000012AE7        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012AE8        dw 0x641D; UnwindCode1
  .rdata:0x0000000000012AEA        dw 0x00C4; UnwindCode2
  .rdata:0x0000000000012AEC        dw 0x341D; UnwindCode3
  .rdata:0x0000000000012AEE        dw 0x00C3; UnwindCode4
  .rdata:0x0000000000012AF0        dw 0x011D; UnwindCode5
  .rdata:0x0000000000012AF2        dw 0x00BE; UnwindCode6
  .rdata:0x0000000000012AF4        dw 0xE00E; UnwindCode7
  .rdata:0x0000000000012AF6        dw 0x700C; UnwindCode8
  .rdata:0x0000000000012AF8        dw 0x500B; UnwindCode9
  .rdata:0x0000000000012AFA        dw 0x0000; UnwindCodePadding
  .rdata:0x0000000000012AFC        dd rva_ptr __GSHandlerCheck; ExceptionHandler; int32_t (__cdecl __rva_ptr)( int64_t p1, int64_t p2, int64_t p3, int64_t p4 )
  .rdata:0x0000000000012B00        dd 0x000005E0; ExceptionHandlerData
  .rdata:0x0000000000012B04        db 0x01; Version_Flags
  .rdata:0x0000000000012B05        db 0x14; SizeOfProlog
  .rdata:0x0000000000012B06        db 0x08; CountOfCodes
  .rdata:0x0000000000012B07        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012B08        dw 0x6414; UnwindCode1
  .rdata:0x0000000000012B0A        dw 0x000A; UnwindCode2
  .rdata:0x0000000000012B0C        dw 0x5414; UnwindCode3
  .rdata:0x0000000000012B0E        dw 0x0009; UnwindCode4
  .rdata:0x0000000000012B10        dw 0x3414; UnwindCode5
  .rdata:0x0000000000012B12        dw 0x0008; UnwindCode6
  .rdata:0x0000000000012B14        dw 0x5214; UnwindCode7
  .rdata:0x0000000000012B16        dw 0x7010; UnwindCode8
  .rdata:0x0000000000012B18        db 0x19; Version_Flags
  .rdata:0x0000000000012B19        db 0x28; SizeOfProlog
  .rdata:0x0000000000012B1A        db 0x0A; CountOfCodes
  .rdata:0x0000000000012B1B        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012B1C        dw 0x341A; UnwindCode1
  .rdata:0x0000000000012B1E        dw 0x001A; UnwindCode2
  .rdata:0x0000000000012B20        dw 0xF21A; UnwindCode3
  .rdata:0x0000000000012B22        dw 0xF010; UnwindCode4
  .rdata:0x0000000000012B24        dw 0xE00E; UnwindCode5
  .rdata:0x0000000000012B26        dw 0xD00C; UnwindCode6
  .rdata:0x0000000000012B28        dw 0xC00A; UnwindCode7
  .rdata:0x0000000000012B2A        dw 0x7008; UnwindCode8
  .rdata:0x0000000000012B2C        dw 0x6007; UnwindCode9
  .rdata:0x0000000000012B2E        dw 0x5006; UnwindCode10
  .rdata:0x0000000000012B30        dd rva_ptr __GSHandlerCheck; ExceptionHandler; int32_t (__cdecl __rva_ptr)( int64_t p1, int64_t p2, int64_t p3, int64_t p4 )
  .rdata:0x0000000000012B34        dd 0x00000070; ExceptionHandlerData
  .rdata:0x0000000000012B38        db 0x01; Version_Flags
  .rdata:0x0000000000012B39        db 0x1C; SizeOfProlog
  .rdata:0x0000000000012B3A        db 0x0C; CountOfCodes
  .rdata:0x0000000000012B3B        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012B3C        dw 0x641C; UnwindCode1
  .rdata:0x0000000000012B3E        dw 0x000E; UnwindCode2
  .rdata:0x0000000000012B40        dw 0x541C; UnwindCode3
  .rdata:0x0000000000012B42        dw 0x000D; UnwindCode4
  .rdata:0x0000000000012B44        dw 0x341C; UnwindCode5
  .rdata:0x0000000000012B46        dw 0x000C; UnwindCode6
  .rdata:0x0000000000012B48        dw 0x521C; UnwindCode7
  .rdata:0x0000000000012B4A        dw 0xF018; UnwindCode8
  .rdata:0x0000000000012B4C        dw 0xE016; UnwindCode9
  .rdata:0x0000000000012B4E        dw 0xD014; UnwindCode10
  .rdata:0x0000000000012B50        dw 0xC012; UnwindCode11
  .rdata:0x0000000000012B52        dw 0x7010; UnwindCode12
  .rdata:0x0000000000012B54        db 0x19; Version_Flags
  .rdata:0x0000000000012B55        db 0x25; SizeOfProlog
  .rdata:0x0000000000012B56        db 0x09; CountOfCodes
  .rdata:0x0000000000012B57        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012B58        dw 0x3413; UnwindCode1
  .rdata:0x0000000000012B5A        dw 0x005B; UnwindCode2
  .rdata:0x0000000000012B5C        dw 0x0113; UnwindCode3
  .rdata:0x0000000000012B5E        dw 0x0052; UnwindCode4
  .rdata:0x0000000000012B60        dw 0xF00C; UnwindCode5
  .rdata:0x0000000000012B62        dw 0xE00A; UnwindCode6
  .rdata:0x0000000000012B64        dw 0x7008; UnwindCode7
  .rdata:0x0000000000012B66        dw 0x6007; UnwindCode8
  .rdata:0x0000000000012B68        dw 0x5006; UnwindCode9
  .rdata:0x0000000000012B6A        dw 0x0000; UnwindCodePadding
  .rdata:0x0000000000012B6C        dd rva_ptr __GSHandlerCheck; ExceptionHandler; int32_t (__cdecl __rva_ptr)( int64_t p1, int64_t p2, int64_t p3, int64_t p4 )
  .rdata:0x0000000000012B70        dd 0x00000280; ExceptionHandlerData
  .rdata:0x0000000000012B74        db 0x19; Version_Flags
  .rdata:0x0000000000012B75        db 0x23; SizeOfProlog
  .rdata:0x0000000000012B76        db 0x0A; CountOfCodes
  .rdata:0x0000000000012B77        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012B78        dw 0x3414; UnwindCode1
  .rdata:0x0000000000012B7A        dw 0x0012; UnwindCode2
  .rdata:0x0000000000012B7C        dw 0x7214; UnwindCode3
  .rdata:0x0000000000012B7E        dw 0xF010; UnwindCode4
  .rdata:0x0000000000012B80        dw 0xE00E; UnwindCode5
  .rdata:0x0000000000012B82        dw 0xD00C; UnwindCode6
  .rdata:0x0000000000012B84        dw 0xC00A; UnwindCode7
  .rdata:0x0000000000012B86        dw 0x7008; UnwindCode8
  .rdata:0x0000000000012B88        dw 0x6007; UnwindCode9
  .rdata:0x0000000000012B8A        dw 0x5006; UnwindCode10
  .rdata:0x0000000000012B8C        dd rva_ptr __GSHandlerCheck; ExceptionHandler; int32_t (__cdecl __rva_ptr)( int64_t p1, int64_t p2, int64_t p3, int64_t p4 )
  .rdata:0x0000000000012B90        dd 0x00000038; ExceptionHandlerData
  .rdata:0x0000000000012B94        db 0x11; Version_Flags
  .rdata:0x0000000000012B95        db 0x0F; SizeOfProlog
  .rdata:0x0000000000012B96        db 0x06; CountOfCodes
  .rdata:0x0000000000012B97        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012B98        dw 0x640F; UnwindCode1
  .rdata:0x0000000000012B9A        dw 0x0008; UnwindCode2
  .rdata:0x0000000000012B9C        dw 0x340F; UnwindCode3
  .rdata:0x0000000000012B9E        dw 0x0007; UnwindCode4
  .rdata:0x0000000000012BA0        dw 0x320F; UnwindCode5
  .rdata:0x0000000000012BA2        dw 0x700B; UnwindCode6
  .rdata:0x0000000000012BA4        dd rva_ptr __C_specific_handler; TerminationHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012BA8        dd 0x00000001; TerminationHandlerData
  .rdata:0x0000000000012BAC        db 0xA9
  .rdata:0x0000000000012BAD        db "V\x00"
  .rdata:0x0000000000012BAF        dw 0xF800
  .rdata:0x0000000000012BB1        db "V\x00"
  .rdata:0x0000000000012BB3        dq 0x0000000000ABFD00
  .rdata:0x0000000000012BBB        db 0x00
  .rdata:0x0000000000012BBC        db 0x01; Version_Flags
  .rdata:0x0000000000012BBD        db 0x19; SizeOfProlog
  .rdata:0x0000000000012BBE        db 0x06; CountOfCodes
  .rdata:0x0000000000012BBF        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012BC0        dw 0x3419; UnwindCode1
  .rdata:0x0000000000012BC2        dw 0x000C; UnwindCode2
  .rdata:0x0000000000012BC4        dw 0x7219; UnwindCode3
  .rdata:0x0000000000012BC6        dw 0x7012; UnwindCode4
  .rdata:0x0000000000012BC8        dw 0x6011; UnwindCode5
  .rdata:0x0000000000012BCA        dw 0x5010; UnwindCode6
  .rdata:0x0000000000012BCC        db 0x19; Version_Flags
  .rdata:0x0000000000012BCD        db 0x2B; SizeOfProlog
  .rdata:0x0000000000012BCE        db 0x07; CountOfCodes
  .rdata:0x0000000000012BCF        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012BD0        dw 0x641A; UnwindCode1
  .rdata:0x0000000000012BD2        dw 0x00F4; UnwindCode2
  .rdata:0x0000000000012BD4        dw 0x341A; UnwindCode3
  .rdata:0x0000000000012BD6        dw 0x00F3; UnwindCode4
  .rdata:0x0000000000012BD8        dw 0x011A; UnwindCode5
  .rdata:0x0000000000012BDA        dw 0x00F0; UnwindCode6
  .rdata:0x0000000000012BDC        dw 0x500B; UnwindCode7
  .rdata:0x0000000000012BDE        dw 0x0000; UnwindCodePadding
  .rdata:0x0000000000012BE0        dd rva_ptr __GSHandlerCheck; ExceptionHandler; int32_t (__cdecl __rva_ptr)( int64_t p1, int64_t p2, int64_t p3, int64_t p4 )
  .rdata:0x0000000000012BE4        dd 0x00000770; ExceptionHandlerData
  .rdata:0x0000000000012BE8        db 0x11; Version_Flags
  .rdata:0x0000000000012BE9        db 0x0F; SizeOfProlog
  .rdata:0x0000000000012BEA        db 0x04; CountOfCodes
  .rdata:0x0000000000012BEB        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012BEC        dw 0x340F; UnwindCode1
  .rdata:0x0000000000012BEE        dw 0x0006; UnwindCode2
  .rdata:0x0000000000012BF0        dw 0x320F; UnwindCode3
  .rdata:0x0000000000012BF2        dw 0x700B; UnwindCode4
  .rdata:0x0000000000012BF4        dd rva_ptr __C_specific_handler; TerminationHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012BF8        dd 0x00000001; TerminationHandlerData
  .rdata:0x0000000000012BFC        db 0x11
  .rdata:0x0000000000012BFD        db "P\x00"
  .rdata:0x0000000000012BFF        dw 0x9C00
  .rdata:0x0000000000012C01        db "Q\x00"
  .rdata:0x0000000000012C03        dq 0x0000000000ABAE00
  .rdata:0x0000000000012C0B        db 0x00
  .rdata:0x0000000000012C0C        db 0x01; Version_Flags
  .rdata:0x0000000000012C0D        db 0x02; SizeOfProlog
  .rdata:0x0000000000012C0E        db 0x01; CountOfCodes
  .rdata:0x0000000000012C0F        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012C10        dw 0x3002; UnwindCode1
  .rdata:0x0000000000012C12        dw 0x0000; UnwindCodePadding
  .rdata:0x0000000000012C14        db 0x01; Version_Flags
  .rdata:0x0000000000012C15        db 0x15; SizeOfProlog
  .rdata:0x0000000000012C16        db 0x08; CountOfCodes
  .rdata:0x0000000000012C17        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012C18        dw 0x7415; UnwindCode1
  .rdata:0x0000000000012C1A        dw 0x0008; UnwindCode2
  .rdata:0x0000000000012C1C        dw 0x6415; UnwindCode3
  .rdata:0x0000000000012C1E        dw 0x0007; UnwindCode4
  .rdata:0x0000000000012C20        dw 0x3415; UnwindCode5
  .rdata:0x0000000000012C22        dw 0x0006; UnwindCode6
  .rdata:0x0000000000012C24        dw 0x3215; UnwindCode7
  .rdata:0x0000000000012C26        dw 0xE011; UnwindCode8
  .rdata:0x0000000000012C28        db 0x01; Version_Flags
  .rdata:0x0000000000012C29        db 0x14; SizeOfProlog
  .rdata:0x0000000000012C2A        db 0x06; CountOfCodes
  .rdata:0x0000000000012C2B        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012C2C        dw 0x6414; UnwindCode1
  .rdata:0x0000000000012C2E        dw 0x0007; UnwindCode2
  .rdata:0x0000000000012C30        dw 0x3414; UnwindCode3
  .rdata:0x0000000000012C32        dw 0x0006; UnwindCode4
  .rdata:0x0000000000012C34        dw 0x3214; UnwindCode5
  .rdata:0x0000000000012C36        dw 0x7010; UnwindCode6
  .rdata:0x0000000000012C38        db 0x11; Version_Flags
  .rdata:0x0000000000012C39        db 0x15; SizeOfProlog
  .rdata:0x0000000000012C3A        db 0x08; CountOfCodes
  .rdata:0x0000000000012C3B        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012C3C        dw 0x7415; UnwindCode1
  .rdata:0x0000000000012C3E        dw 0x000A; UnwindCode2
  .rdata:0x0000000000012C40        dw 0x6415; UnwindCode3
  .rdata:0x0000000000012C42        dw 0x0009; UnwindCode4
  .rdata:0x0000000000012C44        dw 0x3415; UnwindCode5
  .rdata:0x0000000000012C46        dw 0x0008; UnwindCode6
  .rdata:0x0000000000012C48        dw 0x5215; UnwindCode7
  .rdata:0x0000000000012C4A        dw 0xF011; UnwindCode8
  .rdata:0x0000000000012C4C        dd rva_ptr __C_specific_handler; TerminationHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012C50        dd 0x00000001; TerminationHandlerData
  .rdata:0x0000000000012C54        dd 0x00005E2B
  .rdata:0x0000000000012C58        db "r^\x00"
  .rdata:0x0000000000012C5B        dq 0x0000000000AC1600
  .rdata:0x0000000000012C63        db 0x00
  .rdata:0x0000000000012C64        db 0x11; Version_Flags
  .rdata:0x0000000000012C65        db 0x06; SizeOfProlog
  .rdata:0x0000000000012C66        db 0x02; CountOfCodes
  .rdata:0x0000000000012C67        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012C68        dw 0x3206; UnwindCode1
  .rdata:0x0000000000012C6A        dw 0x3002; UnwindCode2
  .rdata:0x0000000000012C6C        dd rva_ptr __C_specific_handler; TerminationHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012C70        dd 0x00000001; TerminationHandlerData
  .rdata:0x0000000000012C74        db "\nb\x00"
  .rdata:0x0000000000012C77        db 0x00
  .rdata:0x0000000000012C78        db "!b\x00"
  .rdata:0x0000000000012C7B        dq 0x0000000000AC1600
  .rdata:0x0000000000012C83        db 0x00
  .rdata:0x0000000000012C84        db 0x01; Version_Flags
  .rdata:0x0000000000012C85        db 0x1C; SizeOfProlog
  .rdata:0x0000000000012C86        db 0x0B; CountOfCodes
  .rdata:0x0000000000012C87        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012C88        dw 0x741C; UnwindCode1
  .rdata:0x0000000000012C8A        dw 0x0017; UnwindCode2
  .rdata:0x0000000000012C8C        dw 0x641C; UnwindCode3
  .rdata:0x0000000000012C8E        dw 0x0016; UnwindCode4
  .rdata:0x0000000000012C90        dw 0x541C; UnwindCode5
  .rdata:0x0000000000012C92        dw 0x0015; UnwindCode6
  .rdata:0x0000000000012C94        dw 0x341C; UnwindCode7
  .rdata:0x0000000000012C96        dw 0x0014; UnwindCode8
  .rdata:0x0000000000012C98        dw 0x011C; UnwindCode9
  .rdata:0x0000000000012C9A        dw 0x0012; UnwindCode10
  .rdata:0x0000000000012C9C        dw 0xE015; UnwindCode11
  .rdata:0x0000000000012C9E        dw 0x0000; UnwindCodePadding
  .rdata:0x0000000000012CA0        db 0x01; Version_Flags
  .rdata:0x0000000000012CA1        db 0x0E; SizeOfProlog
  .rdata:0x0000000000012CA2        db 0x02; CountOfCodes
  .rdata:0x0000000000012CA3        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012CA4        dw 0x320E; UnwindCode1
  .rdata:0x0000000000012CA6        dw 0x300A; UnwindCode2
  .rdata:0x0000000000012CA8        db 0x01; Version_Flags
  .rdata:0x0000000000012CA9        db 0x18; SizeOfProlog
  .rdata:0x0000000000012CAA        db 0x06; CountOfCodes
  .rdata:0x0000000000012CAB        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012CAC        dw 0x5418; UnwindCode1
  .rdata:0x0000000000012CAE        dw 0x0007; UnwindCode2
  .rdata:0x0000000000012CB0        dw 0x3418; UnwindCode3
  .rdata:0x0000000000012CB2        dw 0x0006; UnwindCode4
  .rdata:0x0000000000012CB4        dw 0x3218; UnwindCode5
  .rdata:0x0000000000012CB6        dw 0x6014; UnwindCode6
  .rdata:0x0000000000012CB8        db 0x19; Version_Flags
  .rdata:0x0000000000012CB9        db 0x2D; SizeOfProlog
  .rdata:0x0000000000012CBA        db 0x0D; CountOfCodes
  .rdata:0x0000000000012CBB        db 0x35; FrameRegister_FrameOffset
  .rdata:0x0000000000012CBC        dw 0x741F; UnwindCode1
  .rdata:0x0000000000012CBE        dw 0x0014; UnwindCode2
  .rdata:0x0000000000012CC0        dw 0x641B; UnwindCode3
  .rdata:0x0000000000012CC2        dw 0x0013; UnwindCode4
  .rdata:0x0000000000012CC4        dw 0x3417; UnwindCode5
  .rdata:0x0000000000012CC6        dw 0x0012; UnwindCode6
  .rdata:0x0000000000012CC8        dw 0x3313; UnwindCode7
  .rdata:0x0000000000012CCA        dw 0xB20E; UnwindCode8
  .rdata:0x0000000000012CCC        dw 0xF00A; UnwindCode9
  .rdata:0x0000000000012CCE        dw 0xE008; UnwindCode10
  .rdata:0x0000000000012CD0        dw 0xD006; UnwindCode11
  .rdata:0x0000000000012CD2        dw 0xC004; UnwindCode12
  .rdata:0x0000000000012CD4        dw 0x5002; UnwindCode13
  .rdata:0x0000000000012CD6        dw 0x0000; UnwindCodePadding
  .rdata:0x0000000000012CD8        dd rva_ptr __GSHandlerCheck; ExceptionHandler; int32_t (__cdecl __rva_ptr)( int64_t p1, int64_t p2, int64_t p3, int64_t p4 )
  .rdata:0x0000000000012CDC        dd 0x00000050; ExceptionHandlerData
  .rdata:0x0000000000012CE0        db 0x11; Version_Flags
  .rdata:0x0000000000012CE1        db 0x0A; SizeOfProlog
  .rdata:0x0000000000012CE2        db 0x04; CountOfCodes
  .rdata:0x0000000000012CE3        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012CE4        dw 0x340A; UnwindCode1
  .rdata:0x0000000000012CE6        dw 0x0006; UnwindCode2
  .rdata:0x0000000000012CE8        dw 0x320A; UnwindCode3
  .rdata:0x0000000000012CEA        dw 0x7006; UnwindCode4
  .rdata:0x0000000000012CEC        dd rva_ptr __C_specific_handler; TerminationHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012CF0        dd 0x00000001; TerminationHandlerData
  .rdata:0x0000000000012CF4        db "\tk\x00"
  .rdata:0x0000000000012CF7        dw 0x1B00
  .rdata:0x0000000000012CF9        db "k\x00"
  .rdata:0x0000000000012CFB        dq 0x0000000000AC2F00
  .rdata:0x0000000000012D03        db 0x00
  .rdata:0x0000000000012D04        db 0x01; Version_Flags
  .rdata:0x0000000000012D05        db 0x14; SizeOfProlog
  .rdata:0x0000000000012D06        db 0x08; CountOfCodes
  .rdata:0x0000000000012D07        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012D08        dw 0x6414; UnwindCode1
  .rdata:0x0000000000012D0A        dw 0x000E; UnwindCode2
  .rdata:0x0000000000012D0C        dw 0x5414; UnwindCode3
  .rdata:0x0000000000012D0E        dw 0x000D; UnwindCode4
  .rdata:0x0000000000012D10        dw 0x3414; UnwindCode5
  .rdata:0x0000000000012D12        dw 0x000C; UnwindCode6
  .rdata:0x0000000000012D14        dw 0x9214; UnwindCode7
  .rdata:0x0000000000012D16        dw 0x7010; UnwindCode8
  .rdata:0x0000000000012D18        db 0x11; Version_Flags
  .rdata:0x0000000000012D19        db 0x06; SizeOfProlog
  .rdata:0x0000000000012D1A        db 0x02; CountOfCodes
  .rdata:0x0000000000012D1B        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012D1C        dw 0x3206; UnwindCode1
  .rdata:0x0000000000012D1E        dw 0x3002; UnwindCode2
  .rdata:0x0000000000012D20        dd rva_ptr __C_specific_handler; TerminationHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012D24        dd 0x00000001; TerminationHandlerData
  .rdata:0x0000000000012D28        db 0xE2
  .rdata:0x0000000000012D29        db "r\x00"
  .rdata:0x0000000000012D2B        dw 0xF800
  .rdata:0x0000000000012D2D        db "r\x00"
  .rdata:0x0000000000012D2F        dq 0x0000000000AC4800
  .rdata:0x0000000000012D37        db 0x00
  .rdata:0x0000000000012D38        db 0x11; Version_Flags
  .rdata:0x0000000000012D39        db 0x11; SizeOfProlog
  .rdata:0x0000000000012D3A        db 0x08; CountOfCodes
  .rdata:0x0000000000012D3B        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012D3C        dw 0x3411; UnwindCode1
  .rdata:0x0000000000012D3E        dw 0x0011; UnwindCode2
  .rdata:0x0000000000012D40        dw 0x7211; UnwindCode3
  .rdata:0x0000000000012D42        dw 0xE00D; UnwindCode4
  .rdata:0x0000000000012D44        dw 0xD00B; UnwindCode5
  .rdata:0x0000000000012D46        dw 0xC009; UnwindCode6
  .rdata:0x0000000000012D48        dw 0x7007; UnwindCode7
  .rdata:0x0000000000012D4A        dw 0x6006; UnwindCode8
  .rdata:0x0000000000012D4C        dd rva_ptr __C_specific_handler; TerminationHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012D50        dd 0x00000002; TerminationHandlerData
  .rdata:0x0000000000012D54        db 0xAA
  .rdata:0x0000000000012D55        db "t\x00"
  .rdata:0x0000000000012D57        dw 0x8600
  .rdata:0x0000000000012D59        db "u\x00"
  .rdata:0x0000000000012D5B        dq 0x0000000000AC5E00
  .rdata:0x0000000000012D63        db 0x00
  .rdata:0x0000000000012D64        db "\nv\x00"
  .rdata:0x0000000000012D67        dw 0x1F00
  .rdata:0x0000000000012D69        db "v\x00"
  .rdata:0x0000000000012D6B        dq 0x0000000000AC5E00
  .rdata:0x0000000000012D73        db 0x00
  .rdata:0x0000000000012D74        db 0x11; Version_Flags
  .rdata:0x0000000000012D75        db 0x0F; SizeOfProlog
  .rdata:0x0000000000012D76        db 0x04; CountOfCodes
  .rdata:0x0000000000012D77        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012D78        dw 0x340F; UnwindCode1
  .rdata:0x0000000000012D7A        dw 0x0006; UnwindCode2
  .rdata:0x0000000000012D7C        dw 0x320F; UnwindCode3
  .rdata:0x0000000000012D7E        dw 0x700B; UnwindCode4
  .rdata:0x0000000000012D80        dd rva_ptr __C_specific_handler; TerminationHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012D84        dd 0x00000001; TerminationHandlerData
  .rdata:0x0000000000012D88        db "\"s\x00"
  .rdata:0x0000000000012D8B        db 0x00
  .rdata:0x0000000000012D8C        db "8s\x00"
  .rdata:0x0000000000012D8F        dq 0x0000000000ABAE00
  .rdata:0x0000000000012D97        db 0x00
  .rdata:0x0000000000012D98        db 0x01; Version_Flags
  .rdata:0x0000000000012D99        db 0x0C; SizeOfProlog
  .rdata:0x0000000000012D9A        db 0x02; CountOfCodes
  .rdata:0x0000000000012D9B        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012D9C        dw 0x720C; UnwindCode1
  .rdata:0x0000000000012D9E        dw 0x5005; UnwindCode2
  .rdata:0x0000000000012DA0        db 0x11; Version_Flags
  .rdata:0x0000000000012DA1        db 0x0F; SizeOfProlog
  .rdata:0x0000000000012DA2        db 0x04; CountOfCodes
  .rdata:0x0000000000012DA3        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012DA4        dw 0x340F; UnwindCode1
  .rdata:0x0000000000012DA6        dw 0x0006; UnwindCode2
  .rdata:0x0000000000012DA8        dw 0x320F; UnwindCode3
  .rdata:0x0000000000012DAA        dw 0x700B; UnwindCode4
  .rdata:0x0000000000012DAC        dd rva_ptr __C_specific_handler; TerminationHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012DB0        dd 0x00000001; TerminationHandlerData
  .rdata:0x0000000000012DB4        db ">v\x00"
  .rdata:0x0000000000012DB7        dw 0xA700
  .rdata:0x0000000000012DB9        db "v\x00"
  .rdata:0x0000000000012DBB        dq 0x0000000000AC7F00
  .rdata:0x0000000000012DC3        db 0x00
  .rdata:0x0000000000012DC4        db 0x11; Version_Flags
  .rdata:0x0000000000012DC5        db 0x12; SizeOfProlog
  .rdata:0x0000000000012DC6        db 0x06; CountOfCodes
  .rdata:0x0000000000012DC7        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012DC8        dw 0x3412; UnwindCode1
  .rdata:0x0000000000012DCA        dw 0x0010; UnwindCode2
  .rdata:0x0000000000012DCC        dw 0xB212; UnwindCode3
  .rdata:0x0000000000012DCE        dw 0xE00E; UnwindCode4
  .rdata:0x0000000000012DD0        dw 0x700C; UnwindCode5
  .rdata:0x0000000000012DD2        dw 0x600B; UnwindCode6
  .rdata:0x0000000000012DD4        dd rva_ptr __C_specific_handler; TerminationHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012DD8        dd 0x00000001; TerminationHandlerData
  .rdata:0x0000000000012DDC        db 0xDC
  .rdata:0x0000000000012DDD        db "v\x00"
  .rdata:0x0000000000012DDF        dw 0x8400
  .rdata:0x0000000000012DE1        db "w\x00"
  .rdata:0x0000000000012DE3        dq 0x0000000000AC9A00
  .rdata:0x0000000000012DEB        db 0x00
  .rdata:0x0000000000012DEC        db 0x01; Version_Flags
  .rdata:0x0000000000012DED        db 0x19; SizeOfProlog
  .rdata:0x0000000000012DEE        db 0x0A; CountOfCodes
  .rdata:0x0000000000012DEF        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012DF0        dw 0x7419; UnwindCode1
  .rdata:0x0000000000012DF2        dw 0x0009; UnwindCode2
  .rdata:0x0000000000012DF4        dw 0x6419; UnwindCode3
  .rdata:0x0000000000012DF6        dw 0x0008; UnwindCode4
  .rdata:0x0000000000012DF8        dw 0x5419; UnwindCode5
  .rdata:0x0000000000012DFA        dw 0x0007; UnwindCode6
  .rdata:0x0000000000012DFC        dw 0x3419; UnwindCode7
  .rdata:0x0000000000012DFE        dw 0x0006; UnwindCode8
  .rdata:0x0000000000012E00        dw 0x3219; UnwindCode9
  .rdata:0x0000000000012E02        dw 0xE015; UnwindCode10
  .rdata:0x0000000000012E04 data_0x12E04:
  .rdata:0x0000000000012E04        db 0x19; Version_Flags
  .rdata:0x0000000000012E05        db 0x1F; SizeOfProlog
  .rdata:0x0000000000012E06        db 0x05; CountOfCodes
  .rdata:0x0000000000012E07        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012E08        dw 0x010D; UnwindCode1
  .rdata:0x0000000000012E0A        dw 0x008A; UnwindCode2
  .rdata:0x0000000000012E0C        dw 0xE006; UnwindCode3
  .rdata:0x0000000000012E0E        dw 0xD004; UnwindCode4
  .rdata:0x0000000000012E10        dw 0xC002; UnwindCode5
  .rdata:0x0000000000012E12        dw 0x0000; UnwindCodePadding
  .rdata:0x0000000000012E14        dd rva_ptr __GSHandlerCheck; ExceptionHandler; int32_t (__cdecl __rva_ptr)( int64_t p1, int64_t p2, int64_t p3, int64_t p4 )
  .rdata:0x0000000000012E18        dd 0x00000410; ExceptionHandlerData
  .rdata:0x0000000000012E1C        db 0x21; Version_Flags
  .rdata:0x0000000000012E1D        db 0x28; SizeOfProlog
  .rdata:0x0000000000012E1E        db 0x0A; CountOfCodes
  .rdata:0x0000000000012E1F        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012E20        dw 0xF428; UnwindCode1
  .rdata:0x0000000000012E22        dw 0x0085; UnwindCode2
  .rdata:0x0000000000012E24        dw 0x7420; UnwindCode3
  .rdata:0x0000000000012E26        dw 0x0086; UnwindCode4
  .rdata:0x0000000000012E28        dw 0x6418; UnwindCode5
  .rdata:0x0000000000012E2A        dw 0x0087; UnwindCode6
  .rdata:0x0000000000012E2C        dw 0x5410; UnwindCode7
  .rdata:0x0000000000012E2E        dw 0x0088; UnwindCode8
  .rdata:0x0000000000012E30        dw 0x3408; UnwindCode9
  .rdata:0x0000000000012E32        dw 0x0089; UnwindCode10
  .rdata:0x0000000000012E34        dd rva_ptr qsort; BeginAddress; void (__cdecl __rva_ptr)( void * _Base, unsigned long long _NumOfElements, unsigned long long _SizeOfElements, int (__cdecl * _CompareFunction)( void * p1, void * p2 ) )
  .rdata:0x0000000000012E38        dd rva_ptr code_0x7CDB; EndAddress
  .rdata:0x0000000000012E3C        dd rva_ptr data_0x12E04; UnwindData
  .rdata:0x0000000000012E40        db 0x21; Version_Flags
  .rdata:0x0000000000012E41        db 0x00; SizeOfProlog
  .rdata:0x0000000000012E42        db 0x00; CountOfCodes
  .rdata:0x0000000000012E43        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012E44        dd rva_ptr qsort; BeginAddress; void (__cdecl __rva_ptr)( void * _Base, unsigned long long _NumOfElements, unsigned long long _SizeOfElements, int (__cdecl * _CompareFunction)( void * p1, void * p2 ) )
  .rdata:0x0000000000012E48        dd rva_ptr code_0x7CDB; EndAddress
  .rdata:0x0000000000012E4C        dd rva_ptr data_0x12E04; UnwindData
  .rdata:0x0000000000012E50        db 0x01; Version_Flags
  .rdata:0x0000000000012E51        db 0x0F; SizeOfProlog
  .rdata:0x0000000000012E52        db 0x06; CountOfCodes
  .rdata:0x0000000000012E53        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012E54        dw 0x640F; UnwindCode1
  .rdata:0x0000000000012E56        dw 0x0011; UnwindCode2
  .rdata:0x0000000000012E58        dw 0x340F; UnwindCode3
  .rdata:0x0000000000012E5A        dw 0x0010; UnwindCode4
  .rdata:0x0000000000012E5C        dw 0xD20F; UnwindCode5
  .rdata:0x0000000000012E5E        dw 0x700B; UnwindCode6
  .rdata:0x0000000000012E60        db 0x19; Version_Flags
  .rdata:0x0000000000012E61        db 0x2D; SizeOfProlog
  .rdata:0x0000000000012E62        db 0x0D; CountOfCodes
  .rdata:0x0000000000012E63        db 0x55; FrameRegister_FrameOffset
  .rdata:0x0000000000012E64        dw 0x741F; UnwindCode1
  .rdata:0x0000000000012E66        dw 0x0014; UnwindCode2
  .rdata:0x0000000000012E68        dw 0x641B; UnwindCode3
  .rdata:0x0000000000012E6A        dw 0x0013; UnwindCode4
  .rdata:0x0000000000012E6C        dw 0x3417; UnwindCode5
  .rdata:0x0000000000012E6E        dw 0x0012; UnwindCode6
  .rdata:0x0000000000012E70        dw 0x5313; UnwindCode7
  .rdata:0x0000000000012E72        dw 0xB20E; UnwindCode8
  .rdata:0x0000000000012E74        dw 0xF00A; UnwindCode9
  .rdata:0x0000000000012E76        dw 0xE008; UnwindCode10
  .rdata:0x0000000000012E78        dw 0xD006; UnwindCode11
  .rdata:0x0000000000012E7A        dw 0xC004; UnwindCode12
  .rdata:0x0000000000012E7C        dw 0x5002; UnwindCode13
  .rdata:0x0000000000012E7E        dw 0x0000; UnwindCodePadding
  .rdata:0x0000000000012E80        dd rva_ptr __GSHandlerCheck; ExceptionHandler; int32_t (__cdecl __rva_ptr)( int64_t p1, int64_t p2, int64_t p3, int64_t p4 )
  .rdata:0x0000000000012E84        dd 0x00000058; ExceptionHandlerData
  .rdata:0x0000000000012E88        db 0x01; Version_Flags
  .rdata:0x0000000000012E89        db 0x17; SizeOfProlog
  .rdata:0x0000000000012E8A        db 0x0A; CountOfCodes
  .rdata:0x0000000000012E8B        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012E8C        dw 0x7417; UnwindCode1
  .rdata:0x0000000000012E8E        dw 0x0006; UnwindCode2
  .rdata:0x0000000000012E90        dw 0x6417; UnwindCode3
  .rdata:0x0000000000012E92        dw 0x0005; UnwindCode4
  .rdata:0x0000000000012E94        dw 0x5417; UnwindCode5
  .rdata:0x0000000000012E96        dw 0x0004; UnwindCode6
  .rdata:0x0000000000012E98        dw 0x3417; UnwindCode7
  .rdata:0x0000000000012E9A        dw 0x0003; UnwindCode8
  .rdata:0x0000000000012E9C        dw 0xF017; UnwindCode9
  .rdata:0x0000000000012E9E        dw 0xE015; UnwindCode10
  .rdata:0x0000000000012EA0        db 0x01; Version_Flags
  .rdata:0x0000000000012EA1        db 0x08; SizeOfProlog
  .rdata:0x0000000000012EA2        db 0x01; CountOfCodes
  .rdata:0x0000000000012EA3        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012EA4        dw 0x6208; UnwindCode1
  .rdata:0x0000000000012EA6        dw 0x0000; UnwindCodePadding
  .rdata:0x0000000000012EA8        db 0x11; Version_Flags
  .rdata:0x0000000000012EA9        db 0x0F; SizeOfProlog
  .rdata:0x0000000000012EAA        db 0x04; CountOfCodes
  .rdata:0x0000000000012EAB        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012EAC        dw 0x340F; UnwindCode1
  .rdata:0x0000000000012EAE        dw 0x0006; UnwindCode2
  .rdata:0x0000000000012EB0        dw 0x320F; UnwindCode3
  .rdata:0x0000000000012EB2        dw 0x700B; UnwindCode4
  .rdata:0x0000000000012EB4        dd rva_ptr __C_specific_handler; TerminationHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012EB8        dd 0x00000001; TerminationHandlerData
  .rdata:0x0000000000012EBC        dq 0x0000864C000085F1
  .rdata:0x0000000000012EC4        dq 0x000000000000ACB7
  .rdata:0x0000000000012ECC        db 0x11; Version_Flags
  .rdata:0x0000000000012ECD        db 0x1B; SizeOfProlog
  .rdata:0x0000000000012ECE        db 0x0A; CountOfCodes
  .rdata:0x0000000000012ECF        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012ED0        dw 0x641B; UnwindCode1
  .rdata:0x0000000000012ED2        dw 0x000C; UnwindCode2
  .rdata:0x0000000000012ED4        dw 0x341B; UnwindCode3
  .rdata:0x0000000000012ED6        dw 0x000B; UnwindCode4
  .rdata:0x0000000000012ED8        dw 0x321B; UnwindCode5
  .rdata:0x0000000000012EDA        dw 0xF017; UnwindCode6
  .rdata:0x0000000000012EDC        dw 0xE015; UnwindCode7
  .rdata:0x0000000000012EDE        dw 0xD013; UnwindCode8
  .rdata:0x0000000000012EE0        dw 0xC011; UnwindCode9
  .rdata:0x0000000000012EE2        dw 0x700F; UnwindCode10
  .rdata:0x0000000000012EE4        dd rva_ptr __C_specific_handler; TerminationHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012EE8        dd 0x00000001; TerminationHandlerData
  .rdata:0x0000000000012EEC        dq 0x00008D4700008D17
  .rdata:0x0000000000012EF4        dq 0x000000000000ACD1
  .rdata:0x0000000000012EFC        db 0x01; Version_Flags
  .rdata:0x0000000000012EFD        db 0x17; SizeOfProlog
  .rdata:0x0000000000012EFE        db 0x0A; CountOfCodes
  .rdata:0x0000000000012EFF        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012F00        dw 0x3417; UnwindCode1
  .rdata:0x0000000000012F02        dw 0x0017; UnwindCode2
  .rdata:0x0000000000012F04        dw 0xB217; UnwindCode3
  .rdata:0x0000000000012F06        dw 0xF010; UnwindCode4
  .rdata:0x0000000000012F08        dw 0xE00E; UnwindCode5
  .rdata:0x0000000000012F0A        dw 0xD00C; UnwindCode6
  .rdata:0x0000000000012F0C        dw 0xC00A; UnwindCode7
  .rdata:0x0000000000012F0E        dw 0x7008; UnwindCode8
  .rdata:0x0000000000012F10        dw 0x6007; UnwindCode9
  .rdata:0x0000000000012F12        dw 0x5006; UnwindCode10
  .rdata:0x0000000000012F14        db 0x19; Version_Flags
  .rdata:0x0000000000012F15        db 0x28; SizeOfProlog
  .rdata:0x0000000000012F16        db 0x0A; CountOfCodes
  .rdata:0x0000000000012F17        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012F18        dw 0x341A; UnwindCode1
  .rdata:0x0000000000012F1A        dw 0x0018; UnwindCode2
  .rdata:0x0000000000012F1C        dw 0xF21A; UnwindCode3
  .rdata:0x0000000000012F1E        dw 0xF010; UnwindCode4
  .rdata:0x0000000000012F20        dw 0xE00E; UnwindCode5
  .rdata:0x0000000000012F22        dw 0xD00C; UnwindCode6
  .rdata:0x0000000000012F24        dw 0xC00A; UnwindCode7
  .rdata:0x0000000000012F26        dw 0x7008; UnwindCode8
  .rdata:0x0000000000012F28        dw 0x6007; UnwindCode9
  .rdata:0x0000000000012F2A        dw 0x5006; UnwindCode10
  .rdata:0x0000000000012F2C        dd rva_ptr __GSHandlerCheck; ExceptionHandler; int32_t (__cdecl __rva_ptr)( int64_t p1, int64_t p2, int64_t p3, int64_t p4 )
  .rdata:0x0000000000012F30        dd 0x00000070; ExceptionHandlerData
  .rdata:0x0000000000012F34        db 0x19; Version_Flags
  .rdata:0x0000000000012F35        db 0x2D; SizeOfProlog
  .rdata:0x0000000000012F36        db 0x09; CountOfCodes
  .rdata:0x0000000000012F37        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012F38        dw 0x541B; UnwindCode1
  .rdata:0x0000000000012F3A        dw 0x0290; UnwindCode2
  .rdata:0x0000000000012F3C        dw 0x341B; UnwindCode3
  .rdata:0x0000000000012F3E        dw 0x028E; UnwindCode4
  .rdata:0x0000000000012F40        dw 0x011B; UnwindCode5
  .rdata:0x0000000000012F42        dw 0x028A; UnwindCode6
  .rdata:0x0000000000012F44        dw 0xE00E; UnwindCode7
  .rdata:0x0000000000012F46        dw 0x700C; UnwindCode8
  .rdata:0x0000000000012F48        dw 0x600B; UnwindCode9
  .rdata:0x0000000000012F4A        dw 0x0000; UnwindCodePadding
  .rdata:0x0000000000012F4C        dd rva_ptr __GSHandlerCheck; ExceptionHandler; int32_t (__cdecl __rva_ptr)( int64_t p1, int64_t p2, int64_t p3, int64_t p4 )
  .rdata:0x0000000000012F50        dd 0x00001440; ExceptionHandlerData
  .rdata:0x0000000000012F54        db 0x19; Version_Flags
  .rdata:0x0000000000012F55        db 0x31; SizeOfProlog
  .rdata:0x0000000000012F56        db 0x0B; CountOfCodes
  .rdata:0x0000000000012F57        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012F58        dw 0x541F; UnwindCode1
  .rdata:0x0000000000012F5A        dw 0x0296; UnwindCode2
  .rdata:0x0000000000012F5C        dw 0x341F; UnwindCode3
  .rdata:0x0000000000012F5E        dw 0x0294; UnwindCode4
  .rdata:0x0000000000012F60        dw 0x011F; UnwindCode5
  .rdata:0x0000000000012F62        dw 0x028E; UnwindCode6
  .rdata:0x0000000000012F64        dw 0xF012; UnwindCode7
  .rdata:0x0000000000012F66        dw 0xE010; UnwindCode8
  .rdata:0x0000000000012F68        dw 0xC00E; UnwindCode9
  .rdata:0x0000000000012F6A        dw 0x700C; UnwindCode10
  .rdata:0x0000000000012F6C        dw 0x600B; UnwindCode11
  .rdata:0x0000000000012F6E        dw 0x0000; UnwindCodePadding
  .rdata:0x0000000000012F70        dd rva_ptr __GSHandlerCheck; ExceptionHandler; int32_t (__cdecl __rva_ptr)( int64_t p1, int64_t p2, int64_t p3, int64_t p4 )
  .rdata:0x0000000000012F74        dd 0x00001460; ExceptionHandlerData
  .rdata:0x0000000000012F78        db 0x11; Version_Flags
  .rdata:0x0000000000012F79        db 0x0A; SizeOfProlog
  .rdata:0x0000000000012F7A        db 0x04; CountOfCodes
  .rdata:0x0000000000012F7B        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012F7C        dw 0x340A; UnwindCode1
  .rdata:0x0000000000012F7E        dw 0x0008; UnwindCode2
  .rdata:0x0000000000012F80        dw 0x520A; UnwindCode3
  .rdata:0x0000000000012F82        dw 0x7006; UnwindCode4
  .rdata:0x0000000000012F84        dd rva_ptr __C_specific_handler; TerminationHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012F88        dd 0x00000001; TerminationHandlerData
  .rdata:0x0000000000012F8C        dq 0x0000910000009082
  .rdata:0x0000000000012F94        dq 0x000000000000ACE8
  .rdata:0x0000000000012F9C        db 0x01; Version_Flags
  .rdata:0x0000000000012F9D        db 0x06; SizeOfProlog
  .rdata:0x0000000000012F9E        db 0x02; CountOfCodes
  .rdata:0x0000000000012F9F        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012FA0        dw 0x5206; UnwindCode1
  .rdata:0x0000000000012FA2        dw 0x3002; UnwindCode2
  .rdata:0x0000000000012FA4        db 0x01; Version_Flags
  .rdata:0x0000000000012FA5        db 0x09; SizeOfProlog
  .rdata:0x0000000000012FA6        db 0x01; CountOfCodes
  .rdata:0x0000000000012FA7        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012FA8        dw 0x4209; UnwindCode1
  .rdata:0x0000000000012FAA        dw 0x0000; UnwindCodePadding
  .rdata:0x0000000000012FAC        db 0x11; Version_Flags
  .rdata:0x0000000000012FAD        db 0x0F; SizeOfProlog
  .rdata:0x0000000000012FAE        db 0x04; CountOfCodes
  .rdata:0x0000000000012FAF        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012FB0        dw 0x340F; UnwindCode1
  .rdata:0x0000000000012FB2        dw 0x0007; UnwindCode2
  .rdata:0x0000000000012FB4        dw 0x320F; UnwindCode3
  .rdata:0x0000000000012FB6        dw 0x700B; UnwindCode4
  .rdata:0x0000000000012FB8        dd rva_ptr __C_specific_handler; TerminationHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000012FBC        dd 0x00000001; TerminationHandlerData
  .rdata:0x0000000000012FC0        dq 0x00009401000093F7
  .rdata:0x0000000000012FC8        dq 0x000000000000AD01
  .rdata:0x0000000000012FD0        db 0x19; Version_Flags
  .rdata:0x0000000000012FD1        db 0x1F; SizeOfProlog
  .rdata:0x0000000000012FD2        db 0x08; CountOfCodes
  .rdata:0x0000000000012FD3        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012FD4        dw 0x3410; UnwindCode1
  .rdata:0x0000000000012FD6        dw 0x000F; UnwindCode2
  .rdata:0x0000000000012FD8        dw 0x7210; UnwindCode3
  .rdata:0x0000000000012FDA        dw 0xF00C; UnwindCode4
  .rdata:0x0000000000012FDC        dw 0xE00A; UnwindCode5
  .rdata:0x0000000000012FDE        dw 0x7008; UnwindCode6
  .rdata:0x0000000000012FE0        dw 0x6007; UnwindCode7
  .rdata:0x0000000000012FE2        dw 0x5006; UnwindCode8
  .rdata:0x0000000000012FE4        dd rva_ptr __GSHandlerCheck; ExceptionHandler; int32_t (__cdecl __rva_ptr)( int64_t p1, int64_t p2, int64_t p3, int64_t p4 )
  .rdata:0x0000000000012FE8        dd 0x00000030; ExceptionHandlerData
  .rdata:0x0000000000012FEC        dd 0x00000000
  .rdata:0x0000000000012FF0        db 0x01; Version_Flags
  .rdata:0x0000000000012FF1        db 0x0A; SizeOfProlog
  .rdata:0x0000000000012FF2        db 0x03; CountOfCodes
  .rdata:0x0000000000012FF3        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000012FF4        dw 0x680A; UnwindCode1
  .rdata:0x0000000000012FF6        dw 0x0002; UnwindCode2
  .rdata:0x0000000000012FF8        dw 0xA204; UnwindCode3
  .rdata:0x0000000000012FFA        dw 0x0000; UnwindCodePadding
  .rdata:0x0000000000012FFC        db 0x01; Version_Flags
  .rdata:0x0000000000012FFD        db 0x14; SizeOfProlog
  .rdata:0x0000000000012FFE        db 0x08; CountOfCodes
  .rdata:0x0000000000012FFF        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000013000        dw 0x6414; UnwindCode1
  .rdata:0x0000000000013002        dw 0x000C; UnwindCode2
  .rdata:0x0000000000013004        dw 0x5414; UnwindCode3
  .rdata:0x0000000000013006        dw 0x000B; UnwindCode4
  .rdata:0x0000000000013008        dw 0x3414; UnwindCode5
  .rdata:0x000000000001300A        dw 0x000A; UnwindCode6
  .rdata:0x000000000001300C        dw 0x7214; UnwindCode7
  .rdata:0x000000000001300E        dw 0x7010; UnwindCode8
  .rdata:0x0000000000013010        db 0x11; Version_Flags
  .rdata:0x0000000000013011        db 0x0F; SizeOfProlog
  .rdata:0x0000000000013012        db 0x04; CountOfCodes
  .rdata:0x0000000000013013        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000013014        dw 0x340F; UnwindCode1
  .rdata:0x0000000000013016        dw 0x0006; UnwindCode2
  .rdata:0x0000000000013018        dw 0x320F; UnwindCode3
  .rdata:0x000000000001301A        dw 0x700B; UnwindCode4
  .rdata:0x000000000001301C        dd rva_ptr __C_specific_handler; TerminationHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x0000000000013020        dd 0x00000001; TerminationHandlerData
  .rdata:0x0000000000013024        dq 0x00009D3900009CF9
  .rdata:0x000000000001302C        dq 0x000000000000ACB7
  .rdata:0x0000000000013034        db 0x01; Version_Flags
  .rdata:0x0000000000013035        db 0x08; SizeOfProlog
  .rdata:0x0000000000013036        db 0x02; CountOfCodes
  .rdata:0x0000000000013037        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000013038        dw 0x9208; UnwindCode1
  .rdata:0x000000000001303A        dw 0x3004; UnwindCode2
  .rdata:0x000000000001303C        db 0x19; Version_Flags
  .rdata:0x000000000001303D        db 0x26; SizeOfProlog
  .rdata:0x000000000001303E        db 0x09; CountOfCodes
  .rdata:0x000000000001303F        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000013040        dw 0x6818; UnwindCode1
  .rdata:0x0000000000013042        dw 0x000E; UnwindCode2
  .rdata:0x0000000000013044        dw 0x0114; UnwindCode3
  .rdata:0x0000000000013046        dw 0x001E; UnwindCode4
  .rdata:0x0000000000013048        dw 0xE009; UnwindCode5
  .rdata:0x000000000001304A        dw 0x7007; UnwindCode6
  .rdata:0x000000000001304C        dw 0x6006; UnwindCode7
  .rdata:0x000000000001304E        dw 0x3005; UnwindCode8
  .rdata:0x0000000000013050        dw 0x5004; UnwindCode9
  .rdata:0x0000000000013052        dw 0x0000; UnwindCodePadding
  .rdata:0x0000000000013054        dd rva_ptr __GSHandlerCheck; ExceptionHandler; int32_t (__cdecl __rva_ptr)( int64_t p1, int64_t p2, int64_t p3, int64_t p4 )
  .rdata:0x0000000000013058        dd 0x000000D0; ExceptionHandlerData
  .rdata:0x000000000001305C        db 0x01; Version_Flags
  .rdata:0x000000000001305D        db 0x06; SizeOfProlog
  .rdata:0x000000000001305E        db 0x02; CountOfCodes
  .rdata:0x000000000001305F        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000013060        dw 0x1206; UnwindCode1
  .rdata:0x0000000000013062        dw 0x3002; UnwindCode2
  .rdata:0x0000000000013064        db 0x01; Version_Flags
  .rdata:0x0000000000013065        db 0x0B; SizeOfProlog
  .rdata:0x0000000000013066        db 0x03; CountOfCodes
  .rdata:0x0000000000013067        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000013068        dw 0x680B; UnwindCode1
  .rdata:0x000000000001306A        dw 0x0005; UnwindCode2
  .rdata:0x000000000001306C        dw 0xC207; UnwindCode3
  .rdata:0x000000000001306E        dw 0x0000; UnwindCodePadding
  .rdata:0x0000000000013070        db 0x01; Version_Flags
  .rdata:0x0000000000013071        db 0x04; SizeOfProlog
  .rdata:0x0000000000013072        db 0x01; CountOfCodes
  .rdata:0x0000000000013073        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000013074        dw 0x0204; UnwindCode1
  .rdata:0x0000000000013076        dw 0x0000; UnwindCodePadding
  .rdata:0x0000000000013078        db 0x01; Version_Flags
  .rdata:0x0000000000013079        db 0x04; SizeOfProlog
  .rdata:0x000000000001307A        db 0x01; CountOfCodes
  .rdata:0x000000000001307B        db 0x00; FrameRegister_FrameOffset
  .rdata:0x000000000001307C        dw 0x8204; UnwindCode1
  .rdata:0x000000000001307E        dw 0x0000; UnwindCodePadding
  .rdata:0x0000000000013080        db 0x01; Version_Flags
  .rdata:0x0000000000013081        db 0x1B; SizeOfProlog
  .rdata:0x0000000000013082        db 0x08; CountOfCodes
  .rdata:0x0000000000013083        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000013084        dw 0x741B; UnwindCode1
  .rdata:0x0000000000013086        dw 0x0009; UnwindCode2
  .rdata:0x0000000000013088        dw 0x641B; UnwindCode3
  .rdata:0x000000000001308A        dw 0x0008; UnwindCode4
  .rdata:0x000000000001308C        dw 0x341B; UnwindCode5
  .rdata:0x000000000001308E        dw 0x0007; UnwindCode6
  .rdata:0x0000000000013090        dw 0x321B; UnwindCode7
  .rdata:0x0000000000013092        dw 0x5014; UnwindCode8
  .rdata:0x0000000000013094        db 0x09; Version_Flags
  .rdata:0x0000000000013095        db 0x0F; SizeOfProlog
  .rdata:0x0000000000013096        db 0x06; CountOfCodes
  .rdata:0x0000000000013097        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000013098        dw 0x640F; UnwindCode1
  .rdata:0x000000000001309A        dw 0x0009; UnwindCode2
  .rdata:0x000000000001309C        dw 0x340F; UnwindCode3
  .rdata:0x000000000001309E        dw 0x0008; UnwindCode4
  .rdata:0x00000000000130A0        dw 0x320F; UnwindCode5
  .rdata:0x00000000000130A2        dw 0x700B; UnwindCode6
  .rdata:0x00000000000130A4        dd rva_ptr __C_specific_handler; ExceptionHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x00000000000130A8        dd 0x00000001; ExceptionHandlerData
  .rdata:0x00000000000130AC        dd rva_ptr code_0xA67A; Begin
  .rdata:0x00000000000130B0        dd rva_ptr code_0xA681; End
  .rdata:0x00000000000130B4        dd rva_ptr code_0xAD19; Handler
  .rdata:0x00000000000130B8        dd rva_ptr code_0xA681; Target
  .rdata:0x00000000000130BC        db 0x09; Version_Flags
  .rdata:0x00000000000130BD        db 0x0A; SizeOfProlog
  .rdata:0x00000000000130BE        db 0x04; CountOfCodes
  .rdata:0x00000000000130BF        db 0x00; FrameRegister_FrameOffset
  .rdata:0x00000000000130C0        dw 0x340A; UnwindCode1
  .rdata:0x00000000000130C2        dw 0x0006; UnwindCode2
  .rdata:0x00000000000130C4        dw 0x320A; UnwindCode3
  .rdata:0x00000000000130C6        dw 0x7006; UnwindCode4
  .rdata:0x00000000000130C8        dd rva_ptr __C_specific_handler; ExceptionHandler; enum _EXCEPTION_DISPOSITION (__cdecl __rva_ptr)( struct _EXCEPTION_RECORD * ExceptionRecord, void * EstablisherFrame, struct _CONTEXT * ContextRecord, struct _DISPATCHER_CONTEXT * DispatcherContext )
  .rdata:0x00000000000130CC        dd 0x00000001; ExceptionHandlerData
  .rdata:0x00000000000130D0        dd rva_ptr code_0xA74D; Begin
  .rdata:0x00000000000130D4        dd rva_ptr code_0xA780; End
  .rdata:0x00000000000130D8        dd rva_ptr code_0xAD50; Handler
  .rdata:0x00000000000130DC        dd rva_ptr code_0xA780; Target
  .rdata:0x00000000000130E0        db 0x01; Version_Flags
  .rdata:0x00000000000130E1        db 0x00; SizeOfProlog
  .rdata:0x00000000000130E2        db 0x00; CountOfCodes
  .rdata:0x00000000000130E3        db 0x00; FrameRegister_FrameOffset
  .rdata:0x00000000000130E4        db 0x01; Version_Flags
  .rdata:0x00000000000130E5        db 0x09; SizeOfProlog
  .rdata:0x00000000000130E6        db 0x01; CountOfCodes
  .rdata:0x00000000000130E7        db 0x00; FrameRegister_FrameOffset
  .rdata:0x00000000000130E8        dw 0x6209; UnwindCode1
  .rdata:0x00000000000130EA        dw 0x0000; UnwindCodePadding
  .rdata:0x00000000000130EC        db 0x01; Version_Flags
  .rdata:0x00000000000130ED        db 0x08; SizeOfProlog
  .rdata:0x00000000000130EE        db 0x04; CountOfCodes
  .rdata:0x00000000000130EF        db 0x00; FrameRegister_FrameOffset
  .rdata:0x00000000000130F0        dw 0x7208; UnwindCode1
  .rdata:0x00000000000130F2        dw 0x7004; UnwindCode2
  .rdata:0x00000000000130F4        dw 0x6003; UnwindCode3
  .rdata:0x00000000000130F6        dw 0x3002; UnwindCode4
  .rdata:0x00000000000130F8        db 0x01; Version_Flags
  .rdata:0x00000000000130F9        db 0x04; SizeOfProlog
  .rdata:0x00000000000130FA        db 0x01; CountOfCodes
  .rdata:0x00000000000130FB        db 0x00; FrameRegister_FrameOffset
  .rdata:0x00000000000130FC        dw 0x1204; UnwindCode1
  .rdata:0x00000000000130FE        dw 0x0000; UnwindCodePadding
  .rdata:0x0000000000013100        db 0x01; Version_Flags
  .rdata:0x0000000000013101        db 0x00; SizeOfProlog
  .rdata:0x0000000000013102        db 0x00; CountOfCodes
  .rdata:0x0000000000013103        db 0x00; FrameRegister_FrameOffset
  .rdata:0x0000000000013104        dq 0x0000000000000000
  .rdata:0x000000000001310C        dd 0x00000000
  .rdata:0x0000000000013110 data_0x13110:
  .rdata:0x0000000000013110        dd 0x00000000; Characteristics
  .rdata:0x0000000000013114        dd 0xFFFFFFFF; TimeDateStamp
  .rdata:0x0000000000013118        dw 0x0000; MajorVersion
  .rdata:0x000000000001311A        dw 0x0000; MinorVersion
  .rdata:0x000000000001311C        dd rva_ptr string_WindowsPla; Name; "WindowsPlayer.exe"
  .rdata:0x0000000000013120        dd 0x00000001; Base
  .rdata:0x0000000000013124        dd 0x00000002; NumberOfFunctions
  .rdata:0x0000000000013128        dd 0x00000002; NumberOfNames
  .rdata:0x000000000001312C        dd rva_ptr Address; AddressOfFunctions
  .rdata:0x0000000000013130        dd rva_ptr Name Pointer; AddressOfNames
  .rdata:0x0000000000013134        dd rva_ptr data_0x13148; AddressOfNameOrdinals
  .rdata:0x0000000000013138 Address:
  .rdata:0x0000000000013138        dd rva_ptr AmdPowerXpressRequestHighPerformance; Address
  .rdata:0x000000000001313C        dd rva_ptr NvOptimusEnablement; Address
  .rdata:0x0000000000013140 Name Pointer:
  .rdata:0x0000000000013140        dd rva_ptr string_AmdPowerXp; Name Pointer; "AmdPowerXpressRequestHighPerformance"
  .rdata:0x0000000000013144        dd rva_ptr string_NvOptimusE; Name Pointer; "NvOptimusEnablement"
  .rdata:0x0000000000013148 data_0x13148:
  .rdata:0x0000000000013148        dd 0x00010000
  .rdata:0x000000000001314C string_WindowsPla:
  .rdata:0x000000000001314C        db "WindowsPlayer.exe\x00"; ModuleName
  .rdata:0x000000000001315E string_AmdPowerXp:
  .rdata:0x000000000001315E        db "AmdPowerXpressRequestHighPerformance\x00"; Name
  .rdata:0x0000000000013183 string_NvOptimusE:
  .rdata:0x0000000000013183        db "NvOptimusEnablement\x00"; Name
  .rdata:0x0000000000013197        db 0x00
  .rdata:0x0000000000013198 data_0x13198:
  .rdata:0x0000000000013198        dd rva_ptr Address_2; OriginalFirstThunk
  .rdata:0x000000000001319C        dd 0x00000000; TimeDateStamp
  .rdata:0x00000000000131A0        dd 0x00000000; ForwarderChain
  .rdata:0x00000000000131A4        dd rva_ptr string_UnityPlaye; Name; "UnityPlayer.dll"
  .rdata:0x00000000000131A8        dd rva_ptr UnityMain; FirstThunk
  .rdata:0x00000000000131AC        dd rva_ptr Address_3; OriginalFirstThunk
  .rdata:0x00000000000131B0        dd 0x00000000; TimeDateStamp
  .rdata:0x00000000000131B4        dd 0x00000000; ForwarderChain
  .rdata:0x00000000000131B8        dd rva_ptr string_KERNEL32dl; Name; "KERNEL32.dll"
  .rdata:0x00000000000131BC        dd rva_ptr GetModuleHandleExW; FirstThunk
  .rdata:0x00000000000131C0        dq 0x0000000000000000
  .rdata:0x00000000000131C8        dq 0x0000000000000000
  .rdata:0x00000000000131D0        dq 0x0000000000000000
  .rdata:0x00000000000131D8 Address_3:
  .rdata:0x00000000000131D8        dq rva_ptr data_0x136E6; Address
  .rdata:0x00000000000131E0        dq rva_ptr data_0x138CE; Address
  .rdata:0x00000000000131E8        dq rva_ptr data_0x13414; Address
  .rdata:0x00000000000131F0        dq rva_ptr data_0x1342E; Address
  .rdata:0x00000000000131F8        dq rva_ptr data_0x13444; Address
  .rdata:0x0000000000013200        dq rva_ptr data_0x1345A; Address
  .rdata:0x0000000000013208        dq rva_ptr data_0x13474; Address
  .rdata:0x0000000000013210        dq rva_ptr data_0x1348A; Address
  .rdata:0x0000000000013218        dq rva_ptr data_0x1349E; Address
  .rdata:0x0000000000013220        dq rva_ptr data_0x134B8; Address
  .rdata:0x0000000000013228        dq rva_ptr data_0x134CC; Address
  .rdata:0x0000000000013230        dq rva_ptr data_0x134E0; Address
  .rdata:0x0000000000013238        dq rva_ptr data_0x134FC; Address
  .rdata:0x0000000000013240        dq rva_ptr data_0x1351A; Address
  .rdata:0x0000000000013248        dq rva_ptr data_0x1352C; Address
  .rdata:0x0000000000013250        dq rva_ptr data_0x13548; Address
  .rdata:0x0000000000013258        dq rva_ptr data_0x138C0; Address
  .rdata:0x0000000000013260        dq rva_ptr data_0x1356A; Address
  .rdata:0x0000000000013268        dq rva_ptr data_0x13578; Address
  .rdata:0x0000000000013270        dq rva_ptr data_0x13588; Address
  .rdata:0x0000000000013278        dq rva_ptr data_0x13598; Address
  .rdata:0x0000000000013280        dq rva_ptr data_0x135B0; Address
  .rdata:0x0000000000013288        dq rva_ptr data_0x135C8; Address
  .rdata:0x0000000000013290        dq rva_ptr data_0x135E0; Address
  .rdata:0x0000000000013298        dq rva_ptr data_0x13608; Address
  .rdata:0x00000000000132A0        dq rva_ptr data_0x13614; Address
  .rdata:0x00000000000132A8        dq rva_ptr data_0x13622; Address
  .rdata:0x00000000000132B0        dq rva_ptr data_0x13630; Address
  .rdata:0x00000000000132B8        dq rva_ptr data_0x1363A; Address
  .rdata:0x00000000000132C0        dq rva_ptr data_0x13648; Address
  .rdata:0x00000000000132C8        dq rva_ptr data_0x1365A; Address
  .rdata:0x00000000000132D0        dq rva_ptr data_0x1366C; Address
  .rdata:0x00000000000132D8        dq rva_ptr data_0x1367E; Address
  .rdata:0x00000000000132E0        dq rva_ptr data_0x1368E; Address
  .rdata:0x00000000000132E8        dq rva_ptr data_0x1369A; Address
  .rdata:0x00000000000132F0        dq rva_ptr data_0x136B0; Address
  .rdata:0x00000000000132F8        dq rva_ptr data_0x136C4; Address
  .rdata:0x0000000000013300        dq rva_ptr data_0x136D2; Address
  .rdata:0x0000000000013308        dq rva_ptr data_0x136FC; Address
  .rdata:0x0000000000013310        dq rva_ptr data_0x13708; Address
  .rdata:0x0000000000013318        dq rva_ptr data_0x13714; Address
  .rdata:0x0000000000013320        dq rva_ptr data_0x13720; Address
  .rdata:0x0000000000013328        dq rva_ptr data_0x13734; Address
  .rdata:0x0000000000013330        dq rva_ptr data_0x13744; Address
  .rdata:0x0000000000013338        dq rva_ptr data_0x13756; Address
  .rdata:0x0000000000013340        dq rva_ptr data_0x13760; Address
  .rdata:0x0000000000013348        dq rva_ptr data_0x1376C; Address
  .rdata:0x0000000000013350        dq rva_ptr data_0x13778; Address
  .rdata:0x0000000000013358        dq rva_ptr data_0x1378A; Address
  .rdata:0x0000000000013360        dq rva_ptr data_0x1379C; Address
  .rdata:0x0000000000013368        dq rva_ptr data_0x137B2; Address
  .rdata:0x0000000000013370        dq rva_ptr data_0x137C8; Address
  .rdata:0x0000000000013378        dq rva_ptr data_0x137E2; Address
  .rdata:0x0000000000013380        dq rva_ptr data_0x137FC; Address
  .rdata:0x0000000000013388        dq rva_ptr data_0x1380C; Address
  .rdata:0x0000000000013390        dq rva_ptr data_0x1381A; Address
  .rdata:0x0000000000013398        dq rva_ptr data_0x1382C; Address
  .rdata:0x00000000000133A0        dq rva_ptr data_0x1383C; Address
  .rdata:0x00000000000133A8        dq rva_ptr data_0x1384E; Address
  .rdata:0x00000000000133B0        dq rva_ptr data_0x1385A; Address
  .rdata:0x00000000000133B8        dq rva_ptr data_0x13868; Address
  .rdata:0x00000000000133C0        dq rva_ptr data_0x1387C; Address
  .rdata:0x00000000000133C8        dq rva_ptr data_0x1388C; Address
  .rdata:0x00000000000133D0        dq rva_ptr data_0x1389E; Address
  .rdata:0x00000000000133D8        dq rva_ptr data_0x138B2; Address
  .rdata:0x00000000000133E0        dq 0x0000000000000000
  .rdata:0x00000000000133E8 Address_2:
  .rdata:0x00000000000133E8        dq rva_ptr data_0x133F8; Address
  .rdata:0x00000000000133F0        dq 0x0000000000000000
  .rdata:0x00000000000133F8 data_0x133F8:
  .rdata:0x00000000000133F8        dw 0x0000; Hint
  .rdata:0x00000000000133FA        db "UnityMain\x00"; Name
  .rdata:0x0000000000013404 string_UnityPlaye:
  .rdata:0x0000000000013404        db "UnityPlayer.dll\x00"
  .rdata:0x0000000000013414 data_0x13414:
  .rdata:0x0000000000013414        dw 0x0449; Hint
  .rdata:0x0000000000013416        db "QueryPerformanceCounter\x00"; Name
  .rdata:0x000000000001342E data_0x1342E:
  .rdata:0x000000000001342E        dw 0x021C; Hint
  .rdata:0x0000000000013430        db "GetCurrentProcessId\x00"; Name
  .rdata:0x0000000000013444 data_0x13444:
  .rdata:0x0000000000013444        dw 0x0220; Hint
  .rdata:0x0000000000013446        db "GetCurrentThreadId\x00"; Name
  .rdata:0x0000000000013459        db 0x00
  .rdata:0x000000000001345A data_0x1345A:
  .rdata:0x000000000001345A        dw 0x02EC; Hint
  .rdata:0x000000000001345C        db "GetSystemTimeAsFileTime\x00"; Name
  .rdata:0x0000000000013474 data_0x13474:
  .rdata:0x0000000000013474        dw 0x0367; Hint
  .rdata:0x0000000000013476        db "InitializeSListHead\x00"; Name
  .rdata:0x000000000001348A data_0x1348A:
  .rdata:0x000000000001348A        dw 0x04CB; Hint
  .rdata:0x000000000001348C        db "RtlCaptureContext\x00"; Name
  .rdata:0x000000000001349E data_0x1349E:
  .rdata:0x000000000001349E        dw 0x04D2; Hint
  .rdata:0x00000000000134A0        db "RtlLookupFunctionEntry\x00"; Name
  .rdata:0x00000000000134B7        db 0x00
  .rdata:0x00000000000134B8 data_0x134B8:
  .rdata:0x00000000000134B8        dw 0x04D9; Hint
  .rdata:0x00000000000134BA        db "RtlVirtualUnwind\x00"; Name
  .rdata:0x00000000000134CB        db 0x00
  .rdata:0x00000000000134CC data_0x134CC:
  .rdata:0x00000000000134CC        dw 0x037D; Hint
  .rdata:0x00000000000134CE        db "IsDebuggerPresent\x00"; Name
  .rdata:0x00000000000134E0 data_0x134E0:
  .rdata:0x00000000000134E0        dw 0x05B4; Hint
  .rdata:0x00000000000134E2        db "UnhandledExceptionFilter\x00"; Name
  .rdata:0x00000000000134FB        db 0x00
  .rdata:0x00000000000134FC data_0x134FC:
  .rdata:0x00000000000134FC        dw 0x0573; Hint
  .rdata:0x00000000000134FE        db "SetUnhandledExceptionFilter\x00"; Name
  .rdata:0x000000000001351A data_0x1351A:
  .rdata:0x000000000001351A        dw 0x02D3; Hint
  .rdata:0x000000000001351C        db "GetStartupInfoW\x00"; Name
  .rdata:0x000000000001352C data_0x1352C:
  .rdata:0x000000000001352C        dw 0x0384; Hint
  .rdata:0x000000000001352E        db "IsProcessorFeaturePresent\x00"; Name
  .rdata:0x0000000000013548 data_0x13548:
  .rdata:0x0000000000013548        dw 0x027A; Hint
  .rdata:0x000000000001354A        db "GetModuleHandleW\x00"; Name
  .rdata:0x000000000001355B        db 0x00
  .rdata:0x000000000001355C string_KERNEL32dl:
  .rdata:0x000000000001355C        db "KERNEL32.dll\x00"
  .rdata:0x0000000000013569        db 0x00
  .rdata:0x000000000001356A data_0x1356A:
  .rdata:0x000000000001356A        dw 0x04D8; Hint
  .rdata:0x000000000001356C        db "RtlUnwindEx\x00"; Name
  .rdata:0x0000000000013578 data_0x13578:
  .rdata:0x0000000000013578        dw 0x0263; Hint
  .rdata:0x000000000001357A        db "GetLastError\x00"; Name
  .rdata:0x0000000000013587        db 0x00
  .rdata:0x0000000000013588 data_0x13588:
  .rdata:0x0000000000013588        dw 0x0537; Hint
  .rdata:0x000000000001358A        db "SetLastError\x00"; Name
  .rdata:0x0000000000013597        db 0x00
  .rdata:0x0000000000013598 data_0x13598:
  .rdata:0x0000000000013598        dw 0x0133; Hint
  .rdata:0x000000000001359A        db "EnterCriticalSection\x00"; Name
  .rdata:0x00000000000135AF        db 0x00
  .rdata:0x00000000000135B0 data_0x135B0:
  .rdata:0x00000000000135B0        dw 0x03BB; Hint
  .rdata:0x00000000000135B2        db "LeaveCriticalSection\x00"; Name
  .rdata:0x00000000000135C7        db 0x00
  .rdata:0x00000000000135C8 data_0x135C8:
  .rdata:0x00000000000135C8        dw 0x010F; Hint
  .rdata:0x00000000000135CA        db "DeleteCriticalSection\x00"; Name
  .rdata:0x00000000000135E0 data_0x135E0:
  .rdata:0x00000000000135E0        dw 0x0363; Hint
  .rdata:0x00000000000135E2        db "InitializeCriticalSectionAndSpinCount\x00"; Name
  .rdata:0x0000000000013608 data_0x13608:
  .rdata:0x0000000000013608        dw 0x05A4; Hint
  .rdata:0x000000000001360A        db "TlsAlloc\x00"; Name
  .rdata:0x0000000000013613        db 0x00
  .rdata:0x0000000000013614 data_0x13614:
  .rdata:0x0000000000013614        dw 0x05A6; Hint
  .rdata:0x0000000000013616        db "TlsGetValue\x00"; Name
  .rdata:0x0000000000013622 data_0x13622:
  .rdata:0x0000000000013622        dw 0x05A7; Hint
  .rdata:0x0000000000013624        db "TlsSetValue\x00"; Name
  .rdata:0x0000000000013630 data_0x13630:
  .rdata:0x0000000000013630        dw 0x05A5; Hint
  .rdata:0x0000000000013632        db "TlsFree\x00"; Name
  .rdata:0x000000000001363A data_0x1363A:
  .rdata:0x000000000001363A        dw 0x01AF; Hint
  .rdata:0x000000000001363C        db "FreeLibrary\x00"; Name
  .rdata:0x0000000000013648 data_0x13648:
  .rdata:0x0000000000013648        dw 0x02B1; Hint
  .rdata:0x000000000001364A        db "GetProcAddress\x00"; Name
  .rdata:0x0000000000013659        db 0x00
  .rdata:0x000000000001365A data_0x1365A:
  .rdata:0x000000000001365A        dw 0x03C1; Hint
  .rdata:0x000000000001365C        db "LoadLibraryExW\x00"; Name
  .rdata:0x000000000001366B        db 0x00
  .rdata:0x000000000001366C data_0x1366C:
  .rdata:0x000000000001366C        dw 0x045F; Hint
  .rdata:0x000000000001366E        db "RaiseException\x00"; Name
  .rdata:0x000000000001367D        db 0x00
  .rdata:0x000000000001367E data_0x1367E:
  .rdata:0x000000000001367E        dw 0x02D5; Hint
  .rdata:0x0000000000013680        db "GetStdHandle\x00"; Name
  .rdata:0x000000000001368D        db 0x00
  .rdata:0x000000000001368E data_0x1368E:
  .rdata:0x000000000001368E        dw 0x0619; Hint
  .rdata:0x0000000000013690        db "WriteFile\x00"; Name
  .rdata:0x000000000001369A data_0x1369A:
  .rdata:0x000000000001369A        dw 0x0276; Hint
  .rdata:0x000000000001369C        db "GetModuleFileNameW\x00"; Name
  .rdata:0x00000000000136AF        db 0x00
  .rdata:0x00000000000136B0 data_0x136B0:
  .rdata:0x00000000000136B0        dw 0x021B; Hint
  .rdata:0x00000000000136B2        db "GetCurrentProcess\x00"; Name
  .rdata:0x00000000000136C4 data_0x136C4:
  .rdata:0x00000000000136C4        dw 0x0162; Hint
  .rdata:0x00000000000136C6        db "ExitProcess\x00"; Name
  .rdata:0x00000000000136D2 data_0x136D2:
  .rdata:0x00000000000136D2        dw 0x0592; Hint
  .rdata:0x00000000000136D4        db "TerminateProcess\x00"; Name
  .rdata:0x00000000000136E5        db 0x00
  .rdata:0x00000000000136E6 data_0x136E6:
  .rdata:0x00000000000136E6        dw 0x0279; Hint
  .rdata:0x00000000000136E8        db "GetModuleHandleExW\x00"; Name
  .rdata:0x00000000000136FB        db 0x00
  .rdata:0x00000000000136FC data_0x136FC:
  .rdata:0x00000000000136FC        dw 0x034A; Hint
  .rdata:0x00000000000136FE        db "HeapAlloc\x00"; Name
  .rdata:0x0000000000013708 data_0x13708:
  .rdata:0x0000000000013708        dw 0x034E; Hint
  .rdata:0x000000000001370A        db "HeapFree\x00"; Name
  .rdata:0x0000000000013713        db 0x00
  .rdata:0x0000000000013714 data_0x13714:
  .rdata:0x0000000000013714        dw 0x0179; Hint
  .rdata:0x0000000000013716        db "FindClose\x00"; Name
  .rdata:0x0000000000013720 data_0x13720:
  .rdata:0x0000000000013720        dw 0x017F; Hint
  .rdata:0x0000000000013722        db "FindFirstFileExW\x00"; Name
  .rdata:0x0000000000013733        db 0x00
  .rdata:0x0000000000013734 data_0x13734:
  .rdata:0x0000000000013734        dw 0x0190; Hint
  .rdata:0x0000000000013736        db "FindNextFileW\x00"; Name
  .rdata:0x0000000000013744 data_0x13744:
  .rdata:0x0000000000013744        dw 0x0389; Hint
  .rdata:0x0000000000013746        db "IsValidCodePage\x00"; Name
  .rdata:0x0000000000013756 data_0x13756:
  .rdata:0x0000000000013756        dw 0x01B6; Hint
  .rdata:0x0000000000013758        db "GetACP\x00"; Name
  .rdata:0x000000000001375F        db 0x00
  .rdata:0x0000000000013760 data_0x13760:
  .rdata:0x0000000000013760        dw 0x029A; Hint
  .rdata:0x0000000000013762        db "GetOEMCP\x00"; Name
  .rdata:0x000000000001376B        db 0x00
  .rdata:0x000000000001376C data_0x1376C:
  .rdata:0x000000000001376C        dw 0x01C5; Hint
  .rdata:0x000000000001376E        db "GetCPInfo\x00"; Name
  .rdata:0x0000000000013778 data_0x13778:
  .rdata:0x0000000000013778        dw 0x01DA; Hint
  .rdata:0x000000000001377A        db "GetCommandLineA\x00"; Name
  .rdata:0x000000000001378A data_0x1378A:
  .rdata:0x000000000001378A        dw 0x01DB; Hint
  .rdata:0x000000000001378C        db "GetCommandLineW\x00"; Name
  .rdata:0x000000000001379C data_0x1379C:
  .rdata:0x000000000001379C        dw 0x03EB; Hint
  .rdata:0x000000000001379E        db "MultiByteToWideChar\x00"; Name
  .rdata:0x00000000000137B2 data_0x137B2:
  .rdata:0x00000000000137B2        dw 0x0605; Hint
  .rdata:0x00000000000137B4        db "WideCharToMultiByte\x00"; Name
  .rdata:0x00000000000137C8 data_0x137C8:
  .rdata:0x00000000000137C8        dw 0x023A; Hint
  .rdata:0x00000000000137CA        db "GetEnvironmentStringsW\x00"; Name
  .rdata:0x00000000000137E1        db 0x00
  .rdata:0x00000000000137E2 data_0x137E2:
  .rdata:0x00000000000137E2        dw 0x01AE; Hint
  .rdata:0x00000000000137E4        db "FreeEnvironmentStringsW\x00"; Name
  .rdata:0x00000000000137FC data_0x137FC:
  .rdata:0x00000000000137FC        dw 0x054F; Hint
  .rdata:0x00000000000137FE        db "SetStdHandle\x00"; Name
  .rdata:0x000000000001380B        db 0x00
  .rdata:0x000000000001380C data_0x1380C:
  .rdata:0x000000000001380C        dw 0x0251; Hint
  .rdata:0x000000000001380E        db "GetFileType\x00"; Name
  .rdata:0x000000000001381A data_0x1381A:
  .rdata:0x000000000001381A        dw 0x02DA; Hint
  .rdata:0x000000000001381C        db "GetStringTypeW\x00"; Name
  .rdata:0x000000000001382B        db 0x00
  .rdata:0x000000000001382C data_0x1382C:
  .rdata:0x000000000001382C        dw 0x03AF; Hint
  .rdata:0x000000000001382E        db "LCMapStringW\x00"; Name
  .rdata:0x000000000001383B        db 0x00
  .rdata:0x000000000001383C data_0x1383C:
  .rdata:0x000000000001383C        dw 0x02B7; Hint
  .rdata:0x000000000001383E        db "GetProcessHeap\x00"; Name
  .rdata:0x000000000001384D        db 0x00
  .rdata:0x000000000001384E data_0x1384E:
  .rdata:0x000000000001384E        dw 0x0353; Hint
  .rdata:0x0000000000013850        db "HeapSize\x00"; Name
  .rdata:0x0000000000013859        db 0x00
  .rdata:0x000000000001385A data_0x1385A:
  .rdata:0x000000000001385A        dw 0x0351; Hint
  .rdata:0x000000000001385C        db "HeapReAlloc\x00"; Name
  .rdata:0x0000000000013868 data_0x13868:
  .rdata:0x0000000000013868        dw 0x01A3; Hint
  .rdata:0x000000000001386A        db "FlushFileBuffers\x00"; Name
  .rdata:0x000000000001387B        db 0x00
  .rdata:0x000000000001387C data_0x1387C:
  .rdata:0x000000000001387C        dw 0x01EE; Hint
  .rdata:0x000000000001387E        db "GetConsoleCP\x00"; Name
  .rdata:0x000000000001388B        db 0x00
  .rdata:0x000000000001388C data_0x1388C:
  .rdata:0x000000000001388C        dw 0x0200; Hint
  .rdata:0x000000000001388E        db "GetConsoleMode\x00"; Name
  .rdata:0x000000000001389D        db 0x00
  .rdata:0x000000000001389E data_0x1389E:
  .rdata:0x000000000001389E        dw 0x0529; Hint
  .rdata:0x00000000000138A0        db "SetFilePointerEx\x00"; Name
  .rdata:0x00000000000138B1        db 0x00
  .rdata:0x00000000000138B2 data_0x138B2:
  .rdata:0x00000000000138B2        dw 0x00CA; Hint
  .rdata:0x00000000000138B4        db "CreateFileW\x00"; Name
  .rdata:0x00000000000138C0 data_0x138C0:
  .rdata:0x00000000000138C0        dw 0x0086; Hint
  .rdata:0x00000000000138C2        db "CloseHandle\x00"; Name
  .rdata:0x00000000000138CE data_0x138CE:
  .rdata:0x00000000000138CE        dw 0x0618; Hint
  .rdata:0x00000000000138D0        db "WriteConsoleW\x00"; Name
  .rdata:0x00000000000138DE data_0x138DE:
  .rdata:0x00000000000138DE        db 1826 dup(??)
   .data:0x0000000000014000 NvOptimusEnablement:
   .data:0x0000000000014000        dd 0x00000001
   .data:0x0000000000014004 AmdPowerXpressRequestHighPerformance:
   .data:0x0000000000014004        dq 0xFFFFFFFF00000001
   .data:0x000000000001400C data_0x1400C:
   .data:0x000000000001400C        dd 0x00000001
   .data:0x0000000000014010 data_0x14010:
   .data:0x0000000000014010        dd 0x00000001
   .data:0x0000000000014014 data_0x14014:
   .data:0x0000000000014014        dd 0x00000002
   .data:0x0000000000014018 data_0x14018:
   .data:0x0000000000014018        db "/ \x00"
   .data:0x000000000001401B        dd 0x00000000
   .data:0x000000000001401F        db 0x00
   .data:0x0000000000014020 __security_cookie_complement:
   .data:0x0000000000014020        dq 0xFFFFD466D2205DCD
   .data:0x0000000000014028 __security_cookie:
   .data:0x0000000000014028        dq 0x00002B992DDFA232
   .data:0x0000000000014030 data_0x14030:
   .data:0x0000000000014030        dq 0x00000000FFFFFFFF
   .data:0x0000000000014038        dq 0x0000000000000000
   .data:0x0000000000014040 data_0x14040:
   .data:0x0000000000014040        dq 0x0000000000000002
   .data:0x0000000000014048        dq 0x0000000000000000
   .data:0x0000000000014050 data_0x14050:
   .data:0x0000000000014050        dd 0xFFFFFFFF
   .data:0x0000000000014054 data_0x14054:
   .data:0x0000000000014054        dd 0x0000000C
   .data:0x0000000000014058 data_0x14058:
   .data:0x0000000000014058        dd 0x00000008
   .data:0x000000000001405C data_0x1405C:
   .data:0x000000000001405C        dd 0x08040201
   .data:0x0000000000014060 data_0x14060:
   .data:0x0000000000014060        dq 0x82798260000003A4
   .data:0x0000000000014068        dq 0x0000000000000021
   .data:0x0000000000014070        dq 0x000000000000DFA6
   .data:0x0000000000014078        dq 0x000000000000A5A1
   .data:0x0000000000014080        dq 0x00000000FCE09F81
   .data:0x0000000000014088        dq 0x00000000FC807E40
   .data:0x0000000000014090        dq 0xA3DAA3C1000003A8
   .data:0x0000000000014098        db " \x00"
   .data:0x000000000001409A        dq 0x0000000000000000
   .data:0x00000000000140A2        dq 0x0000000000000000
   .data:0x00000000000140AA        dq 0xFE81000000000000
   .data:0x00000000000140B2        dq 0xFE40000000000000
   .data:0x00000000000140BA        dq 0x03B5000000000000
   .data:0x00000000000140C2        dd 0xA3C10000
   .data:0x00000000000140C6        dw 0xA3DA
   .data:0x00000000000140C8        db " \x00"
   .data:0x00000000000140CA        dq 0x0000000000000000
   .data:0x00000000000140D2        dq 0x0000000000000000
   .data:0x00000000000140DA        dq 0xFE81000000000000
   .data:0x00000000000140E2        dq 0xFE41000000000000
   .data:0x00000000000140EA        dq 0x03B6000000000000
   .data:0x00000000000140F2        dq 0x001AA2E4A2CF0000
   .data:0x00000000000140FA        dq 0x0000005BA2E8A2E5
   .data:0x0000000000014102        dq 0x0000000000000000
   .data:0x000000000001410A        dq 0xFE81000000000000
   .data:0x0000000000014112        dq 0x7E40000000000000
   .data:0x000000000001411A        dq 0x055100000000FEA1
   .data:0x0000000000014122        dd 0xDA510000
   .data:0x0000000000014126        dw 0xDA5E
   .data:0x0000000000014128        db " \x00"
   .data:0x000000000001412A        dd 0xDA6ADA5F
   .data:0x000000000001412E        db "2\x00"
   .data:0x0000000000014130        dq 0x0000000000000000
   .data:0x0000000000014138        dq 0x0000000000000000
   .data:0x0000000000014140        dq 0x0000F9E0DED8D381
   .data:0x0000000000014148        dq 0x00000000FE817E31
   .data:0x0000000000014150 data_0x14150:
   .data:0x0000000000014150        dq 0x0000000000000000
   .data:0x0000000000014158        dq 0x0000000000000000
   .data:0x0000000000014160        dq 0x0000000000000000
   .data:0x0000000000014168        dq 0x0000000000000000
   .data:0x0000000000014170        dq 0x0000000000000000
   .data:0x0000000000014178        dq 0x0000000000000000
   .data:0x0000000000014180        dq 0x0000000000000000
   .data:0x0000000000014188        dq 0x0000000000000000
   .data:0x0000000000014190        dq 0x0000000000000000
   .data:0x0000000000014198        dq 0x0000000000000000
   .data:0x00000000000141A0        dq 0x0000000000000000
   .data:0x00000000000141A8        dq 0x1010101010100000
   .data:0x00000000000141B0        dq 0x1010101010101010
   .data:0x00000000000141B8        dq 0x1010101010101010
   .data:0x00000000000141C0        dq 0x0000000010101010
   .data:0x00000000000141C8        dw 0x0000
   .data:0x00000000000141CA        db "                          \x00"
   .data:0x00000000000141E5        dq 0x0000000000000000
   .data:0x00000000000141ED        dq 0x0000000000000000
   .data:0x00000000000141F5        dq 0x0000000000000000
   .data:0x00000000000141FD        dq 0x0000000000000000
   .data:0x0000000000014205        dq 0x0000000000000000
   .data:0x000000000001420D        dq 0x0000000000000000
   .data:0x0000000000014215        dq 0x0000000000000000
   .data:0x000000000001421D        dq 0x0000000000000000
   .data:0x0000000000014225        dq 0x0000000000000000
   .data:0x000000000001422D        dq 0x0000000000000000
   .data:0x0000000000014235        dq 0x0000000000000000
   .data:0x000000000001423D        dq 0x0000000000000000
   .data:0x0000000000014245        dq 0x0000000000000000
   .data:0x000000000001424D        dq 0x0000000000000000
   .data:0x0000000000014255        dq 0x0000000000000000
   .data:0x000000000001425D        dq 0x0000000000000000
   .data:0x0000000000014265        dq 0x0000000000000000
   .data:0x000000000001426D        dq 0x0000000000000000
   .data:0x0000000000014275        dq 0x0000000000000000
   .data:0x000000000001427D        dq 0x0000000000000000
   .data:0x0000000000014285        dq 0x0000000000000000
   .data:0x000000000001428D        dq 0x0000000000000000
   .data:0x0000000000014295        dq 0x0000000000000000
   .data:0x000000000001429D        dq 0x0000000000000000
   .data:0x00000000000142A5        dd 0x00000000
   .data:0x00000000000142A9        db 0x00
   .data:0x00000000000142AA        db "abcdefghijklmnopqrstuvwxyz\x00"
   .data:0x00000000000142C5        dd 0x00000000
   .data:0x00000000000142C9        db 0x00
   .data:0x00000000000142CA        db "ABCDEFGHIJKLMNOPQRSTUVWXYZ\x00"
   .data:0x00000000000142E5        dq 0x0000000000000000
   .data:0x00000000000142ED        dq 0x0000000000000000
   .data:0x00000000000142F5        dq 0x0000000000000000
   .data:0x00000000000142FD        dq 0x0000000000000000
   .data:0x0000000000014305        dq 0x0000000000000000
   .data:0x000000000001430D        dq 0x0000000000000000
   .data:0x0000000000014315        dq 0x0000000000000000
   .data:0x000000000001431D        dq 0x0000000000000000
   .data:0x0000000000014325        dq 0x0000000000000000
   .data:0x000000000001432D        dq 0x0000000000000000
   .data:0x0000000000014335        dq 0x0000000000000000
   .data:0x000000000001433D        dq 0x0000000000000000
   .data:0x0000000000014345        dq 0x0000000000000000
   .data:0x000000000001434D        dq 0x0000000000000000
   .data:0x0000000000014355        dq 0x0000000000000000
   .data:0x000000000001435D        dq 0x0000000000000000
   .data:0x0000000000014365        dq 0x0000000000000000
   .data:0x000000000001436D        dq 0x0000000000000000
   .data:0x0000000000014375        dq 0x0000000000000000
   .data:0x000000000001437D        dw 0x0000
   .data:0x000000000001437F        db 0x00
   .data:0x0000000000014380 data_0x14380:
   .data:0x0000000000014380        dq 0x0000000000000000
   .data:0x0000000000014388        dq 0x0000000000000000
   .data:0x0000000000014390        dq 0x0000000000000000
   .data:0x0000000000014398        dq 0x0000000000000000
   .data:0x00000000000143A0        dq 0x0000000000000000
   .data:0x00000000000143A8        dq 0x0000000000000000
   .data:0x00000000000143B0        dq 0x0000000000000000
   .data:0x00000000000143B8        dq 0x0000000000000000
   .data:0x00000000000143C0        dq 0x1010101010100000
   .data:0x00000000000143C8        dq 0x1010101010101010
   .data:0x00000000000143D0        dq 0x1010101010101010
   .data:0x00000000000143D8        dq 0x0000000010101010
   .data:0x00000000000143E0        dw 0x0000
   .data:0x00000000000143E2        db "                          \x00"
   .data:0x00000000000143FD        dq 0x0000000000000000
   .data:0x0000000000014405        dq 0x0000000000000000
   .data:0x000000000001440D        dq 0x0000000000000000
   .data:0x0000000000014415        dq 0x0000000000000000
   .data:0x000000000001441D        dq 0x0000000000000000
   .data:0x0000000000014425        dq 0x0000000000000000
   .data:0x000000000001442D        dq 0x0000000000000000
   .data:0x0000000000014435        dq 0x0000000000000000
   .data:0x000000000001443D        dq 0x0000000000000000
   .data:0x0000000000014445        dq 0x0000000000000000
   .data:0x000000000001444D        dq 0x0000000000000000
   .data:0x0000000000014455        dq 0x0000000000000000
   .data:0x000000000001445D        dq 0x0000000000000000
   .data:0x0000000000014465        dq 0x0000000000000000
   .data:0x000000000001446D        dq 0x0000000000000000
   .data:0x0000000000014475        dq 0x0000000000000000
   .data:0x000000000001447D        dq 0x0000000000000000
   .data:0x0000000000014485        dq 0x0000000000000000
   .data:0x000000000001448D        dw 0x0000
   .data:0x000000000001448F        db 0x00
   .data:0x0000000000014490 data_0x14490:
   .data:0x0000000000014490        dq 0x0000000000000000
   .data:0x0000000000014498        dq 0x0000000000000000
   .data:0x00000000000144A0        dq 0x0000000000000000
   .data:0x00000000000144A8        dq 0x0000000000000000
   .data:0x00000000000144B0        dq 0x0000000000000000
   .data:0x00000000000144B8        dq 0x0000000000000000
   .data:0x00000000000144C0        dq 0x0000000000000000
   .data:0x00000000000144C8        dq 0x0000000000000000
   .data:0x00000000000144D0        db 0x00
   .data:0x00000000000144D1        db "abcdefghijklmnopqrstuvwxyz\x00"
   .data:0x00000000000144EC        dd 0x00000000
   .data:0x00000000000144F0        db 0x00
   .data:0x00000000000144F1        db "ABCDEFGHIJKLMNOPQRSTUVWXYZ\x00"
   .data:0x000000000001450C        dq 0x0000000000000000
   .data:0x0000000000014514        dq 0x0000000000000000
   .data:0x000000000001451C        dq 0x0000000000000000
   .data:0x0000000000014524        dq 0x0000000000000000
   .data:0x000000000001452C        dq 0x0000000000000000
   .data:0x0000000000014534        dq 0x0000000000000000
   .data:0x000000000001453C        dq 0x0000000000000000
   .data:0x0000000000014544        dq 0x0000000000000000
   .data:0x000000000001454C        dq 0x0000000000000000
   .data:0x0000000000014554        dq 0x0000000000000000
   .data:0x000000000001455C        dq 0x0000000000000000
   .data:0x0000000000014564        dq 0x0000000000000000
   .data:0x000000000001456C        dq 0x0000000000000000
   .data:0x0000000000014574        dq 0x0000000000000000
   .data:0x000000000001457C        dq 0x0000000000000000
   .data:0x0000000000014584        dq 0x0000000000000000
   .data:0x000000000001458C        dd 0x00000000
   .data:0x0000000000014590 data_0x14590:
   .data:0x0000000000014590        dq va_ptr data_0xC910; " "
   .data:0x0000000000014598        dq 0x0000000000000001
   .data:0x00000000000145A0        dq 0x0000000000000001
   .data:0x00000000000145A8        dq 0x0000000100000000
   .data:0x00000000000145B0        dq 0x0000000000000000
   .data:0x00000000000145B8        dq 0x0000000000000000
   .data:0x00000000000145C0        dq 0x0000000000000000
   .data:0x00000000000145C8        dq 0x0000000000000000
   .data:0x00000000000145D0        dq 0x0000000000000000
   .data:0x00000000000145D8        dq va_ptr string_C; "C"
   .data:0x00000000000145E0        dq 0x0000000000000000
   .data:0x00000000000145E8        dq 0x0000000000000000
   .data:0x00000000000145F0        dq 0x0000000000000000
   .data:0x00000000000145F8        dq va_ptr string_C; "C"
   .data:0x0000000000014600        dq 0x0000000000000000
   .data:0x0000000000014608        dq 0x0000000000000000
   .data:0x0000000000014610        dq 0x0000000000000000
   .data:0x0000000000014618        dq va_ptr string_C; "C"
   .data:0x0000000000014620        dq 0x0000000000000000
   .data:0x0000000000014628        dq 0x0000000000000000
   .data:0x0000000000014630        dq 0x0000000000000000
   .data:0x0000000000014638        dq va_ptr string_C; "C"
   .data:0x0000000000014640        dq 0x0000000000000000
   .data:0x0000000000014648        dq 0x0000000000000000
   .data:0x0000000000014650        dq 0x0000000000000000
   .data:0x0000000000014658        dq va_ptr string_C; "C"
   .data:0x0000000000014660        dq 0x0000000000000000
   .data:0x0000000000014668        dq 0x0000000000000000
   .data:0x0000000000014670        dq 0x0000000000000000
   .data:0x0000000000014678        dq 0x0000000000000000
   .data:0x0000000000014680        dq 0x0000000000000000
   .data:0x0000000000014688        dq va_ptr data_0x14700
   .data:0x0000000000014690        dq 0x0000000000000000
   .data:0x0000000000014698        dq 0x0000000000000000
   .data:0x00000000000146A0        dq va_ptr data_0xCB90
   .data:0x00000000000146A8        dq va_ptr data_0xCD10
   .data:0x00000000000146B0        dq va_ptr data_0xC190
   .data:0x00000000000146B8        dq 0x0000000000000000
   .data:0x00000000000146C0        dq 0x0000000000000000
   .data:0x00000000000146C8        dq 0x0000000000000000
   .data:0x00000000000146D0        dq 0x0000000000000000
   .data:0x00000000000146D8        dq 0x0000000000000000
   .data:0x00000000000146E0        dq 0x0000000000000000
   .data:0x00000000000146E8 data_0x146E8:
   .data:0x00000000000146E8        dq va_ptr data_0x14590
   .data:0x00000000000146F0 data_0x146F0:
   .data:0x00000000000146F0        dq va_ptr data_0x14150
   .data:0x00000000000146F8 string_C:
   .data:0x00000000000146F8        db "C\x00"
   .data:0x00000000000146FA        dd 0x00000000
   .data:0x00000000000146FE        dw 0x0000
   .data:0x0000000000014700 data_0x14700:
   .data:0x0000000000014700        dq va_ptr data_0x14798; "."
   .data:0x0000000000014708 data_0x14708:
   .data:0x0000000000014708        dq va_ptr data_0x155D0
   .data:0x0000000000014710 data_0x14710:
   .data:0x0000000000014710        dq va_ptr data_0x155D0
   .data:0x0000000000014718 data_0x14718:
   .data:0x0000000000014718        dq va_ptr data_0x155D0
   .data:0x0000000000014720 data_0x14720:
   .data:0x0000000000014720        dq va_ptr data_0x155D0
   .data:0x0000000000014728 data_0x14728:
   .data:0x0000000000014728        dq va_ptr data_0x155D0
   .data:0x0000000000014730 data_0x14730:
   .data:0x0000000000014730        dq va_ptr data_0x155D0
   .data:0x0000000000014738 data_0x14738:
   .data:0x0000000000014738        dq va_ptr data_0x155D0
   .data:0x0000000000014740 data_0x14740:
   .data:0x0000000000014740        dq va_ptr data_0x155D0
   .data:0x0000000000014748 data_0x14748:
   .data:0x0000000000014748        dq va_ptr data_0x155D0
   .data:0x0000000000014750        dq 0x7F7F7F7F7F7F7F7F
   .data:0x0000000000014758 data_0x14758:
   .data:0x0000000000014758        dq va_ptr data_0x1479C; "."
   .data:0x0000000000014760 data_0x14760:
   .data:0x0000000000014760        dq va_ptr data_0x155D4
   .data:0x0000000000014768 data_0x14768:
   .data:0x0000000000014768        dq va_ptr data_0x155D4
   .data:0x0000000000014770 data_0x14770:
   .data:0x0000000000014770        dq va_ptr data_0x155D4
   .data:0x0000000000014778 data_0x14778:
   .data:0x0000000000014778        dq va_ptr data_0x155D4
   .data:0x0000000000014780 data_0x14780:
   .data:0x0000000000014780        dq va_ptr data_0x155D4
   .data:0x0000000000014788 data_0x14788:
   .data:0x0000000000014788        dq va_ptr data_0x155D4
   .data:0x0000000000014790 data_0x14790:
   .data:0x0000000000014790        dq va_ptr data_0x155D4
   .data:0x0000000000014798 data_0x14798:
   .data:0x0000000000014798        db ".\x00"
   .data:0x000000000001479A        dw 0x0000
   .data:0x000000000001479C data_0x1479C:
   .data:0x000000000001479C        db ".\x00"
   .data:0x000000000001479E        dw 0x0000
   .data:0x00000000000147A0 data_0x147A0:
   .data:0x00000000000147A0        dq 0x00000000FFFFFFFE
   .data:0x00000000000147A8        dq 0x0000000000000000
   .data:0x00000000000147B0 data_0x147B0:
   .data:0x00000000000147B0        dq 0x0000000000000000
   .data:0x00000000000147B8        dq 0x0000000000000000
   .data:0x00000000000147C0        dd 0x00000000
   .data:0x00000000000147C4        db 0x01
   .data:0x00000000000147C5        db " \x00"
   .data:0x00000000000147C7        db 0x00
   .data:0x00000000000147C8 data_0x147C8:
   .data:0x00000000000147C8        dq 0x0000000000000000
   .data:0x00000000000147D0        dq 0x0000000000000000
   .data:0x00000000000147D8        dq 0x0000000000000000
   .data:0x00000000000147E0        dq 0x0000000000000000
   .data:0x00000000000147E8        dq 0x0000000000000000
   .data:0x00000000000147F0        dq 0x0000000000000000
   .data:0x00000000000147F8        dq 0x0000000000000000
   .data:0x0000000000014800        dq 0x0000000000000000
   .data:0x0000000000014808        dq 0x0000000000000000
   .data:0x0000000000014810        dq 0x0000000000000000
   .data:0x0000000000014818        dd 0x00000000
   .data:0x000000000001481C        db 0x02
   .data:0x000000000001481D        db " \x00"
   .data:0x000000000001481F        dq 0x0000000000000100
   .data:0x0000000000014827        dq 0x0000000000000000
   .data:0x000000000001482F        dq 0x0000000000000000
   .data:0x0000000000014837        dq 0x0000000000000000
   .data:0x000000000001483F        dq 0x0000000000000000
   .data:0x0000000000014847        dq 0x0000000000000000
   .data:0x000000000001484F        dq 0x0000000000000000
   .data:0x0000000000014857        dq 0x0000000000000000
   .data:0x000000000001485F        dq 0x0000000000000000
   .data:0x0000000000014867        dq 0x0000000000000000
   .data:0x000000000001486F        dq 0x0024020000000000
   .data:0x0000000000014877        dq 0x0000000000000200
   .data:0x000000000001487F        dq 0x0000000000000000
   .data:0x0000000000014887        dq 0x0000000000000000
   .data:0x000000000001488F        dq 0x0000000000000000
   .data:0x0000000000014897        dq 0x0000000000000000
   .data:0x000000000001489F        dq 0x0000000000000000
   .data:0x00000000000148A7        dq 0x0000000000000000
   .data:0x00000000000148AF        dq 0x0000000000000000
   .data:0x00000000000148B7        dq 0x0000000000000000
   .data:0x00000000000148BF        db 0x00
   .data:0x00000000000148C0 data_0x148C0:
   .data:0x00000000000148C0        dq 0xFFFFFFFFFFFFFFFE
   .data:0x00000000000148C8        dq 0x0000000000000000
   .data:0x00000000000148D0 data_0x148D0:
   .data:0x00000000000148D0        dq 0x0000000000000001
   .data:0x00000000000148D8        dq 0x0000000000000000
   .data:0x00000000000148E0        dq 0x0000000000009875
   .data:0x00000000000148E8        dq 0x0000000000000000
   .data:0x00000000000148F0        dq 0x0000000000000000
   .data:0x00000000000148F8 data_0x148F8:
   .data:0x00000000000148F8        dq 0x0000000000000000
   .data:0x0000000000014900 data_0x14900:
   .data:0x0000000000014900        dq 0x0000000000000000
   .data:0x0000000000014908 data_0x14908:
   .data:0x0000000000014908        db 0x00
   .data:0x0000000000014909 data_0x14909:
   .data:0x0000000000014909        dd 0x00000000
   .data:0x000000000001490D        dw 0x0000
   .data:0x000000000001490F        db 0x00
   .data:0x0000000000014910 data_0x14910:
   .data:0x0000000000014910        dq 0x0000000000000000
   .data:0x0000000000014918        dq 0x0000000000000000
   .data:0x0000000000014920 data_0x14920:
   .data:0x0000000000014920        dq 0x0000000000000000
   .data:0x0000000000014928 data_0x14928:
   .data:0x0000000000014928        dq 0x0000000000000000
   .data:0x0000000000014930        dq 0x0000000000000000
   .data:0x0000000000014938 data_0x14938:
   .data:0x0000000000014938        dq 0x0000000000000000
   .data:0x0000000000014940 data_0x14940:
   .data:0x0000000000014940        dq 0x0000000000000000
   .data:0x0000000000014948        dq 0x0000000000000000
   .data:0x0000000000014950 data_0x14950:
   .data:0x0000000000014950        dq 0x0000000000000000
   .data:0x0000000000014958 data_0x14958:
   .data:0x0000000000014958        dq 0x0000000000000000
   .data:0x0000000000014960 data_0x14960:
   .data:0x0000000000014960        dd 0x00000000
   .data:0x0000000000014964 data_0x14964:
   .data:0x0000000000014964        dq 0x0000000000000000
   .data:0x000000000001496C        dd 0x00000000
   .data:0x0000000000014970 data_0x14970:
   .data:0x0000000000014970        dq 0x0000000000000000
   .data:0x0000000000014978        dq 0x0000000000000000
   .data:0x0000000000014980        dq 0x0000000000000000
   .data:0x0000000000014988        dq 0x0000000000000000
   .data:0x0000000000014990        dq 0x0000000000000000
   .data:0x0000000000014998        dq 0x0000000000000000
   .data:0x00000000000149A0        dq 0x0000000000000000
   .data:0x00000000000149A8        dq 0x0000000000000000
   .data:0x00000000000149B0        dq 0x0000000000000000
   .data:0x00000000000149B8        dq 0x0000000000000000
   .data:0x00000000000149C0        dq 0x0000000000000000
   .data:0x00000000000149C8        dq 0x0000000000000000
   .data:0x00000000000149D0        dq 0x0000000000000000
   .data:0x00000000000149D8        dq 0x0000000000000000
   .data:0x00000000000149E0        dq 0x0000000000000000
   .data:0x00000000000149E8 data_0x149E8:
   .data:0x00000000000149E8        dq 0x0000000000000000
   .data:0x00000000000149F0 data_0x149F0:
   .data:0x00000000000149F0        dq 0x0000000000000000
   .data:0x00000000000149F8        dq 0x0000000000000000
   .data:0x0000000000014A00 data_0x14A00:
   .data:0x0000000000014A00        db 40 dup(??)
   .data:0x0000000000014A28 data_0x14A28:
   .data:0x0000000000014A28        db 8 dup(??)
   .data:0x0000000000014A30 data_0x14A30:
   .data:0x0000000000014A30        db 24 dup(??)
   .data:0x0000000000014A48 data_0x14A48:
   .data:0x0000000000014A48        db 40 dup(??)
   .data:0x0000000000014A70 data_0x14A70:
   .data:0x0000000000014A70        db 112 dup(??)
   .data:0x0000000000014AE0 data_0x14AE0:
   .data:0x0000000000014AE0        db 8 dup(??)
   .data:0x0000000000014AE8 data_0x14AE8:
   .data:0x0000000000014AE8        db 8 dup(??)
   .data:0x0000000000014AF0 data_0x14AF0:
   .data:0x0000000000014AF0        db 528 dup(??)
   .data:0x0000000000014D00 data_0x14D00:
   .data:0x0000000000014D00        db 8 dup(??)
   .data:0x0000000000014D08 data_0x14D08:
   .data:0x0000000000014D08        db 8 dup(??)
   .data:0x0000000000014D10 data_0x14D10:
   .data:0x0000000000014D10        db 8 dup(??)
   .data:0x0000000000014D18 data_0x14D18:
   .data:0x0000000000014D18        db 8 dup(??)
   .data:0x0000000000014D20 data_0x14D20:
   .data:0x0000000000014D20        db 4 dup(??)
   .data:0x0000000000014D24 data_0x14D24:
   .data:0x0000000000014D24        db 4 dup(??)
   .data:0x0000000000014D28 data_0x14D28:
   .data:0x0000000000014D28        db 8 dup(??)
   .data:0x0000000000014D30 data_0x14D30:
   .data:0x0000000000014D30        db 4 dup(??)
   .data:0x0000000000014D34 data_0x14D34:
   .data:0x0000000000014D34        db 4 dup(??)
   .data:0x0000000000014D38 data_0x14D38:
   .data:0x0000000000014D38        db 4 dup(??)
   .data:0x0000000000014D3C data_0x14D3C:
   .data:0x0000000000014D3C        db 4 dup(??)
   .data:0x0000000000014D40 data_0x14D40:
   .data:0x0000000000014D40        db 24 dup(??)
   .data:0x0000000000014D58 data_0x14D58:
   .data:0x0000000000014D58        db 24 dup(??)
   .data:0x0000000000014D70 data_0x14D70:
   .data:0x0000000000014D70        db 8 dup(??)
   .data:0x0000000000014D78 data_0x14D78:
   .data:0x0000000000014D78        db 8 dup(??)
   .data:0x0000000000014D80 data_0x14D80:
   .data:0x0000000000014D80        db 8 dup(??)
   .data:0x0000000000014D88 data_0x14D88:
   .data:0x0000000000014D88        db 8 dup(??)
   .data:0x0000000000014D90 data_0x14D90:
   .data:0x0000000000014D90        db 4 dup(??)
   .data:0x0000000000014D94 data_0x14D94:
   .data:0x0000000000014D94        db 4 dup(??)
   .data:0x0000000000014D98 data_0x14D98:
   .data:0x0000000000014D98        db 8 dup(??)
   .data:0x0000000000014DA0 data_0x14DA0:
   .data:0x0000000000014DA0        db 8 dup(??)
   .data:0x0000000000014DA8 data_0x14DA8:
   .data:0x0000000000014DA8        db 8 dup(??)
   .data:0x0000000000014DB0 data_0x14DB0:
   .data:0x0000000000014DB0        db 8 dup(??)
   .data:0x0000000000014DB8 data_0x14DB8:
   .data:0x0000000000014DB8        db 8 dup(??)
   .data:0x0000000000014DC0 data_0x14DC0:
   .data:0x0000000000014DC0        db 16 dup(??)
   .data:0x0000000000014DD0 data_0x14DD0:
   .data:0x0000000000014DD0        db 560 dup(??)
   .data:0x0000000000015000 data_0x15000:
   .data:0x0000000000015000        db 4 dup(??)
   .data:0x0000000000015004 data_0x15004:
   .data:0x0000000000015004        db 12 dup(??)
   .data:0x0000000000015010 data_0x15010:
   .data:0x0000000000015010        db 1024 dup(??)
   .data:0x0000000000015410 data_0x15410:
   .data:0x0000000000015410        db 8 dup(??)
   .data:0x0000000000015418 data_0x15418:
   .data:0x0000000000015418        db 8 dup(??)
   .data:0x0000000000015420 data_0x15420:
   .data:0x0000000000015420        db 160 dup(??)
   .data:0x00000000000154C0 data_0x154C0:
   .data:0x00000000000154C0        db 272 dup(??)
   .data:0x00000000000155D0 data_0x155D0:
   .data:0x00000000000155D0        db 4 dup(??)
   .data:0x00000000000155D4 data_0x155D4:
   .data:0x00000000000155D4        db 4 dup(??)
   .data:0x00000000000155D8 data_0x155D8:
   .data:0x00000000000155D8        db 8 dup(??)
   .data:0x00000000000155E0 data_0x155E0:
   .data:0x00000000000155E0        db 8 dup(??)
   .data:0x00000000000155E8 data_0x155E8:
   .data:0x00000000000155E8        db 8 dup(??)
   .data:0x00000000000155F0 data_0x155F0:
   .data:0x00000000000155F0        db 8 dup(??)
   .data:0x00000000000155F8 data_0x155F8:
   .data:0x00000000000155F8        db 8 dup(??)
   .data:0x0000000000015600 data_0x15600:
   .data:0x0000000000015600        db 8 dup(??)
   .data:0x0000000000015608 data_0x15608:
   .data:0x0000000000015608        db 8 dup(??)
   .data:0x0000000000015610 data_0x15610:
   .data:0x0000000000015610        db 8 dup(??)
   .data:0x0000000000015618 data_0x15618:
   .data:0x0000000000015618        db 8 dup(??)
   .data:0x0000000000015620 data_0x15620:
   .data:0x0000000000015620        db 8 dup(??)
   .data:0x0000000000015628 data_0x15628:
   .data:0x0000000000015628        db 8 dup(??)
   .data:0x0000000000015630 data_0x15630:
   .data:0x0000000000015630        db 8 dup(??)
   .data:0x0000000000015638 data_0x15638:
   .data:0x0000000000015638        db 4 dup(??)
   .data:0x000000000001563C data_0x1563C:
   .data:0x000000000001563C        db 4 dup(??)
   .data:0x0000000000015640 data_0x15640:
   .data:0x0000000000015640        db 4 dup(??)
   .data:0x0000000000015644 data_0x15644:
   .data:0x0000000000015644        db 12 dup(??)
   .data:0x0000000000015650 data_0x15650:
   .data:0x0000000000015650        db 8 dup(??)
   .data:0x0000000000015658 data_0x15658:
   .data:0x0000000000015658        db 8 dup(??)
   .data:0x0000000000015660 data_0x15660:
   .data:0x0000000000015660        db 128 dup(??)
   .data:0x00000000000156E0 data_0x156E0:
   .data:0x00000000000156E0        db 128 dup(??)
   .data:0x0000000000015760 data_0x15760:
   .data:0x0000000000015760        db 24 dup(??)
   .data:0x0000000000015778 data_0x15778:
   .data:0x0000000000015778        db 96 dup(??)
   .data:0x00000000000157D8 data_0x157D8:
   .data:0x00000000000157D8        db 984 dup(??)
   .data:0x0000000000015BB0 data_0x15BB0:
   .data:0x0000000000015BB0        db 8 dup(??)
   .data:0x0000000000015BB8 data_0x15BB8:
   .data:0x0000000000015BB8        db 8 dup(??)
   .data:0x0000000000015BC0 data_0x15BC0:
   .data:0x0000000000015BC0        db 1088 dup(??)
